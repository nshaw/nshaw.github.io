(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var o,r,s=n[0],l=n[1],c=n[2],u=0,p=[];u<s.length;u++)r=s[u],Object.prototype.hasOwnProperty.call(a,r)&&a[r]&&p.push(a[r][0]),a[r]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(d&&d(n);p.length;)p.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var e,n=0;n<i.length;n++){for(var t=i[n],o=!0,s=1;s<t.length;s++){var l=t[s];0!==a[l]&&(o=!1)}o&&(i.splice(n--,1),e=r(r.s=t[0]))}return e}var o={},a={1:0},i=[];function r(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.e=function(e){var n=[],t=a[e];if(0!==t)if(t)n.push(t[2]);else{var o=new Promise((function(n,o){t=a[e]=[n,o]}));n.push(t[2]=o);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.src=function(e){return r.p+"assets/js/"+({}[e]||e)+"."+{2:"38978605",3:"be0b7538",4:"0cf06f20",5:"de18e69d",6:"2fc1e05a",7:"9bddb3b9",8:"96fe4ca7",9:"9e9c4037",10:"119b1f4b",11:"08931ffd",12:"be25d96b",13:"94901b62",14:"4863866d",15:"36dbfd78",16:"a8cd8771",17:"db680630",18:"df8a2361",19:"44af761e",20:"d95fd6b8",21:"0bbd3627",22:"661cc888",23:"768ae010",24:"5c322018",25:"e78aaf2c",26:"8967eba7",27:"2e91e454",28:"66988fc2",29:"5be59056",30:"0d35a09c",31:"1649a7c7",32:"4ef96f2f",33:"dfe5d539",34:"f7944168",35:"708ce721",36:"450026c5",37:"bd3789bb",38:"858976ab",39:"34447a6c",40:"19551fd5",41:"554225bc",42:"40653b08",43:"3a267247",44:"61a311e7",45:"827409cc",46:"644be606",47:"e68a4587",48:"07c94fd7",49:"b8de48cf",50:"88b9e7a3",51:"adc859c4",52:"ab1f4634",53:"6106a359",54:"f9df9edc",55:"613b19ad",56:"4533ae8d",57:"a71847c8",58:"6c80a6fb",59:"ceeb713d",60:"fc031e97",61:"b32d576c",62:"407e211f",63:"c2fe8259",64:"6befa6fb",65:"02ffeadf",66:"dc8eeca5",67:"68915b03",68:"912ba774",69:"160a8cfd",70:"ec5140fd",71:"bfe1042c",72:"70c430ef",73:"16bf5eeb",74:"43c81607",75:"067dea99",76:"028e1c30",77:"aa04dbd8",78:"1be08032",79:"25d395a7",80:"0e23deee",81:"ae16af8c",82:"ca6a8b57",83:"723a8e4b",84:"fd12fd4c",85:"c7866821",86:"652aded0",87:"1bdfa1e2",88:"ca9b7901",89:"cf3f4bd4",90:"d3ef14bc",91:"89ea6446",92:"991dab55",93:"bb4ba365",94:"097051c7",95:"7755f963",96:"60968818",97:"f8403eea",98:"6160ec10",99:"166daa22",100:"e8d4e336",101:"e9c27fa2",102:"1ffe25b6",103:"c72030b4",104:"93a1a4b1",105:"bdb268bf",106:"06e1779e",107:"3bc80a57",108:"f73779c3",109:"fc3bbb7f",110:"b8440cc5",111:"f484f6a5",112:"e775a181",113:"356692d3",114:"2d86aca4",115:"6e254db4",116:"ba7b92fc",117:"f154a692",118:"7812eea9",119:"8b0f4381",120:"6d16c2ed",121:"f08ebee1",122:"256a63ad",123:"3b6f3694",124:"7c1b9682",125:"d7758059",126:"5c96dc51",127:"0974baed",128:"71a3ccac",129:"72e322bf",130:"eade42ba",131:"f54822ba",132:"e1e00309",133:"54a7557d",134:"56502dae",135:"2b2872c9",136:"0b42c656",137:"70bdc571",138:"8616a7ee",139:"5b380973",140:"47176c70",141:"b6d746ad",142:"9ae3808a",143:"2d4d7842",144:"97e1caf4",145:"f8899dd8",146:"0b9f99a2",147:"5ebc46d1",148:"c5328cc0",149:"9ff85137",150:"292118dd",151:"5286858b",152:"b1850e6f",153:"287da884",154:"d3891838",155:"46c387b0",156:"d8cd63ba",157:"22c74d81",158:"1fb1af69",159:"b74ed25d",160:"a2e4a2ac",161:"dbfdd568",162:"03a51db4",163:"7d87489f",164:"5f3b80ff",165:"63ba7226",166:"02269479",167:"148b2fe4",168:"90eb447e",169:"512bf357",170:"775337d5",171:"1c449f8f",172:"c50acd37",173:"62f37f8d",174:"b04861b6",175:"dd8e5aa8",176:"7241f840",177:"82345a8a",178:"7828141e",179:"32b62df9",180:"026a4f61",181:"cc77508c",182:"41303df8",183:"53436e0c",184:"74bb16e0",185:"7ef50ba6",186:"9adc14a4",187:"2793d0c1",188:"eb1c8995",189:"03a90c6f",190:"fc99ca73",191:"45d394c6",192:"236c62cc",193:"e7a49abb",194:"1ac2293b",195:"733288cd",196:"707845d5",197:"a68f20bb",198:"eec38c47",199:"9489b6a6",200:"0e223484",201:"a46e9c41",202:"a4798e29",203:"fde78c75",204:"a5a4b251",205:"e95bb0f9",206:"a11bee54",207:"2d4c6cd4",208:"bd623759",209:"5fb28e42",210:"a662a59e",211:"c2f7def7",212:"4df4e8aa",213:"156ef48a",214:"29c12690",215:"d36f28a9",216:"36ebeb01",217:"98dd5b23",218:"e6b53486",219:"2b5d9861",220:"08a4258a",221:"deaa6780",222:"5ab5b81e",223:"dc82a701",224:"6b73f403",225:"71deb8d2",226:"b0583960",227:"38d56a96",228:"0d51f65f",229:"5413bff4",230:"b4c43922",231:"88864909",232:"ba7eb83f",233:"dff383ba",234:"3a2a3dca",235:"3c728dde",236:"5db55ab5",237:"b85bb165",238:"95450ca1",239:"69197478",240:"43c295d1",241:"fd226820",242:"de211b5f",243:"02670498",244:"682f76ab",245:"383ef916",246:"4ba7d33d",247:"d8a08434",248:"f5d88088",249:"8beb0c35",250:"8f9049fb",251:"853db1ad",252:"f8b5e2d4",253:"1d9dff79",254:"4683f2de",255:"1bb8cb53",256:"5e05d39f",257:"94ceda6a",258:"ce140be8",259:"384374aa",260:"f1661161",261:"6ba8b345",262:"8bd734e5",263:"47dc61d1",264:"d11bf10c",265:"686a7252",266:"3f324ad6",267:"375feb86",268:"99ada12b",269:"29eef946",270:"15117bdc",271:"05e456ec",272:"728c858e",273:"e8db203e",274:"b8301fbc",275:"c8751916",276:"518d1856",277:"a63830d7",278:"52bdd8a3",279:"fc47e48d",280:"08013a51",281:"01ec0203",282:"e8fa9390",283:"d44a8673",284:"c3402ccd",285:"2426c552",286:"5e777da7",287:"e201471a",288:"1557a53b",289:"27451056",290:"24c042b0",291:"4c6a3e1b",292:"7a01e945",293:"b2962a47",294:"b166b7fb",295:"22bfcc74",296:"40129dbc",297:"b0667d2f",298:"68546df9",299:"7eb255a0",300:"f5b1850c",301:"abd69dad",302:"fcd2ff0e",303:"e8586100",304:"22f0cccc",305:"cd484942",306:"07164c2b",307:"9e80a3e7",308:"b07ab00b",309:"49151fb3",310:"c7311e38",311:"498f717c"}[e]+".js"}(e);var l=new Error;i=function(n){s.onerror=s.onload=null,clearTimeout(c);var t=a[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+o+": "+i+")",l.name="ChunkLoadError",l.type=o,l.request=i,t[1](l)}a[e]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(n)},r.m=e,r.c=o,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/",r.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var d=l;i.push([223,0]),t()}([function(e,n,t){"use strict";
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */var o=Object.freeze({});function a(e){return null==e}function i(e){return null!=e}function r(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function d(e){return"[object Object]"===c.call(e)}function u(e){return"[object RegExp]"===c.call(e)}function p(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function h(e){return i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function m(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===c?JSON.stringify(e,null,2):String(e)}function g(e){var n=parseFloat(e);return isNaN(n)?e:n}function f(e,n){for(var t=Object.create(null),o=e.split(","),a=0;a<o.length;a++)t[o[a]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}f("slot,component",!0);var y=f("key,ref,slot,slot-scope,is");function b(e,n){if(e.length){var t=e.indexOf(n);if(t>-1)return e.splice(t,1)}}var v=Object.prototype.hasOwnProperty;function w(e,n){return v.call(e,n)}function k(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var E=/-(\w)/g,A=k((function(e){return e.replace(E,(function(e,n){return n?n.toUpperCase():""}))})),T=k((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),C=/\B([A-Z])/g,S=k((function(e){return e.replace(C,"-$1").toLowerCase()}));var P=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var o=arguments.length;return o?o>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function x(e,n){n=n||0;for(var t=e.length-n,o=new Array(t);t--;)o[t]=e[t+n];return o}function I(e,n){for(var t in n)e[t]=n[t];return e}function R(e){for(var n={},t=0;t<e.length;t++)e[t]&&I(n,e[t]);return n}function D(e,n,t){}var O=function(e,n,t){return!1},M=function(e){return e};function L(e,n){if(e===n)return!0;var t=l(e),o=l(n);if(!t||!o)return!t&&!o&&String(e)===String(n);try{var a=Array.isArray(e),i=Array.isArray(n);if(a&&i)return e.length===n.length&&e.every((function(e,t){return L(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(a||i)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return L(e[t],n[t])}))}catch(e){return!1}}function j(e,n){for(var t=0;t<e.length;t++)if(L(e[t],n))return t;return-1}function N(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}var U=["component","directive","filter"],_=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],q={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:O,isReservedAttr:O,isUnknownElement:O,getTagNamespace:D,parsePlatformTagName:M,mustUseProp:O,async:!0,_lifecycleHooks:_},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function F(e,n,t,o){Object.defineProperty(e,n,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var W=new RegExp("[^"+B.source+".$_\\d]");var K,G="__proto__"in{},z="undefined"!=typeof window,H="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Y=H&&WXEnvironment.platform.toLowerCase(),V=z&&window.navigator.userAgent.toLowerCase(),J=V&&/msie|trident/.test(V),$=V&&V.indexOf("msie 9.0")>0,X=V&&V.indexOf("edge/")>0,Q=(V&&V.indexOf("android"),V&&/iphone|ipad|ipod|ios/.test(V)||"ios"===Y),Z=(V&&/chrome\/\d+/.test(V),V&&/phantomjs/.test(V),V&&V.match(/firefox\/(\d+)/)),ee={}.watch,ne=!1;if(z)try{var te={};Object.defineProperty(te,"passive",{get:function(){ne=!0}}),window.addEventListener("test-passive",null,te)}catch(e){}var oe=function(){return void 0===K&&(K=!z&&!H&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),K},ae=z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ie(e){return"function"==typeof e&&/native code/.test(e.toString())}var re,se="undefined"!=typeof Symbol&&ie(Symbol)&&"undefined"!=typeof Reflect&&ie(Reflect.ownKeys);re="undefined"!=typeof Set&&ie(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var le=D,ce=0,de=function(){this.id=ce++,this.subs=[]};de.prototype.addSub=function(e){this.subs.push(e)},de.prototype.removeSub=function(e){b(this.subs,e)},de.prototype.depend=function(){de.target&&de.target.addDep(this)},de.prototype.notify=function(){var e=this.subs.slice();for(var n=0,t=e.length;n<t;n++)e[n].update()},de.target=null;var ue=[];function pe(e){ue.push(e),de.target=e}function he(){ue.pop(),de.target=ue[ue.length-1]}var me=function(e,n,t,o,a,i,r,s){this.tag=e,this.data=n,this.children=t,this.text=o,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ge={child:{configurable:!0}};ge.child.get=function(){return this.componentInstance},Object.defineProperties(me.prototype,ge);var fe=function(e){void 0===e&&(e="");var n=new me;return n.text=e,n.isComment=!0,n};function ye(e){return new me(void 0,void 0,void 0,String(e))}function be(e){var n=new me(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ve=Array.prototype,we=Object.create(ve);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=ve[e];F(we,e,(function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];var a,i=n.apply(this,t),r=this.__ob__;switch(e){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&r.observeArray(a),r.dep.notify(),i}))}));var ke=Object.getOwnPropertyNames(we),Ee=!0;function Ae(e){Ee=e}var Te=function(e){this.value=e,this.dep=new de,this.vmCount=0,F(e,"__ob__",this),Array.isArray(e)?(G?function(e,n){e.__proto__=n}(e,we):function(e,n,t){for(var o=0,a=t.length;o<a;o++){var i=t[o];F(e,i,n[i])}}(e,we,ke),this.observeArray(e)):this.walk(e)};function Ce(e,n){var t;if(l(e)&&!(e instanceof me))return w(e,"__ob__")&&e.__ob__ instanceof Te?t=e.__ob__:Ee&&!oe()&&(Array.isArray(e)||d(e))&&Object.isExtensible(e)&&!e._isVue&&(t=new Te(e)),n&&t&&t.vmCount++,t}function Se(e,n,t,o,a){var i=new de,r=Object.getOwnPropertyDescriptor(e,n);if(!r||!1!==r.configurable){var s=r&&r.get,l=r&&r.set;s&&!l||2!==arguments.length||(t=e[n]);var c=!a&&Ce(t);Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=s?s.call(e):t;return de.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(n)&&Ie(n))),n},set:function(n){var o=s?s.call(e):t;n===o||n!=n&&o!=o||s&&!l||(l?l.call(e,n):t=n,c=!a&&Ce(n),i.notify())}})}}function Pe(e,n,t){if(Array.isArray(e)&&p(n))return e.length=Math.max(e.length,n),e.splice(n,1,t),t;if(n in e&&!(n in Object.prototype))return e[n]=t,t;var o=e.__ob__;return e._isVue||o&&o.vmCount?t:o?(Se(o.value,n,t),o.dep.notify(),t):(e[n]=t,t)}function xe(e,n){if(Array.isArray(e)&&p(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||w(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ie(e){for(var n=void 0,t=0,o=e.length;t<o;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&Ie(n)}Te.prototype.walk=function(e){for(var n=Object.keys(e),t=0;t<n.length;t++)Se(e,n[t])},Te.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Ce(e[n])};var Re=q.optionMergeStrategies;function De(e,n){if(!n)return e;for(var t,o,a,i=se?Reflect.ownKeys(n):Object.keys(n),r=0;r<i.length;r++)"__ob__"!==(t=i[r])&&(o=e[t],a=n[t],w(e,t)?o!==a&&d(o)&&d(a)&&De(o,a):Pe(e,t,a));return e}function Oe(e,n,t){return t?function(){var o="function"==typeof n?n.call(t,t):n,a="function"==typeof e?e.call(t,t):e;return o?De(o,a):a}:n?e?function(){return De("function"==typeof n?n.call(this,this):n,"function"==typeof e?e.call(this,this):e)}:n:e}function Me(e,n){var t=n?e?e.concat(n):Array.isArray(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function Le(e,n,t,o){var a=Object.create(e||null);return n?I(a,n):a}Re.data=function(e,n,t){return t?Oe(e,n,t):n&&"function"!=typeof n?e:Oe(e,n)},_.forEach((function(e){Re[e]=Me})),U.forEach((function(e){Re[e+"s"]=Le})),Re.watch=function(e,n,t,o){if(e===ee&&(e=void 0),n===ee&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var a={};for(var i in I(a,e),n){var r=a[i],s=n[i];r&&!Array.isArray(r)&&(r=[r]),a[i]=r?r.concat(s):Array.isArray(s)?s:[s]}return a},Re.props=Re.methods=Re.inject=Re.computed=function(e,n,t,o){if(!e)return n;var a=Object.create(null);return I(a,e),n&&I(a,n),a},Re.provide=Oe;var je=function(e,n){return void 0===n?e:n};function Ne(e,n,t){if("function"==typeof n&&(n=n.options),function(e,n){var t=e.props;if(t){var o,a,i={};if(Array.isArray(t))for(o=t.length;o--;)"string"==typeof(a=t[o])&&(i[A(a)]={type:null});else if(d(t))for(var r in t)a=t[r],i[A(r)]=d(a)?a:{type:a};else 0;e.props=i}}(n),function(e,n){var t=e.inject;if(t){var o=e.inject={};if(Array.isArray(t))for(var a=0;a<t.length;a++)o[t[a]]={from:t[a]};else if(d(t))for(var i in t){var r=t[i];o[i]=d(r)?I({from:i},r):{from:r}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var o=n[t];"function"==typeof o&&(n[t]={bind:o,update:o})}}(n),!n._base&&(n.extends&&(e=Ne(e,n.extends,t)),n.mixins))for(var o=0,a=n.mixins.length;o<a;o++)e=Ne(e,n.mixins[o],t);var i,r={};for(i in e)s(i);for(i in n)w(e,i)||s(i);function s(o){var a=Re[o]||je;r[o]=a(e[o],n[o],t,o)}return r}function Ue(e,n,t,o){if("string"==typeof t){var a=e[n];if(w(a,t))return a[t];var i=A(t);if(w(a,i))return a[i];var r=T(i);return w(a,r)?a[r]:a[t]||a[i]||a[r]}}function _e(e,n,t,o){var a=n[e],i=!w(t,e),r=t[e],s=Fe(Boolean,a.type);if(s>-1)if(i&&!w(a,"default"))r=!1;else if(""===r||r===S(e)){var l=Fe(String,a.type);(l<0||s<l)&&(r=!0)}if(void 0===r){r=function(e,n,t){if(!w(n,"default"))return;var o=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return"function"==typeof o&&"Function"!==qe(n.type)?o.call(e):o}(o,a,e);var c=Ee;Ae(!0),Ce(r),Ae(c)}return r}function qe(e){var n=e&&e.toString().match(/^\s*function (\w+)/);return n?n[1]:""}function Be(e,n){return qe(e)===qe(n)}function Fe(e,n){if(!Array.isArray(n))return Be(n,e)?0:-1;for(var t=0,o=n.length;t<o;t++)if(Be(n[t],e))return t;return-1}function We(e,n,t){pe();try{if(n)for(var o=n;o=o.$parent;){var a=o.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(o,e,n,t))return}catch(e){Ge(e,o,"errorCaptured hook")}}Ge(e,n,t)}finally{he()}}function Ke(e,n,t,o,a){var i;try{(i=t?e.apply(n,t):e.call(n))&&!i._isVue&&h(i)&&!i._handled&&(i.catch((function(e){return We(e,o,a+" (Promise/async)")})),i._handled=!0)}catch(e){We(e,o,a)}return i}function Ge(e,n,t){if(q.errorHandler)try{return q.errorHandler.call(null,e,n,t)}catch(n){n!==e&&ze(n,null,"config.errorHandler")}ze(e,n,t)}function ze(e,n,t){if(!z&&!H||"undefined"==typeof console)throw e;console.error(e)}var He,Ye=!1,Ve=[],Je=!1;function $e(){Je=!1;var e=Ve.slice(0);Ve.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&ie(Promise)){var Xe=Promise.resolve();He=function(){Xe.then($e),Q&&setTimeout(D)},Ye=!0}else if(J||"undefined"==typeof MutationObserver||!ie(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())He="undefined"!=typeof setImmediate&&ie(setImmediate)?function(){setImmediate($e)}:function(){setTimeout($e,0)};else{var Qe=1,Ze=new MutationObserver($e),en=document.createTextNode(String(Qe));Ze.observe(en,{characterData:!0}),He=function(){Qe=(Qe+1)%2,en.data=String(Qe)},Ye=!0}function nn(e,n){var t;if(Ve.push((function(){if(e)try{e.call(n)}catch(e){We(e,n,"nextTick")}else t&&t(n)})),Je||(Je=!0,He()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}var tn=new re;function on(e){!function e(n,t){var o,a,i=Array.isArray(n);if(!i&&!l(n)||Object.isFrozen(n)||n instanceof me)return;if(n.__ob__){var r=n.__ob__.dep.id;if(t.has(r))return;t.add(r)}if(i)for(o=n.length;o--;)e(n[o],t);else for(a=Object.keys(n),o=a.length;o--;)e(n[a[o]],t)}(e,tn),tn.clear()}var an=k((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),o="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=o?e.slice(1):e,once:t,capture:o,passive:n}}));function rn(e,n){function t(){var e=arguments,o=t.fns;if(!Array.isArray(o))return Ke(o,null,arguments,n,"v-on handler");for(var a=o.slice(),i=0;i<a.length;i++)Ke(a[i],null,e,n,"v-on handler")}return t.fns=e,t}function sn(e,n,t,o,i,s){var l,c,d,u;for(l in e)c=e[l],d=n[l],u=an(l),a(c)||(a(d)?(a(c.fns)&&(c=e[l]=rn(c,s)),r(u.once)&&(c=e[l]=i(u.name,c,u.capture)),t(u.name,c,u.capture,u.passive,u.params)):c!==d&&(d.fns=c,e[l]=d));for(l in n)a(e[l])&&o((u=an(l)).name,n[l],u.capture)}function ln(e,n,t){var o;e instanceof me&&(e=e.data.hook||(e.data.hook={}));var s=e[n];function l(){t.apply(this,arguments),b(o.fns,l)}a(s)?o=rn([l]):i(s.fns)&&r(s.merged)?(o=s).fns.push(l):o=rn([s,l]),o.merged=!0,e[n]=o}function cn(e,n,t,o,a){if(i(n)){if(w(n,t))return e[t]=n[t],a||delete n[t],!0;if(w(n,o))return e[t]=n[o],a||delete n[o],!0}return!1}function dn(e){return s(e)?[ye(e)]:Array.isArray(e)?function e(n,t){var o,l,c,d,u=[];for(o=0;o<n.length;o++)a(l=n[o])||"boolean"==typeof l||(c=u.length-1,d=u[c],Array.isArray(l)?l.length>0&&(un((l=e(l,(t||"")+"_"+o))[0])&&un(d)&&(u[c]=ye(d.text+l[0].text),l.shift()),u.push.apply(u,l)):s(l)?un(d)?u[c]=ye(d.text+l):""!==l&&u.push(ye(l)):un(l)&&un(d)?u[c]=ye(d.text+l.text):(r(n._isVList)&&i(l.tag)&&a(l.key)&&i(t)&&(l.key="__vlist"+t+"_"+o+"__"),u.push(l)));return u}(e):void 0}function un(e){return i(e)&&i(e.text)&&!1===e.isComment}function pn(e,n){if(e){for(var t=Object.create(null),o=se?Reflect.ownKeys(e):Object.keys(e),a=0;a<o.length;a++){var i=o[a];if("__ob__"!==i){for(var r=e[i].from,s=n;s;){if(s._provided&&w(s._provided,r)){t[i]=s._provided[r];break}s=s.$parent}if(!s)if("default"in e[i]){var l=e[i].default;t[i]="function"==typeof l?l.call(n):l}else 0}}return t}}function hn(e,n){if(!e||!e.length)return{};for(var t={},o=0,a=e.length;o<a;o++){var i=e[o],r=i.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,i.context!==n&&i.fnContext!==n||!r||null==r.slot)(t.default||(t.default=[])).push(i);else{var s=r.slot,l=t[s]||(t[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(mn)&&delete t[c];return t}function mn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function gn(e,n,t){var a,i=Object.keys(n).length>0,r=e?!!e.$stable:!i,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(r&&t&&t!==o&&s===t.$key&&!i&&!t.$hasNormal)return t;for(var l in a={},e)e[l]&&"$"!==l[0]&&(a[l]=fn(n,l,e[l]))}else a={};for(var c in n)c in a||(a[c]=yn(n,c));return e&&Object.isExtensible(e)&&(e._normalized=a),F(a,"$stable",r),F(a,"$key",s),F(a,"$hasNormal",i),a}function fn(e,n,t){var o=function(){var e=arguments.length?t.apply(null,arguments):t({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:dn(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return t.proxy&&Object.defineProperty(e,n,{get:o,enumerable:!0,configurable:!0}),o}function yn(e,n){return function(){return e[n]}}function bn(e,n){var t,o,a,r,s;if(Array.isArray(e)||"string"==typeof e)for(t=new Array(e.length),o=0,a=e.length;o<a;o++)t[o]=n(e[o],o);else if("number"==typeof e)for(t=new Array(e),o=0;o<e;o++)t[o]=n(o+1,o);else if(l(e))if(se&&e[Symbol.iterator]){t=[];for(var c=e[Symbol.iterator](),d=c.next();!d.done;)t.push(n(d.value,t.length)),d=c.next()}else for(r=Object.keys(e),t=new Array(r.length),o=0,a=r.length;o<a;o++)s=r[o],t[o]=n(e[s],s,o);return i(t)||(t=[]),t._isVList=!0,t}function vn(e,n,t,o){var a,i=this.$scopedSlots[e];i?(t=t||{},o&&(t=I(I({},o),t)),a=i(t)||n):a=this.$slots[e]||n;var r=t&&t.slot;return r?this.$createElement("template",{slot:r},a):a}function wn(e){return Ue(this.$options,"filters",e)||M}function kn(e,n){return Array.isArray(e)?-1===e.indexOf(n):e!==n}function En(e,n,t,o,a){var i=q.keyCodes[n]||t;return a&&o&&!q.keyCodes[n]?kn(a,o):i?kn(i,e):o?S(o)!==n:void 0}function An(e,n,t,o,a){if(t)if(l(t)){var i;Array.isArray(t)&&(t=R(t));var r=function(r){if("class"===r||"style"===r||y(r))i=e;else{var s=e.attrs&&e.attrs.type;i=o||q.mustUseProp(n,s,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=A(r),c=S(r);l in i||c in i||(i[r]=t[r],a&&((e.on||(e.on={}))["update:"+r]=function(e){t[r]=e}))};for(var s in t)r(s)}else;return e}function Tn(e,n){var t=this._staticTrees||(this._staticTrees=[]),o=t[e];return o&&!n||Sn(o=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),o}function Cn(e,n,t){return Sn(e,"__once__"+n+(t?"_"+t:""),!0),e}function Sn(e,n,t){if(Array.isArray(e))for(var o=0;o<e.length;o++)e[o]&&"string"!=typeof e[o]&&Pn(e[o],n+"_"+o,t);else Pn(e,n,t)}function Pn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function xn(e,n){if(n)if(d(n)){var t=e.on=e.on?I({},e.on):{};for(var o in n){var a=t[o],i=n[o];t[o]=a?[].concat(a,i):i}}else;return e}function In(e,n,t,o){n=n||{$stable:!t};for(var a=0;a<e.length;a++){var i=e[a];Array.isArray(i)?In(i,n,t):i&&(i.proxy&&(i.fn.proxy=!0),n[i.key]=i.fn)}return o&&(n.$key=o),n}function Rn(e,n){for(var t=0;t<n.length;t+=2){var o=n[t];"string"==typeof o&&o&&(e[n[t]]=n[t+1])}return e}function Dn(e,n){return"string"==typeof e?n+e:e}function On(e){e._o=Cn,e._n=g,e._s=m,e._l=bn,e._t=vn,e._q=L,e._i=j,e._m=Tn,e._f=wn,e._k=En,e._b=An,e._v=ye,e._e=fe,e._u=In,e._g=xn,e._d=Rn,e._p=Dn}function Mn(e,n,t,a,i){var s,l=this,c=i.options;w(a,"_uid")?(s=Object.create(a))._original=a:(s=a,a=a._original);var d=r(c._compiled),u=!d;this.data=e,this.props=n,this.children=t,this.parent=a,this.listeners=e.on||o,this.injections=pn(c.inject,a),this.slots=function(){return l.$slots||gn(e.scopedSlots,l.$slots=hn(t,a)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return gn(e.scopedSlots,this.slots())}}),d&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=gn(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,n,t,o){var i=Bn(s,e,n,t,o,u);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=a),i}:this._c=function(e,n,t,o){return Bn(s,e,n,t,o,u)}}function Ln(e,n,t,o,a){var i=be(e);return i.fnContext=t,i.fnOptions=o,n.slot&&((i.data||(i.data={})).slot=n.slot),i}function jn(e,n){for(var t in n)e[A(t)]=n[t]}On(Mn.prototype);var Nn={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;Nn.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},o=e.data.inlineTemplate;i(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,$n)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,a,i){0;var r=a.data.scopedSlots,s=e.$scopedSlots,l=!!(r&&!r.$stable||s!==o&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key),c=!!(i||e.$options._renderChildren||l);e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a);if(e.$options._renderChildren=i,e.$attrs=a.data.attrs||o,e.$listeners=t||o,n&&e.$options.props){Ae(!1);for(var d=e._props,u=e.$options._propKeys||[],p=0;p<u.length;p++){var h=u[p],m=e.$options.props;d[h]=_e(h,m,n,e)}Ae(!0),e.$options.propsData=n}t=t||o;var g=e.$options._parentListeners;e.$options._parentListeners=t,Jn(e,t,g),c&&(e.$slots=hn(i,a.context),e.$forceUpdate());0}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,o=e.componentInstance;o._isMounted||(o._isMounted=!0,et(o,"mounted")),e.data.keepAlive&&(t._isMounted?((n=o)._inactive=!1,tt.push(n)):Zn(o,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(t&&(n._directInactive=!0,Qn(n)))return;if(!n._inactive){n._inactive=!0;for(var o=0;o<n.$children.length;o++)e(n.$children[o]);et(n,"deactivated")}}(n,!0):n.$destroy())}},Un=Object.keys(Nn);function _n(e,n,t,s,c){if(!a(e)){var d=t.$options._base;if(l(e)&&(e=d.extend(e)),"function"==typeof e){var u;if(a(e.cid)&&void 0===(e=function(e,n){if(r(e.error)&&i(e.errorComp))return e.errorComp;if(i(e.resolved))return e.resolved;var t=Wn;t&&i(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t);if(r(e.loading)&&i(e.loadingComp))return e.loadingComp;if(t&&!i(e.owners)){var o=e.owners=[t],s=!0,c=null,d=null;t.$on("hook:destroyed",(function(){return b(o,t)}));var u=function(e){for(var n=0,t=o.length;n<t;n++)o[n].$forceUpdate();e&&(o.length=0,null!==c&&(clearTimeout(c),c=null),null!==d&&(clearTimeout(d),d=null))},p=N((function(t){e.resolved=Kn(t,n),s?o.length=0:u(!0)})),m=N((function(n){i(e.errorComp)&&(e.error=!0,u(!0))})),g=e(p,m);return l(g)&&(h(g)?a(e.resolved)&&g.then(p,m):h(g.component)&&(g.component.then(p,m),i(g.error)&&(e.errorComp=Kn(g.error,n)),i(g.loading)&&(e.loadingComp=Kn(g.loading,n),0===g.delay?e.loading=!0:c=setTimeout((function(){c=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,u(!1))}),g.delay||200)),i(g.timeout)&&(d=setTimeout((function(){d=null,a(e.resolved)&&m(null)}),g.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(u=e,d)))return function(e,n,t,o,a){var i=fe();return i.asyncFactory=e,i.asyncMeta={data:n,context:t,children:o,tag:a},i}(u,n,t,s,c);n=n||{},Et(e),i(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var a=n.on||(n.on={}),r=a[o],s=n.model.callback;i(r)?(Array.isArray(r)?-1===r.indexOf(s):r!==s)&&(a[o]=[s].concat(r)):a[o]=s}(e.options,n);var p=function(e,n,t){var o=n.options.props;if(!a(o)){var r={},s=e.attrs,l=e.props;if(i(s)||i(l))for(var c in o){var d=S(c);cn(r,l,c,d,!0)||cn(r,s,c,d,!1)}return r}}(n,e);if(r(e.options.functional))return function(e,n,t,a,r){var s=e.options,l={},c=s.props;if(i(c))for(var d in c)l[d]=_e(d,c,n||o);else i(t.attrs)&&jn(l,t.attrs),i(t.props)&&jn(l,t.props);var u=new Mn(t,l,r,a,e),p=s.render.call(null,u._c,u);if(p instanceof me)return Ln(p,t,u.parent,s,u);if(Array.isArray(p)){for(var h=dn(p)||[],m=new Array(h.length),g=0;g<h.length;g++)m[g]=Ln(h[g],t,u.parent,s,u);return m}}(e,p,n,t,s);var m=n.on;if(n.on=n.nativeOn,r(e.options.abstract)){var g=n.slot;n={},g&&(n.slot=g)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<Un.length;t++){var o=Un[t],a=n[o],i=Nn[o];a===i||a&&a._merged||(n[o]=a?qn(i,a):i)}}(n);var f=e.options.name||c;return new me("vue-component-"+e.cid+(f?"-"+f:""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:p,listeners:m,tag:c,children:s},u)}}}function qn(e,n){var t=function(t,o){e(t,o),n(t,o)};return t._merged=!0,t}function Bn(e,n,t,o,c,d){return(Array.isArray(t)||s(t))&&(c=o,o=t,t=void 0),r(d)&&(c=2),function(e,n,t,o,s){if(i(t)&&i(t.__ob__))return fe();i(t)&&i(t.is)&&(n=t.is);if(!n)return fe();0;Array.isArray(o)&&"function"==typeof o[0]&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===s?o=dn(o):1===s&&(o=function(e){for(var n=0;n<e.length;n++)if(Array.isArray(e[n]))return Array.prototype.concat.apply([],e);return e}(o));var c,d;if("string"==typeof n){var u;d=e.$vnode&&e.$vnode.ns||q.getTagNamespace(n),c=q.isReservedTag(n)?new me(q.parsePlatformTagName(n),t,o,void 0,void 0,e):t&&t.pre||!i(u=Ue(e.$options,"components",n))?new me(n,t,o,void 0,void 0,e):_n(u,t,e,o,n)}else c=_n(n,t,e,o);return Array.isArray(c)?c:i(c)?(i(d)&&function e(n,t,o){n.ns=t,"foreignObject"===n.tag&&(t=void 0,o=!0);if(i(n.children))for(var s=0,l=n.children.length;s<l;s++){var c=n.children[s];i(c.tag)&&(a(c.ns)||r(o)&&"svg"!==c.tag)&&e(c,t,o)}}(c,d),i(t)&&function(e){l(e.style)&&on(e.style);l(e.class)&&on(e.class)}(t),c):fe()}(e,n,t,o,c)}var Fn,Wn=null;function Kn(e,n){return(e.__esModule||se&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?n.extend(e):e}function Gn(e){return e.isComment&&e.asyncFactory}function zn(e){if(Array.isArray(e))for(var n=0;n<e.length;n++){var t=e[n];if(i(t)&&(i(t.componentOptions)||Gn(t)))return t}}function Hn(e,n){Fn.$on(e,n)}function Yn(e,n){Fn.$off(e,n)}function Vn(e,n){var t=Fn;return function o(){var a=n.apply(null,arguments);null!==a&&t.$off(e,o)}}function Jn(e,n,t){Fn=e,sn(n,t||{},Hn,Yn,Vn,e),Fn=void 0}var $n=null;function Xn(e){var n=$n;return $n=e,function(){$n=n}}function Qn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Zn(e,n){if(n){if(e._directInactive=!1,Qn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Zn(e.$children[t]);et(e,"activated")}}function et(e,n){pe();var t=e.$options[n],o=n+" hook";if(t)for(var a=0,i=t.length;a<i;a++)Ke(t[a],e,null,e,o);e._hasHookEvent&&e.$emit("hook:"+n),he()}var nt=[],tt=[],ot={},at=!1,it=!1,rt=0;var st=0,lt=Date.now;if(z&&!J){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}function dt(){var e,n;for(st=lt(),it=!0,nt.sort((function(e,n){return e.id-n.id})),rt=0;rt<nt.length;rt++)(e=nt[rt]).before&&e.before(),n=e.id,ot[n]=null,e.run();var t=tt.slice(),o=nt.slice();rt=nt.length=tt.length=0,ot={},at=it=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Zn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],o=t.vm;o._watcher===t&&o._isMounted&&!o._isDestroyed&&et(o,"updated")}}(o),ae&&q.devtools&&ae.emit("flush")}var ut=0,pt=function(e,n,t,o,a){this.vm=e,a&&(e._watcher=this),e._watchers.push(this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ut,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new re,this.newDepIds=new re,this.expression="","function"==typeof n?this.getter=n:(this.getter=function(e){if(!W.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=D)),this.value=this.lazy?void 0:this.get()};pt.prototype.get=function(){var e;pe(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;We(e,n,'getter for watcher "'+this.expression+'"')}finally{this.deep&&on(e),he(),this.cleanupDeps()}return e},pt.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},pt.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},pt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var n=e.id;if(null==ot[n]){if(ot[n]=!0,it){for(var t=nt.length-1;t>rt&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);at||(at=!0,nn(dt))}}(this)},pt.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var n=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,n)}catch(e){We(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,n)}}},pt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pt.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},pt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var ht={enumerable:!0,configurable:!0,get:D,set:D};function mt(e,n,t){ht.get=function(){return this[n][t]},ht.set=function(e){this[n][t]=e},Object.defineProperty(e,t,ht)}function gt(e){e._watchers=[];var n=e.$options;n.props&&function(e,n){var t=e.$options.propsData||{},o=e._props={},a=e.$options._propKeys=[];e.$parent&&Ae(!1);var i=function(i){a.push(i);var r=_e(i,n,t,e);Se(o,i,r),i in e||mt(e,"_props",i)};for(var r in n)i(r);Ae(!0)}(e,n.props),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?D:P(n[t],e)}(e,n.methods),n.data?function(e){var n=e.$options.data;d(n=e._data="function"==typeof n?function(e,n){pe();try{return e.call(n,n)}catch(e){return We(e,n,"data()"),{}}finally{he()}}(n,e):n||{})||(n={});var t=Object.keys(n),o=e.$options.props,a=(e.$options.methods,t.length);for(;a--;){var i=t[a];0,o&&w(o,i)||(r=void 0,36!==(r=(i+"").charCodeAt(0))&&95!==r&&mt(e,"_data",i))}var r;Ce(n,!0)}(e):Ce(e._data={},!0),n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),o=oe();for(var a in n){var i=n[a],r="function"==typeof i?i:i.get;0,o||(t[a]=new pt(e,r||D,D,ft)),a in e||yt(e,a,i)}}(e,n.computed),n.watch&&n.watch!==ee&&function(e,n){for(var t in n){var o=n[t];if(Array.isArray(o))for(var a=0;a<o.length;a++)wt(e,t,o[a]);else wt(e,t,o)}}(e,n.watch)}var ft={lazy:!0};function yt(e,n,t){var o=!oe();"function"==typeof t?(ht.get=o?bt(n):vt(t),ht.set=D):(ht.get=t.get?o&&!1!==t.cache?bt(n):vt(t.get):D,ht.set=t.set||D),Object.defineProperty(e,n,ht)}function bt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),de.target&&n.depend(),n.value}}function vt(e){return function(){return e.call(this,this)}}function wt(e,n,t,o){return d(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,o)}var kt=0;function Et(e){var n=e.options;if(e.super){var t=Et(e.super);if(t!==e.superOptions){e.superOptions=t;var o=function(e){var n,t=e.options,o=e.sealedOptions;for(var a in t)t[a]!==o[a]&&(n||(n={}),n[a]=t[a]);return n}(e);o&&I(e.extendOptions,o),(n=e.options=Ne(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function At(e){this._init(e)}function Tt(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,o=t.cid,a=e._Ctor||(e._Ctor={});if(a[o])return a[o];var i=e.name||t.options.name;var r=function(e){this._init(e)};return(r.prototype=Object.create(t.prototype)).constructor=r,r.cid=n++,r.options=Ne(t.options,e),r.super=t,r.options.props&&function(e){var n=e.options.props;for(var t in n)mt(e.prototype,"_props",t)}(r),r.options.computed&&function(e){var n=e.options.computed;for(var t in n)yt(e.prototype,t,n[t])}(r),r.extend=t.extend,r.mixin=t.mixin,r.use=t.use,U.forEach((function(e){r[e]=t[e]})),i&&(r.options.components[i]=r),r.superOptions=t.options,r.extendOptions=e,r.sealedOptions=I({},r.options),a[o]=r,r}}function Ct(e){return e&&(e.Ctor.options.name||e.tag)}function St(e,n){return Array.isArray(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!u(e)&&e.test(n)}function Pt(e,n){var t=e.cache,o=e.keys,a=e._vnode;for(var i in t){var r=t[i];if(r){var s=Ct(r.componentOptions);s&&!n(s)&&xt(t,i,o,a)}}}function xt(e,n,t,o){var a=e[n];!a||o&&a.tag===o.tag||a.componentInstance.$destroy(),e[n]=null,b(t,n)}!function(e){e.prototype._init=function(e){var n=this;n._uid=kt++,n._isVue=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),o=n._parentVnode;t.parent=n.parent,t._parentVnode=o;var a=o.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Ne(Et(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Jn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,a=t&&t.context;e.$slots=hn(n._renderChildren,a),e.$scopedSlots=o,e._c=function(n,t,o,a){return Bn(e,n,t,o,a,!1)},e.$createElement=function(n,t,o,a){return Bn(e,n,t,o,a,!0)};var i=t&&t.data;Se(e,"$attrs",i&&i.attrs||o,null,!0),Se(e,"$listeners",n._parentListeners||o,null,!0)}(n),et(n,"beforeCreate"),function(e){var n=pn(e.$options.inject,e);n&&(Ae(!1),Object.keys(n).forEach((function(t){Se(e,t,n[t])})),Ae(!0))}(n),gt(n),function(e){var n=e.$options.provide;n&&(e._provided="function"==typeof n?n.call(e):n)}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(At),function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=Pe,e.prototype.$delete=xe,e.prototype.$watch=function(e,n,t){if(d(n))return wt(this,e,n,t);(t=t||{}).user=!0;var o=new pt(this,e,n,t);if(t.immediate)try{n.call(this,o.value)}catch(e){We(e,this,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}(At),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var o=this;if(Array.isArray(e))for(var a=0,i=e.length;a<i;a++)o.$on(e[a],t);else(o._events[e]||(o._events[e]=[])).push(t),n.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,n){var t=this;function o(){t.$off(e,o),n.apply(t,arguments)}return o.fn=n,t.$on(e,o),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(e)){for(var o=0,a=e.length;o<a;o++)t.$off(e[o],n);return t}var i,r=t._events[e];if(!r)return t;if(!n)return t._events[e]=null,t;for(var s=r.length;s--;)if((i=r[s])===n||i.fn===n){r.splice(s,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?x(t):t;for(var o=x(arguments,1),a='event handler for "'+e+'"',i=0,r=t.length;i<r;i++)Ke(t[i],n,o,n,a)}return n}}(At),function(e){e.prototype._update=function(e,n){var t=this,o=t.$el,a=t._vnode,i=Xn(t);t._vnode=e,t.$el=a?t.__patch__(a,e):t.__patch__(t.$el,e,n,!1),i(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||b(n.$children,e),e._watcher&&e._watcher.teardown();for(var t=e._watchers.length;t--;)e._watchers[t].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(At),function(e){On(e.prototype),e.prototype.$nextTick=function(e){return nn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,o=t.render,a=t._parentVnode;a&&(n.$scopedSlots=gn(a.data.scopedSlots,n.$slots,n.$scopedSlots)),n.$vnode=a;try{Wn=n,e=o.call(n._renderProxy,n.$createElement)}catch(t){We(t,n,"render"),e=n._vnode}finally{Wn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof me||(e=fe()),e.parent=a,e}}(At);var It=[String,RegExp,Array],Rt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:It,exclude:It,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)xt(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(n){Pt(e,(function(e){return St(n,e)}))})),this.$watch("exclude",(function(n){Pt(e,(function(e){return!St(n,e)}))}))},render:function(){var e=this.$slots.default,n=zn(e),t=n&&n.componentOptions;if(t){var o=Ct(t),a=this.include,i=this.exclude;if(a&&(!o||!St(a,o))||i&&o&&St(i,o))return n;var r=this.cache,s=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):n.key;r[l]?(n.componentInstance=r[l].componentInstance,b(s,l),s.push(l)):(r[l]=n,s.push(l),this.max&&s.length>parseInt(this.max)&&xt(r,s[0],s,this._vnode)),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return q}};Object.defineProperty(e,"config",n),e.util={warn:le,extend:I,mergeOptions:Ne,defineReactive:Se},e.set=Pe,e.delete=xe,e.nextTick=nn,e.observable=function(e){return Ce(e),e},e.options=Object.create(null),U.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,I(e.options.components,Rt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=x(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):"function"==typeof e&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ne(this.options,e),this}}(e),Tt(e),function(e){U.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&d(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&"function"==typeof t&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(At),Object.defineProperty(At.prototype,"$isServer",{get:oe}),Object.defineProperty(At.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(At,"FunctionalRenderContext",{value:Mn}),At.version="2.6.12";var Dt=f("style,class"),Ot=f("input,textarea,option,select,progress"),Mt=f("contenteditable,draggable,spellcheck"),Lt=f("events,caret,typing,plaintext-only"),jt=f("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Nt="http://www.w3.org/1999/xlink",Ut=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},_t=function(e){return Ut(e)?e.slice(6,e.length):""},qt=function(e){return null==e||!1===e};function Bt(e){for(var n=e.data,t=e,o=e;i(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(n=Ft(o.data,n));for(;i(t=t.parent);)t&&t.data&&(n=Ft(n,t.data));return function(e,n){if(i(e)||i(n))return Wt(e,Kt(n));return""}(n.staticClass,n.class)}function Ft(e,n){return{staticClass:Wt(e.staticClass,n.staticClass),class:i(e.class)?[e.class,n.class]:n.class}}function Wt(e,n){return e?n?e+" "+n:e:n||""}function Kt(e){return Array.isArray(e)?function(e){for(var n,t="",o=0,a=e.length;o<a;o++)i(n=Kt(e[o]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):l(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var Gt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},zt=f("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ht=f("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Yt=function(e){return zt(e)||Ht(e)};var Vt=Object.create(null);var Jt=f("text,number,password,search,email,tel,url");var $t=Object.freeze({createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(Gt[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),Xt={create:function(e,n){Qt(n)},update:function(e,n){e.data.ref!==n.data.ref&&(Qt(e,!0),Qt(n))},destroy:function(e){Qt(e,!0)}};function Qt(e,n){var t=e.data.ref;if(i(t)){var o=e.context,a=e.componentInstance||e.elm,r=o.$refs;n?Array.isArray(r[t])?b(r[t],a):r[t]===a&&(r[t]=void 0):e.data.refInFor?Array.isArray(r[t])?r[t].indexOf(a)<0&&r[t].push(a):r[t]=[a]:r[t]=a}}var Zt=new me("",{},[]),eo=["create","activate","update","remove","destroy"];function no(e,n){return e.key===n.key&&(e.tag===n.tag&&e.isComment===n.isComment&&i(e.data)===i(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,o=i(t=e.data)&&i(t=t.attrs)&&t.type,a=i(t=n.data)&&i(t=t.attrs)&&t.type;return o===a||Jt(o)&&Jt(a)}(e,n)||r(e.isAsyncPlaceholder)&&e.asyncFactory===n.asyncFactory&&a(n.asyncFactory.error))}function to(e,n,t){var o,a,r={};for(o=n;o<=t;++o)i(a=e[o].key)&&(r[a]=o);return r}var oo={create:ao,update:ao,destroy:function(e){ao(e,Zt)}};function ao(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,o,a,i=e===Zt,r=n===Zt,s=ro(e.data.directives,e.context),l=ro(n.data.directives,n.context),c=[],d=[];for(t in l)o=s[t],a=l[t],o?(a.oldValue=o.value,a.oldArg=o.arg,lo(a,"update",n,e),a.def&&a.def.componentUpdated&&d.push(a)):(lo(a,"bind",n,e),a.def&&a.def.inserted&&c.push(a));if(c.length){var u=function(){for(var t=0;t<c.length;t++)lo(c[t],"inserted",n,e)};i?ln(n,"insert",u):u()}d.length&&ln(n,"postpatch",(function(){for(var t=0;t<d.length;t++)lo(d[t],"componentUpdated",n,e)}));if(!i)for(t in s)l[t]||lo(s[t],"unbind",e,e,r)}(e,n)}var io=Object.create(null);function ro(e,n){var t,o,a=Object.create(null);if(!e)return a;for(t=0;t<e.length;t++)(o=e[t]).modifiers||(o.modifiers=io),a[so(o)]=o,o.def=Ue(n.$options,"directives",o.name);return a}function so(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function lo(e,n,t,o,a){var i=e.def&&e.def[n];if(i)try{i(t.elm,e,t,o,a)}catch(o){We(o,t.context,"directive "+e.name+" "+n+" hook")}}var co=[Xt,oo];function uo(e,n){var t=n.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(n.data.attrs))){var o,r,s=n.elm,l=e.data.attrs||{},c=n.data.attrs||{};for(o in i(c.__ob__)&&(c=n.data.attrs=I({},c)),c)r=c[o],l[o]!==r&&po(s,o,r);for(o in(J||X)&&c.value!==l.value&&po(s,"value",c.value),l)a(c[o])&&(Ut(o)?s.removeAttributeNS(Nt,_t(o)):Mt(o)||s.removeAttribute(o))}}function po(e,n,t){e.tagName.indexOf("-")>-1?ho(e,n,t):jt(n)?qt(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):Mt(n)?e.setAttribute(n,function(e,n){return qt(n)||"false"===n?"false":"contenteditable"===e&&Lt(n)?n:"true"}(n,t)):Ut(n)?qt(t)?e.removeAttributeNS(Nt,_t(n)):e.setAttributeNS(Nt,n,t):ho(e,n,t)}function ho(e,n,t){if(qt(t))e.removeAttribute(n);else{if(J&&!$&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var o=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",o)};e.addEventListener("input",o),e.__ieph=!0}e.setAttribute(n,t)}}var mo={create:uo,update:uo};function go(e,n){var t=n.elm,o=n.data,r=e.data;if(!(a(o.staticClass)&&a(o.class)&&(a(r)||a(r.staticClass)&&a(r.class)))){var s=Bt(n),l=t._transitionClasses;i(l)&&(s=Wt(s,Kt(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var fo,yo={create:go,update:go};function bo(e,n,t){var o=fo;return function a(){var i=n.apply(null,arguments);null!==i&&ko(e,a,t,o)}}var vo=Ye&&!(Z&&Number(Z[1])<=53);function wo(e,n,t,o){if(vo){var a=st,i=n;n=i._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=a||e.timeStamp<=0||e.target.ownerDocument!==document)return i.apply(this,arguments)}}fo.addEventListener(e,n,ne?{capture:t,passive:o}:t)}function ko(e,n,t,o){(o||fo).removeEventListener(e,n._wrapper||n,t)}function Eo(e,n){if(!a(e.data.on)||!a(n.data.on)){var t=n.data.on||{},o=e.data.on||{};fo=n.elm,function(e){if(i(e.__r)){var n=J?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}i(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),sn(t,o,wo,ko,bo,n.context),fo=void 0}}var Ao,To={create:Eo,update:Eo};function Co(e,n){if(!a(e.data.domProps)||!a(n.data.domProps)){var t,o,r=n.elm,s=e.data.domProps||{},l=n.data.domProps||{};for(t in i(l.__ob__)&&(l=n.data.domProps=I({},l)),s)t in l||(r[t]="");for(t in l){if(o=l[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),o===s[t])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===t&&"PROGRESS"!==r.tagName){r._value=o;var c=a(o)?"":String(o);So(r,c)&&(r.value=c)}else if("innerHTML"===t&&Ht(r.tagName)&&a(r.innerHTML)){(Ao=Ao||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var d=Ao.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;d.firstChild;)r.appendChild(d.firstChild)}else if(o!==s[t])try{r[t]=o}catch(e){}}}}function So(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,o=e._vModifiers;if(i(o)){if(o.number)return g(t)!==g(n);if(o.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var Po={create:Co,update:Co},xo=k((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var o=e.split(t);o.length>1&&(n[o[0].trim()]=o[1].trim())}})),n}));function Io(e){var n=Ro(e.style);return e.staticStyle?I(e.staticStyle,n):n}function Ro(e){return Array.isArray(e)?R(e):"string"==typeof e?xo(e):e}var Do,Oo=/^--/,Mo=/\s*!important$/,Lo=function(e,n,t){if(Oo.test(n))e.style.setProperty(n,t);else if(Mo.test(t))e.style.setProperty(S(n),t.replace(Mo,""),"important");else{var o=No(n);if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)e.style[o]=t[a];else e.style[o]=t}},jo=["Webkit","Moz","ms"],No=k((function(e){if(Do=Do||document.createElement("div").style,"filter"!==(e=A(e))&&e in Do)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<jo.length;t++){var o=jo[t]+n;if(o in Do)return o}}));function Uo(e,n){var t=n.data,o=e.data;if(!(a(t.staticStyle)&&a(t.style)&&a(o.staticStyle)&&a(o.style))){var r,s,l=n.elm,c=o.staticStyle,d=o.normalizedStyle||o.style||{},u=c||d,p=Ro(n.data.style)||{};n.data.normalizedStyle=i(p.__ob__)?I({},p):p;var h=function(e,n){var t,o={};if(n)for(var a=e;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Io(a.data))&&I(o,t);(t=Io(e.data))&&I(o,t);for(var i=e;i=i.parent;)i.data&&(t=Io(i.data))&&I(o,t);return o}(n,!0);for(s in u)a(h[s])&&Lo(l,s,"");for(s in h)(r=h[s])!==u[s]&&Lo(l,s,null==r?"":r)}}var _o={create:Uo,update:Uo},qo=/\s+/;function Bo(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(qo).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" "+(e.getAttribute("class")||"")+" ";t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function Fo(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(qo).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" "+(e.getAttribute("class")||"")+" ",o=" "+n+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function Wo(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&I(n,Ko(e.name||"v")),I(n,e),n}return"string"==typeof e?Ko(e):void 0}}var Ko=k((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),Go=z&&!$,zo="transition",Ho="transitionend",Yo="animation",Vo="animationend";Go&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(zo="WebkitTransition",Ho="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yo="WebkitAnimation",Vo="webkitAnimationEnd"));var Jo=z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function $o(e){Jo((function(){Jo(e)}))}function Xo(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),Bo(e,n))}function Qo(e,n){e._transitionClasses&&b(e._transitionClasses,n),Fo(e,n)}function Zo(e,n,t){var o=na(e,n),a=o.type,i=o.timeout,r=o.propCount;if(!a)return t();var s="transition"===a?Ho:Vo,l=0,c=function(){e.removeEventListener(s,d),t()},d=function(n){n.target===e&&++l>=r&&c()};setTimeout((function(){l<r&&c()}),i+1),e.addEventListener(s,d)}var ea=/\b(transform|all)(,|$)/;function na(e,n){var t,o=window.getComputedStyle(e),a=(o[zo+"Delay"]||"").split(", "),i=(o[zo+"Duration"]||"").split(", "),r=ta(a,i),s=(o[Yo+"Delay"]||"").split(", "),l=(o[Yo+"Duration"]||"").split(", "),c=ta(s,l),d=0,u=0;return"transition"===n?r>0&&(t="transition",d=r,u=i.length):"animation"===n?c>0&&(t="animation",d=c,u=l.length):u=(t=(d=Math.max(r,c))>0?r>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&ea.test(o[zo+"Property"])}}function ta(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return oa(n)+oa(e[t])})))}function oa(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function aa(e,n){var t=e.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=Wo(e.data.transition);if(!a(o)&&!i(t._enterCb)&&1===t.nodeType){for(var r=o.css,s=o.type,c=o.enterClass,d=o.enterToClass,u=o.enterActiveClass,p=o.appearClass,h=o.appearToClass,m=o.appearActiveClass,f=o.beforeEnter,y=o.enter,b=o.afterEnter,v=o.enterCancelled,w=o.beforeAppear,k=o.appear,E=o.afterAppear,A=o.appearCancelled,T=o.duration,C=$n,S=$n.$vnode;S&&S.parent;)C=S.context,S=S.parent;var P=!C._isMounted||!e.isRootInsert;if(!P||k||""===k){var x=P&&p?p:c,I=P&&m?m:u,R=P&&h?h:d,D=P&&w||f,O=P&&"function"==typeof k?k:y,M=P&&E||b,L=P&&A||v,j=g(l(T)?T.enter:T);0;var U=!1!==r&&!$,_=sa(O),q=t._enterCb=N((function(){U&&(Qo(t,R),Qo(t,I)),q.cancelled?(U&&Qo(t,x),L&&L(t)):M&&M(t),t._enterCb=null}));e.data.show||ln(e,"insert",(function(){var n=t.parentNode,o=n&&n._pending&&n._pending[e.key];o&&o.tag===e.tag&&o.elm._leaveCb&&o.elm._leaveCb(),O&&O(t,q)})),D&&D(t),U&&(Xo(t,x),Xo(t,I),$o((function(){Qo(t,x),q.cancelled||(Xo(t,R),_||(ra(j)?setTimeout(q,j):Zo(t,s,q)))}))),e.data.show&&(n&&n(),O&&O(t,q)),U||_||q()}}}function ia(e,n){var t=e.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=Wo(e.data.transition);if(a(o)||1!==t.nodeType)return n();if(!i(t._leaveCb)){var r=o.css,s=o.type,c=o.leaveClass,d=o.leaveToClass,u=o.leaveActiveClass,p=o.beforeLeave,h=o.leave,m=o.afterLeave,f=o.leaveCancelled,y=o.delayLeave,b=o.duration,v=!1!==r&&!$,w=sa(h),k=g(l(b)?b.leave:b);0;var E=t._leaveCb=N((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),v&&(Qo(t,d),Qo(t,u)),E.cancelled?(v&&Qo(t,c),f&&f(t)):(n(),m&&m(t)),t._leaveCb=null}));y?y(A):A()}function A(){E.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),p&&p(t),v&&(Xo(t,c),Xo(t,u),$o((function(){Qo(t,c),E.cancelled||(Xo(t,d),w||(ra(k)?setTimeout(E,k):Zo(t,s,E)))}))),h&&h(t,E),v||w||E())}}function ra(e){return"number"==typeof e&&!isNaN(e)}function sa(e){if(a(e))return!1;var n=e.fns;return i(n)?sa(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function la(e,n){!0!==n.data.show&&aa(n)}var ca=function(e){var n,t,o={},l=e.modules,c=e.nodeOps;for(n=0;n<eo.length;++n)for(o[eo[n]]=[],t=0;t<l.length;++t)i(l[t][eo[n]])&&o[eo[n]].push(l[t][eo[n]]);function d(e){var n=c.parentNode(e);i(n)&&c.removeChild(n,e)}function u(e,n,t,a,s,l,d){if(i(e.elm)&&i(l)&&(e=l[d]=be(e)),e.isRootInsert=!s,!function(e,n,t,a){var s=e.data;if(i(s)){var l=i(e.componentInstance)&&s.keepAlive;if(i(s=s.hook)&&i(s=s.init)&&s(e,!1),i(e.componentInstance))return p(e,n),h(t,e.elm,a),r(l)&&function(e,n,t,a){var r,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(r=s.data)&&i(r=r.transition)){for(r=0;r<o.activate.length;++r)o.activate[r](Zt,s);n.push(s);break}h(t,e.elm,a)}(e,n,t,a),!0}}(e,n,t,a)){var u=e.data,g=e.children,f=e.tag;i(f)?(e.elm=e.ns?c.createElementNS(e.ns,f):c.createElement(f,e),b(e),m(e,g,n),i(u)&&y(e,n),h(t,e.elm,a)):r(e.isComment)?(e.elm=c.createComment(e.text),h(t,e.elm,a)):(e.elm=c.createTextNode(e.text),h(t,e.elm,a))}}function p(e,n){i(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(y(e,n),b(e)):(Qt(e),n.push(e))}function h(e,n,t){i(e)&&(i(t)?c.parentNode(t)===e&&c.insertBefore(e,n,t):c.appendChild(e,n))}function m(e,n,t){if(Array.isArray(n)){0;for(var o=0;o<n.length;++o)u(n[o],t,e.elm,null,!0,n,o)}else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return i(e.tag)}function y(e,t){for(var a=0;a<o.create.length;++a)o.create[a](Zt,e);i(n=e.data.hook)&&(i(n.create)&&n.create(Zt,e),i(n.insert)&&t.push(e))}function b(e){var n;if(i(n=e.fnScopeId))c.setStyleScope(e.elm,n);else for(var t=e;t;)i(n=t.context)&&i(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n),t=t.parent;i(n=$n)&&n!==e.context&&n!==e.fnContext&&i(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n)}function v(e,n,t,o,a,i){for(;o<=a;++o)u(t[o],i,e,n,!1,t,o)}function w(e){var n,t,a=e.data;if(i(a))for(i(n=a.hook)&&i(n=n.destroy)&&n(e),n=0;n<o.destroy.length;++n)o.destroy[n](e);if(i(n=e.children))for(t=0;t<e.children.length;++t)w(e.children[t])}function k(e,n,t){for(;n<=t;++n){var o=e[n];i(o)&&(i(o.tag)?(E(o),w(o)):d(o.elm))}}function E(e,n){if(i(n)||i(e.data)){var t,a=o.remove.length+1;for(i(n)?n.listeners+=a:n=function(e,n){function t(){0==--t.listeners&&d(e)}return t.listeners=n,t}(e.elm,a),i(t=e.componentInstance)&&i(t=t._vnode)&&i(t.data)&&E(t,n),t=0;t<o.remove.length;++t)o.remove[t](e,n);i(t=e.data.hook)&&i(t=t.remove)?t(e,n):n()}else d(e.elm)}function A(e,n,t,o){for(var a=t;a<o;a++){var r=n[a];if(i(r)&&no(e,r))return a}}function T(e,n,t,s,l,d){if(e!==n){i(n.elm)&&i(s)&&(n=s[l]=be(n));var p=n.elm=e.elm;if(r(e.isAsyncPlaceholder))i(n.asyncFactory.resolved)?P(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(r(n.isStatic)&&r(e.isStatic)&&n.key===e.key&&(r(n.isCloned)||r(n.isOnce)))n.componentInstance=e.componentInstance;else{var h,m=n.data;i(m)&&i(h=m.hook)&&i(h=h.prepatch)&&h(e,n);var f=e.children,y=n.children;if(i(m)&&g(n)){for(h=0;h<o.update.length;++h)o.update[h](e,n);i(h=m.hook)&&i(h=h.update)&&h(e,n)}a(n.text)?i(f)&&i(y)?f!==y&&function(e,n,t,o,r){var s,l,d,p=0,h=0,m=n.length-1,g=n[0],f=n[m],y=t.length-1,b=t[0],w=t[y],E=!r;for(0;p<=m&&h<=y;)a(g)?g=n[++p]:a(f)?f=n[--m]:no(g,b)?(T(g,b,o,t,h),g=n[++p],b=t[++h]):no(f,w)?(T(f,w,o,t,y),f=n[--m],w=t[--y]):no(g,w)?(T(g,w,o,t,y),E&&c.insertBefore(e,g.elm,c.nextSibling(f.elm)),g=n[++p],w=t[--y]):no(f,b)?(T(f,b,o,t,h),E&&c.insertBefore(e,f.elm,g.elm),f=n[--m],b=t[++h]):(a(s)&&(s=to(n,p,m)),a(l=i(b.key)?s[b.key]:A(b,n,p,m))?u(b,o,e,g.elm,!1,t,h):no(d=n[l],b)?(T(d,b,o,t,h),n[l]=void 0,E&&c.insertBefore(e,d.elm,g.elm)):u(b,o,e,g.elm,!1,t,h),b=t[++h]);p>m?v(e,a(t[y+1])?null:t[y+1].elm,t,h,y,o):h>y&&k(n,p,m)}(p,f,y,t,d):i(y)?(i(e.text)&&c.setTextContent(p,""),v(p,null,y,0,y.length-1,t)):i(f)?k(f,0,f.length-1):i(e.text)&&c.setTextContent(p,""):e.text!==n.text&&c.setTextContent(p,n.text),i(m)&&i(h=m.hook)&&i(h=h.postpatch)&&h(e,n)}}}function C(e,n,t){if(r(t)&&i(e.parent))e.parent.data.pendingInsert=n;else for(var o=0;o<n.length;++o)n[o].data.hook.insert(n[o])}var S=f("attrs,class,staticClass,staticStyle,key");function P(e,n,t,o){var a,s=n.tag,l=n.data,c=n.children;if(o=o||l&&l.pre,n.elm=e,r(n.isComment)&&i(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(i(l)&&(i(a=l.hook)&&i(a=a.init)&&a(n,!0),i(a=n.componentInstance)))return p(n,t),!0;if(i(s)){if(i(c))if(e.hasChildNodes())if(i(a=l)&&i(a=a.domProps)&&i(a=a.innerHTML)){if(a!==e.innerHTML)return!1}else{for(var d=!0,u=e.firstChild,h=0;h<c.length;h++){if(!u||!P(u,c[h],t,o)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else m(n,c,t);if(i(l)){var g=!1;for(var f in l)if(!S(f)){g=!0,y(n,t);break}!g&&l.class&&on(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,s){if(!a(n)){var l,d=!1,p=[];if(a(e))d=!0,u(n,p);else{var h=i(e.nodeType);if(!h&&no(e,n))T(e,n,p,null,null,s);else{if(h){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),r(t)&&P(e,n,p))return C(n,p,!0),e;l=e,e=new me(c.tagName(l).toLowerCase(),{},[],void 0,l)}var m=e.elm,f=c.parentNode(m);if(u(n,p,m._leaveCb?null:f,c.nextSibling(m)),i(n.parent))for(var y=n.parent,b=g(n);y;){for(var v=0;v<o.destroy.length;++v)o.destroy[v](y);if(y.elm=n.elm,b){for(var E=0;E<o.create.length;++E)o.create[E](Zt,y);var A=y.data.hook.insert;if(A.merged)for(var S=1;S<A.fns.length;S++)A.fns[S]()}else Qt(y);y=y.parent}i(f)?k([e],0,0):i(e.tag)&&w(e)}}return C(n,p,d),n.elm}i(e)&&w(e)}}({nodeOps:$t,modules:[mo,yo,To,Po,_o,z?{create:la,activate:la,remove:function(e,n){!0!==e.data.show?ia(e,n):n()}}:{}].concat(co)});$&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ya(e,"input")}));var da={inserted:function(e,n,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?ln(t,"postpatch",(function(){da.componentUpdated(e,n,t)})):ua(e,n,t.context),e._vOptions=[].map.call(e.options,ma)):("textarea"===t.tag||Jt(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",ga),e.addEventListener("compositionend",fa),e.addEventListener("change",fa),$&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){ua(e,n,t.context);var o=e._vOptions,a=e._vOptions=[].map.call(e.options,ma);if(a.some((function(e,n){return!L(e,o[n])})))(e.multiple?n.value.some((function(e){return ha(e,a)})):n.value!==n.oldValue&&ha(n.value,a))&&ya(e,"change")}}};function ua(e,n,t){pa(e,n,t),(J||X)&&setTimeout((function(){pa(e,n,t)}),0)}function pa(e,n,t){var o=n.value,a=e.multiple;if(!a||Array.isArray(o)){for(var i,r,s=0,l=e.options.length;s<l;s++)if(r=e.options[s],a)i=j(o,ma(r))>-1,r.selected!==i&&(r.selected=i);else if(L(ma(r),o))return void(e.selectedIndex!==s&&(e.selectedIndex=s));a||(e.selectedIndex=-1)}}function ha(e,n){return n.every((function(n){return!L(n,e)}))}function ma(e){return"_value"in e?e._value:e.value}function ga(e){e.target.composing=!0}function fa(e){e.target.composing&&(e.target.composing=!1,ya(e.target,"input"))}function ya(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function ba(e){return!e.componentInstance||e.data&&e.data.transition?e:ba(e.componentInstance._vnode)}var va={model:da,show:{bind:function(e,n,t){var o=n.value,a=(t=ba(t)).data&&t.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;o&&a?(t.data.show=!0,aa(t,(function(){e.style.display=i}))):e.style.display=o?i:"none"},update:function(e,n,t){var o=n.value;!o!=!n.oldValue&&((t=ba(t)).data&&t.data.transition?(t.data.show=!0,o?aa(t,(function(){e.style.display=e.__vOriginalDisplay})):ia(t,(function(){e.style.display="none"}))):e.style.display=o?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,o,a){a||(e.style.display=e.__vOriginalDisplay)}}},wa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ka(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?ka(zn(n.children)):e}function Ea(e){var n={},t=e.$options;for(var o in t.propsData)n[o]=e[o];var a=t._parentListeners;for(var i in a)n[A(i)]=a[i];return n}function Aa(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Ta=function(e){return e.tag||Gn(e)},Ca=function(e){return"show"===e.name},Sa={name:"transition",props:wa,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Ta)).length){0;var o=this.mode;0;var a=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return a;var i=ka(a);if(!i)return a;if(this._leaving)return Aa(e,a);var r="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?r+"comment":r+i.tag:s(i.key)?0===String(i.key).indexOf(r)?i.key:r+i.key:i.key;var l=(i.data||(i.data={})).transition=Ea(this),c=this._vnode,d=ka(c);if(i.data.directives&&i.data.directives.some(Ca)&&(i.data.show=!0),d&&d.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(i,d)&&!Gn(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=I({},l);if("out-in"===o)return this._leaving=!0,ln(u,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),Aa(e,a);if("in-out"===o){if(Gn(i))return c;var p,h=function(){p()};ln(l,"afterEnter",h),ln(l,"enterCancelled",h),ln(u,"delayLeave",(function(e){p=e}))}}return a}}},Pa=I({tag:String,moveClass:String},wa);function xa(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Ia(e){e.data.newPos=e.elm.getBoundingClientRect()}function Ra(e){var n=e.data.pos,t=e.data.newPos,o=n.left-t.left,a=n.top-t.top;if(o||a){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+o+"px,"+a+"px)",i.transitionDuration="0s"}}delete Pa.mode;var Da={Transition:Sa,TransitionGroup:{props:Pa,beforeMount:function(){var e=this,n=this._update;this._update=function(t,o){var a=Xn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,a(),n.call(e,t,o)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],r=Ea(this),s=0;s<a.length;s++){var l=a[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))i.push(l),t[l.key]=l,(l.data||(l.data={})).transition=r;else;}if(o){for(var c=[],d=[],u=0;u<o.length;u++){var p=o[u];p.data.transition=r,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?c.push(p):d.push(p)}this.kept=e(n,null,c),this.removed=d}return e(n,null,i)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(xa),e.forEach(Ia),e.forEach(Ra),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,o=t.style;Xo(t,n),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(Ho,t._moveCb=function e(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(Ho,e),t._moveCb=null,Qo(t,n))})}})))},methods:{hasMove:function(e,n){if(!Go)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Fo(t,e)})),Bo(t,n),t.style.display="none",this.$el.appendChild(t);var o=na(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};At.config.mustUseProp=function(e,n,t){return"value"===t&&Ot(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},At.config.isReservedTag=Yt,At.config.isReservedAttr=Dt,At.config.getTagNamespace=function(e){return Ht(e)?"svg":"math"===e?"math":void 0},At.config.isUnknownElement=function(e){if(!z)return!0;if(Yt(e))return!1;if(e=e.toLowerCase(),null!=Vt[e])return Vt[e];var n=document.createElement(e);return e.indexOf("-")>-1?Vt[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:Vt[e]=/HTMLUnknownElement/.test(n.toString())},I(At.options.directives,va),I(At.options.components,Da),At.prototype.__patch__=z?ca:D,At.prototype.$mount=function(e,n){return function(e,n,t){var o;return e.$el=n,e.$options.render||(e.$options.render=fe),et(e,"beforeMount"),o=function(){e._update(e._render(),t)},new pt(e,o,D,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1,null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&z?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},z&&setTimeout((function(){q.devtools&&ae&&ae.emit("init",At)}),0),n.a=At},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){var o=t(4),a=t(29).f,i=t(17),r=t(34),s=t(102),l=t(162),c=t(125);e.exports=function(e,n){var t,d,u,p,h,m=e.target,g=e.global,f=e.stat;if(t=g?o:f?o[m]||s(m,{}):(o[m]||{}).prototype)for(d in n){if(p=n[d],u=e.noTargetGet?(h=a(t,d))&&h.value:t[d],!c(g?d:m+(f?".":"#")+d,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&i(p,"sham",!0),r(t,d,p,e)}}},function(e,n,t){var o=t(4),a=t(100),i=t(7),r=t(69),s=t(103),l=t(158),c=a("wks"),d=o.Symbol,u=l?d:d&&d.withoutSetter||r;e.exports=function(e){return i(c,e)||(s&&i(d,e)?c[e]=d[e]:c[e]=u("Symbol."+e)),c[e]}},function(e,n){var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,n){var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,n){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,n){var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},function(e,n,t){var o=t(99),a=t(34),i=t(259);o||a(Object.prototype,"toString",i,{unsafe:!0})},function(e,n,t){var o=t(1);e.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n,t){var o=t(9),a=t(156),i=t(12),r=t(49),s=Object.defineProperty;n.f=o?s:function(e,n,t){if(i(e),n=r(n,!0),i(t),a)try{return s(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){var o=t(5),a=t(131),i=t(20),r=t(134),s=t(135),l=t(227),c=a("wks"),d=o.Symbol,u=l?d:d&&d.withoutSetter||r;e.exports=function(e){return i(c,e)&&(s||"string"==typeof c[e])||(s&&i(d,e)?c[e]=d[e]:c[e]=u("Symbol."+e)),c[e]}},function(e,n,t){var o=t(6);e.exports=function(e){if(!o(e))throw TypeError(String(e)+" is not an object");return e}},function(e,n,t){"use strict";var o=t(169).charAt,a=t(62),i=t(170),r=a.set,s=a.getterFor("String Iterator");i(String,"String",(function(e){r(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e,n=s(this),t=n.string,a=n.index;return a>=t.length?{value:void 0,done:!0}:(e=o(t,a),n.index+=e.length,{value:e,done:!1})}))},function(e,n,t){var o=t(4),a=t(174),i=t(265),r=t(17),s=t(3),l=s("iterator"),c=s("toStringTag"),d=i.values;for(var u in a){var p=o[u],h=p&&p.prototype;if(h){if(h[l]!==d)try{r(h,l,d)}catch(e){h[l]=d}if(h[c]||r(h,c,u),a[u])for(var m in i)if(h[m]!==i[m])try{r(h,m,i[m])}catch(e){h[m]=i[m]}}}},function(e,n){var t=Array.isArray;e.exports=t},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){var o=t(9),a=t(10),i=t(50);e.exports=o?function(e,n,t){return a.f(e,n,i(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var o=t(71),a=t(24);e.exports=function(e){return o(a(e))}},function(e,n,t){var o=t(27);e.exports=function(e){if(!o(e))throw TypeError(String(e)+" is not an object");return e}},function(e,n){var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},function(e,n,t){var o=t(24);e.exports=function(e){return Object(o(e))}},function(e,n,t){var o=t(185),a="object"==typeof self&&self&&self.Object===Object&&self,i=o||a||Function("return this")();e.exports=i},function(e,n,t){var o=t(72),a=Math.min;e.exports=function(e){return e>0?a(o(e),9007199254740991):0}},function(e,n){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,n,t){"use strict";var o=t(2),a=t(4),i=t(42),r=t(48),s=t(9),l=t(103),c=t(158),d=t(1),u=t(7),p=t(73),h=t(6),m=t(12),g=t(21),f=t(18),y=t(49),b=t(50),v=t(52),w=t(108),k=t(64),E=t(272),A=t(168),T=t(29),C=t(10),S=t(161),P=t(17),x=t(34),I=t(100),R=t(70),D=t(51),O=t(69),M=t(3),L=t(182),j=t(183),N=t(109),U=t(62),_=t(60).forEach,q=R("hidden"),B=M("toPrimitive"),F=U.set,W=U.getterFor("Symbol"),K=Object.prototype,G=a.Symbol,z=i("JSON","stringify"),H=T.f,Y=C.f,V=E.f,J=S.f,$=I("symbols"),X=I("op-symbols"),Q=I("string-to-symbol-registry"),Z=I("symbol-to-string-registry"),ee=I("wks"),ne=a.QObject,te=!ne||!ne.prototype||!ne.prototype.findChild,oe=s&&d((function(){return 7!=v(Y({},"a",{get:function(){return Y(this,"a",{value:7}).a}})).a}))?function(e,n,t){var o=H(K,n);o&&delete K[n],Y(e,n,t),o&&e!==K&&Y(K,n,o)}:Y,ae=function(e,n){var t=$[e]=v(G.prototype);return F(t,{type:"Symbol",tag:e,description:n}),s||(t.description=n),t},ie=c?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof G},re=function(e,n,t){e===K&&re(X,n,t),m(e);var o=y(n,!0);return m(t),u($,o)?(t.enumerable?(u(e,q)&&e[q][o]&&(e[q][o]=!1),t=v(t,{enumerable:b(0,!1)})):(u(e,q)||Y(e,q,b(1,{})),e[q][o]=!0),oe(e,o,t)):Y(e,o,t)},se=function(e,n){m(e);var t=f(n),o=w(t).concat(ue(t));return _(o,(function(n){s&&!le.call(t,n)||re(e,n,t[n])})),e},le=function(e){var n=y(e,!0),t=J.call(this,n);return!(this===K&&u($,n)&&!u(X,n))&&(!(t||!u(this,n)||!u($,n)||u(this,q)&&this[q][n])||t)},ce=function(e,n){var t=f(e),o=y(n,!0);if(t!==K||!u($,o)||u(X,o)){var a=H(t,o);return!a||!u($,o)||u(t,q)&&t[q][o]||(a.enumerable=!0),a}},de=function(e){var n=V(f(e)),t=[];return _(n,(function(e){u($,e)||u(D,e)||t.push(e)})),t},ue=function(e){var n=e===K,t=V(n?X:f(e)),o=[];return _(t,(function(e){!u($,e)||n&&!u(K,e)||o.push($[e])})),o};(l||(x((G=function(){if(this instanceof G)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,n=O(e),t=function(e){this===K&&t.call(X,e),u(this,q)&&u(this[q],n)&&(this[q][n]=!1),oe(this,n,b(1,e))};return s&&te&&oe(K,n,{configurable:!0,set:t}),ae(n,e)}).prototype,"toString",(function(){return W(this).tag})),x(G,"withoutSetter",(function(e){return ae(O(e),e)})),S.f=le,C.f=re,T.f=ce,k.f=E.f=de,A.f=ue,L.f=function(e){return ae(M(e),e)},s&&(Y(G.prototype,"description",{configurable:!0,get:function(){return W(this).description}}),r||x(K,"propertyIsEnumerable",le,{unsafe:!0}))),o({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:G}),_(w(ee),(function(e){j(e)})),o({target:"Symbol",stat:!0,forced:!l},{for:function(e){var n=String(e);if(u(Q,n))return Q[n];var t=G(n);return Q[n]=t,Z[t]=n,t},keyFor:function(e){if(!ie(e))throw TypeError(e+" is not a symbol");if(u(Z,e))return Z[e]},useSetter:function(){te=!0},useSimple:function(){te=!1}}),o({target:"Object",stat:!0,forced:!l,sham:!s},{create:function(e,n){return void 0===n?v(e):se(v(e),n)},defineProperty:re,defineProperties:se,getOwnPropertyDescriptor:ce}),o({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:de,getOwnPropertySymbols:ue}),o({target:"Object",stat:!0,forced:d((function(){A.f(1)}))},{getOwnPropertySymbols:function(e){return A.f(g(e))}}),z)&&o({target:"JSON",stat:!0,forced:!l||d((function(){var e=G();return"[null]"!=z([e])||"{}"!=z({a:e})||"{}"!=z(Object(e))}))},{stringify:function(e,n,t){for(var o,a=[e],i=1;arguments.length>i;)a.push(arguments[i++]);if(o=n,(h(n)||void 0!==e)&&!ie(e))return p(n)||(n=function(e,n){if("function"==typeof o&&(n=o.call(this,e,n)),!ie(n))return n}),a[1]=n,z.apply(null,a)}});G.prototype[B]||P(G.prototype,B,G.prototype.valueOf),N(G,"Symbol"),D[q]=!0},function(e,n,t){var o=t(16);e.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,n){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},function(e,n,t){var o=t(9),a=t(161),i=t(50),r=t(18),s=t(49),l=t(7),c=t(156),d=Object.getOwnPropertyDescriptor;n.f=o?d:function(e,n){if(e=r(e),n=s(n,!0),c)try{return d(e,n)}catch(e){}if(l(e,n))return i(!a.f.call(e,n),e[n])}},function(e,n,t){var o=t(296),a=t(299);e.exports=function(e,n){var t=a(e,n);return o(t)?t:void 0}},function(e,n,t){"use strict";function o(e,n,t,o,a,i,r,s){var l,c="function"==typeof e?e.options:e;if(n&&(c.render=n,c.staticRenderFns=t,c._compiled=!0),o&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),r?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},c._ssrRegister=l):a&&(l=s?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(e,n){return l.call(n),d(e,n)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:e,options:c}}t.d(n,"a",(function(){return o}))},function(e,n,t){"use strict";var o=t(2),a=t(84);o({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(e,n,t){"use strict";var o=t(2),a=t(60).filter,i=t(75),r=t(35),s=i("filter"),l=r("filter");o({target:"Array",proto:!0,forced:!s||!l},{filter:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){var o=t(4),a=t(17),i=t(7),r=t(102),s=t(159),l=t(62),c=l.get,d=l.enforce,u=String(String).split("String");(e.exports=function(e,n,t,s){var l,c=!!s&&!!s.unsafe,p=!!s&&!!s.enumerable,h=!!s&&!!s.noTargetGet;"function"==typeof t&&("string"!=typeof n||i(t,"name")||a(t,"name",n),(l=d(t)).source||(l.source=u.join("string"==typeof n?n:""))),e!==o?(c?!h&&e[n]&&(p=!0):delete e[n],p?e[n]=t:a(e,n,t)):p?e[n]=t:r(n,t)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||s(this)}))},function(e,n,t){var o=t(9),a=t(1),i=t(7),r=Object.defineProperty,s={},l=function(e){throw e};e.exports=function(e,n){if(i(s,e))return s[e];n||(n={});var t=[][e],c=!!i(n,"ACCESSORS")&&n.ACCESSORS,d=i(n,0)?n[0]:l,u=i(n,1)?n[1]:void 0;return s[e]=!!t&&!a((function(){if(c&&!o)return!0;var e={length:-1};c?r(e,1,{enumerable:!0,get:l}):e[1]=1,t.call(e,d,u)}))}},function(e,n,t){"use strict";var o=t(2),a=t(9),i=t(4),r=t(7),s=t(6),l=t(10).f,c=t(162),d=i.Symbol;if(a&&"function"==typeof d&&(!("description"in d.prototype)||void 0!==d().description)){var u={},p=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),n=this instanceof p?new d(e):void 0===e?d():d(e);return""===e&&(u[n]=!0),n};c(p,d);var h=p.prototype=d.prototype;h.constructor=p;var m=h.toString,g="Symbol(test)"==String(d("test")),f=/^Symbol\((.*)\)[^)]+$/;l(h,"description",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,n=m.call(e);if(r(u,e))return"";var t=g?n.slice(7,-1):n.replace(f,"$1");return""===t?void 0:t}}),o({global:!0,forced:!0},{Symbol:p})}},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){var o=t(26),a=t(39),i=t(90);e.exports=o?function(e,n,t){return a.f(e,n,i(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var o=t(26),a=t(132),i=t(19),r=t(133),s=Object.defineProperty;n.f=o?s:function(e,n,t){if(i(e),n=r(n,!0),i(t),a)try{return s(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){var o=t(226),a=t(5),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,n){return arguments.length<2?i(o[e])||i(a[e]):o[e]&&o[e][n]||a[e]&&a[e][n]}},function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));t(63),t(8),t(85),t(126),t(13);var o=t(57);function a(e,n){if(e){if("string"==typeof e)return Object(o.a)(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(o.a)(e,n):void 0}}},function(e,n,t){var o=t(164),a=t(4),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,n){return arguments.length<2?i(o[e])||i(a[e]):o[e]&&o[e][n]||a[e]&&a[e][n]}},function(e,n,t){t(183)("iterator")},function(e,n,t){var o=t(54),a=t(282),i=t(283),r=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?a(e):i(e)}},function(e,n){e.exports=!1},function(e,n){e.exports={}},function(e,n,t){var o=t(5),a=t(38),i=t(20),r=t(88),s=t(96),l=t(95),c=l.get,d=l.enforce,u=String(String).split("String");(e.exports=function(e,n,t,s){var l,c=!!s&&!!s.unsafe,p=!!s&&!!s.enumerable,h=!!s&&!!s.noTargetGet;"function"==typeof t&&("string"!=typeof n||i(t,"name")||a(t,"name",n),(l=d(t)).source||(l.source=u.join("string"==typeof n?n:""))),e!==o?(c?!h&&e[n]&&(p=!0):delete e[n],p?e[n]=t:a(e,n,t)):p?e[n]=t:r(n,t)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||s(this)}))},function(e,n){e.exports=!1},function(e,n,t){var o=t(6);e.exports=function(e,n){if(!o(e))return e;var t,a;if(n&&"function"==typeof(t=e.toString)&&!o(a=t.call(e)))return a;if("function"==typeof(t=e.valueOf)&&!o(a=t.call(e)))return a;if(!n&&"function"==typeof(t=e.toString)&&!o(a=t.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n){e.exports={}},function(e,n,t){var o,a=t(12),i=t(262),r=t(105),s=t(51),l=t(263),c=t(157),d=t(70),u=d("IE_PROTO"),p=function(){},h=function(e){return"<script>"+e+"<\/script>"},m=function(){try{o=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,n;m=o?function(e){e.write(h("")),e.close();var n=e.parentWindow.Object;return e=null,n}(o):((n=c("iframe")).style.display="none",l.appendChild(n),n.src=String("javascript:"),(e=n.contentWindow.document).open(),e.write(h("document.F=Object")),e.close(),e.F);for(var t=r.length;t--;)delete m.prototype[r[t]];return m()};s[u]=!0,e.exports=Object.create||function(e,n){var t;return null!==e?(p.prototype=a(e),t=new p,p.prototype=null,t[u]=e):t=m(),void 0===n?t:i(t,n)}},function(e,n){e.exports={}},function(e,n,t){var o=t(22).Symbol;e.exports=o},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var o=t(57);t(25),t(36),t(8),t(43),t(13),t(14),t(126);var a=t(41);function i(e){return function(e){if(Array.isArray(e))return Object(o.a)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Object(a.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,n,t){"use strict";function o(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}t.d(n,"a",(function(){return o}))},function(e,n,t){"use strict";var o=t(209),a=t(12),i=t(21),r=t(23),s=t(72),l=t(24),c=t(211),d=t(210),u=Math.max,p=Math.min,h=Math.floor,m=/\$([$&'`]|\d\d?|<[^>]*>)/g,g=/\$([$&'`]|\d\d?)/g;o("replace",2,(function(e,n,t,o){var f=o.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,y=o.REPLACE_KEEPS_$0,b=f?"$":"$0";return[function(t,o){var a=l(this),i=null==t?void 0:t[e];return void 0!==i?i.call(t,a,o):n.call(String(a),t,o)},function(e,o){if(!f&&y||"string"==typeof o&&-1===o.indexOf(b)){var i=t(n,e,this,o);if(i.done)return i.value}var l=a(e),h=String(this),m="function"==typeof o;m||(o=String(o));var g=l.global;if(g){var w=l.unicode;l.lastIndex=0}for(var k=[];;){var E=d(l,h);if(null===E)break;if(k.push(E),!g)break;""===String(E[0])&&(l.lastIndex=c(h,r(l.lastIndex),w))}for(var A,T="",C=0,S=0;S<k.length;S++){E=k[S];for(var P=String(E[0]),x=u(p(s(E.index),h.length),0),I=[],R=1;R<E.length;R++)I.push(void 0===(A=E[R])?A:String(A));var D=E.groups;if(m){var O=[P].concat(I,x,h);void 0!==D&&O.push(D);var M=String(o.apply(void 0,O))}else M=v(P,h,x,I,D,o);x>=C&&(T+=h.slice(C,x)+M,C=x+P.length)}return T+h.slice(C)}];function v(e,t,o,a,r,s){var l=o+e.length,c=a.length,d=g;return void 0!==r&&(r=i(r),d=m),n.call(s,d,(function(n,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,o);case"'":return t.slice(l);case"<":s=r[i.slice(1,-1)];break;default:var d=+i;if(0===d)return n;if(d>c){var u=h(d/10);return 0===u?n:u<=c?void 0===a[u-1]?i.charAt(1):a[u-1]+i.charAt(1):n}s=a[d-1]}return void 0===s?"":s}))}}))},function(e,n,t){var o=t(4),a=t(174),i=t(269),r=t(17);for(var s in a){var l=o[s],c=l&&l.prototype;if(c&&c.forEach!==i)try{r(c,"forEach",i)}catch(e){c.forEach=i}}},function(e,n,t){var o=t(175),a=t(71),i=t(21),r=t(23),s=t(176),l=[].push,c=function(e){var n=1==e,t=2==e,c=3==e,d=4==e,u=6==e,p=5==e||u;return function(h,m,g,f){for(var y,b,v=i(h),w=a(v),k=o(m,g,3),E=r(w.length),A=0,T=f||s,C=n?T(h,E):t?T(h,0):void 0;E>A;A++)if((p||A in w)&&(b=k(y=w[A],A,v),e))if(n)C[A]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return A;case 2:l.call(C,y)}else if(d)return!1;return u?-1:c||d?d:C}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(e,n){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,n,t){var o,a,i,r=t(258),s=t(4),l=t(6),c=t(17),d=t(7),u=t(101),p=t(70),h=t(51),m=s.WeakMap;if(r){var g=u.state||(u.state=new m),f=g.get,y=g.has,b=g.set;o=function(e,n){return n.facade=e,b.call(g,e,n),n},a=function(e){return f.call(g,e)||{}},i=function(e){return y.call(g,e)}}else{var v=p("state");h[v]=!0,o=function(e,n){return n.facade=e,c(e,v,n),n},a=function(e){return d(e,v)?e[v]:{}},i=function(e){return d(e,v)}}e.exports={set:o,get:a,has:i,enforce:function(e){return i(e)?a(e):o(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=a(n)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){"use strict";var o=t(2),a=t(6),i=t(73),r=t(167),s=t(23),l=t(18),c=t(74),d=t(3),u=t(75),p=t(35),h=u("slice"),m=p("slice",{ACCESSORS:!0,0:0,1:2}),g=d("species"),f=[].slice,y=Math.max;o({target:"Array",proto:!0,forced:!h||!m},{slice:function(e,n){var t,o,d,u=l(this),p=s(u.length),h=r(e,p),m=r(void 0===n?p:n,p);if(i(u)&&("function"!=typeof(t=u.constructor)||t!==Array&&!i(t.prototype)?a(t)&&null===(t=t[g])&&(t=void 0):t=void 0,t===Array||void 0===t))return f.call(u,h,m);for(o=new(void 0===t?Array:t)(y(m-h,0)),d=0;h<m;h++,d++)h in u&&c(o,d,u[h]);return o.length=d,o}})},function(e,n,t){var o=t(165),a=t(105).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,a)}},function(e,n,t){var o=t(129),a=t(130);e.exports=function(e){return o(a(e))}},function(e,n,t){var o=t(86),a=t(5);e.exports="process"==o(a.process)},function(e,n,t){var o=t(5),a=t(97).f,i=t(38),r=t(47),s=t(88),l=t(233),c=t(145);e.exports=function(e,n){var t,d,u,p,h,m=e.target,g=e.global,f=e.stat;if(t=g?o:f?o[m]||s(m,{}):(o[m]||{}).prototype)for(d in n){if(p=n[d],u=e.noTargetGet?(h=a(t,d))&&h.value:t[d],!c(g?d:m+(f?".":"#")+d,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&i(p,"sham",!0),r(t,d,p,e)}}},function(e,n){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,n){var t=0,o=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++t+o).toString(36)}},function(e,n,t){var o=t(100),a=t(69),i=o("keys");e.exports=function(e){return i[e]||(i[e]=a(e))}},function(e,n,t){var o=t(1),a=t(28),i="".split;e.exports=o((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?i.call(e,""):Object(e)}:Object},function(e,n){var t=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:t)(e)}},function(e,n,t){var o=t(28);e.exports=Array.isArray||function(e){return"Array"==o(e)}},function(e,n,t){"use strict";var o=t(49),a=t(10),i=t(50);e.exports=function(e,n,t){var r=o(n);r in e?a.f(e,r,i(0,t)):e[r]=t}},function(e,n,t){var o=t(1),a=t(3),i=t(106),r=a("species");e.exports=function(e){return i>=51||!o((function(){var n=[];return(n.constructor={})[r]=function(){return{foo:1}},1!==n[e](Boolean).foo}))}},function(e,n,t){var o=t(286),a=t(287),i=t(288),r=t(289),s=t(290);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(188);e.exports=function(e,n){for(var t=e.length;t--;)if(o(e[t][0],n))return t;return-1}},function(e,n,t){var o=t(30)(Object,"create");e.exports=o},function(e,n,t){var o=t(308);e.exports=function(e,n){var t=e.__data__;return o(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var o=t(121);e.exports=function(e){if("string"==typeof e||o(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n,t){var o,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(o=function(){var e,n,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(e,n,t){return e<n?n:e>t?t:e}function i(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(o[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=a(e,o.minimum,1),t.status=1===e?null:e;var l=t.render(!n),c=l.querySelector(o.barSelector),d=o.speed,u=o.easing;return l.offsetWidth,r((function(n){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),s(c,function(e,n,t){var a;return(a="translate3d"===o.positionUsing?{transform:"translate3d("+i(e)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+i(e)+"%,0)"}:{"margin-left":i(e)+"%"}).transition="all "+n+"ms "+t,a}(e,d,u)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),d)}),d)):setTimeout(n,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),o.trickleSpeed)};return o.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*a(Math.random()*n,.1,.95)),n=a(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},e=0,n=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===n&&t.start(),e++,n++,o.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=o.template;var a,r=n.querySelector(o.barSelector),l=e?"-100":i(t.status||0),d=document.querySelector(o.parent);return s(r,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(a=n.querySelector(o.spinnerSelector))&&p(a),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(n),n},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(o.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&p(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var o,a=e.length,i=n.charAt(0).toUpperCase()+n.slice(1);a--;)if((o=e[a]+i)in t)return o;return n}(t))}function o(e,n,o){n=t(n),e.style[n]=o}return function(e,n){var t,a,i=arguments;if(2==i.length)for(t in n)void 0!==(a=n[t])&&n.hasOwnProperty(t)&&o(e,t,a);else o(e,i[1],i[2])}}();function l(e,n){return("string"==typeof e?e:u(e)).indexOf(" "+n+" ")>=0}function c(e,n){var t=u(e),o=t+n;l(t,n)||(e.className=o.substring(1))}function d(e,n){var t,o=u(e);l(e,n)&&(t=o.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function p(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?o.call(n,t,n,e):o)||(e.exports=a)},function(e,n,t){"use strict";var o=t(2),a=t(60).map,i=t(75),r=t(35),s=i("map"),l=r("map");o({target:"Array",proto:!0,forced:!s||!l},{map:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){var o=t(2),a=t(21),i=t(108);o({target:"Object",stat:!0,forced:t(1)((function(){i(1)}))},{keys:function(e){return i(a(e))}})},function(e,n,t){"use strict";var o,a,i=t(215),r=t(221),s=RegExp.prototype.exec,l=String.prototype.replace,c=s,d=(o=/a/,a=/b*/g,s.call(o,"a"),s.call(a,"a"),0!==o.lastIndex||0!==a.lastIndex),u=r.UNSUPPORTED_Y||r.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(d||p||u)&&(c=function(e){var n,t,o,a,r=this,c=u&&r.sticky,h=i.call(r),m=r.source,g=0,f=e;return c&&(-1===(h=h.replace("y","")).indexOf("g")&&(h+="g"),f=String(e).slice(r.lastIndex),r.lastIndex>0&&(!r.multiline||r.multiline&&"\n"!==e[r.lastIndex-1])&&(m="(?: "+m+")",f=" "+f,g++),t=new RegExp("^(?:"+m+")",h)),p&&(t=new RegExp("^"+m+"$(?!\\s)",h)),d&&(n=r.lastIndex),o=s.call(c?t:r,f),c?o?(o.input=o.input.slice(g),o[0]=o[0].slice(g),o.index=r.lastIndex,r.lastIndex+=o[0].length):r.lastIndex=0:d&&o&&(r.lastIndex=r.global?o.index+o[0].length:n),p&&o&&o.length>1&&l.call(o[0],t,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o}),e.exports=c},function(e,n,t){var o=t(9),a=t(10).f,i=Function.prototype,r=i.toString,s=/^\s*function ([^ (]*)/;o&&!("name"in i)&&a(i,"name",{configurable:!0,get:function(){try{return r.call(this).match(s)[1]}catch(e){return""}}})},function(e,n){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},function(e,n,t){var o=t(5),a=t(88),i=o["__core-js_shared__"]||a("__core-js_shared__",{});e.exports=i},function(e,n,t){var o=t(5),a=t(38);e.exports=function(e,n){try{a(o,e,n)}catch(t){o[e]=n}return n}},function(e,n,t){var o=t(5),a=t(27),i=o.document,r=a(i)&&a(i.createElement);e.exports=function(e){return r?i.createElement(e):{}}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){var o=t(40);e.exports=o("navigator","userAgent")||""},function(e,n){e.exports={}},function(e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){var o=t(131),a=t(134),i=o("keys");e.exports=function(e){return i[e]||(i[e]=a(e))}},function(e,n,t){var o,a,i,r=t(231),s=t(5),l=t(27),c=t(38),d=t(20),u=t(87),p=t(94),h=t(92),m=s.WeakMap;if(r){var g=u.state||(u.state=new m),f=g.get,y=g.has,b=g.set;o=function(e,n){return n.facade=e,b.call(g,e,n),n},a=function(e){return f.call(g,e)||{}},i=function(e){return y.call(g,e)}}else{var v=p("state");h[v]=!0,o=function(e,n){return n.facade=e,c(e,v,n),n},a=function(e){return d(e,v)?e[v]:{}},i=function(e){return d(e,v)}}e.exports={set:o,get:a,has:i,enforce:function(e){return i(e)?a(e):o(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=a(n)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){var o=t(87),a=Function.toString;"function"!=typeof o.inspectSource&&(o.inspectSource=function(e){return a.call(e)}),e.exports=o.inspectSource},function(e,n,t){var o=t(26),a=t(143),i=t(90),r=t(65),s=t(133),l=t(20),c=t(132),d=Object.getOwnPropertyDescriptor;n.f=o?d:function(e,n){if(e=r(e),n=s(n,!0),c)try{return d(e,n)}catch(e){}if(l(e,n))return i(!a.f.call(e,n),e[n])}},function(e,n,t){var o=t(39).f,a=t(20),i=t(11)("toStringTag");e.exports=function(e,n,t){e&&!a(e=t?e:e.prototype,i)&&o(e,i,{configurable:!0,value:n})}},function(e,n,t){var o={};o[t(3)("toStringTag")]="z",e.exports="[object z]"===String(o)},function(e,n,t){var o=t(48),a=t(101);(e.exports=function(e,n){return a[e]||(a[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.7.0",mode:o?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,n,t){var o=t(4),a=t(102),i=o["__core-js_shared__"]||a("__core-js_shared__",{});e.exports=i},function(e,n,t){var o=t(4),a=t(17);e.exports=function(e,n){try{a(o,e,n)}catch(t){o[e]=n}return n}},function(e,n,t){var o=t(1);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){return!String(Symbol())}))},function(e,n,t){var o=function(e){"use strict";var n=Object.prototype,t=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",r=o.toStringTag||"@@toStringTag";function s(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{s({},"")}catch(e){s=function(e,n,t){return e[n]=t}}function l(e,n,t,o){var a=n&&n.prototype instanceof u?n:u,i=Object.create(a.prototype),r=new A(o||[]);return i._invoke=function(e,n,t){var o="suspendedStart";return function(a,i){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===a)throw i;return C()}for(t.method=a,t.arg=i;;){var r=t.delegate;if(r){var s=w(r,t);if(s){if(s===d)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===o)throw o="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);o="executing";var l=c(e,n,t);if("normal"===l.type){if(o=t.done?"completed":"suspendedYield",l.arg===d)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(o="completed",t.method="throw",t.arg=l.arg)}}}(e,t,r),i}function c(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var d={};function u(){}function p(){}function h(){}var m={};m[a]=function(){return this};var g=Object.getPrototypeOf,f=g&&g(g(T([])));f&&f!==n&&t.call(f,a)&&(m=f);var y=h.prototype=u.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(n){s(e,n,(function(e){return this._invoke(n,e)}))}))}function v(e,n){var o;this._invoke=function(a,i){function r(){return new n((function(o,r){!function o(a,i,r,s){var l=c(e[a],e,i);if("throw"!==l.type){var d=l.arg,u=d.value;return u&&"object"==typeof u&&t.call(u,"__await")?n.resolve(u.__await).then((function(e){o("next",e,r,s)}),(function(e){o("throw",e,r,s)})):n.resolve(u).then((function(e){d.value=e,r(d)}),(function(e){return o("throw",e,r,s)}))}s(l.arg)}(a,i,o,r)}))}return o=o?o.then(r,r):r()}}function w(e,n){var t=e.iterator[n.method];if(void 0===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=void 0,w(e,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=c(t,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,d;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,d):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function k(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function E(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function T(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(t.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=y.constructor=h,h.constructor=p,p.displayName=s(h,r,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===p||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,s(e,r,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},b(v.prototype),v.prototype[i]=function(){return this},e.AsyncIterator=v,e.async=function(n,t,o,a,i){void 0===i&&(i=Promise);var r=new v(l(n,t,o,a),i);return e.isGeneratorFunction(t)?r:r.next().then((function(e){return e.done?e.value:r.next()}))},b(y),s(y,r,"Generator"),y[a]=function(){return this},y.toString=function(){return"[object Generator]"},e.keys=function(e){var n=[];for(var t in e)n.push(t);return n.reverse(),function t(){for(;n.length;){var o=n.pop();if(o in e)return t.value=o,t.done=!1,t}return t.done=!0,t}},e.values=T,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(t,o){return r.type="throw",r.arg=e,n.next=t,o&&(n.method="next",n.arg=void 0),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],r=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,n){for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o];if(a.tryLoc<=this.prev&&t.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var r=i?i.completion:{};return r.type=e,r.arg=n,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(r)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),d},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),E(t),d}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var o=t.completion;if("throw"===o.type){var a=o.arg;E(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:T(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),d}},e}(e.exports);try{regeneratorRuntime=o}catch(e){Function("r","regeneratorRuntime = r")(o)}},function(e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){var o,a,i=t(4),r=t(260),s=i.process,l=s&&s.versions,c=l&&l.v8;c?a=(o=c.split("."))[0]+o[1]:r&&(!(o=r.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=r.match(/Chrome\/(\d+)/))&&(a=o[1]),e.exports=a&&+a},function(e,n,t){var o=t(7),a=t(21),i=t(70),r=t(172),s=i("IE_PROTO"),l=Object.prototype;e.exports=r?Object.getPrototypeOf:function(e){return e=a(e),o(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,n,t){var o=t(165),a=t(105);e.exports=Object.keys||function(e){return o(e,a)}},function(e,n,t){var o=t(10).f,a=t(7),i=t(3)("toStringTag");e.exports=function(e,n,t){e&&!a(e=t?e:e.prototype,i)&&o(e,i,{configurable:!0,value:n})}},function(e,n,t){"use strict";var o=t(1);e.exports=function(e,n){var t=[][e];return!!t&&o((function(){t.call(null,n||function(){throw 1},1)}))}},function(e,n,t){var o=t(281),a=t(37),i=Object.prototype,r=i.hasOwnProperty,s=i.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return a(e)&&r.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,n,t){var o=t(30)(t(22),"Map");e.exports=o},function(e,n,t){var o=t(44),a=t(55);e.exports=function(e){if(!a(e))return!1;var n=o(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n,t){var o=t(300),a=t(307),i=t(309),r=t(310),s=t(311);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n,t){var o=t(325),a=t(331),i=t(196);e.exports=function(e){return i(e)?o(e):a(e)}},function(e,n,t){(function(e){var o=t(22),a=t(327),i=n&&!n.nodeType&&n,r=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=r&&r.exports===i?o.Buffer:void 0,l=(s?s.isBuffer:void 0)||a;e.exports=l}).call(this,t(127)(e))},function(e,n,t){var o=t(328),a=t(329),i=t(330),r=i&&i.isTypedArray,s=r?a(r):o;e.exports=s},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var o=t(15),a=t(121),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,n){if(o(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!a(e))||(r.test(e)||!i.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var o=t(44),a=t(37);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==o(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){"use strict";var o=t(2),a=t(1),i=t(73),r=t(6),s=t(21),l=t(23),c=t(74),d=t(176),u=t(75),p=t(3),h=t(106),m=p("isConcatSpreadable"),g=h>=51||!a((function(){var e=[];return e[m]=!1,e.concat()[0]!==e})),f=u("concat"),y=function(e){if(!r(e))return!1;var n=e[m];return void 0!==n?!!n:i(e)};o({target:"Array",proto:!0,forced:!g||!f},{concat:function(e){var n,t,o,a,i,r=s(this),u=d(r,0),p=0;for(n=-1,o=arguments.length;n<o;n++)if(y(i=-1===n?r:arguments[n])){if(p+(a=l(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(t=0;t<a;t++,p++)t in i&&c(u,p,i[t])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");c(u,p++,i)}return u.length=p,u}})},function(e,n,t){var o=t(3),a=t(52),i=t(10),r=o("unscopables"),s=Array.prototype;null==s[r]&&i.f(s,r,{configurable:!0,value:a(null)}),e.exports=function(e){s[r][e]=!0}},function(e,n,t){var o=t(1),a=/#|\.prototype\./,i=function(e,n){var t=s[r(e)];return t==c||t!=l&&("function"==typeof n?o(n):!!n)},r=i.normalize=function(e){return String(e).replace(a,".").toLowerCase()},s=i.data={},l=i.NATIVE="N",c=i.POLYFILL="P";e.exports=i},function(e,n,t){var o=t(2),a=t(273);o({target:"Array",stat:!0,forced:!t(278)((function(e){Array.from(e)}))},{from:a})},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));t(83),t(25),t(33),t(373),t(59),t(177);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}},function(e,n,t){var o=t(16),a=t(86),i="".split;e.exports=o((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?i.call(e,""):Object(e)}:Object},function(e,n){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,n,t){var o=t(45),a=t(87);(e.exports=function(e,n){return a[e]||(a[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.9.1",mode:o?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(e,n,t){var o=t(26),a=t(16),i=t(89);e.exports=!o&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){var o=t(27);e.exports=function(e,n){if(!o(e))return e;var t,a;if(n&&"function"==typeof(t=e.toString)&&!o(a=t.call(e)))return a;if("function"==typeof(t=e.valueOf)&&!o(a=t.call(e)))return a;if(!n&&"function"==typeof(t=e.toString)&&!o(a=t.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,n){var t=0,o=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++t+o).toString(36)}},function(e,n,t){var o=t(66),a=t(136),i=t(16);e.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(o?38===a:a>37&&a<41)}))},function(e,n,t){var o,a,i=t(5),r=t(91),s=i.process,l=s&&s.versions,c=l&&l.v8;c?a=(o=c.split("."))[0]+o[1]:r&&(!(o=r.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=r.match(/Chrome\/(\d+)/))&&(a=o[1]),e.exports=a&&+a},function(e,n,t){var o,a=t(19),i=t(228),r=t(93),s=t(92),l=t(142),c=t(89),d=t(94),u=d("IE_PROTO"),p=function(){},h=function(e){return"<script>"+e+"<\/script>"},m=function(){try{o=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,n;m=o?function(e){e.write(h("")),e.close();var n=e.parentWindow.Object;return e=null,n}(o):((n=c("iframe")).style.display="none",l.appendChild(n),n.src=String("javascript:"),(e=n.contentWindow.document).open(),e.write(h("document.F=Object")),e.close(),e.F);for(var t=r.length;t--;)delete m.prototype[r[t]];return m()};s[u]=!0,e.exports=Object.create||function(e,n){var t;return null!==e?(p.prototype=a(e),t=new p,p.prototype=null,t[u]=e):t=m(),void 0===n?t:i(t,n)}},function(e,n,t){var o=t(139),a=t(93);e.exports=Object.keys||function(e){return o(e,a)}},function(e,n,t){var o=t(20),a=t(65),i=t(229).indexOf,r=t(92);e.exports=function(e,n){var t,s=a(e),l=0,c=[];for(t in s)!o(r,t)&&o(s,t)&&c.push(t);for(;n.length>l;)o(s,t=n[l++])&&(~i(c,t)||c.push(t));return c}},function(e,n,t){var o=t(141),a=Math.min;e.exports=function(e){return e>0?a(o(e),9007199254740991):0}},function(e,n){var t=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:t)(e)}},function(e,n,t){var o=t(40);e.exports=o("document","documentElement")},function(e,n,t){"use strict";var o={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!o.call({1:2},1);n.f=i?function(e){var n=a(this,e);return!!n&&n.enumerable}:o},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n,t){var o=t(16),a=/#|\.prototype\./,i=function(e,n){var t=s[r(e)];return t==c||t!=l&&("function"==typeof n?o(n):!!n)},r=i.normalize=function(e){return String(e).replace(a,".").toLowerCase()},s=i.data={},l=i.NATIVE="N",c=i.POLYFILL="P";e.exports=i},function(e,n,t){"use strict";var o,a,i,r=t(16),s=t(147),l=t(38),c=t(20),d=t(11),u=t(45),p=d("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(a=s(s(i)))!==Object.prototype&&(o=a):h=!0);var m=null==o||r((function(){var e={};return o[p].call(e)!==e}));m&&(o={}),u&&!m||c(o,p)||l(o,p,(function(){return this})),e.exports={IteratorPrototype:o,BUGGY_SAFARI_ITERATORS:h}},function(e,n,t){var o=t(20),a=t(148),i=t(94),r=t(237),s=i("IE_PROTO"),l=Object.prototype;e.exports=r?Object.getPrototypeOf:function(e){return e=a(e),o(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,n,t){var o=t(130);e.exports=function(e){return Object(o(e))}},function(e,n,t){var o=t(5);e.exports=o.Promise},function(e,n,t){var o=t(68);e.exports=function(e,n,t){if(o(e),void 0===n)return e;switch(t){case 0:return function(){return e.call(n)};case 1:return function(t){return e.call(n,t)};case 2:return function(t,o){return e.call(n,t,o)};case 3:return function(t,o,a){return e.call(n,t,o,a)}}return function(){return e.apply(n,arguments)}}},function(e,n,t){var o=t(19),a=t(68),i=t(11)("species");e.exports=function(e,n){var t,r=o(e).constructor;return void 0===r||null==(t=o(r)[i])?n:a(t)}},function(e,n,t){var o,a,i,r=t(5),s=t(16),l=t(150),c=t(142),d=t(89),u=t(153),p=t(66),h=r.location,m=r.setImmediate,g=r.clearImmediate,f=r.process,y=r.MessageChannel,b=r.Dispatch,v=0,w={},k=function(e){if(w.hasOwnProperty(e)){var n=w[e];delete w[e],n()}},E=function(e){return function(){k(e)}},A=function(e){k(e.data)},T=function(e){r.postMessage(e+"",h.protocol+"//"+h.host)};m&&g||(m=function(e){for(var n=[],t=1;arguments.length>t;)n.push(arguments[t++]);return w[++v]=function(){("function"==typeof e?e:Function(e)).apply(void 0,n)},o(v),v},g=function(e){delete w[e]},p?o=function(e){f.nextTick(E(e))}:b&&b.now?o=function(e){b.now(E(e))}:y&&!u?(i=(a=new y).port2,a.port1.onmessage=A,o=l(i.postMessage,i,1)):r.addEventListener&&"function"==typeof postMessage&&!r.importScripts&&h&&"file:"!==h.protocol&&!s(T)?(o=T,r.addEventListener("message",A,!1)):o="onreadystatechange"in d("script")?function(e){c.appendChild(d("script")).onreadystatechange=function(){c.removeChild(this),k(e)}}:function(e){setTimeout(E(e),0)}),e.exports={set:m,clear:g}},function(e,n,t){var o=t(91);e.exports=/(iphone|ipod|ipad).*applewebkit/i.test(o)},function(e,n,t){var o=t(19),a=t(27),i=t(155);e.exports=function(e,n){if(o(e),a(n)&&n.constructor===e)return n;var t=i.f(e);return(0,t.resolve)(n),t.promise}},function(e,n,t){"use strict";var o=t(68),a=function(e){var n,t;this.promise=new e((function(e,o){if(void 0!==n||void 0!==t)throw TypeError("Bad Promise constructor");n=e,t=o})),this.resolve=o(n),this.reject=o(t)};e.exports.f=function(e){return new a(e)}},function(e,n,t){var o=t(9),a=t(1),i=t(157);e.exports=!o&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){var o=t(4),a=t(6),i=o.document,r=a(i)&&a(i.createElement);e.exports=function(e){return r?i.createElement(e):{}}},function(e,n,t){var o=t(103);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){var o=t(101),a=Function.toString;"function"!=typeof o.inspectSource&&(o.inspectSource=function(e){return a.call(e)}),e.exports=o.inspectSource},function(e,n,t){var o=t(99),a=t(28),i=t(3)("toStringTag"),r="Arguments"==a(function(){return arguments}());e.exports=o?a:function(e){var n,t,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=Object(e),i))?t:r?a(n):"Object"==(o=a(n))&&"function"==typeof n.callee?"Arguments":o}},function(e,n,t){"use strict";var o={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!o.call({1:2},1);n.f=i?function(e){var n=a(this,e);return!!n&&n.enumerable}:o},function(e,n,t){var o=t(7),a=t(163),i=t(29),r=t(10);e.exports=function(e,n){for(var t=a(n),s=r.f,l=i.f,c=0;c<t.length;c++){var d=t[c];o(e,d)||s(e,d,l(n,d))}}},function(e,n,t){var o=t(42),a=t(64),i=t(168),r=t(12);e.exports=o("Reflect","ownKeys")||function(e){var n=a.f(r(e)),t=i.f;return t?n.concat(t(e)):n}},function(e,n,t){var o=t(4);e.exports=o},function(e,n,t){var o=t(7),a=t(18),i=t(166).indexOf,r=t(51);e.exports=function(e,n){var t,s=a(e),l=0,c=[];for(t in s)!o(r,t)&&o(s,t)&&c.push(t);for(;n.length>l;)o(s,t=n[l++])&&(~i(c,t)||c.push(t));return c}},function(e,n,t){var o=t(18),a=t(23),i=t(167),r=function(e){return function(n,t,r){var s,l=o(n),c=a(l.length),d=i(r,c);if(e&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((e||d in l)&&l[d]===t)return e||d||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){var o=t(72),a=Math.max,i=Math.min;e.exports=function(e,n){var t=o(e);return t<0?a(t+n,0):i(t,n)}},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n,t){var o=t(72),a=t(24),i=function(e){return function(n,t){var i,r,s=String(a(n)),l=o(t),c=s.length;return l<0||l>=c?e?"":void 0:(i=s.charCodeAt(l))<55296||i>56319||l+1===c||(r=s.charCodeAt(l+1))<56320||r>57343?e?s.charAt(l):i:e?s.slice(l,l+2):r-56320+(i-55296<<10)+65536}};e.exports={codeAt:i(!1),charAt:i(!0)}},function(e,n,t){"use strict";var o=t(2),a=t(261),i=t(107),r=t(173),s=t(109),l=t(17),c=t(34),d=t(3),u=t(48),p=t(53),h=t(171),m=h.IteratorPrototype,g=h.BUGGY_SAFARI_ITERATORS,f=d("iterator"),y=function(){return this};e.exports=function(e,n,t,d,h,b,v){a(t,n,d);var w,k,E,A=function(e){if(e===h&&x)return x;if(!g&&e in S)return S[e];switch(e){case"keys":case"values":case"entries":return function(){return new t(this,e)}}return function(){return new t(this)}},T=n+" Iterator",C=!1,S=e.prototype,P=S[f]||S["@@iterator"]||h&&S[h],x=!g&&P||A(h),I="Array"==n&&S.entries||P;if(I&&(w=i(I.call(new e)),m!==Object.prototype&&w.next&&(u||i(w)===m||(r?r(w,m):"function"!=typeof w[f]&&l(w,f,y)),s(w,T,!0,!0),u&&(p[T]=y))),"values"==h&&P&&"values"!==P.name&&(C=!0,x=function(){return P.call(this)}),u&&!v||S[f]===x||l(S,f,x),p[n]=x,h)if(k={values:A("values"),keys:b?x:A("keys"),entries:A("entries")},v)for(E in k)(g||C||!(E in S))&&c(S,E,k[E]);else o({target:n,proto:!0,forced:g||C},k);return k}},function(e,n,t){"use strict";var o,a,i,r=t(107),s=t(17),l=t(7),c=t(3),d=t(48),u=c("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(a=r(r(i)))!==Object.prototype&&(o=a):p=!0),null==o&&(o={}),d||l(o,u)||s(o,u,(function(){return this})),e.exports={IteratorPrototype:o,BUGGY_SAFARI_ITERATORS:p}},function(e,n,t){var o=t(1);e.exports=!o((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,n,t){var o=t(12),a=t(264);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),n=t instanceof Array}catch(e){}return function(t,i){return o(t),a(i),n?e.call(t,i):t.__proto__=i,t}}():void 0)},function(e,n){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,n,t){var o=t(61);e.exports=function(e,n,t){if(o(e),void 0===n)return e;switch(t){case 0:return function(){return e.call(n)};case 1:return function(t){return e.call(n,t)};case 2:return function(t,o){return e.call(n,t,o)};case 3:return function(t,o,a){return e.call(n,t,o,a)}}return function(){return e.apply(n,arguments)}}},function(e,n,t){var o=t(6),a=t(73),i=t(3)("species");e.exports=function(e,n){var t;return a(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!a(t.prototype)?o(t)&&null===(t=t[i])&&(t=void 0):t=void 0),new(void 0===t?Array:t)(0===n?0:n)}},function(e,n,t){var o=t(2),a=t(9),i=t(163),r=t(18),s=t(29),l=t(74);o({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(e){for(var n,t,o=r(e),a=s.f,c=i(o),d={},u=0;c.length>u;)void 0!==(t=a(o,n=c[u++]))&&l(d,n,t);return d}})},function(e,n,t){var o=t(2),a=t(1),i=t(21),r=t(107),s=t(172);o({target:"Object",stat:!0,forced:a((function(){r(1)})),sham:!s},{getPrototypeOf:function(e){return r(i(e))}})},function(e,n,t){var o=t(212);e.exports=function(e){if(o(e))throw TypeError("The method doesn't accept regular expressions");return e}},function(e,n,t){var o=t(3)("match");e.exports=function(e){var n=/./;try{"/./"[e](n)}catch(t){try{return n[o]=!1,"/./"[e](n)}catch(e){}}return!1}},function(e,n,t){var o=t(1);e.exports=!o((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,n,t){var o=t(3);n.f=o},function(e,n,t){var o=t(164),a=t(7),i=t(182),r=t(10).f;e.exports=function(e){var n=o.Symbol||(o.Symbol={});a(n,e)||r(n,e,{value:i.f(e)})}},function(e,n){e.exports=function(e,n){for(var t=-1,o=n.length,a=e.length;++t<o;)e[a+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var o=t(284),a=t(339),i=t(122),r=t(15),s=t(350);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?r(e)?a(e[0],e[1]):o(e):s(e)}},function(e,n,t){var o=t(76),a=t(291),i=t(292),r=t(293),s=t(294),l=t(295);function c(e){var n=this.__data__=new o(e);this.size=n.size}c.prototype.clear=a,c.prototype.delete=i,c.prototype.get=r,c.prototype.has=s,c.prototype.set=l,e.exports=c},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var o=t(312),a=t(37);e.exports=function e(n,t,i,r,s){return n===t||(null==n||null==t||!a(n)&&!a(t)?n!=n&&t!=t:o(n,t,i,r,e,s))}},function(e,n,t){var o=t(192),a=t(315),i=t(193);e.exports=function(e,n,t,r,s,l){var c=1&t,d=e.length,u=n.length;if(d!=u&&!(c&&u>d))return!1;var p=l.get(e),h=l.get(n);if(p&&h)return p==n&&h==e;var m=-1,g=!0,f=2&t?new o:void 0;for(l.set(e,n),l.set(n,e);++m<d;){var y=e[m],b=n[m];if(r)var v=c?r(b,y,m,n,e,l):r(y,b,m,e,n,l);if(void 0!==v){if(v)continue;g=!1;break}if(f){if(!a(n,(function(e,n){if(!i(f,n)&&(y===e||s(y,e,t,r,l)))return f.push(n)}))){g=!1;break}}else if(y!==b&&!s(y,b,t,r,l)){g=!1;break}}return l.delete(e),l.delete(n),g}},function(e,n,t){var o=t(114),a=t(313),i=t(314);function r(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new o;++n<t;)this.add(e[n])}r.prototype.add=r.prototype.push=a,r.prototype.has=i,e.exports=r},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var o=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==o||"symbol"!=o&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var o=t(113),a=t(119);e.exports=function(e){return null!=e&&a(e.length)&&!o(e)}},function(e,n,t){var o=t(30)(t(22),"Set");e.exports=o},function(e,n,t){var o=t(55);e.exports=function(e){return e==e&&!o(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var o=t(201),a=t(80);e.exports=function(e,n){for(var t=0,i=(n=o(n,e)).length;null!=e&&t<i;)e=e[a(n[t++])];return t&&t==i?e:void 0}},function(e,n,t){var o=t(15),a=t(120),i=t(341),r=t(344);e.exports=function(e,n){return o(e)?e:a(e,n)?[e]:i(r(e))}},function(e,n,t){},function(e,n,t){var o=t(2),a=t(42),i=t(61),r=t(12),s=t(6),l=t(52),c=t(385),d=t(1),u=a("Reflect","construct"),p=d((function(){function e(){}return!(u((function(){}),[],e)instanceof e)})),h=!d((function(){u((function(){}))})),m=p||h;o({target:"Reflect",stat:!0,forced:m,sham:m},{construct:function(e,n){i(e),r(n);var t=arguments.length<3?e:i(arguments[2]);if(h&&!p)return u(e,n,t);if(e==t){switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3])}var o=[null];return o.push.apply(o,n),new(c.apply(e,o))}var a=t.prototype,d=l(s(a)?a:Object.prototype),m=Function.apply.call(e,d,n);return s(m)?m:d}})},function(e,n,t){},function(e,n,t){},function(e,n,t){var o=t(279),a=t(186),i=t(353),r=t(361),s=t(370),l=t(219),c=i((function(e){var n=l(e);return s(n)&&(n=void 0),r(o(e,1,s,!0),a(n,2))}));e.exports=c},function(e,n){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,r=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),d=Object.prototype.toString,u=Math.max,p=Math.min,h=function(){return c.Date.now()};function m(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function g(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(m(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=m(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var s=a.test(e);return s||i.test(e)?r(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,n,t){var o,a,i,r,s,l,c=0,d=!1,f=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(n){var t=o,i=a;return o=a=void 0,c=n,r=e.apply(i,t)}function v(e){return c=e,s=setTimeout(k,n),d?b(e):r}function w(e){var t=e-l;return void 0===l||t>=n||t<0||f&&e-c>=i}function k(){var e=h();if(w(e))return E(e);s=setTimeout(k,function(e){var t=n-(e-l);return f?p(t,i-(e-c)):t}(e))}function E(e){return s=void 0,y&&o?b(e):(o=a=void 0,r)}function A(){var e=h(),t=w(e);if(o=arguments,a=this,l=e,t){if(void 0===s)return v(l);if(f)return s=setTimeout(k,n),b(l)}return void 0===s&&(s=setTimeout(k,n)),r}return n=g(n)||0,m(t)&&(d=!!t.leading,i=(f="maxWait"in t)?u(g(t.maxWait)||0,n):i,y="trailing"in t?!!t.trailing:y),A.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=a=s=void 0},A.flush=function(){return void 0===s?r:E(h())},A}},function(e,n,t){function o(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=o=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=o=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),o(n)}t(25),t(36),t(8),t(43),t(13),t(14),e.exports=o,e.exports.default=e.exports,e.exports.__esModule=!0},function(e,n,t){"use strict";t(32);var o=t(34),a=t(1),i=t(3),r=t(84),s=t(17),l=i("species"),c=!a((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),d="$0"==="a".replace(/./,"$0"),u=i("replace"),p=!!/./[u]&&""===/./[u]("a","$0"),h=!a((function(){var e=/(?:)/,n=e.exec;e.exec=function(){return n.apply(this,arguments)};var t="ab".split(e);return 2!==t.length||"a"!==t[0]||"b"!==t[1]}));e.exports=function(e,n,t,u){var m=i(e),g=!a((function(){var n={};return n[m]=function(){return 7},7!=""[e](n)})),f=g&&!a((function(){var n=!1,t=/a/;return"split"===e&&((t={}).constructor={},t.constructor[l]=function(){return t},t.flags="",t[m]=/./[m]),t.exec=function(){return n=!0,null},t[m](""),!n}));if(!g||!f||"replace"===e&&(!c||!d||p)||"split"===e&&!h){var y=/./[m],b=t(m,""[e],(function(e,n,t,o,a){return n.exec===r?g&&!a?{done:!0,value:y.call(n,t,o)}:{done:!0,value:e.call(t,n,o)}:{done:!1}}),{REPLACE_KEEPS_$0:d,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),v=b[0],w=b[1];o(String.prototype,e,v),o(RegExp.prototype,m,2==n?function(e,n){return w.call(e,this,n)}:function(e){return w.call(e,this)})}u&&s(RegExp.prototype[m],"sham",!0)}},function(e,n,t){var o=t(28),a=t(84);e.exports=function(e,n){var t=e.exec;if("function"==typeof t){var i=t.call(e,n);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==o(e))throw TypeError("RegExp#exec called on incompatible receiver");return a.call(e,n)}},function(e,n,t){"use strict";var o=t(169).charAt;e.exports=function(e,n,t){return n+(t?o(e,n).length:1)}},function(e,n,t){var o=t(6),a=t(28),i=t(3)("match");e.exports=function(e){var n;return o(e)&&(void 0!==(n=e[i])?!!n:"RegExp"==a(e))}},function(e,n,t){var o=t(24),a="["+t(214)+"]",i=RegExp("^"+a+a+"*"),r=RegExp(a+a+"*$"),s=function(e){return function(n){var t=String(o(n));return 1&e&&(t=t.replace(i,"")),2&e&&(t=t.replace(r,"")),t}};e.exports={start:s(1),end:s(2),trim:s(3)}},function(e,n){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(e,n,t){"use strict";var o=t(12);e.exports=function(){var e=o(this),n="";return e.global&&(n+="g"),e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),e.dotAll&&(n+="s"),e.unicode&&(n+="u"),e.sticky&&(n+="y"),n}},function(e,n,t){"use strict";var o=t(2),a=t(166).includes,i=t(124);o({target:"Array",proto:!0,forced:!t(35)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(e,n,t){"use strict";var o=t(2),a=t(179),i=t(24);o({target:"String",proto:!0,forced:!t(180)("includes")},{includes:function(e){return!!~String(i(this)).indexOf(a(e),arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var o=t(2),a=t(71),i=t(18),r=t(110),s=[].join,l=a!=Object,c=r("join",",");o({target:"Array",proto:!0,forced:l||!c},{join:function(e){return s.call(i(this),void 0===e?",":e)}})},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){"use strict";var o,a=t(2),i=t(29).f,r=t(23),s=t(179),l=t(24),c=t(180),d=t(48),u="".startsWith,p=Math.min,h=c("startsWith");a({target:"String",proto:!0,forced:!!(d||h||(o=i(String.prototype,"startsWith"),!o||o.writable))&&!h},{startsWith:function(e){var n=String(l(this));s(e);var t=r(p(arguments.length>1?arguments[1]:void 0,n.length)),o=String(e);return u?u.call(n,o,t):n.slice(t,t+o.length)===o}})},function(e,n,t){"use strict";var o=t(1);function a(e,n){return RegExp(e,n)}n.UNSUPPORTED_Y=o((function(){var e=a("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),n.BROKEN_CARET=o((function(){var e=a("^r","gy");return e.lastIndex=2,null!=e.exec("str")}))},function(e,n,t){var o=t(6),a=t(173);e.exports=function(e,n,t){var i,r;return a&&"function"==typeof(i=n.constructor)&&i!==t&&o(r=i.prototype)&&r!==t.prototype&&a(e,r),e}},function(e,n,t){e.exports=t(388)},function(e,n,t){"use strict";var o=t(65),a=t(225),i=t(46),r=t(95),s=t(232),l=r.set,c=r.getterFor("Array Iterator");e.exports=s(Array,"Array",(function(e,n){l(this,{type:"Array Iterator",target:o(e),index:0,kind:n})}),(function(){var e=c(this),n=e.target,t=e.kind,o=e.index++;return!n||o>=n.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:o,done:!1}:"values"==t?{value:n[o],done:!1}:{value:[o,n[o]],done:!1}}),"values"),i.Arguments=i.Array,a("keys"),a("values"),a("entries")},function(e,n,t){var o=t(11),a=t(137),i=t(39),r=o("unscopables"),s=Array.prototype;null==s[r]&&i.f(s,r,{configurable:!0,value:a(null)}),e.exports=function(e){s[r][e]=!0}},function(e,n,t){var o=t(5);e.exports=o},function(e,n,t){var o=t(135);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){var o=t(26),a=t(39),i=t(19),r=t(138);e.exports=o?Object.defineProperties:function(e,n){i(e);for(var t,o=r(n),s=o.length,l=0;s>l;)a.f(e,t=o[l++],n[t]);return e}},function(e,n,t){var o=t(65),a=t(140),i=t(230),r=function(e){return function(n,t,r){var s,l=o(n),c=a(l.length),d=i(r,c);if(e&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((e||d in l)&&l[d]===t)return e||d||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){var o=t(141),a=Math.max,i=Math.min;e.exports=function(e,n){var t=o(e);return t<0?a(t+n,0):i(t,n)}},function(e,n,t){var o=t(5),a=t(96),i=o.WeakMap;e.exports="function"==typeof i&&/native code/.test(a(i))},function(e,n,t){"use strict";var o=t(67),a=t(236),i=t(147),r=t(238),s=t(98),l=t(38),c=t(47),d=t(11),u=t(45),p=t(46),h=t(146),m=h.IteratorPrototype,g=h.BUGGY_SAFARI_ITERATORS,f=d("iterator"),y=function(){return this};e.exports=function(e,n,t,d,h,b,v){a(t,n,d);var w,k,E,A=function(e){if(e===h&&x)return x;if(!g&&e in S)return S[e];switch(e){case"keys":case"values":case"entries":return function(){return new t(this,e)}}return function(){return new t(this)}},T=n+" Iterator",C=!1,S=e.prototype,P=S[f]||S["@@iterator"]||h&&S[h],x=!g&&P||A(h),I="Array"==n&&S.entries||P;if(I&&(w=i(I.call(new e)),m!==Object.prototype&&w.next&&(u||i(w)===m||(r?r(w,m):"function"!=typeof w[f]&&l(w,f,y)),s(w,T,!0,!0),u&&(p[T]=y))),"values"==h&&P&&"values"!==P.name&&(C=!0,x=function(){return P.call(this)}),u&&!v||S[f]===x||l(S,f,x),p[n]=x,h)if(k={values:A("values"),keys:b?x:A("keys"),entries:A("entries")},v)for(E in k)(g||C||!(E in S))&&c(S,E,k[E]);else o({target:n,proto:!0,forced:g||C},k);return k}},function(e,n,t){var o=t(20),a=t(234),i=t(97),r=t(39);e.exports=function(e,n){for(var t=a(n),s=r.f,l=i.f,c=0;c<t.length;c++){var d=t[c];o(e,d)||s(e,d,l(n,d))}}},function(e,n,t){var o=t(40),a=t(235),i=t(144),r=t(19);e.exports=o("Reflect","ownKeys")||function(e){var n=a.f(r(e)),t=i.f;return t?n.concat(t(e)):n}},function(e,n,t){var o=t(139),a=t(93).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,a)}},function(e,n,t){"use strict";var o=t(146).IteratorPrototype,a=t(137),i=t(90),r=t(98),s=t(46),l=function(){return this};e.exports=function(e,n,t){var c=n+" Iterator";return e.prototype=a(o,{next:i(1,t)}),r(e,c,!1,!0),s[c]=l,e}},function(e,n,t){var o=t(16);e.exports=!o((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,n,t){var o=t(19),a=t(239);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),n=t instanceof Array}catch(e){}return function(t,i){return o(t),a(i),n?e.call(t,i):t.__proto__=i,t}}():void 0)},function(e,n,t){var o=t(27);e.exports=function(e){if(!o(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,n,t){"use strict";var o,a,i,r,s=t(67),l=t(45),c=t(5),d=t(40),u=t(149),p=t(47),h=t(241),m=t(98),g=t(242),f=t(27),y=t(68),b=t(243),v=t(96),w=t(244),k=t(250),E=t(151),A=t(152).set,T=t(251),C=t(154),S=t(253),P=t(155),x=t(254),I=t(95),R=t(145),D=t(11),O=t(66),M=t(136),L=D("species"),j="Promise",N=I.get,U=I.set,_=I.getterFor(j),q=u,B=c.TypeError,F=c.document,W=c.process,K=d("fetch"),G=P.f,z=G,H=!!(F&&F.createEvent&&c.dispatchEvent),Y="function"==typeof PromiseRejectionEvent,V=R(j,(function(){if(!(v(q)!==String(q))){if(66===M)return!0;if(!O&&!Y)return!0}if(l&&!q.prototype.finally)return!0;if(M>=51&&/native code/.test(q))return!1;var e=q.resolve(1),n=function(e){e((function(){}),(function(){}))};return(e.constructor={})[L]=n,!(e.then((function(){}))instanceof n)})),J=V||!k((function(e){q.all(e).catch((function(){}))})),$=function(e){var n;return!(!f(e)||"function"!=typeof(n=e.then))&&n},X=function(e,n){if(!e.notified){e.notified=!0;var t=e.reactions;T((function(){for(var o=e.value,a=1==e.state,i=0;t.length>i;){var r,s,l,c=t[i++],d=a?c.ok:c.fail,u=c.resolve,p=c.reject,h=c.domain;try{d?(a||(2===e.rejection&&ne(e),e.rejection=1),!0===d?r=o:(h&&h.enter(),r=d(o),h&&(h.exit(),l=!0)),r===c.promise?p(B("Promise-chain cycle")):(s=$(r))?s.call(r,u,p):u(r)):p(o)}catch(e){h&&!l&&h.exit(),p(e)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&Z(e)}))}},Q=function(e,n,t){var o,a;H?((o=F.createEvent("Event")).promise=n,o.reason=t,o.initEvent(e,!1,!0),c.dispatchEvent(o)):o={promise:n,reason:t},!Y&&(a=c["on"+e])?a(o):"unhandledrejection"===e&&S("Unhandled promise rejection",t)},Z=function(e){A.call(c,(function(){var n,t=e.facade,o=e.value;if(ee(e)&&(n=x((function(){O?W.emit("unhandledRejection",o,t):Q("unhandledrejection",t,o)})),e.rejection=O||ee(e)?2:1,n.error))throw n.value}))},ee=function(e){return 1!==e.rejection&&!e.parent},ne=function(e){A.call(c,(function(){var n=e.facade;O?W.emit("rejectionHandled",n):Q("rejectionhandled",n,e.value)}))},te=function(e,n,t){return function(o){e(n,o,t)}},oe=function(e,n,t){e.done||(e.done=!0,t&&(e=t),e.value=n,e.state=2,X(e,!0))},ae=function(e,n,t){if(!e.done){e.done=!0,t&&(e=t);try{if(e.facade===n)throw B("Promise can't be resolved itself");var o=$(n);o?T((function(){var t={done:!1};try{o.call(n,te(ae,t,e),te(oe,t,e))}catch(n){oe(t,n,e)}})):(e.value=n,e.state=1,X(e,!1))}catch(n){oe({done:!1},n,e)}}};V&&(q=function(e){b(this,q,j),y(e),o.call(this);var n=N(this);try{e(te(ae,n),te(oe,n))}catch(e){oe(n,e)}},(o=function(e){U(this,{type:j,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(q.prototype,{then:function(e,n){var t=_(this),o=G(E(this,q));return o.ok="function"!=typeof e||e,o.fail="function"==typeof n&&n,o.domain=O?W.domain:void 0,t.parent=!0,t.reactions.push(o),0!=t.state&&X(t,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new o,n=N(e);this.promise=e,this.resolve=te(ae,n),this.reject=te(oe,n)},P.f=G=function(e){return e===q||e===i?new a(e):z(e)},l||"function"!=typeof u||(r=u.prototype.then,p(u.prototype,"then",(function(e,n){var t=this;return new q((function(e,n){r.call(t,e,n)})).then(e,n)}),{unsafe:!0}),"function"==typeof K&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return C(q,K.apply(c,arguments))}}))),s({global:!0,wrap:!0,forced:V},{Promise:q}),m(q,j,!1,!0),g(j),i=d(j),s({target:j,stat:!0,forced:V},{reject:function(e){var n=G(this);return n.reject.call(void 0,e),n.promise}}),s({target:j,stat:!0,forced:l||V},{resolve:function(e){return C(l&&this===i?q:this,e)}}),s({target:j,stat:!0,forced:J},{all:function(e){var n=this,t=G(n),o=t.resolve,a=t.reject,i=x((function(){var t=y(n.resolve),i=[],r=0,s=1;w(e,(function(e){var l=r++,c=!1;i.push(void 0),s++,t.call(n,e).then((function(e){c||(c=!0,i[l]=e,--s||o(i))}),a)})),--s||o(i)}));return i.error&&a(i.value),t.promise},race:function(e){var n=this,t=G(n),o=t.reject,a=x((function(){var a=y(n.resolve);w(e,(function(e){a.call(n,e).then(t.resolve,o)}))}));return a.error&&o(a.value),t.promise}})},function(e,n,t){var o=t(47);e.exports=function(e,n,t){for(var a in n)o(e,a,n[a],t);return e}},function(e,n,t){"use strict";var o=t(40),a=t(39),i=t(11),r=t(26),s=i("species");e.exports=function(e){var n=o(e),t=a.f;r&&n&&!n[s]&&t(n,s,{configurable:!0,get:function(){return this}})}},function(e,n){e.exports=function(e,n,t){if(!(e instanceof n))throw TypeError("Incorrect "+(t?t+" ":"")+"invocation");return e}},function(e,n,t){var o=t(19),a=t(245),i=t(140),r=t(150),s=t(246),l=t(249),c=function(e,n){this.stopped=e,this.result=n};e.exports=function(e,n,t){var d,u,p,h,m,g,f,y=t&&t.that,b=!(!t||!t.AS_ENTRIES),v=!(!t||!t.IS_ITERATOR),w=!(!t||!t.INTERRUPTED),k=r(n,y,1+b+w),E=function(e){return d&&l(d),new c(!0,e)},A=function(e){return b?(o(e),w?k(e[0],e[1],E):k(e[0],e[1])):w?k(e,E):k(e)};if(v)d=e;else{if("function"!=typeof(u=s(e)))throw TypeError("Target is not iterable");if(a(u)){for(p=0,h=i(e.length);h>p;p++)if((m=A(e[p]))&&m instanceof c)return m;return new c(!1)}d=u.call(e)}for(g=d.next;!(f=g.call(d)).done;){try{m=A(f.value)}catch(e){throw l(d),e}if("object"==typeof m&&m&&m instanceof c)return m}return new c(!1)}},function(e,n,t){var o=t(11),a=t(46),i=o("iterator"),r=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||r[i]===e)}},function(e,n,t){var o=t(247),a=t(46),i=t(11)("iterator");e.exports=function(e){if(null!=e)return e[i]||e["@@iterator"]||a[o(e)]}},function(e,n,t){var o=t(248),a=t(86),i=t(11)("toStringTag"),r="Arguments"==a(function(){return arguments}());e.exports=o?a:function(e){var n,t,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=Object(e),i))?t:r?a(n):"Object"==(o=a(n))&&"function"==typeof n.callee?"Arguments":o}},function(e,n,t){var o={};o[t(11)("toStringTag")]="z",e.exports="[object z]"===String(o)},function(e,n,t){var o=t(19);e.exports=function(e){var n=e.return;if(void 0!==n)return o(n.call(e)).value}},function(e,n,t){var o=t(11)("iterator"),a=!1;try{var i=0,r={next:function(){return{done:!!i++}},return:function(){a=!0}};r[o]=function(){return this},Array.from(r,(function(){throw 2}))}catch(e){}e.exports=function(e,n){if(!n&&!a)return!1;var t=!1;try{var i={};i[o]=function(){return{next:function(){return{done:t=!0}}}},e(i)}catch(e){}return t}},function(e,n,t){var o,a,i,r,s,l,c,d,u=t(5),p=t(97).f,h=t(152).set,m=t(153),g=t(252),f=t(66),y=u.MutationObserver||u.WebKitMutationObserver,b=u.document,v=u.process,w=u.Promise,k=p(u,"queueMicrotask"),E=k&&k.value;E||(o=function(){var e,n;for(f&&(e=v.domain)&&e.exit();a;){n=a.fn,a=a.next;try{n()}catch(e){throw a?r():i=void 0,e}}i=void 0,e&&e.enter()},m||f||g||!y||!b?w&&w.resolve?(c=w.resolve(void 0),d=c.then,r=function(){d.call(c,o)}):r=f?function(){v.nextTick(o)}:function(){h.call(u,o)}:(s=!0,l=b.createTextNode(""),new y(o).observe(l,{characterData:!0}),r=function(){l.data=s=!s})),e.exports=E||function(e){var n={fn:e,next:void 0};i&&(i.next=n),a||(a=n,r()),i=n}},function(e,n,t){var o=t(91);e.exports=/web0s(?!.*chrome)/i.test(o)},function(e,n,t){var o=t(5);e.exports=function(e,n){var t=o.console;t&&t.error&&(1===arguments.length?t.error(e):t.error(e,n))}},function(e,n){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,n,t){var o=t(67),a=t(256);o({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(e,n,t){"use strict";var o=t(26),a=t(16),i=t(138),r=t(144),s=t(143),l=t(148),c=t(129),d=Object.assign,u=Object.defineProperty;e.exports=!d||a((function(){if(o&&1!==d({b:1},d(u({},"a",{enumerable:!0,get:function(){u(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},n={},t=Symbol();return e[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),7!=d({},e)[t]||"abcdefghijklmnopqrst"!=i(d({},n)).join("")}))?function(e,n){for(var t=l(e),a=arguments.length,d=1,u=r.f,p=s.f;a>d;)for(var h,m=c(arguments[d++]),g=u?i(m).concat(u(m)):i(m),f=g.length,y=0;f>y;)h=g[y++],o&&!p.call(m,h)||(t[h]=m[h]);return t}:d},function(e,n,t){"use strict";var o=t(67),a=t(45),i=t(149),r=t(16),s=t(40),l=t(151),c=t(154),d=t(47);o({target:"Promise",proto:!0,real:!0,forced:!!i&&r((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var n=l(this,s("Promise")),t="function"==typeof e;return this.then(t?function(t){return c(n,e()).then((function(){return t}))}:e,t?function(t){return c(n,e()).then((function(){throw t}))}:e)}}),a||"function"!=typeof i||i.prototype.finally||d(i.prototype,"finally",s("Promise").prototype.finally)},function(e,n,t){var o=t(4),a=t(159),i=o.WeakMap;e.exports="function"==typeof i&&/native code/.test(a(i))},function(e,n,t){"use strict";var o=t(99),a=t(160);e.exports=o?{}.toString:function(){return"[object "+a(this)+"]"}},function(e,n,t){var o=t(42);e.exports=o("navigator","userAgent")||""},function(e,n,t){"use strict";var o=t(171).IteratorPrototype,a=t(52),i=t(50),r=t(109),s=t(53),l=function(){return this};e.exports=function(e,n,t){var c=n+" Iterator";return e.prototype=a(o,{next:i(1,t)}),r(e,c,!1,!0),s[c]=l,e}},function(e,n,t){var o=t(9),a=t(10),i=t(12),r=t(108);e.exports=o?Object.defineProperties:function(e,n){i(e);for(var t,o=r(n),s=o.length,l=0;s>l;)a.f(e,t=o[l++],n[t]);return e}},function(e,n,t){var o=t(42);e.exports=o("document","documentElement")},function(e,n,t){var o=t(6);e.exports=function(e){if(!o(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,n,t){"use strict";var o=t(18),a=t(124),i=t(53),r=t(62),s=t(170),l=r.set,c=r.getterFor("Array Iterator");e.exports=s(Array,"Array",(function(e,n){l(this,{type:"Array Iterator",target:o(e),index:0,kind:n})}),(function(){var e=c(this),n=e.target,t=e.kind,o=e.index++;return!n||o>=n.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:o,done:!1}:"values"==t?{value:n[o],done:!1}:{value:[o,n[o]],done:!1}}),"values"),i.Arguments=i.Array,a("keys"),a("values"),a("entries")},function(e,n,t){"use strict";var o=t(2),a=t(267).left,i=t(110),r=t(35),s=t(106),l=t(268),c=i("reduce"),d=r("reduce",{1:0});o({target:"Array",proto:!0,forced:!c||!d||!l&&s>79&&s<83},{reduce:function(e){return a(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){var o=t(61),a=t(21),i=t(71),r=t(23),s=function(e){return function(n,t,s,l){o(t);var c=a(n),d=i(c),u=r(c.length),p=e?u-1:0,h=e?-1:1;if(s<2)for(;;){if(p in d){l=d[p],p+=h;break}if(p+=h,e?p<0:u<=p)throw TypeError("Reduce of empty array with no initial value")}for(;e?p>=0:u>p;p+=h)p in d&&(l=t(l,d[p],p,c));return l}};e.exports={left:s(!1),right:s(!0)}},function(e,n,t){var o=t(28),a=t(4);e.exports="process"==o(a.process)},function(e,n,t){"use strict";var o=t(60).forEach,a=t(110),i=t(35),r=a("forEach"),s=i("forEach");e.exports=r&&s?[].forEach:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}},function(e,n,t){var o=t(2),a=t(181),i=t(1),r=t(6),s=t(271).onFreeze,l=Object.freeze;o({target:"Object",stat:!0,forced:i((function(){l(1)})),sham:!a},{freeze:function(e){return l&&r(e)?l(s(e)):e}})},function(e,n,t){var o=t(51),a=t(6),i=t(7),r=t(10).f,s=t(69),l=t(181),c=s("meta"),d=0,u=Object.isExtensible||function(){return!0},p=function(e){r(e,c,{value:{objectID:"O"+ ++d,weakData:{}}})},h=e.exports={REQUIRED:!1,fastKey:function(e,n){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,c)){if(!u(e))return"F";if(!n)return"E";p(e)}return e[c].objectID},getWeakData:function(e,n){if(!i(e,c)){if(!u(e))return!0;if(!n)return!1;p(e)}return e[c].weakData},onFreeze:function(e){return l&&h.REQUIRED&&u(e)&&!i(e,c)&&p(e),e}};o[c]=!0},function(e,n,t){var o=t(18),a=t(64).f,i={}.toString,r="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return r&&"[object Window]"==i.call(e)?function(e){try{return a(e)}catch(e){return r.slice()}}(e):a(o(e))}},function(e,n,t){"use strict";var o=t(175),a=t(21),i=t(274),r=t(276),s=t(23),l=t(74),c=t(277);e.exports=function(e){var n,t,d,u,p,h,m=a(e),g="function"==typeof this?this:Array,f=arguments.length,y=f>1?arguments[1]:void 0,b=void 0!==y,v=c(m),w=0;if(b&&(y=o(y,f>2?arguments[2]:void 0,2)),null==v||g==Array&&r(v))for(t=new g(n=s(m.length));n>w;w++)h=b?y(m[w],w):m[w],l(t,w,h);else for(p=(u=v.call(m)).next,t=new g;!(d=p.call(u)).done;w++)h=b?i(u,y,[d.value,w],!0):d.value,l(t,w,h);return t.length=w,t}},function(e,n,t){var o=t(12),a=t(275);e.exports=function(e,n,t,i){try{return i?n(o(t)[0],t[1]):n(t)}catch(n){throw a(e),n}}},function(e,n,t){var o=t(12);e.exports=function(e){var n=e.return;if(void 0!==n)return o(n.call(e)).value}},function(e,n,t){var o=t(3),a=t(53),i=o("iterator"),r=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||r[i]===e)}},function(e,n,t){var o=t(160),a=t(53),i=t(3)("iterator");e.exports=function(e){if(null!=e)return e[i]||e["@@iterator"]||a[o(e)]}},function(e,n,t){var o=t(3)("iterator"),a=!1;try{var i=0,r={next:function(){return{done:!!i++}},return:function(){a=!0}};r[o]=function(){return this},Array.from(r,(function(){throw 2}))}catch(e){}e.exports=function(e,n){if(!n&&!a)return!1;var t=!1;try{var i={};i[o]=function(){return{next:function(){return{done:t=!0}}}},e(i)}catch(e){}return t}},function(e,n,t){var o=t(184),a=t(280);e.exports=function e(n,t,i,r,s){var l=-1,c=n.length;for(i||(i=a),s||(s=[]);++l<c;){var d=n[l];t>0&&i(d)?t>1?e(d,t-1,i,r,s):o(s,d):r||(s[s.length]=d)}return s}},function(e,n,t){var o=t(54),a=t(111),i=t(15),r=o?o.isConcatSpreadable:void 0;e.exports=function(e){return i(e)||a(e)||!!(r&&e&&e[r])}},function(e,n,t){var o=t(44),a=t(37);e.exports=function(e){return a(e)&&"[object Arguments]"==o(e)}},function(e,n,t){var o=t(54),a=Object.prototype,i=a.hasOwnProperty,r=a.toString,s=o?o.toStringTag:void 0;e.exports=function(e){var n=i.call(e,s),t=e[s];try{e[s]=void 0;var o=!0}catch(e){}var a=r.call(e);return o&&(n?e[s]=t:delete e[s]),a}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var o=t(285),a=t(338),i=t(199);e.exports=function(e){var n=a(e);return 1==n.length&&n[0][2]?i(n[0][0],n[0][1]):function(t){return t===e||o(t,e,n)}}},function(e,n,t){var o=t(187),a=t(190);e.exports=function(e,n,t,i){var r=t.length,s=r,l=!i;if(null==e)return!s;for(e=Object(e);r--;){var c=t[r];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++r<s;){var d=(c=t[r])[0],u=e[d],p=c[1];if(l&&c[2]){if(void 0===u&&!(d in e))return!1}else{var h=new o;if(i)var m=i(u,p,d,e,n,h);if(!(void 0===m?a(p,u,3,i,h):m))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var o=t(77),a=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=o(n,e);return!(t<0)&&(t==n.length-1?n.pop():a.call(n,t,1),--this.size,!0)}},function(e,n,t){var o=t(77);e.exports=function(e){var n=this.__data__,t=o(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var o=t(77);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,n,t){var o=t(77);e.exports=function(e,n){var t=this.__data__,a=o(t,e);return a<0?(++this.size,t.push([e,n])):t[a][1]=n,this}},function(e,n,t){var o=t(76);e.exports=function(){this.__data__=new o,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var o=t(76),a=t(112),i=t(114);e.exports=function(e,n){var t=this.__data__;if(t instanceof o){var r=t.__data__;if(!a||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new i(r)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var o=t(113),a=t(297),i=t(55),r=t(189),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,u=c.hasOwnProperty,p=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||a(e))&&(o(e)?p:s).test(r(e))}},function(e,n,t){var o,a=t(298),i=(o=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!i&&i in e}},function(e,n,t){var o=t(22)["__core-js_shared__"];e.exports=o},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var o=t(301),a=t(76),i=t(112);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(i||a),string:new o}}},function(e,n,t){var o=t(302),a=t(303),i=t(304),r=t(305),s=t(306);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(78);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var o=t(78),a=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(o){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(n,e)?n[e]:void 0}},function(e,n,t){var o=t(78),a=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return o?void 0!==n[e]:a.call(n,e)}},function(e,n,t){var o=t(78);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=o&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var o=t(79);e.exports=function(e){var n=o(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var o=t(79);e.exports=function(e){return o(this,e).get(e)}},function(e,n,t){var o=t(79);e.exports=function(e){return o(this,e).has(e)}},function(e,n,t){var o=t(79);e.exports=function(e,n){var t=o(this,e),a=t.size;return t.set(e,n),this.size+=t.size==a?0:1,this}},function(e,n,t){var o=t(187),a=t(191),i=t(316),r=t(319),s=t(334),l=t(15),c=t(117),d=t(118),u="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,h,m,g){var f=l(e),y=l(n),b=f?"[object Array]":s(e),v=y?"[object Array]":s(n),w=(b="[object Arguments]"==b?u:b)==u,k=(v="[object Arguments]"==v?u:v)==u,E=b==v;if(E&&c(e)){if(!c(n))return!1;f=!0,w=!1}if(E&&!w)return g||(g=new o),f||d(e)?a(e,n,t,h,m,g):i(e,n,b,t,h,m,g);if(!(1&t)){var A=w&&p.call(e,"__wrapped__"),T=k&&p.call(n,"__wrapped__");if(A||T){var C=A?e.value():e,S=T?n.value():n;return g||(g=new o),m(C,S,t,h,g)}}return!!E&&(g||(g=new o),r(e,n,t,h,m,g))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length;++t<o;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var o=t(54),a=t(317),i=t(188),r=t(191),s=t(318),l=t(115),c=o?o.prototype:void 0,d=c?c.valueOf:void 0;e.exports=function(e,n,t,o,c,u,p){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!u(new a(e),new a(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var h=s;case"[object Set]":var m=1&o;if(h||(h=l),e.size!=n.size&&!m)return!1;var g=p.get(e);if(g)return g==n;o|=2,p.set(e,n);var f=r(h(e),h(n),o,c,u,p);return p.delete(e),f;case"[object Symbol]":if(d)return d.call(e)==d.call(n)}return!1}},function(e,n,t){var o=t(22).Uint8Array;e.exports=o},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,o){t[++n]=[o,e]})),t}},function(e,n,t){var o=t(320),a=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,i,r,s){var l=1&t,c=o(e),d=c.length;if(d!=o(n).length&&!l)return!1;for(var u=d;u--;){var p=c[u];if(!(l?p in n:a.call(n,p)))return!1}var h=s.get(e),m=s.get(n);if(h&&m)return h==n&&m==e;var g=!0;s.set(e,n),s.set(n,e);for(var f=l;++u<d;){var y=e[p=c[u]],b=n[p];if(i)var v=l?i(b,y,p,n,e,s):i(y,b,p,e,n,s);if(!(void 0===v?y===b||r(y,b,t,i,s):v)){g=!1;break}f||(f="constructor"==p)}if(g&&!f){var w=e.constructor,k=n.constructor;w==k||!("constructor"in e)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof k&&k instanceof k||(g=!1)}return s.delete(e),s.delete(n),g}},function(e,n,t){var o=t(321),a=t(322),i=t(116);e.exports=function(e){return o(e,i,a)}},function(e,n,t){var o=t(184),a=t(15);e.exports=function(e,n,t){var i=n(e);return a(e)?i:o(i,t(e))}},function(e,n,t){var o=t(323),a=t(324),i=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,s=r?function(e){return null==e?[]:(e=Object(e),o(r(e),(function(n){return i.call(e,n)})))}:a;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,a=0,i=[];++t<o;){var r=e[t];n(r,t,e)&&(i[a++]=r)}return i}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var o=t(326),a=t(111),i=t(15),r=t(117),s=t(194),l=t(118),c=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=i(e),d=!t&&a(e),u=!t&&!d&&r(e),p=!t&&!d&&!u&&l(e),h=t||d||u||p,m=h?o(e.length,String):[],g=m.length;for(var f in e)!n&&!c.call(e,f)||h&&("length"==f||u&&("offset"==f||"parent"==f)||p&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||s(f,g))||m.push(f);return m}},function(e,n){e.exports=function(e,n){for(var t=-1,o=Array(e);++t<e;)o[t]=n(t);return o}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var o=t(44),a=t(119),i=t(37),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&a(e.length)&&!!r[o(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var o=t(185),a=n&&!n.nodeType&&n,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,r=i&&i.exports===a&&o.process,s=function(){try{var e=i&&i.require&&i.require("util").types;return e||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=s}).call(this,t(127)(e))},function(e,n,t){var o=t(332),a=t(333),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return a(e);var n=[];for(var t in Object(e))i.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var o=t(195)(Object.keys,Object);e.exports=o},function(e,n,t){var o=t(335),a=t(112),i=t(336),r=t(197),s=t(337),l=t(44),c=t(189),d=c(o),u=c(a),p=c(i),h=c(r),m=c(s),g=l;(o&&"[object DataView]"!=g(new o(new ArrayBuffer(1)))||a&&"[object Map]"!=g(new a)||i&&"[object Promise]"!=g(i.resolve())||r&&"[object Set]"!=g(new r)||s&&"[object WeakMap]"!=g(new s))&&(g=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,o=t?c(t):"";if(o)switch(o){case d:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return n}),e.exports=g},function(e,n,t){var o=t(30)(t(22),"DataView");e.exports=o},function(e,n,t){var o=t(30)(t(22),"Promise");e.exports=o},function(e,n,t){var o=t(30)(t(22),"WeakMap");e.exports=o},function(e,n,t){var o=t(198),a=t(116);e.exports=function(e){for(var n=a(e),t=n.length;t--;){var i=n[t],r=e[i];n[t]=[i,r,o(r)]}return n}},function(e,n,t){var o=t(190),a=t(340),i=t(347),r=t(120),s=t(198),l=t(199),c=t(80);e.exports=function(e,n){return r(e)&&s(n)?l(c(e),n):function(t){var r=a(t,e);return void 0===r&&r===n?i(t,e):o(n,r,3)}}},function(e,n,t){var o=t(200);e.exports=function(e,n,t){var a=null==e?void 0:o(e,n);return void 0===a?t:a}},function(e,n,t){var o=t(342),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,r=o((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(a,(function(e,t,o,a){n.push(o?a.replace(i,"$1"):t||e)})),n}));e.exports=r},function(e,n,t){var o=t(343);e.exports=function(e){var n=o(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var o=t(114);function a(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var o=arguments,a=n?n.apply(this,o):o[0],i=t.cache;if(i.has(a))return i.get(a);var r=e.apply(this,o);return t.cache=i.set(a,r)||i,r};return t.cache=new(a.Cache||o),t}a.Cache=o,e.exports=a},function(e,n,t){var o=t(345);e.exports=function(e){return null==e?"":o(e)}},function(e,n,t){var o=t(54),a=t(346),i=t(15),r=t(121),s=o?o.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(i(n))return a(n,e)+"";if(r(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,a=Array(o);++t<o;)a[t]=n(e[t],t,e);return a}},function(e,n,t){var o=t(348),a=t(349);e.exports=function(e,n){return null!=e&&a(e,n,o)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var o=t(201),a=t(111),i=t(15),r=t(194),s=t(119),l=t(80);e.exports=function(e,n,t){for(var c=-1,d=(n=o(n,e)).length,u=!1;++c<d;){var p=l(n[c]);if(!(u=null!=e&&t(e,p)))break;e=e[p]}return u||++c!=d?u:!!(d=null==e?0:e.length)&&s(d)&&r(p,d)&&(i(e)||a(e))}},function(e,n,t){var o=t(351),a=t(352),i=t(120),r=t(80);e.exports=function(e){return i(e)?o(r(e)):a(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var o=t(200);e.exports=function(e){return function(n){return o(n,e)}}},function(e,n,t){var o=t(122),a=t(354),i=t(356);e.exports=function(e,n){return i(a(e,n,o),e+"")}},function(e,n,t){var o=t(355),a=Math.max;e.exports=function(e,n,t){return n=a(void 0===n?e.length-1:n,0),function(){for(var i=arguments,r=-1,s=a(i.length-n,0),l=Array(s);++r<s;)l[r]=i[n+r];r=-1;for(var c=Array(n+1);++r<n;)c[r]=i[r];return c[n]=t(l),o(e,this,c)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var o=t(357),a=t(360)(o);e.exports=a},function(e,n,t){var o=t(358),a=t(359),i=t(122),r=a?function(e,n){return a(e,"toString",{configurable:!0,enumerable:!1,value:o(n),writable:!0})}:i;e.exports=r},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var o=t(30),a=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=a},function(e,n){var t=Date.now;e.exports=function(e){var n=0,o=0;return function(){var a=t(),i=16-(a-o);if(o=a,i>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var o=t(192),a=t(362),i=t(367),r=t(193),s=t(368),l=t(115);e.exports=function(e,n,t){var c=-1,d=a,u=e.length,p=!0,h=[],m=h;if(t)p=!1,d=i;else if(u>=200){var g=n?null:s(e);if(g)return l(g);p=!1,d=r,m=new o}else m=n?[]:h;e:for(;++c<u;){var f=e[c],y=n?n(f):f;if(f=t||0!==f?f:0,p&&y==y){for(var b=m.length;b--;)if(m[b]===y)continue e;n&&m.push(y),h.push(f)}else d(m,y,t)||(m!==h&&m.push(y),h.push(f))}return h}},function(e,n,t){var o=t(363);e.exports=function(e,n){return!!(null==e?0:e.length)&&o(e,n,0)>-1}},function(e,n,t){var o=t(364),a=t(365),i=t(366);e.exports=function(e,n,t){return n==n?i(e,n,t):o(e,a,t)}},function(e,n){e.exports=function(e,n,t,o){for(var a=e.length,i=t+(o?1:-1);o?i--:++i<a;)if(n(e[i],i,e))return i;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var o=t-1,a=e.length;++o<a;)if(e[o]===n)return o;return-1}},function(e,n){e.exports=function(e,n,t){for(var o=-1,a=null==e?0:e.length;++o<a;)if(t(n,e[o]))return!0;return!1}},function(e,n,t){var o=t(197),a=t(369),i=t(115),r=o&&1/i(new o([,-0]))[1]==1/0?function(e){return new o(e)}:a;e.exports=r},function(e,n){e.exports=function(){}},function(e,n,t){var o=t(196),a=t(37);e.exports=function(e){return a(e)&&o(e)}},function(e,n,t){"use strict";var o=t(9),a=t(4),i=t(125),r=t(34),s=t(7),l=t(28),c=t(222),d=t(49),u=t(1),p=t(52),h=t(64).f,m=t(29).f,g=t(10).f,f=t(213).trim,y=a.Number,b=y.prototype,v="Number"==l(p(b)),w=function(e){var n,t,o,a,i,r,s,l,c=d(e,!1);if("string"==typeof c&&c.length>2)if(43===(n=(c=f(c)).charCodeAt(0))||45===n){if(88===(t=c.charCodeAt(2))||120===t)return NaN}else if(48===n){switch(c.charCodeAt(1)){case 66:case 98:o=2,a=49;break;case 79:case 111:o=8,a=55;break;default:return+c}for(r=(i=c.slice(2)).length,s=0;s<r;s++)if((l=i.charCodeAt(s))<48||l>a)return NaN;return parseInt(i,o)}return+c};if(i("Number",!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var k,E=function(e){var n=arguments.length<1?0:e,t=this;return t instanceof E&&(v?u((function(){b.valueOf.call(t)})):"Number"!=l(t))?c(new y(w(n)),t,E):w(n)},A=o?h(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),T=0;A.length>T;T++)s(y,k=A[T])&&!s(E,k)&&g(E,k,m(y,k));E.prototype=b,b.constructor=E,r(a,"Number",E)}},function(e,n,t){},function(e,n,t){var o=t(2),a=t(1),i=t(18),r=t(29).f,s=t(9),l=a((function(){r(1)}));o({target:"Object",stat:!0,forced:!s||l,sham:!s},{getOwnPropertyDescriptor:function(e,n){return r(i(e),n)}})},function(e,n,t){"use strict";t(202)},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){var o=t(379),a=t(380),i=t(381),r=t(186),s=t(384),l=t(15),c=t(117),d=t(113),u=t(55),p=t(118);e.exports=function(e,n,t){var h=l(e),m=h||c(e)||p(e);if(n=r(n,4),null==t){var g=e&&e.constructor;t=m?h?new g:[]:u(e)&&d(g)?a(s(e)):{}}return(m?o:i)(e,(function(e,o,a){return n(t,e,o,a)})),t}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length;++t<o&&!1!==n(e[t],t,e););return e}},function(e,n,t){var o=t(55),a=Object.create,i=function(){function e(){}return function(n){if(!o(n))return{};if(a)return a(n);e.prototype=n;var t=new e;return e.prototype=void 0,t}}();e.exports=i},function(e,n,t){var o=t(382),a=t(116);e.exports=function(e,n){return e&&o(e,n,a)}},function(e,n,t){var o=t(383)();e.exports=o},function(e,n){e.exports=function(e){return function(n,t,o){for(var a=-1,i=Object(n),r=o(n),s=r.length;s--;){var l=r[e?s:++a];if(!1===t(i[l],l,i))break}return n}}},function(e,n,t){var o=t(195)(Object.getPrototypeOf,Object);e.exports=o},function(e,n,t){"use strict";var o=t(61),a=t(6),i=[].slice,r={},s=function(e,n,t){if(!(n in r)){for(var o=[],a=0;a<n;a++)o[a]="a["+a+"]";r[n]=Function("C,a","return new C("+o.join(",")+")")}return r[n](e,t)};e.exports=Function.bind||function(e){var n=o(this),t=i.call(arguments,1),r=function(){var o=t.concat(i.call(arguments));return this instanceof r?s(n,o.length,o):n.apply(e,o)};return a(n.prototype)&&(r.prototype=n.prototype),r}},function(e,n,t){"use strict";t(204)},function(e,n,t){"use strict";t(205)},function(e,n,t){"use strict";t.r(n);t(224),t(240),t(255),t(257),t(8);function o(e,n,t,o,a,i,r){try{var s=e[i](r),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(o,a)}function a(e){return function(){var n=this,t=arguments;return new Promise((function(a,i){var r=e.apply(n,t);function s(e){o(r,a,i,s,l,"next",e)}function l(e){o(r,a,i,s,l,"throw",e)}s(void 0)}))}}t(104),t(63),t(13),t(14),t(82),t(33);var i=t(0);function r(e,n){for(var t in n)e[t]=n[t];return e}var s=/[!'()*]/g,l=function(e){return"%"+e.charCodeAt(0).toString(16)},c=/%2C/g,d=function(e){return encodeURIComponent(e).replace(s,l).replace(c,",")};function u(e){try{return decodeURIComponent(e)}catch(e){0}return e}var p=function(e){return null==e||"object"==typeof e?e:String(e)};function h(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=u(t.shift()),a=t.length>0?u(t.join("=")):null;void 0===n[o]?n[o]=a:Array.isArray(n[o])?n[o].push(a):n[o]=[n[o],a]})),n):n}function m(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return d(n);if(Array.isArray(t)){var o=[];return t.forEach((function(e){void 0!==e&&(null===e?o.push(d(n)):o.push(d(n)+"="+d(e)))})),o.join("&")}return d(n)+"="+d(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var g=/\/?$/;function f(e,n,t,o){var a=o&&o.options.stringifyQuery,i=n.query||{};try{i=y(i)}catch(e){}var r={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:i,params:n.params||{},fullPath:w(n,a),matched:e?v(e):[]};return t&&(r.redirectedFrom=w(t,a)),Object.freeze(r)}function y(e){if(Array.isArray(e))return e.map(y);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=y(e[t]);return n}return e}var b=f(null,{path:"/"});function v(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function w(e,n){var t=e.path,o=e.query;void 0===o&&(o={});var a=e.hash;return void 0===a&&(a=""),(t||"/")+(n||m)(o)+a}function k(e,n,t){return n===b?e===n:!!n&&(e.path&&n.path?e.path.replace(g,"")===n.path.replace(g,"")&&(t||e.hash===n.hash&&E(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&E(e.query,n.query)&&E(e.params,n.params))))}function E(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),o=Object.keys(n).sort();return t.length===o.length&&t.every((function(t,a){var i=e[t];if(o[a]!==t)return!1;var r=n[t];return null==i||null==r?i===r:"object"==typeof i&&"object"==typeof r?E(i,r):String(i)===String(r)}))}function A(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var o in t.instances){var a=t.instances[o],i=t.enteredCbs[o];if(a&&i){delete t.enteredCbs[o];for(var r=0;r<i.length;r++)a._isBeingDestroyed||i[r](a)}}}}var T={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,o=n.children,a=n.parent,i=n.data;i.routerView=!0;for(var s=a.$createElement,l=t.name,c=a.$route,d=a._routerViewCache||(a._routerViewCache={}),u=0,p=!1;a&&a._routerRoot!==a;){var h=a.$vnode?a.$vnode.data:{};h.routerView&&u++,h.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(i.routerViewDepth=u,p){var m=d[l],g=m&&m.component;return g?(m.configProps&&C(g,i,m.route,m.configProps),s(g,i,o)):s()}var f=c.matched[u],y=f&&f.components[l];if(!f||!y)return d[l]=null,s();d[l]={component:y},i.registerRouteInstance=function(e,n){var t=f.instances[l];(n&&t!==e||!n&&t===e)&&(f.instances[l]=n)},(i.hook||(i.hook={})).prepatch=function(e,n){f.instances[l]=n.componentInstance},i.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==f.instances[l]&&(f.instances[l]=e.componentInstance),A(c)};var b=f.props&&f.props[l];return b&&(r(d[l],{route:c,configProps:b}),C(y,i,c,b)),s(y,i,o)}};function C(e,n,t,o){var a=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,o);if(a){a=n.props=r({},a);var i=n.attrs=n.attrs||{};for(var s in a)e.props&&s in e.props||(i[s]=a[s],delete a[s])}}function S(e,n,t){var o=e.charAt(0);if("/"===o)return e;if("?"===o||"#"===o)return n+e;var a=n.split("/");t&&a[a.length-1]||a.pop();for(var i=e.replace(/^\//,"").split("/"),r=0;r<i.length;r++){var s=i[r];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function P(e){return e.replace(/\/\//g,"/")}var x=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},I=K,R=j,D=function(e,n){return U(j(e,n),n)},O=U,M=W,L=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function j(e,n){for(var t,o=[],a=0,i=0,r="",s=n&&n.delimiter||"/";null!=(t=L.exec(e));){var l=t[0],c=t[1],d=t.index;if(r+=e.slice(i,d),i=d+l.length,c)r+=c[1];else{var u=e[i],p=t[2],h=t[3],m=t[4],g=t[5],f=t[6],y=t[7];r&&(o.push(r),r="");var b=null!=p&&null!=u&&u!==p,v="+"===f||"*"===f,w="?"===f||"*"===f,k=t[2]||s,E=m||g;o.push({name:h||a++,prefix:p||"",delimiter:k,optional:w,repeat:v,partial:b,asterisk:!!y,pattern:E?q(E):y?".*":"[^"+_(k)+"]+?"})}}return i<e.length&&(r+=e.substr(i)),r&&o.push(r),o}function N(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function U(e,n){for(var t=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(t[o]=new RegExp("^(?:"+e[o].pattern+")$",F(n)));return function(n,o){for(var a="",i=n||{},r=(o||{}).pretty?N:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var c,d=i[l.name];if(null==d){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(x(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(c=r(d[u]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(d),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function _(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function q(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function B(e,n){return e.keys=n,e}function F(e){return e&&e.sensitive?"":"i"}function W(e,n,t){x(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,a=!1!==t.end,i="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)i+=_(s);else{var l=_(s.prefix),c="(?:"+s.pattern+")";n.push(s),s.repeat&&(c+="(?:"+l+c+")*"),i+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=_(t.delimiter||"/"),u=i.slice(-d.length)===d;return o||(i=(u?i.slice(0,-d.length):i)+"(?:"+d+"(?=$))?"),i+=a?"$":o&&u?"":"(?="+d+"|$)",B(new RegExp("^"+i,F(t)),n)}function K(e,n,t){return x(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)n.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return B(e,n)}(e,n):x(e)?function(e,n,t){for(var o=[],a=0;a<e.length;a++)o.push(K(e[a],n,t).source);return B(new RegExp("(?:"+o.join("|")+")",F(t)),n)}(e,n,t):function(e,n,t){return W(j(e,t),n,t)}(e,n,t)}I.parse=R,I.compile=D,I.tokensToFunction=O,I.tokensToRegExp=M;var G=Object.create(null);function z(e,n,t){n=n||{};try{var o=G[e]||(G[e]=I.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),o(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function H(e,n,t,o){var a="string"==typeof e?{path:e}:e;if(a._normalized)return a;if(a.name){var i=(a=r({},e)).params;return i&&"object"==typeof i&&(a.params=r({},i)),a}if(!a.path&&a.params&&n){(a=r({},a))._normalized=!0;var s=r(r({},n.params),a.params);if(n.name)a.name=n.name,a.params=s;else if(n.matched.length){var l=n.matched[n.matched.length-1].path;a.path=z(l,s,n.path)}else 0;return a}var c=function(e){var n="",t="",o=e.indexOf("#");o>=0&&(n=e.slice(o),e=e.slice(0,o));var a=e.indexOf("?");return a>=0&&(t=e.slice(a+1),e=e.slice(0,a)),{path:e,query:t,hash:n}}(a.path||""),d=n&&n.path||"/",u=c.path?S(c.path,d,t||a.append):d,m=function(e,n,t){void 0===n&&(n={});var o,a=t||h;try{o=a(e||"")}catch(e){o={}}for(var i in n){var r=n[i];o[i]=Array.isArray(r)?r.map(p):p(r)}return o}(c.query,a.query,o&&o.options.parseQuery),g=a.hash||c.hash;return g&&"#"!==g.charAt(0)&&(g="#"+g),{_normalized:!0,path:u,query:m,hash:g}}var Y,V=function(){},J={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,o=this.$route,a=t.resolve(this.to,o,this.append),i=a.location,s=a.route,l=a.href,c={},d=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==d?"router-link-active":d,h=null==u?"router-link-exact-active":u,m=null==this.activeClass?p:this.activeClass,y=null==this.exactActiveClass?h:this.exactActiveClass,b=s.redirectedFrom?f(null,H(s.redirectedFrom),null,t):s;c[y]=k(o,b,this.exactPath),c[m]=this.exact||this.exactPath?c[y]:function(e,n){return 0===e.path.replace(g,"/").indexOf(n.path.replace(g,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(o,b);var v=c[y]?this.ariaCurrentValue:null,w=function(e){$(e)&&(n.replace?t.replace(i,V):t.push(i,V))},E={click:$};Array.isArray(this.event)?this.event.forEach((function(e){E[e]=w})):E[this.event]=w;var A={class:c},T=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:l,route:s,navigate:w,isActive:c[m],isExactActive:c[y]});if(T){if(1===T.length)return T[0];if(T.length>1||!T.length)return 0===T.length?e():e("span",{},T)}if("a"===this.tag)A.on=E,A.attrs={href:l,"aria-current":v};else{var C=function e(n){var t;if(n)for(var o=0;o<n.length;o++){if("a"===(t=n[o]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(C){C.isStatic=!1;var S=C.data=r({},C.data);for(var P in S.on=S.on||{},S.on){var x=S.on[P];P in E&&(S.on[P]=Array.isArray(x)?x:[x])}for(var I in E)I in S.on?S.on[I].push(E[I]):S.on[I]=w;var R=C.data.attrs=r({},C.data.attrs);R.href=l,R["aria-current"]=v}else A.on=E}return e(this.tag,A,this.$slots.default)}};function $(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var X="undefined"!=typeof window;function Q(e,n,t,o,a){var i=n||[],r=t||Object.create(null),s=o||Object.create(null);e.forEach((function(e){!function e(n,t,o,a,i,r){var s=a.path,l=a.name;0;var c=a.pathToRegexpOptions||{},d=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return P(n.path+"/"+e)}(s,i,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var u={path:d,regex:Z(d,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:r,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=r?P(r+"/"+a.path):void 0;e(n,t,o,a,u,i)}));t[u.path]||(n.push(u.path),t[u.path]=u);if(void 0!==a.alias)for(var p=Array.isArray(a.alias)?a.alias:[a.alias],h=0;h<p.length;++h){0;var m={path:p[h],children:a.children};e(n,t,o,m,i,u.path||"/")}l&&(o[l]||(o[l]=u))}(i,r,s,e,a)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:r,nameMap:s}}function Z(e,n){return I(e,[],n)}function ee(e,n){var t=Q(e),o=t.pathList,a=t.pathMap,i=t.nameMap;function r(e,t,r){var s=H(e,t,!1,n),c=s.name;if(c){var d=i[c];if(!d)return l(null,s);var u=d.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=z(d.path,s.params),l(d,s,r)}if(s.path){s.params={};for(var h=0;h<o.length;h++){var m=o[h],g=a[m];if(ne(g.regex,s.path,s.params))return l(g,s,r)}}return l(null,s)}function s(e,t){var o=e.redirect,a="function"==typeof o?o(f(e,t,null,n)):o;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,t);var s=a,c=s.name,d=s.path,u=t.query,p=t.hash,h=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,c){i[c];return r({_normalized:!0,name:c,query:u,hash:p,params:h},void 0,t)}if(d){var m=function(e,n){return S(e,n.parent?n.parent.path:"/",!0)}(d,e);return r({_normalized:!0,path:z(m,h),query:u,hash:p},void 0,t)}return l(null,t)}function l(e,t,o){return e&&e.redirect?s(e,o||t):e&&e.matchAs?function(e,n,t){var o=r({_normalized:!0,path:z(t,n.params)});if(o){var a=o.matched,i=a[a.length-1];return n.params=o.params,l(i,n)}return l(null,n)}(0,t,e.matchAs):f(e,t,o,n)}return{match:r,addRoute:function(e,n){var t="object"!=typeof e?i[e]:void 0;Q([n||e],o,a,i,t),t&&Q(t.alias.map((function(e){return{path:e,children:[n]}})),o,a,i,t)},getRoutes:function(){return o.map((function(e){return a[e]}))},addRoutes:function(e){Q(e,o,a,i)}}}function ne(e,n,t){var o=n.match(e);if(!o)return!1;if(!t)return!0;for(var a=1,i=o.length;a<i;++a){var r=e.keys[a-1];r&&(t[r.name||"pathMatch"]="string"==typeof o[a]?u(o[a]):o[a])}return!0}var te=X&&window.performance&&window.performance.now?window.performance:Date;function oe(){return te.now().toFixed(3)}var ae=oe();function ie(){return ae}function re(e){return ae=e}var se=Object.create(null);function le(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=r({},window.history.state);return t.key=ie(),window.history.replaceState(t,"",n),window.addEventListener("popstate",ue),function(){window.removeEventListener("popstate",ue)}}function ce(e,n,t,o){if(e.app){var a=e.options.scrollBehavior;a&&e.app.$nextTick((function(){var i=function(){var e=ie();if(e)return se[e]}(),r=a.call(e,n,t,o?i:null);r&&("function"==typeof r.then?r.then((function(e){fe(e,i)})).catch((function(e){0})):fe(r,i))}))}}function de(){var e=ie();e&&(se[e]={x:window.pageXOffset,y:window.pageYOffset})}function ue(e){de(),e.state&&e.state.key&&re(e.state.key)}function pe(e){return me(e.x)||me(e.y)}function he(e){return{x:me(e.x)?e.x:window.pageXOffset,y:me(e.y)?e.y:window.pageYOffset}}function me(e){return"number"==typeof e}var ge=/^#\d/;function fe(e,n){var t,o="object"==typeof e;if(o&&"string"==typeof e.selector){var a=ge.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(a){var i=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{x:o.left-t.left-n.x,y:o.top-t.top-n.y}}(a,i={x:me((t=i).x)?t.x:0,y:me(t.y)?t.y:0})}else pe(e)&&(n=he(e))}else o&&pe(e)&&(n=he(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var ye,be=X&&((-1===(ye=window.navigator.userAgent).indexOf("Android 2.")&&-1===ye.indexOf("Android 4.0")||-1===ye.indexOf("Mobile Safari")||-1!==ye.indexOf("Chrome")||-1!==ye.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function ve(e,n){de();var t=window.history;try{if(n){var o=r({},t.state);o.key=ie(),t.replaceState(o,"",e)}else t.pushState({key:re(oe())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function we(e){ve(e,!0)}function ke(e,n,t){var o=function(a){a>=e.length?t():e[a]?n(e[a],(function(){o(a+1)})):o(a+1)};o(0)}var Ee={redirected:2,aborted:4,cancelled:8,duplicated:16};function Ae(e,n){return Ce(e,n,Ee.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return Se.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function Te(e,n){return Ce(e,n,Ee.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function Ce(e,n,t,o){var a=new Error(o);return a._isRouter=!0,a.from=e,a.to=n,a.type=t,a}var Se=["params","query","hash"];function Pe(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function xe(e,n){return Pe(e)&&e._isRouter&&(null==n||e.type===n)}function Ie(e){return function(n,t,o){var a=!1,i=0,r=null;Re(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){a=!0,i++;var l,c=Me((function(n){var a;((a=n).__esModule||Oe&&"Module"===a[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:Y.extend(n),t.components[s]=n,--i<=0&&o()})),d=Me((function(e){var n="Failed to resolve async component "+s+": "+e;r||(r=Pe(e)?e:new Error(n),o(r))}));try{l=e(c,d)}catch(e){d(e)}if(l)if("function"==typeof l.then)l.then(c,d);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,d)}}})),a||o()}}function Re(e,n){return De(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function De(e){return Array.prototype.concat.apply([],e)}var Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Me(e){var n=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!n)return n=!0,e.apply(this,t)}}var Le=function(e,n){this.router=e,this.base=function(e){if(!e)if(X){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=b,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function je(e,n,t,o){var a=Re(e,(function(e,o,a,i){var r=function(e,n){"function"!=typeof e&&(e=Y.extend(e));return e.options[n]}(e,n);if(r)return Array.isArray(r)?r.map((function(e){return t(e,o,a,i)})):t(r,o,a,i)}));return De(o?a.reverse():a)}function Ne(e,n){if(n)return function(){return e.apply(n,arguments)}}Le.prototype.listen=function(e){this.cb=e},Le.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},Le.prototype.onError=function(e){this.errorCbs.push(e)},Le.prototype.transitionTo=function(e,n,t){var o,a=this;try{o=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var i=this.current;this.confirmTransition(o,(function(){a.updateRoute(o),n&&n(o),a.ensureURL(),a.router.afterHooks.forEach((function(e){e&&e(o,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(e){e(o)})))}),(function(e){t&&t(e),e&&!a.ready&&(xe(e,Ee.redirected)&&i===b||(a.ready=!0,a.readyErrorCbs.forEach((function(n){n(e)}))))}))},Le.prototype.confirmTransition=function(e,n,t){var o=this,a=this.current;this.pending=e;var i,r,s=function(e){!xe(e)&&Pe(e)&&(o.errorCbs.length?o.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},l=e.matched.length-1,c=a.matched.length-1;if(k(e,a)&&l===c&&e.matched[l]===a.matched[c])return this.ensureURL(),s(((r=Ce(i=a,e,Ee.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",r));var d=function(e,n){var t,o=Math.max(e.length,n.length);for(t=0;t<o&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),u=d.updated,p=d.deactivated,h=d.activated,m=[].concat(function(e){return je(e,"beforeRouteLeave",Ne,!0)}(p),this.router.beforeHooks,function(e){return je(e,"beforeRouteUpdate",Ne)}(u),h.map((function(e){return e.beforeEnter})),Ie(h)),g=function(n,t){if(o.pending!==e)return s(Te(a,e));try{n(e,a,(function(n){!1===n?(o.ensureURL(!0),s(function(e,n){return Ce(e,n,Ee.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(a,e))):Pe(n)?(o.ensureURL(!0),s(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(s(Ae(a,e)),"object"==typeof n&&n.replace?o.replace(n):o.push(n)):t(n)}))}catch(e){s(e)}};ke(m,g,(function(){ke(function(e){return je(e,"beforeRouteEnter",(function(e,n,t,o){return function(e,n,t){return function(o,a,i){return e(o,a,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),i(e)}))}}(e,t,o)}))}(h).concat(o.router.resolveHooks),g,(function(){if(o.pending!==e)return s(Te(a,e));o.pending=null,n(e),o.router.app&&o.router.app.$nextTick((function(){A(e)}))}))}))},Le.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Le.prototype.setupListeners=function(){},Le.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=b,this.pending=null};var Ue=function(e){function n(n,t){e.call(this,n,t),this._startLocation=_e(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,o=be&&t;o&&this.listeners.push(le());var a=function(){var t=e.current,a=_e(e.base);e.current===b&&a===e._startLocation||e.transitionTo(a,(function(e){o&&ce(n,e,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var o=this,a=this.current;this.transitionTo(e,(function(e){ve(P(o.base+e.fullPath)),ce(o.router,e,a,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,a=this.current;this.transitionTo(e,(function(e){we(P(o.base+e.fullPath)),ce(o.router,e,a,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(_e(this.base)!==this.current.fullPath){var n=P(this.base+this.current.fullPath);e?ve(n):we(n)}},n.prototype.getCurrentLocation=function(){return _e(this.base)},n}(Le);function _e(e){var n=window.location.pathname;return e&&0===n.toLowerCase().indexOf(e.toLowerCase())&&(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var qe=function(e){function n(n,t,o){e.call(this,n,t),o&&function(e){var n=_e(e);if(!/^\/#/.test(n))return window.location.replace(P(e+"/#"+n)),!0}(this.base)||Be()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=be&&n;t&&this.listeners.push(le());var o=function(){var n=e.current;Be()&&e.transitionTo(Fe(),(function(o){t&&ce(e.router,o,n,!0),be||Ge(o.fullPath)}))},a=be?"popstate":"hashchange";window.addEventListener(a,o),this.listeners.push((function(){window.removeEventListener(a,o)}))}},n.prototype.push=function(e,n,t){var o=this,a=this.current;this.transitionTo(e,(function(e){Ke(e.fullPath),ce(o.router,e,a,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,a=this.current;this.transitionTo(e,(function(e){Ge(e.fullPath),ce(o.router,e,a,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;Fe()!==n&&(e?Ke(n):Ge(n))},n.prototype.getCurrentLocation=function(){return Fe()},n}(Le);function Be(){var e=Fe();return"/"===e.charAt(0)||(Ge("/"+e),!1)}function Fe(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function We(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function Ke(e){be?ve(We(e)):window.location.hash=e}function Ge(e){be?we(We(e)):window.location.replace(We(e))}var ze=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index+1).concat(e),o.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var e=n.current;n.index=t,n.updateRoute(o),n.router.afterHooks.forEach((function(n){n&&n(o,e)}))}),(function(e){xe(e,Ee.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(Le),He=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ee(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!be&&!1!==e.fallback,this.fallback&&(n="hash"),X||(n="abstract"),this.mode=n,n){case"history":this.history=new Ue(this,e.base);break;case"hash":this.history=new qe(this,e.base,this.fallback);break;case"abstract":this.history=new ze(this,e.base);break;default:0}},Ye={currentRoute:{configurable:!0}};function Ve(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}He.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},Ye.currentRoute.get=function(){return this.history&&this.history.current},He.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof Ue||t instanceof qe){var o=function(e){t.setupListeners(),function(e){var o=t.current,a=n.options.scrollBehavior;be&&a&&"fullPath"in e&&ce(n,e,o,!1)}(e)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},He.prototype.beforeEach=function(e){return Ve(this.beforeHooks,e)},He.prototype.beforeResolve=function(e){return Ve(this.resolveHooks,e)},He.prototype.afterEach=function(e){return Ve(this.afterHooks,e)},He.prototype.onReady=function(e,n){this.history.onReady(e,n)},He.prototype.onError=function(e){this.history.onError(e)},He.prototype.push=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.push(e,n,t)}));this.history.push(e,n,t)},He.prototype.replace=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.replace(e,n,t)}));this.history.replace(e,n,t)},He.prototype.go=function(e){this.history.go(e)},He.prototype.back=function(){this.go(-1)},He.prototype.forward=function(){this.go(1)},He.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},He.prototype.resolve=function(e,n,t){var o=H(e,n=n||this.history.current,t,this),a=this.match(o,n),i=a.redirectedFrom||a.fullPath;return{location:o,route:a,href:function(e,n,t){var o="hash"===t?"#"+n:n;return e?P(e+"/"+o):o}(this.history.base,i,this.mode),normalizedTo:o,resolved:a}},He.prototype.getRoutes=function(){return this.matcher.getRoutes()},He.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==b&&this.history.transitionTo(this.history.getCurrentLocation())},He.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==b&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(He.prototype,Ye),He.install=function e(n){if(!e.installed||Y!==n){e.installed=!0,Y=n;var t=function(e){return void 0!==e},o=function(e,n){var o=e.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",T),n.component("RouterLink",J);var a=n.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},He.version="3.5.1",He.isNavigationFailure=xe,He.NavigationFailureType=Ee,He.START_LOCATION=b,X&&window.Vue&&window.Vue.use(He);var Je=He;t(177),t(178),t(266),t(83),t(220),t(59),t(270);function $e(e){e.locales&&Object.keys(e.locales).forEach((function(n){e.locales[n].path=n})),Object.freeze(e)}t(25),t(36),t(43);var Xe=t(56),Qe=(t(58),t(32),t(216),t(217),{NotFound:function(){return t.e(105).then(t.bind(null,699))},Layout:function(){return Promise.all([t.e(0),t.e(2),t.e(104)]).then(t.bind(null,700))}}),Ze={"v-8f9ecbbc":function(){return t.e(106).then(t.bind(null,706))},"v-6105f836":function(){return t.e(107).then(t.bind(null,707))},"v-f5704990":function(){return t.e(108).then(t.bind(null,708))},"v-33b5fb82":function(){return t.e(109).then(t.bind(null,709))},"v-6f3b39b2":function(){return t.e(59).then(t.bind(null,710))},"v-374a5768":function(){return t.e(110).then(t.bind(null,711))},"v-af1249b0":function(){return t.e(111).then(t.bind(null,712))},"v-16019acc":function(){return t.e(112).then(t.bind(null,713))},"v-4e11c52a":function(){return t.e(113).then(t.bind(null,714))},"v-d835eeb8":function(){return t.e(60).then(t.bind(null,715))},"v-1eed0fc5":function(){return t.e(24).then(t.bind(null,716))},"v-565f93b4":function(){return t.e(61).then(t.bind(null,717))},"v-eed78d1c":function(){return t.e(115).then(t.bind(null,718))},"v-33ba85c0":function(){return t.e(25).then(t.bind(null,719))},"v-6a7a1ee8":function(){return t.e(62).then(t.bind(null,720))},"v-6fac01ac":function(){return t.e(116).then(t.bind(null,721))},"v-4060beac":function(){return t.e(117).then(t.bind(null,722))},"v-6a1103a4":function(){return t.e(63).then(t.bind(null,723))},"v-78d2ca34":function(){return t.e(114).then(t.bind(null,724))},"v-ddaca3a8":function(){return t.e(118).then(t.bind(null,725))},"v-1a735e6e":function(){return t.e(64).then(t.bind(null,726))},"v-61ed8be8":function(){return t.e(119).then(t.bind(null,727))},"v-d4bd3f66":function(){return t.e(35).then(t.bind(null,728))},"v-3d4c5d6e":function(){return t.e(65).then(t.bind(null,729))},"v-c5890230":function(){return t.e(36).then(t.bind(null,730))},"v-7bc2fb4c":function(){return t.e(120).then(t.bind(null,731))},"v-d1257868":function(){return t.e(121).then(t.bind(null,732))},"v-9fd918ac":function(){return t.e(66).then(t.bind(null,733))},"v-0c8ecefa":function(){return t.e(122).then(t.bind(null,734))},"v-63e6ea8c":function(){return t.e(123).then(t.bind(null,735))},"v-241d4be8":function(){return t.e(67).then(t.bind(null,736))},"v-c90a8f02":function(){return t.e(124).then(t.bind(null,737))},"v-7fd3ecd6":function(){return t.e(125).then(t.bind(null,738))},"v-8f8b9fb6":function(){return t.e(127).then(t.bind(null,739))},"v-0d268fa8":function(){return t.e(126).then(t.bind(null,740))},"v-357745d0":function(){return Promise.all([t.e(0),t.e(37)]).then(t.bind(null,741))},"v-c55c8274":function(){return t.e(68).then(t.bind(null,742))},"v-a1b993f4":function(){return t.e(128).then(t.bind(null,743))},"v-b0b79db4":function(){return t.e(69).then(t.bind(null,744))},"v-6dcdd3a3":function(){return t.e(129).then(t.bind(null,745))},"v-116b6840":function(){return t.e(38).then(t.bind(null,746))},"v-2516cca0":function(){return t.e(130).then(t.bind(null,747))},"v-21d85140":function(){return t.e(10).then(t.bind(null,748))},"v-3d80f340":function(){return t.e(21).then(t.bind(null,749))},"v-d8c69380":function(){return t.e(131).then(t.bind(null,750))},"v-a55faf84":function(){return t.e(11).then(t.bind(null,751))},"v-04e55b50":function(){return t.e(132).then(t.bind(null,752))},"v-d5ee8bbc":function(){return t.e(18).then(t.bind(null,753))},"v-268e1178":function(){return t.e(133).then(t.bind(null,754))},"v-08657d5c":function(){return t.e(134).then(t.bind(null,755))},"v-7d2b47ee":function(){return t.e(136).then(t.bind(null,756))},"v-2ac5fb7a":function(){return t.e(135).then(t.bind(null,757))},"v-0b5b2676":function(){return t.e(137).then(t.bind(null,758))},"v-424dcb66":function(){return t.e(138).then(t.bind(null,759))},"v-5ff106e2":function(){return t.e(139).then(t.bind(null,760))},"v-ad8a3fa8":function(){return t.e(140).then(t.bind(null,761))},"v-4c36c0d3":function(){return t.e(39).then(t.bind(null,762))},"v-663d6404":function(){return t.e(141).then(t.bind(null,763))},"v-1d7e1652":function(){return t.e(142).then(t.bind(null,764))},"v-3b9d33c6":function(){return t.e(143).then(t.bind(null,765))},"v-40b42cf4":function(){return t.e(144).then(t.bind(null,766))},"v-267fcbe6":function(){return t.e(146).then(t.bind(null,767))},"v-bce12d6a":function(){return t.e(145).then(t.bind(null,768))},"v-a514f074":function(){return t.e(147).then(t.bind(null,769))},"v-307f57a0":function(){return t.e(148).then(t.bind(null,770))},"v-71b59a20":function(){return t.e(149).then(t.bind(null,771))},"v-c591f200":function(){return t.e(150).then(t.bind(null,772))},"v-e9447f00":function(){return t.e(151).then(t.bind(null,773))},"v-48046660":function(){return t.e(152).then(t.bind(null,774))},"v-eb2ee8e0":function(){return t.e(153).then(t.bind(null,775))},"v-93c5c52a":function(){return t.e(154).then(t.bind(null,776))},"v-bc42847c":function(){return t.e(40).then(t.bind(null,777))},"v-30559540":function(){return t.e(155).then(t.bind(null,778))},"v-77fa3f1a":function(){return t.e(156).then(t.bind(null,779))},"v-a95b2144":function(){return t.e(157).then(t.bind(null,780))},"v-72d8dd08":function(){return t.e(41).then(t.bind(null,781))},"v-65aba380":function(){return t.e(158).then(t.bind(null,782))},"v-087c5f39":function(){return t.e(159).then(t.bind(null,783))},"v-ff78147a":function(){return t.e(160).then(t.bind(null,784))},"v-6c251162":function(){return t.e(12).then(t.bind(null,785))},"v-43768dc5":function(){return t.e(26).then(t.bind(null,786))},"v-7a0c5c26":function(){return t.e(71).then(t.bind(null,787))},"v-68d2c0e6":function(){return t.e(161).then(t.bind(null,788))},"v-6696675c":function(){return t.e(70).then(t.bind(null,789))},"v-65cd12ed":function(){return t.e(42).then(t.bind(null,790))},"v-9e5cc7e8":function(){return t.e(162).then(t.bind(null,791))},"v-3469f1cc":function(){return t.e(163).then(t.bind(null,792))},"v-2fb94430":function(){return t.e(164).then(t.bind(null,793))},"v-d6de65ec":function(){return t.e(72).then(t.bind(null,794))},"v-5787385a":function(){return t.e(165).then(t.bind(null,795))},"v-3c0fba7f":function(){return t.e(166).then(t.bind(null,796))},"v-4678a3b6":function(){return t.e(168).then(t.bind(null,797))},"v-5c03f9d0":function(){return Promise.all([t.e(0),t.e(43)]).then(t.bind(null,798))},"v-c8257a16":function(){return t.e(167).then(t.bind(null,799))},"v-81215fb4":function(){return t.e(169).then(t.bind(null,800))},"v-55cdae2c":function(){return t.e(27).then(t.bind(null,801))},"v-81742dfa":function(){return t.e(170).then(t.bind(null,802))},"v-1f495540":function(){return t.e(13).then(t.bind(null,803))},"v-5815c43c":function(){return t.e(7).then(t.bind(null,804))},"v-026f84c4":function(){return t.e(5).then(t.bind(null,805))},"v-126467b2":function(){return t.e(171).then(t.bind(null,806))},"v-1d83e0c0":function(){return t.e(172).then(t.bind(null,807))},"v-2982c900":function(){return t.e(14).then(t.bind(null,808))},"v-4ed657b8":function(){return t.e(173).then(t.bind(null,809))},"v-974b2b74":function(){return t.e(174).then(t.bind(null,810))},"v-8794784e":function(){return t.e(175).then(t.bind(null,811))},"v-1f32e193":function(){return t.e(178).then(t.bind(null,812))},"v-2992138f":function(){return t.e(176).then(t.bind(null,813))},"v-e9938dda":function(){return t.e(177).then(t.bind(null,814))},"v-a91812da":function(){return t.e(179).then(t.bind(null,815))},"v-23af9480":function(){return t.e(180).then(t.bind(null,816))},"v-be7b3b00":function(){return t.e(182).then(t.bind(null,817))},"v-39cda378":function(){return t.e(181).then(t.bind(null,818))},"v-5009a1de":function(){return t.e(183).then(t.bind(null,819))},"v-77f92ebc":function(){return t.e(184).then(t.bind(null,820))},"v-61a61646":function(){return t.e(185).then(t.bind(null,821))},"v-63176564":function(){return t.e(187).then(t.bind(null,822))},"v-069d34da":function(){return t.e(186).then(t.bind(null,823))},"v-07300966":function(){return t.e(189).then(t.bind(null,824))},"v-5ca42bd6":function(){return t.e(188).then(t.bind(null,825))},"v-beeab77c":function(){return t.e(190).then(t.bind(null,826))},"v-197d46c4":function(){return t.e(191).then(t.bind(null,827))},"v-43de24f2":function(){return t.e(192).then(t.bind(null,828))},"v-5ba28d60":function(){return t.e(193).then(t.bind(null,829))},"v-861cc580":function(){return t.e(73).then(t.bind(null,830))},"v-5ccc0800":function(){return t.e(74).then(t.bind(null,831))},"v-7ab73f40":function(){return t.e(75).then(t.bind(null,832))},"v-176c11e4":function(){return t.e(194).then(t.bind(null,833))},"v-580c2f40":function(){return t.e(195).then(t.bind(null,834))},"v-ddda39c0":function(){return t.e(76).then(t.bind(null,835))},"v-cd20d140":function(){return t.e(196).then(t.bind(null,836))},"v-1df409ed":function(){return t.e(198).then(t.bind(null,837))},"v-af750026":function(){return t.e(197).then(t.bind(null,838))},"v-09fe236b":function(){return t.e(200).then(t.bind(null,839))},"v-be5aa166":function(){return t.e(199).then(t.bind(null,840))},"v-3b0f49bc":function(){return t.e(44).then(t.bind(null,841))},"v-ca77df0c":function(){return t.e(202).then(t.bind(null,842))},"v-2bb0591c":function(){return t.e(201).then(t.bind(null,843))},"v-7329955e":function(){return t.e(203).then(t.bind(null,844))},"v-2c5a4dbe":function(){return t.e(204).then(t.bind(null,845))},"v-64e83e2d":function(){return t.e(205).then(t.bind(null,846))},"v-c73e25e6":function(){return t.e(79).then(t.bind(null,847))},"v-092b0aad":function(){return t.e(78).then(t.bind(null,848))},"v-b07a18da":function(){return t.e(77).then(t.bind(null,849))},"v-4381b4cd":function(){return t.e(80).then(t.bind(null,850))},"v-76dcebcd":function(){return t.e(207).then(t.bind(null,851))},"v-25348330":function(){return t.e(45).then(t.bind(null,852))},"v-1316b766":function(){return t.e(208).then(t.bind(null,853))},"v-4a3a209f":function(){return t.e(206).then(t.bind(null,854))},"v-62808372":function(){return t.e(46).then(t.bind(null,855))},"v-5c95a127":function(){return t.e(81).then(t.bind(null,856))},"v-3aec1854":function(){return t.e(82).then(t.bind(null,857))},"v-415409a8":function(){return t.e(209).then(t.bind(null,858))},"v-696f6946":function(){return t.e(210).then(t.bind(null,859))},"v-80ada3b6":function(){return t.e(28).then(t.bind(null,860))},"v-606945f4":function(){return t.e(83).then(t.bind(null,861))},"v-82dc7c74":function(){return t.e(211).then(t.bind(null,862))},"v-498cc790":function(){return t.e(212).then(t.bind(null,863))},"v-1699d844":function(){return t.e(29).then(t.bind(null,864))},"v-76c4832a":function(){return t.e(84).then(t.bind(null,865))},"v-65ff98cc":function(){return t.e(213).then(t.bind(null,866))},"v-677a6224":function(){return t.e(214).then(t.bind(null,867))},"v-4a485be8":function(){return t.e(85).then(t.bind(null,868))},"v-1e6c858c":function(){return t.e(215).then(t.bind(null,869))},"v-492826e8":function(){return t.e(86).then(t.bind(null,870))},"v-0f23bca8":function(){return t.e(216).then(t.bind(null,871))},"v-7e970e22":function(){return t.e(47).then(t.bind(null,872))},"v-26ff67a8":function(){return t.e(217).then(t.bind(null,873))},"v-3118c32c":function(){return t.e(218).then(t.bind(null,874))},"v-16600c28":function(){return t.e(219).then(t.bind(null,875))},"v-3cd17670":function(){return t.e(87).then(t.bind(null,876))},"v-64f145d0":function(){return t.e(220).then(t.bind(null,877))},"v-a7953bc2":function(){return t.e(221).then(t.bind(null,878))},"v-71f160b3":function(){return t.e(222).then(t.bind(null,879))},"v-7b34316c":function(){return t.e(88).then(t.bind(null,880))},"v-58f64e85":function(){return t.e(223).then(t.bind(null,881))},"v-866830ac":function(){return t.e(224).then(t.bind(null,882))},"v-25510810":function(){return Promise.all([t.e(0),t.e(48)]).then(t.bind(null,883))},"v-17045d64":function(){return t.e(225).then(t.bind(null,884))},"v-6478fde6":function(){return t.e(226).then(t.bind(null,885))},"v-6e1ce060":function(){return t.e(49).then(t.bind(null,886))},"v-8bb9a4fe":function(){return t.e(227).then(t.bind(null,887))},"v-1cd37820":function(){return t.e(8).then(t.bind(null,888))},"v-66e5dae0":function(){return t.e(19).then(t.bind(null,889))},"v-cf987aa0":function(){return t.e(228).then(t.bind(null,890))},"v-0cb4fbc8":function(){return t.e(6).then(t.bind(null,891))},"v-737fcee0":function(){return t.e(229).then(t.bind(null,892))},"v-413a89a0":function(){return t.e(9).then(t.bind(null,893))},"v-2bc8a194":function(){return t.e(230).then(t.bind(null,894))},"v-1c9022e6":function(){return t.e(231).then(t.bind(null,895))},"v-c350580e":function(){return t.e(232).then(t.bind(null,896))},"v-19281c9a":function(){return t.e(233).then(t.bind(null,897))},"v-8585111a":function(){return t.e(234).then(t.bind(null,898))},"v-e4d3f29a":function(){return t.e(235).then(t.bind(null,899))},"v-5503dfd0":function(){return t.e(236).then(t.bind(null,900))},"v-65da4ddc":function(){return t.e(238).then(t.bind(null,901))},"v-1bf60ac0":function(){return t.e(237).then(t.bind(null,902))},"v-012cd40c":function(){return t.e(239).then(t.bind(null,903))},"v-46bd5ad0":function(){return t.e(240).then(t.bind(null,904))},"v-69b9a4cc":function(){return t.e(241).then(t.bind(null,905))},"v-5d8b05c6":function(){return t.e(243).then(t.bind(null,906))},"v-2659ff40":function(){return t.e(244).then(t.bind(null,907))},"v-102cf958":function(){return t.e(242).then(t.bind(null,908))},"v-6fa3d88a":function(){return t.e(245).then(t.bind(null,909))},"v-73e5ec98":function(){return t.e(247).then(t.bind(null,910))},"v-75704160":function(){return t.e(246).then(t.bind(null,911))},"v-536a5526":function(){return t.e(249).then(t.bind(null,912))},"v-a13cc134":function(){return t.e(248).then(t.bind(null,913))},"v-07622a2a":function(){return t.e(250).then(t.bind(null,914))},"v-6e9a7bb4":function(){return t.e(251).then(t.bind(null,915))},"v-0f16da74":function(){return t.e(252).then(t.bind(null,916))},"v-ab0e5bc0":function(){return t.e(253).then(t.bind(null,917))},"v-701e8b40":function(){return t.e(254).then(t.bind(null,918))},"v-3d12ebad":function(){return t.e(255).then(t.bind(null,919))},"v-43efab4d":function(){return t.e(256).then(t.bind(null,920))},"v-ebd258e6":function(){return t.e(257).then(t.bind(null,921))},"v-6847b620":function(){return t.e(50).then(t.bind(null,922))},"v-27be8b6a":function(){return t.e(258).then(t.bind(null,923))},"v-4486ad80":function(){return t.e(259).then(t.bind(null,924))},"v-23fbd1b8":function(){return t.e(260).then(t.bind(null,925))},"v-7bef863e":function(){return t.e(261).then(t.bind(null,926))},"v-67b9aca6":function(){return t.e(51).then(t.bind(null,927))},"v-07879720":function(){return t.e(262).then(t.bind(null,928))},"v-adb93754":function(){return t.e(89).then(t.bind(null,929))},"v-3514fc0c":function(){return t.e(263).then(t.bind(null,930))},"v-b64319e8":function(){return t.e(265).then(t.bind(null,931))},"v-4120e3f8":function(){return t.e(264).then(t.bind(null,932))},"v-dcd8b7f4":function(){return t.e(266).then(t.bind(null,933))},"v-64ee1b00":function(){return t.e(90).then(t.bind(null,934))},"v-1450c2a6":function(){return t.e(267).then(t.bind(null,935))},"v-3bdbce85":function(){return t.e(30).then(t.bind(null,936))},"v-258a5de6":function(){return t.e(91).then(t.bind(null,937))},"v-80e62764":function(){return t.e(268).then(t.bind(null,938))},"v-6ab3389c":function(){return t.e(31).then(t.bind(null,939))},"v-00077730":function(){return t.e(92).then(t.bind(null,940))},"v-0cf3f5ec":function(){return t.e(269).then(t.bind(null,941))},"v-65aa6b28":function(){return t.e(270).then(t.bind(null,942))},"v-5899f08a":function(){return t.e(93).then(t.bind(null,943))},"v-19e7e228":function(){return t.e(271).then(t.bind(null,944))},"v-1b9bdef1":function(){return t.e(52).then(t.bind(null,945))},"v-516c114a":function(){return t.e(94).then(t.bind(null,946))},"v-400aa74c":function(){return t.e(272).then(t.bind(null,947))},"v-3723c578":function(){return t.e(53).then(t.bind(null,948))},"v-8852b36c":function(){return t.e(95).then(t.bind(null,949))},"v-6a3fd5e8":function(){return t.e(273).then(t.bind(null,950))},"v-efcc73e8":function(){return t.e(274).then(t.bind(null,951))},"v-438781d6":function(){return t.e(275).then(t.bind(null,952))},"v-2e9dbc86":function(){return t.e(96).then(t.bind(null,953))},"v-98694d68":function(){return t.e(276).then(t.bind(null,954))},"v-47f57e71":function(){return t.e(278).then(t.bind(null,955))},"v-1c5b09bf":function(){return t.e(277).then(t.bind(null,956))},"v-4fd3bacc":function(){return t.e(97).then(t.bind(null,957))},"v-6a6e256c":function(){return t.e(279).then(t.bind(null,958))},"v-55ae2236":function(){return t.e(280).then(t.bind(null,959))},"v-08b0f4d8":function(){return Promise.all([t.e(0),t.e(54)]).then(t.bind(null,960))},"v-6e996aa2":function(){return t.e(98).then(t.bind(null,961))},"v-037f6074":function(){return t.e(281).then(t.bind(null,962))},"v-95ff1c02":function(){return t.e(282).then(t.bind(null,963))},"v-346e3ce6":function(){return t.e(99).then(t.bind(null,964))},"v-7b427e40":function(){return t.e(283).then(t.bind(null,965))},"v-72927900":function(){return t.e(15).then(t.bind(null,966))},"v-77ce6300":function(){return t.e(55).then(t.bind(null,967))},"v-a2fb3f00":function(){return t.e(22).then(t.bind(null,968))},"v-16fa72cc":function(){return t.e(16).then(t.bind(null,969))},"v-d071ee00":function(){return t.e(284).then(t.bind(null,970))},"v-0980427e":function(){return t.e(20).then(t.bind(null,971))},"v-712e7cb8":function(){return t.e(286).then(t.bind(null,972))},"v-f53df298":function(){return t.e(285).then(t.bind(null,973))},"v-f24c0590":function(){return t.e(287).then(t.bind(null,974))},"v-9ab51f54":function(){return t.e(288).then(t.bind(null,975))},"v-04fefc4a":function(){return t.e(289).then(t.bind(null,976))},"v-d9a24a5c":function(){return t.e(290).then(t.bind(null,977))},"v-9833fbb4":function(){return t.e(291).then(t.bind(null,978))},"v-a7ad4b84":function(){return t.e(292).then(t.bind(null,979))},"v-151998f0":function(){return t.e(293).then(t.bind(null,980))},"v-10c1b3bc":function(){return t.e(294).then(t.bind(null,981))},"v-846210da":function(){return t.e(56).then(t.bind(null,982))},"v-483bee76":function(){return t.e(295).then(t.bind(null,983))},"v-1b846906":function(){return t.e(296).then(t.bind(null,984))},"v-80e5c274":function(){return t.e(297).then(t.bind(null,985))},"v-b6142aea":function(){return t.e(298).then(t.bind(null,986))},"v-1f0dbe86":function(){return t.e(300).then(t.bind(null,987))},"v-a2a432b4":function(){return t.e(299).then(t.bind(null,988))},"v-856d3940":function(){return t.e(301).then(t.bind(null,989))},"v-3a7efb40":function(){return t.e(303).then(t.bind(null,990))},"v-58d00a40":function(){return t.e(302).then(t.bind(null,991))},"v-69699fc0":function(){return t.e(304).then(t.bind(null,992))},"v-08f2d46c":function(){return t.e(306).then(t.bind(null,993))},"v-8df458c0":function(){return t.e(305).then(t.bind(null,994))},"v-63795daa":function(){return t.e(307).then(t.bind(null,995))},"v-cafac8c0":function(){return t.e(308).then(t.bind(null,996))},"v-23d1ddc4":function(){return t.e(57).then(t.bind(null,997))},"v-a598da14":function(){return t.e(309).then(t.bind(null,998))},"v-f69511c4":function(){return t.e(310).then(t.bind(null,999))},"v-59f43a00":function(){return t.e(311).then(t.bind(null,1e3))},"v-3be4ca38":function(){return t.e(58).then(t.bind(null,1001))},"v-bd433584":function(){return t.e(17).then(t.bind(null,1002))}};function en(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var nn=/-(\w)/g,tn=en((function(e){return e.replace(nn,(function(e,n){return n?n.toUpperCase():""}))})),on=/\B([A-Z])/g,an=en((function(e){return e.replace(on,"-$1").toLowerCase()})),rn=en((function(e){return e.charAt(0).toUpperCase()+e.slice(1)}));function sn(e,n){if(n)return e(n)?e(n):n.includes("-")?e(rn(tn(n))):e(rn(n))||e(an(n))}var ln=Object.assign({},Qe,Ze),cn=function(e){return ln[e]},dn=function(e){return Ze[e]},un=function(e){return Qe[e]},pn=function(e){return i.a.component(e)};function hn(e){return sn(dn,e)}function mn(e){return sn(un,e)}function gn(e){return sn(cn,e)}function fn(e){return sn(pn,e)}function yn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return Promise.all(n.filter((function(e){return e})).map(function(){var e=a(regeneratorRuntime.mark((function e(n){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(fn(n)||!gn(n)){e.next=5;break}return e.next=3,gn(n)();case 3:t=e.sent,i.a.component(n,t.default);case 5:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()))}function bn(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}var vn=t(41);function wn(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],o=!0,a=!1,i=void 0;try{for(var r,s=e[Symbol.iterator]();!(o=(r=s.next()).done)&&(t.push(r.value),!n||t.length!==n);o=!0);}catch(e){a=!0,i=e}finally{try{o||null==s.return||s.return()}finally{if(a)throw i}}return t}}(e,n)||Object(vn.a)(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}t(218),t(123);var kn=t(206),En=t.n(kn),An={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(e){return"meta"===wn(e,1)[0]})).map((function(e){var n=wn(e,2);n[0];return n[1]})),this.$ssrContext){var e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map((function(e){var n="<meta";return Object.keys(e).forEach((function(t){n+=" ".concat(t,'="').concat(e[t],'"')})),n+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=Cn(this.$canonicalUrl)}var n},mounted:function(){this.currentMetaTags=Object(Xe.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var e=this.getMergedMetaTags();this.currentMetaTags=Sn(e,this.currentMetaTags)},getMergedMetaTags:function(){var e=this.$page.frontmatter.meta||[];return En()([{name:"description",content:this.$description}],e,this.siteMeta,Pn)},updateCanonicalLink:function(){Tn(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",Cn(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){Sn(null,this.currentMetaTags),Tn()}};function Tn(){var e=document.querySelector("link[rel='canonical']");e&&e.remove()}function Cn(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e?'<link href="'.concat(e,'" rel="canonical" />'):""}function Sn(e,n){if(n&&Object(Xe.a)(n).filter((function(e){return e.parentNode===document.head})).forEach((function(e){return document.head.removeChild(e)})),e)return e.map((function(e){var n=document.createElement("meta");return Object.keys(e).forEach((function(t){n.setAttribute(t,e[t])})),document.head.appendChild(n),n}))}function Pn(e){for(var n=0,t=["name","property","itemprop"];n<t.length;n++){var o=t[n];if(e.hasOwnProperty(o))return e[o]+o}return JSON.stringify(e)}var xn=t(207),In={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(xn)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var e=this,n=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(e){return n.some((function(n){return n.hash===e.hash}))})),o=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+o,r=0;r<t.length;r++){var s=t[r],l=t[r+1],c=0===r&&0===o||o>=s.parentElement.offsetTop+10&&(!l||o<l.parentElement.offsetTop-10),d=decodeURIComponent(this.$route.hash);if(c&&d!==decodeURIComponent(s.hash)){var u=s;if(i===a)for(var p=r+1;p<t.length;p++)if(d===decodeURIComponent(t[p].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(u.hash),(function(){e.$nextTick((function(){e.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},Rn=(t(85),t(81)),Dn=t.n(Rn),On={mounted:function(){var e=this;Dn.a.configure({showSpinner:!1}),this.$router.beforeEach((function(e,n,t){e.path===n.path||i.a.component(e.name)||Dn.a.start(),t()})),this.$router.afterEach((function(){Dn.a.done(),e.isSidebarOpen=!1}))}};function Mn(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function Ln(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function jn(e,n,t){return n&&Ln(e.prototype,n),t&&Ln(e,t),e}t(371);
/*! medium-zoom 1.0.6 | MIT License | https://github.com/francoischalifour/medium-zoom */var Nn=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},Un=function(e){return"IMG"===e.tagName},_n=function(e){return e&&1===e.nodeType},qn=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},Bn=function(e){try{return Array.isArray(e)?e.filter(Un):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(Un):_n(e)?[e].filter(Un):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(Un):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},Fn=function(e){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=e,n},Wn=function(e){var n=e.getBoundingClientRect(),t=n.top,o=n.left,a=n.width,i=n.height,r=e.cloneNode(),s=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return r.removeAttribute("id"),r.style.position="absolute",r.style.top=t+s+"px",r.style.left=o+l+"px",r.style.width=a+"px",r.style.height=i+"px",r.style.transform="",r},Kn=function(e,n){var t=Nn({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(e,t);var o=document.createEvent("CustomEvent");return o.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),o};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&o.firstChild?o.insertBefore(a,o.firstChild):o.appendChild(a),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var Gn=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=window.Promise||function(e){function n(){}e(n,n)},a=function(e){var n=e.target;n!==C?-1!==v.indexOf(n)&&g({target:n}):m()},i=function(){if(!k&&T.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(E-e)>A.scrollOffset&&setTimeout(m,150)}},r=function(e){var n=e.key||e.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||m()},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e;if(e.background&&(C.style.background=e.background),e.container&&e.container instanceof Object&&(n.container=Nn({},A.container,e.container)),e.template){var t=_n(e.template)?e.template:document.querySelector(e.template);n.template=t}return A=Nn({},A,n),v.forEach((function(e){e.dispatchEvent(Kn("medium-zoom:update",{detail:{zoom:S}}))})),S},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(Nn({},A,n))},c=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var o=n.reduce((function(e,n){return[].concat(e,Bn(n))}),[]);return o.filter((function(e){return-1===v.indexOf(e)})).forEach((function(e){v.push(e),e.classList.add("medium-zoom-image")})),w.forEach((function(e){var n=e.type,t=e.listener,a=e.options;o.forEach((function(e){e.addEventListener(n,t,a)}))})),S},d=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];T.zoomed&&m();var o=n.length>0?n.reduce((function(e,n){return[].concat(e,Bn(n))}),[]):v;return o.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(Kn("medium-zoom:detach",{detail:{zoom:S}}))})),v=v.filter((function(e){return-1===o.indexOf(e)})),S},u=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.addEventListener("medium-zoom:"+e,n,t)})),w.push({type:"medium-zoom:"+e,listener:n,options:t}),S},p=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.removeEventListener("medium-zoom:"+e,n,t)})),w=w.filter((function(t){return!(t.type==="medium-zoom:"+e&&t.listener.toString()===n.toString())})),S},h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target,t=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,t=void 0;if(A.container)if(A.container instanceof Object)n=(e=Nn({},e,A.container)).width-e.left-e.right-2*A.margin,t=e.height-e.top-e.bottom-2*A.margin;else{var o=(_n(A.container)?A.container:document.querySelector(A.container)).getBoundingClientRect(),a=o.width,i=o.height,r=o.left,s=o.top;e=Nn({},e,{width:a,height:i,left:r,top:s})}n=n||e.width-2*A.margin,t=t||e.height-2*A.margin;var l=T.zoomedHd||T.original,c=qn(l)?n:l.naturalWidth||n,d=qn(l)?t:l.naturalHeight||t,u=l.getBoundingClientRect(),p=u.top,h=u.left,m=u.width,g=u.height,f=Math.min(c,n)/m,y=Math.min(d,t)/g,b=Math.min(f,y),v="scale("+b+") translate3d("+((n-m)/2-h+A.margin+e.left)/b+"px, "+((t-g)/2-p+A.margin+e.top)/b+"px, 0)";T.zoomed.style.transform=v,T.zoomedHd&&(T.zoomedHd.style.transform=v)};return new o((function(e){if(n&&-1===v.indexOf(n))e(S);else{if(T.zoomed)e(S);else{if(n)T.original=n;else{if(!(v.length>0))return void e(S);var o=v;T.original=o[0]}if(T.original.dispatchEvent(Kn("medium-zoom:open",{detail:{zoom:S}})),E=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,k=!0,T.zoomed=Wn(T.original),document.body.appendChild(C),A.template){var a=_n(A.template)?A.template:document.querySelector(A.template);T.template=document.createElement("div"),T.template.appendChild(a.content.cloneNode(!0)),document.body.appendChild(T.template)}if(document.body.appendChild(T.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),T.original.classList.add("medium-zoom-image--hidden"),T.zoomed.classList.add("medium-zoom-image--opened"),T.zoomed.addEventListener("click",m),T.zoomed.addEventListener("transitionend",(function n(){k=!1,T.zoomed.removeEventListener("transitionend",n),T.original.dispatchEvent(Kn("medium-zoom:opened",{detail:{zoom:S}})),e(S)})),T.original.getAttribute("data-zoom-src")){T.zoomedHd=T.zoomed.cloneNode(),T.zoomedHd.removeAttribute("srcset"),T.zoomedHd.removeAttribute("sizes"),T.zoomedHd.src=T.zoomed.getAttribute("data-zoom-src"),T.zoomedHd.onerror=function(){clearInterval(i),console.warn("Unable to reach the zoom image target "+T.zoomedHd.src),T.zoomedHd=null,t()};var i=setInterval((function(){T.zoomedHd.complete&&(clearInterval(i),T.zoomedHd.classList.add("medium-zoom-image--opened"),T.zoomedHd.addEventListener("click",m),document.body.appendChild(T.zoomedHd),t())}),10)}else if(T.original.hasAttribute("srcset")){T.zoomedHd=T.zoomed.cloneNode(),T.zoomedHd.removeAttribute("sizes"),T.zoomedHd.removeAttribute("loading");var r=T.zoomedHd.addEventListener("load",(function(){T.zoomedHd.removeEventListener("load",r),T.zoomedHd.classList.add("medium-zoom-image--opened"),T.zoomedHd.addEventListener("click",m),document.body.appendChild(T.zoomedHd),t()}))}else t()}}}))},m=function(){return new o((function(e){if(!k&&T.original){k=!0,document.body.classList.remove("medium-zoom--opened"),T.zoomed.style.transform="",T.zoomedHd&&(T.zoomedHd.style.transform=""),T.template&&(T.template.style.transition="opacity 150ms",T.template.style.opacity=0),T.original.dispatchEvent(Kn("medium-zoom:close",{detail:{zoom:S}})),T.zoomed.addEventListener("transitionend",(function n(){T.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(T.zoomed),T.zoomedHd&&document.body.removeChild(T.zoomedHd),document.body.removeChild(C),T.zoomed.classList.remove("medium-zoom-image--opened"),T.template&&document.body.removeChild(T.template),k=!1,T.zoomed.removeEventListener("transitionend",n),T.original.dispatchEvent(Kn("medium-zoom:closed",{detail:{zoom:S}})),T.original=null,T.zoomed=null,T.zoomedHd=null,T.template=null,e(S)}))}else e(S)}))},g=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target;return T.original?m():h({target:n})},f=function(){return A},y=function(){return v},b=function(){return T.original},v=[],w=[],k=!1,E=0,A=t,T={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?A=n:(n||"string"==typeof n)&&c(n),A=Nn({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},A);var C=Fn(A.background);document.addEventListener("click",a),document.addEventListener("keyup",r),document.addEventListener("scroll",i),window.addEventListener("resize",m);var S={open:h,close:m,toggle:g,update:s,clone:l,attach:c,detach:d,on:u,off:p,getOptions:f,getImages:y,getZoomedImage:b};return S},zn=".theme-default-content img",Hn=JSON.parse("{}"),Yn=Number("500"),Vn=function(){function e(){Mn(this,e),this.instance=null}return jn(e,[{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:zn;"undefined"!=typeof window&&(null===this.instance?this.instance=Gn(e,Hn):(this.instance.detach(),this.instance.attach(e)))}},{key:"updateDelay",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:zn,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Yn;setTimeout((function(){return e.update(n)}),t)}}]),e}(),Jn=(t(372),{watch:{"$page.path":function(){void 0!==this.$vuepress.mediumZoom&&this.$vuepress.mediumZoom.updateDelay()}},mounted:function(){this.$vuepress.mediumZoom=new Vn,this.$vuepress.mediumZoom.updateDelay()}}),$n=t(128),Xn={props:{parent:Object,code:String,options:{align:String,color:String,backgroundTransition:Boolean,backgroundColor:String,successText:String,staticIcon:Boolean}},data:function(){return{success:!1,originalBackground:null,originalTransition:null}},computed:{alignStyle:function(){var e={};return e[this.options.align]="7.5px",e},iconClass:function(){return this.options.staticIcon?"":"hover"}},mounted:function(){this.originalTransition=this.parent.style.transition,this.originalBackground=this.parent.style.background},beforeDestroy:function(){this.parent.style.transition=this.originalTransition,this.parent.style.background=this.originalBackground},methods:{hexToRgb:function(e){var n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return n?{r:parseInt(n[1],16),g:parseInt(n[2],16),b:parseInt(n[3],16)}:null},copyToClipboard:function(e){var n=this;if(navigator.clipboard)navigator.clipboard.writeText(this.code).then((function(){n.setSuccessTransitions()}),(function(){}));else{var t=document.createElement("textarea");document.body.appendChild(t),t.value=this.code,t.select(),document.execCommand("Copy"),t.remove(),this.setSuccessTransitions()}},setSuccessTransitions:function(){var e=this;if(clearTimeout(this.successTimeout),this.options.backgroundTransition){this.parent.style.transition="background 350ms";var n=this.hexToRgb(this.options.backgroundColor);this.parent.style.background="rgba(".concat(n.r,", ").concat(n.g,", ").concat(n.b,", 0.1)")}this.success=!0,this.successTimeout=setTimeout((function(){e.options.backgroundTransition&&(e.parent.style.background=e.originalBackground,e.parent.style.transition=e.originalTransition),e.success=!1}),500)}}},Qn=(t(374),t(31)),Zn=Object(Qn.a)(Xn,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"code-copy"},[t("svg",{class:e.iconClass,style:e.alignStyle,attrs:{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},on:{click:e.copyToClipboard}},[t("path",{attrs:{fill:"none",d:"M0 0h24v24H0z"}}),e._v(" "),t("path",{attrs:{fill:e.options.color,d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z"}})]),e._v(" "),t("span",{class:e.success?"success":"",style:e.alignStyle},[e._v("\n        "+e._s(e.options.successText)+"\n    ")])])}),[],!1,null,"49140617",null).exports,et=(t(375),[An,In,On,Jn,{updated:function(){this.update()},methods:{update:function(){setTimeout((function(){document.querySelectorAll('div[class*="language-"] pre').forEach((function(e){if(!e.classList.contains("code-copy-added")){var n=new(i.a.extend(Zn));n.options=Object($n.a)({},{align:"bottom",color:"#27b1ff",backgroundTransition:!0,backgroundColor:"#0075b8",successText:"Copied!",staticIcon:!1}),n.code=e.innerText,n.parent=e,n.$mount(),e.classList.add("code-copy-added"),e.appendChild(n.$el)}}))}),100)}}}]),nt={name:"GlobalLayout",computed:{layout:function(){var e=this.getLayout();return bn("layout",e),i.a.component(e)}},methods:{getLayout:function(){if(this.$page.path){var e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},tt=Object(Qn.a)(nt,(function(){var e=this.$createElement;return(this._self._c||e)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,n,t){var o;switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),(o=e[n]).push.apply(o,Object(Xe.a)(t));break;default:throw new Error("Unknown option name.")}}(tt,"mixins",et);var ot=[{name:"v-8f9ecbbc",path:"/",component:tt,beforeEnter:function(e,n,t){yn("SpecialLayout","v-8f9ecbbc").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-6105f836",path:"/docs/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6105f836").then(t)}},{path:"/docs/index.html",redirect:"/docs/"},{name:"v-f5704990",path:"/docs/getting-started/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-f5704990").then(t)}},{path:"/docs/getting-started/index.html",redirect:"/docs/getting-started/"},{name:"v-33b5fb82",path:"/jhipster.html",component:tt,beforeEnter:function(e,n,t){yn("JHipsterLayout","v-33b5fb82").then(t)}},{name:"v-6f3b39b2",path:"/next/docs/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6f3b39b2").then(t)}},{path:"/next/docs/index.html",redirect:"/next/docs/"},{name:"v-374a5768",path:"/next/docs/community/code-of-conduct.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-374a5768").then(t)}},{name:"v-af1249b0",path:"/next/docs/community/contributing.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-af1249b0").then(t)}},{name:"v-16019acc",path:"/next/docs/component-generator/component-gen-customize.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-16019acc").then(t)}},{name:"v-4e11c52a",path:"/next/docs/component-generator/component-gen-tech.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4e11c52a").then(t)}},{name:"v-d835eeb8",path:"/next/docs/component-generator/component-gen-overview.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d835eeb8").then(t)}},{name:"v-1eed0fc5",path:"/next/docs/concepts/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1eed0fc5").then(t)}},{path:"/next/docs/concepts/index.html",redirect:"/next/docs/concepts/"},{name:"v-565f93b4",path:"/next/docs/concepts/pda-architecture.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-565f93b4").then(t)}},{name:"v-eed78d1c",path:"/next/docs/ecr/ecr-bundle-details.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-eed78d1c").then(t)}},{name:"v-33ba85c0",path:"/next/docs/ecr/ecr-bundle-filters.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-33ba85c0").then(t)}},{name:"v-6a7a1ee8",path:"/next/docs/ecr/ecr-bundle-presentation-config.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6a7a1ee8").then(t)}},{name:"v-6fac01ac",path:"/next/docs/ecr/ecr-bundle-versions-faq.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6fac01ac").then(t)}},{name:"v-4060beac",path:"/next/docs/ecr/ecr-how-microservices-connect-to-apps.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4060beac").then(t)}},{name:"v-6a1103a4",path:"/next/docs/ecr/ecr-overview.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6a1103a4").then(t)}},{name:"v-78d2ca34",path:"/next/docs/concepts/custom-resources.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-78d2ca34").then(t)}},{name:"v-ddaca3a8",path:"/next/docs/ecr/ecr-troubleshooting-guide.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-ddaca3a8").then(t)}},{name:"v-1a735e6e",path:"/next/docs/ecr/ecr-uninstall-flow.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1a735e6e").then(t)}},{name:"v-61ed8be8",path:"/next/docs/getting-started/quick-reference.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-61ed8be8").then(t)}},{name:"v-d4bd3f66",path:"/next/docs/getting-started/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d4bd3f66").then(t)}},{path:"/next/docs/getting-started/index.html",redirect:"/next/docs/getting-started/"},{name:"v-3d4c5d6e",path:"/next/docs/getting-started/welcome-wizard.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3d4c5d6e").then(t)}},{name:"v-c5890230",path:"/next/docs/reference/caching-and-clustering.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-c5890230").then(t)}},{name:"v-7bc2fb4c",path:"/next/docs/reference/cluster-resource-limits.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7bc2fb4c").then(t)}},{name:"v-d1257868",path:"/next/docs/reference/databases.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d1257868").then(t)}},{name:"v-9fd918ac",path:"/next/docs/reference/deployment-structure.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-9fd918ac").then(t)}},{name:"v-0c8ecefa",path:"/next/docs/reference/entando-apis.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0c8ecefa").then(t)}},{name:"v-63e6ea8c",path:"/next/docs/reference/entando-cli.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-63e6ea8c").then(t)}},{name:"v-241d4be8",path:"/next/docs/reference/identity-management.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-241d4be8").then(t)}},{name:"v-c90a8f02",path:"/next/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-c90a8f02").then(t)}},{name:"v-7fd3ecd6",path:"/next/docs/reference/freemarker-tags/freemarker-core-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7fd3ecd6").then(t)}},{name:"v-8f8b9fb6",path:"/next/docs/releases/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-8f8b9fb6").then(t)}},{path:"/next/docs/releases/index.html",redirect:"/next/docs/releases/"},{name:"v-0d268fa8",path:"/next/docs/reference/local-tips-and-tricks.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0d268fa8").then(t)}},{name:"v-357745d0",path:"/next/tutorials/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-357745d0").then(t)}},{path:"/next/tutorials/index.html",redirect:"/next/tutorials/"},{name:"v-c55c8274",path:"/next/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-c55c8274").then(t)}},{name:"v-a1b993f4",path:"/next/tutorials/backend-developers/run-local.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a1b993f4").then(t)}},{name:"v-b0b79db4",path:"/next/tutorials/backend-developers/update-data-model.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-b0b79db4").then(t)}},{name:"v-6dcdd3a3",path:"/next/tutorials/cms/app-builder/hello-world.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6dcdd3a3").then(t)}},{name:"v-116b6840",path:"/next/tutorials/cms/content-templates-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-116b6840").then(t)}},{name:"v-2516cca0",path:"/next/tutorials/cms/content-attributes.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2516cca0").then(t)}},{name:"v-21d85140",path:"/next/tutorials/cms/content-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-21d85140").then(t)}},{name:"v-3d80f340",path:"/next/tutorials/cms/content-types-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3d80f340").then(t)}},{name:"v-d8c69380",path:"/next/tutorials/cms/creating-protected-resources.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d8c69380").then(t)}},{name:"v-a55faf84",path:"/next/tutorials/cms/digital-assets-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a55faf84").then(t)}},{name:"v-04e55b50",path:"/next/tutorials/customize-the-platform/add-rest-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-04e55b50").then(t)}},{name:"v-d5ee8bbc",path:"/next/tutorials/cms/page-management.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d5ee8bbc").then(t)}},{name:"v-268e1178",path:"/next/tutorials/customize-the-platform/change-default-datasources-and-connections/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-268e1178").then(t)}},{path:"/next/tutorials/customize-the-platform/change-default-datasources-and-connections/index.html",redirect:"/next/tutorials/customize-the-platform/change-default-datasources-and-connections/"},{name:"v-08657d5c",path:"/next/tutorials/customize-the-platform/connecting-external-db.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-08657d5c").then(t)}},{name:"v-7d2b47ee",path:"/next/tutorials/customize-the-platform/invoking-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7d2b47ee").then(t)}},{name:"v-2ac5fb7a",path:"/next/tutorials/customize-the-platform/extend-app-builder.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2ac5fb7a").then(t)}},{name:"v-0b5b2676",path:"/next/tutorials/customize-the-platform/pda-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0b5b2676").then(t)}},{name:"v-424dcb66",path:"/next/tutorials/devops/backing-up-and-restoring-your-environment.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-424dcb66").then(t)}},{name:"v-5ff106e2",path:"/next/tutorials/devops/build-core-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5ff106e2").then(t)}},{name:"v-ad8a3fa8",path:"/next/tutorials/devops/default-database.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-ad8a3fa8").then(t)}},{name:"v-4c36c0d3",path:"/next/tutorials/devops/clustering-caching/caching-and-clustering.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4c36c0d3").then(t)}},{name:"v-663d6404",path:"/next/tutorials/devops/external-database/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-663d6404").then(t)}},{path:"/next/tutorials/devops/external-database/index.html",redirect:"/next/tutorials/devops/external-database/"},{name:"v-1d7e1652",path:"/next/tutorials/devops/external-keycloak/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1d7e1652").then(t)}},{path:"/next/tutorials/devops/external-keycloak/index.html",redirect:"/next/tutorials/devops/external-keycloak/"},{name:"v-3b9d33c6",path:"/next/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3b9d33c6").then(t)}},{name:"v-40b42cf4",path:"/next/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-40b42cf4").then(t)}},{name:"v-267fcbe6",path:"/next/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-267fcbe6").then(t)}},{name:"v-bce12d6a",path:"/next/tutorials/devops/installation/google-cloud-platform/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-bce12d6a").then(t)}},{path:"/next/tutorials/devops/installation/google-cloud-platform/index.html",redirect:"/next/tutorials/devops/installation/google-cloud-platform/"},{name:"v-a514f074",path:"/next/tutorials/devops/installation/open-shift/openshift-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a514f074").then(t)}},{name:"v-307f57a0",path:"/next/tutorials/ecr/deploy-components-without-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-307f57a0").then(t)}},{name:"v-71b59a20",path:"/next/tutorials/ecr/ecr-private-git-repo.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-71b59a20").then(t)}},{name:"v-c591f200",path:"/next/tutorials/ecr/ecr-private-images.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-c591f200").then(t)}},{name:"v-e9447f00",path:"/next/tutorials/ecr/export-bundle-from-application.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-e9447f00").then(t)}},{name:"v-48046660",path:"/next/tutorials/ecr/publish-project-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-48046660").then(t)}},{name:"v-eb2ee8e0",path:"/next/tutorials/ecr/publish-simple-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-eb2ee8e0").then(t)}},{name:"v-93c5c52a",path:"/next/tutorials/micro-frontends/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-93c5c52a").then(t)}},{path:"/next/tutorials/micro-frontends/index.html",redirect:"/next/tutorials/micro-frontends/"},{name:"v-bc42847c",path:"/next/tutorials/micro-frontends/angular.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-bc42847c").then(t)}},{name:"v-30559540",path:"/next/tutorials/micro-frontends/authentication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-30559540").then(t)}},{name:"v-77fa3f1a",path:"/next/tutorials/micro-frontends/communication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-77fa3f1a").then(t)}},{name:"v-a95b2144",path:"/next/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a95b2144").then(t)}},{path:"/next/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/index.html",redirect:"/next/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{name:"v-72d8dd08",path:"/next/tutorials/micro-frontends/react.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-72d8dd08").then(t)}},{name:"v-65aba380",path:"/next/tutorials/micro-frontends/widget-configuration.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-65aba380").then(t)}},{name:"v-087c5f39",path:"/openshift.html",component:tt,beforeEnter:function(e,n,t){yn("OpenShiftLayout","v-087c5f39").then(t)}},{name:"v-ff78147a",path:"/tutorials/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-ff78147a").then(t)}},{path:"/tutorials/index.html",redirect:"/tutorials/"},{name:"v-6c251162",path:"/next/tutorials/samples/install-standard-demo.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6c251162").then(t)}},{name:"v-43768dc5",path:"/v6.1/docs/concepts/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-43768dc5").then(t)}},{path:"/v6.1/docs/concepts/index.html",redirect:"/v6.1/docs/concepts/"},{name:"v-7a0c5c26",path:"/v6.1/docs/concepts/pda-architecture.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7a0c5c26").then(t)}},{name:"v-68d2c0e6",path:"/v6.1/docs/concepts/custom-resources.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-68d2c0e6").then(t)}},{name:"v-6696675c",path:"/v6.1/docs/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6696675c").then(t)}},{path:"/v6.1/docs/index.html",redirect:"/v6.1/docs/"},{name:"v-65cd12ed",path:"/v6.1/docs/getting-started/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-65cd12ed").then(t)}},{path:"/v6.1/docs/getting-started/index.html",redirect:"/v6.1/docs/getting-started/"},{name:"v-9e5cc7e8",path:"/v6.1/docs/getting-started/quick-reference.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-9e5cc7e8").then(t)}},{name:"v-3469f1cc",path:"/v6.1/docs/reference/add_datasource_to_eap_image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3469f1cc").then(t)}},{name:"v-2fb94430",path:"/v6.1/docs/reference/core-swagger.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2fb94430").then(t)}},{name:"v-d6de65ec",path:"/v6.1/docs/reference/deployment-structure.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d6de65ec").then(t)}},{name:"v-5787385a",path:"/v6.1/docs/reference/entando-apis.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5787385a").then(t)}},{name:"v-3c0fba7f",path:"/v6.1/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3c0fba7f").then(t)}},{name:"v-4678a3b6",path:"/v6.1/docs/releases/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4678a3b6").then(t)}},{path:"/v6.1/docs/releases/index.html",redirect:"/v6.1/docs/releases/"},{name:"v-5c03f9d0",path:"/v6.1/tutorials/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5c03f9d0").then(t)}},{path:"/v6.1/tutorials/index.html",redirect:"/v6.1/tutorials/"},{name:"v-c8257a16",path:"/v6.1/docs/reference/freemarker-tags/freemarker-core-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-c8257a16").then(t)}},{name:"v-81215fb4",path:"/v6.1/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-81215fb4").then(t)}},{name:"v-55cdae2c",path:"/v6.1/tutorials/cms/content-models-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-55cdae2c").then(t)}},{name:"v-81742dfa",path:"/v6.1/tutorials/cms/app-builder/hello-world.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-81742dfa").then(t)}},{name:"v-1f495540",path:"/v6.1/tutorials/cms/content-types-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1f495540").then(t)}},{name:"v-5815c43c",path:"/v6.1/tutorials/cms/contents-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5815c43c").then(t)}},{name:"v-026f84c4",path:"/v6.1/tutorials/cms/digital-assets-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-026f84c4").then(t)}},{name:"v-126467b2",path:"/v6.1/tutorials/cms/custom-html-widgets.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-126467b2").then(t)}},{name:"v-1d83e0c0",path:"/v6.1/tutorials/cms/list-of-Content-attributes.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1d83e0c0").then(t)}},{name:"v-2982c900",path:"/v6.1/tutorials/cms/publish-a-content-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2982c900").then(t)}},{name:"v-4ed657b8",path:"/v6.1/tutorials/customize-the-platform/add-rest-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4ed657b8").then(t)}},{name:"v-974b2b74",path:"/v6.1/tutorials/customize-the-platform/add_datasource_to_eap_image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-974b2b74").then(t)}},{name:"v-8794784e",path:"/v6.1/tutorials/customize-the-platform/app-builder/hello-world.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-8794784e").then(t)}},{name:"v-1f32e193",path:"/v6.1/tutorials/customize-the-platform/app-engine/building-prepackaged-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1f32e193").then(t)}},{name:"v-2992138f",path:"/v6.1/tutorials/customize-the-platform/app-builder/tutorial-extending-app-builder.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2992138f").then(t)}},{name:"v-e9938dda",path:"/v6.1/tutorials/customize-the-platform/app-engine/build-core-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-e9938dda").then(t)}},{name:"v-a91812da",path:"/v6.1/tutorials/customize-the-platform/app-engine/core-swagger.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a91812da").then(t)}},{name:"v-23af9480",path:"/v6.1/tutorials/customize-the-platform/app-engine/tutorials/invoking-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-23af9480").then(t)}},{name:"v-be7b3b00",path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-be7b3b00").then(t)}},{name:"v-39cda378",path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-39cda378").then(t)}},{path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/index.html",redirect:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/"},{name:"v-5009a1de",path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5009a1de").then(t)}},{name:"v-77f92ebc",path:"/v6.1/tutorials/customize-the-platform/connecting-external-db.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-77f92ebc").then(t)}},{name:"v-61a61646",path:"/v6.1/tutorials/customize-the-platform/databases.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-61a61646").then(t)}},{name:"v-63176564",path:"/v6.1/tutorials/customize-the-platform/invoking-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-63176564").then(t)}},{name:"v-069d34da",path:"/v6.1/tutorials/customize-the-platform/extend-app-builder.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-069d34da").then(t)}},{name:"v-07300966",path:"/v6.1/tutorials/devops/backing-up-and-restoring-your-environment.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-07300966").then(t)}},{name:"v-5ca42bd6",path:"/v6.1/tutorials/customize-the-platform/pda-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5ca42bd6").then(t)}},{name:"v-beeab77c",path:"/v6.1/tutorials/devops/build-core-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-beeab77c").then(t)}},{name:"v-197d46c4",path:"/v6.1/tutorials/devops/external-database/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-197d46c4").then(t)}},{path:"/v6.1/tutorials/devops/external-database/index.html",redirect:"/v6.1/tutorials/devops/external-database/"},{name:"v-43de24f2",path:"/v6.1/tutorials/devops/external-keycloak/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-43de24f2").then(t)}},{path:"/v6.1/tutorials/devops/external-keycloak/index.html",redirect:"/v6.1/tutorials/devops/external-keycloak/"},{name:"v-5ba28d60",path:"/v6.1/tutorials/ecr/ecr-bundle-details.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5ba28d60").then(t)}},{name:"v-861cc580",path:"/v6.1/tutorials/ecr/ecr-bundle-filters.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-861cc580").then(t)}},{name:"v-5ccc0800",path:"/v6.1/tutorials/ecr/ecr-bundle-presentation-config.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5ccc0800").then(t)}},{name:"v-7ab73f40",path:"/v6.1/tutorials/ecr/ecr-overview.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7ab73f40").then(t)}},{name:"v-176c11e4",path:"/v6.1/tutorials/ecr/ecr-troubleshooting-guide.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-176c11e4").then(t)}},{name:"v-580c2f40",path:"/v6.1/tutorials/ecr/how-to-create-local-npm-registry.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-580c2f40").then(t)}},{name:"v-ddda39c0",path:"/v6.1/tutorials/ecr/ecr-uninstall-flow.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-ddda39c0").then(t)}},{name:"v-cd20d140",path:"/v6.1/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-cd20d140").then(t)}},{name:"v-1df409ed",path:"/v6.1/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1df409ed").then(t)}},{name:"v-af750026",path:"/v6.1/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-af750026").then(t)}},{name:"v-09fe236b",path:"/v6.1/tutorials/micro-frontends/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-09fe236b").then(t)}},{path:"/v6.1/tutorials/micro-frontends/index.html",redirect:"/v6.1/tutorials/micro-frontends/"},{name:"v-be5aa166",path:"/v6.1/tutorials/ecr/tutorials/from-blueprint-to-de.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-be5aa166").then(t)}},{name:"v-3b0f49bc",path:"/v6.1/tutorials/micro-frontends/angular.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3b0f49bc").then(t)}},{name:"v-ca77df0c",path:"/v6.1/tutorials/micro-frontends/communication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-ca77df0c").then(t)}},{name:"v-2bb0591c",path:"/v6.1/tutorials/micro-frontends/authentication/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2bb0591c").then(t)}},{path:"/v6.1/tutorials/micro-frontends/authentication/index.html",redirect:"/v6.1/tutorials/micro-frontends/authentication/"},{name:"v-7329955e",path:"/v6.1/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7329955e").then(t)}},{path:"/v6.1/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/index.html",redirect:"/v6.1/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{name:"v-2c5a4dbe",path:"/v6.1/tutorials/micro-frontends/micro-frontends/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2c5a4dbe").then(t)}},{path:"/v6.1/tutorials/micro-frontends/micro-frontends/index.html",redirect:"/v6.1/tutorials/micro-frontends/micro-frontends/"},{name:"v-64e83e2d",path:"/v6.1/tutorials/micro-frontends/micro-frontends/authentication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-64e83e2d").then(t)}},{name:"v-c73e25e6",path:"/v6.1/tutorials/micro-frontends/micro-frontends/create-react-microfrontend-widget.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-c73e25e6").then(t)}},{name:"v-092b0aad",path:"/v6.1/tutorials/micro-frontends/micro-frontends/create-config-screen-for-appbuilder-widget.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-092b0aad").then(t)}},{name:"v-b07a18da",path:"/v6.1/tutorials/micro-frontends/micro-frontends/create-angular-microfrontend-widget.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-b07a18da").then(t)}},{name:"v-4381b4cd",path:"/v6.1/tutorials/micro-frontends/micro-frontends/display-widget-config-data.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4381b4cd").then(t)}},{name:"v-76dcebcd",path:"/v6.1/tutorials/micro-frontends/micro-frontends/mixed-widget-communication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-76dcebcd").then(t)}},{name:"v-25348330",path:"/v6.1/tutorials/micro-frontends/react.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-25348330").then(t)}},{name:"v-1316b766",path:"/v6.1/tutorials/micro-frontends/micro-frontends/widget-communication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1316b766").then(t)}},{name:"v-4a3a209f",path:"/v6.1/tutorials/micro-frontends/micro-frontends/generated-widgets.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4a3a209f").then(t)}},{name:"v-62808372",path:"/v6.1/tutorials/micro-frontends/widget-configuration/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-62808372").then(t)}},{path:"/v6.1/tutorials/micro-frontends/widget-configuration/index.html",redirect:"/v6.1/tutorials/micro-frontends/widget-configuration/"},{name:"v-5c95a127",path:"/v6.1/tutorials/micro-frontends/widget-configuration/display-widget-config-data.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5c95a127").then(t)}},{name:"v-3aec1854",path:"/v6.2/docs/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3aec1854").then(t)}},{path:"/v6.2/docs/index.html",redirect:"/v6.2/docs/"},{name:"v-415409a8",path:"/v6.2/docs/community/code-of-conduct.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-415409a8").then(t)}},{name:"v-696f6946",path:"/v6.2/docs/community/contributing.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-696f6946").then(t)}},{name:"v-80ada3b6",path:"/v6.2/docs/concepts/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-80ada3b6").then(t)}},{path:"/v6.2/docs/concepts/index.html",redirect:"/v6.2/docs/concepts/"},{name:"v-606945f4",path:"/v6.2/docs/concepts/pda-architecture.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-606945f4").then(t)}},{name:"v-82dc7c74",path:"/v6.2/docs/concepts/custom-resources.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-82dc7c74").then(t)}},{name:"v-498cc790",path:"/v6.2/docs/ecr/ecr-bundle-details.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-498cc790").then(t)}},{name:"v-1699d844",path:"/v6.2/docs/ecr/ecr-bundle-filters.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1699d844").then(t)}},{name:"v-76c4832a",path:"/v6.2/docs/ecr/ecr-bundle-presentation-config.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-76c4832a").then(t)}},{name:"v-65ff98cc",path:"/v6.2/docs/ecr/ecr-bundle-versions-faq.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-65ff98cc").then(t)}},{name:"v-677a6224",path:"/v6.2/docs/ecr/ecr-how-microservices-connects-to-apps.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-677a6224").then(t)}},{name:"v-4a485be8",path:"/v6.2/docs/ecr/ecr-overview.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4a485be8").then(t)}},{name:"v-1e6c858c",path:"/v6.2/docs/ecr/ecr-troubleshooting-guide.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1e6c858c").then(t)}},{name:"v-492826e8",path:"/v6.2/docs/ecr/ecr-uninstall-flow.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-492826e8").then(t)}},{name:"v-0f23bca8",path:"/v6.2/docs/getting-started/quick-reference.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0f23bca8").then(t)}},{name:"v-7e970e22",path:"/v6.2/docs/getting-started/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7e970e22").then(t)}},{path:"/v6.2/docs/getting-started/index.html",redirect:"/v6.2/docs/getting-started/"},{name:"v-26ff67a8",path:"/v6.2/docs/reference/add_datasource_to_eap_image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-26ff67a8").then(t)}},{name:"v-3118c32c",path:"/v6.2/docs/reference/cluster-resource-limits.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3118c32c").then(t)}},{name:"v-16600c28",path:"/v6.2/docs/reference/databases.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-16600c28").then(t)}},{name:"v-3cd17670",path:"/v6.2/docs/reference/deployment-structure.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3cd17670").then(t)}},{name:"v-64f145d0",path:"/v6.2/docs/reference/entando-apis.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-64f145d0").then(t)}},{name:"v-a7953bc2",path:"/v6.2/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a7953bc2").then(t)}},{name:"v-71f160b3",path:"/v6.2/docs/reference/freemarker-tags/freemarker-core-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-71f160b3").then(t)}},{name:"v-7b34316c",path:"/v6.2/docs/reference/identity-management.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7b34316c").then(t)}},{name:"v-58f64e85",path:"/v6.2/docs/releases/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-58f64e85").then(t)}},{path:"/v6.2/docs/releases/index.html",redirect:"/v6.2/docs/releases/"},{name:"v-866830ac",path:"/v6.2/tutorials/backend-developers/build-and-deploy.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-866830ac").then(t)}},{name:"v-25510810",path:"/v6.2/tutorials/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-25510810").then(t)}},{path:"/v6.2/tutorials/index.html",redirect:"/v6.2/tutorials/"},{name:"v-17045d64",path:"/v6.2/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-17045d64").then(t)}},{name:"v-6478fde6",path:"/v6.2/tutorials/backend-developers/run-local.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6478fde6").then(t)}},{name:"v-6e1ce060",path:"/v6.2/tutorials/cms/content-templates-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6e1ce060").then(t)}},{name:"v-8bb9a4fe",path:"/v6.2/tutorials/cms/app-builder/hello-world.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-8bb9a4fe").then(t)}},{name:"v-1cd37820",path:"/v6.2/tutorials/cms/content-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1cd37820").then(t)}},{name:"v-66e5dae0",path:"/v6.2/tutorials/cms/content-types-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-66e5dae0").then(t)}},{name:"v-cf987aa0",path:"/v6.2/tutorials/cms/custom-html-widgets.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-cf987aa0").then(t)}},{name:"v-0cb4fbc8",path:"/v6.2/tutorials/cms/digital-assets-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0cb4fbc8").then(t)}},{name:"v-737fcee0",path:"/v6.2/tutorials/cms/list-of-Content-attributes.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-737fcee0").then(t)}},{name:"v-413a89a0",path:"/v6.2/tutorials/cms/publish-a-content-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-413a89a0").then(t)}},{name:"v-2bc8a194",path:"/v6.2/tutorials/customize-the-platform/add-rest-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2bc8a194").then(t)}},{name:"v-1c9022e6",path:"/v6.2/tutorials/customize-the-platform/add_datasource_to_eap_image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1c9022e6").then(t)}},{name:"v-c350580e",path:"/v6.2/tutorials/customize-the-platform/app-builder/hello-world.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-c350580e").then(t)}},{name:"v-19281c9a",path:"/v6.2/tutorials/customize-the-platform/app-engine/build-core-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-19281c9a").then(t)}},{name:"v-8585111a",path:"/v6.2/tutorials/customize-the-platform/app-engine/building-prepackaged-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-8585111a").then(t)}},{name:"v-e4d3f29a",path:"/v6.2/tutorials/customize-the-platform/app-engine/core-swagger.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-e4d3f29a").then(t)}},{name:"v-5503dfd0",path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5503dfd0").then(t)}},{path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/index.html",redirect:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/"},{name:"v-65da4ddc",path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-65da4ddc").then(t)}},{name:"v-1bf60ac0",path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1bf60ac0").then(t)}},{name:"v-012cd40c",path:"/v6.2/tutorials/customize-the-platform/connecting-external-db.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-012cd40c").then(t)}},{name:"v-46bd5ad0",path:"/v6.2/tutorials/customize-the-platform/extend-app-builder.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-46bd5ad0").then(t)}},{name:"v-69b9a4cc",path:"/v6.2/tutorials/customize-the-platform/invoking-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-69b9a4cc").then(t)}},{name:"v-5d8b05c6",path:"/v6.2/tutorials/devops/backing-up-and-restoring-your-environment.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5d8b05c6").then(t)}},{name:"v-2659ff40",path:"/v6.2/tutorials/devops/build-core-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2659ff40").then(t)}},{name:"v-102cf958",path:"/v6.2/tutorials/customize-the-platform/pda-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-102cf958").then(t)}},{name:"v-6fa3d88a",path:"/v6.2/tutorials/devops/default-database.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6fa3d88a").then(t)}},{name:"v-73e5ec98",path:"/v6.2/tutorials/devops/external-keycloak/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-73e5ec98").then(t)}},{path:"/v6.2/tutorials/devops/external-keycloak/index.html",redirect:"/v6.2/tutorials/devops/external-keycloak/"},{name:"v-75704160",path:"/v6.2/tutorials/devops/external-database/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-75704160").then(t)}},{path:"/v6.2/tutorials/devops/external-database/index.html",redirect:"/v6.2/tutorials/devops/external-database/"},{name:"v-536a5526",path:"/v6.2/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-536a5526").then(t)}},{name:"v-a13cc134",path:"/v6.2/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a13cc134").then(t)}},{name:"v-07622a2a",path:"/v6.2/tutorials/devops/installation/google-cloud-platform/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-07622a2a").then(t)}},{path:"/v6.2/tutorials/devops/installation/google-cloud-platform/index.html",redirect:"/v6.2/tutorials/devops/installation/google-cloud-platform/"},{name:"v-6e9a7bb4",path:"/v6.2/tutorials/devops/installation/open-shift/openshift-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6e9a7bb4").then(t)}},{name:"v-0f16da74",path:"/v6.2/tutorials/devops/local-tips-and-tricks.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0f16da74").then(t)}},{name:"v-ab0e5bc0",path:"/v6.2/tutorials/ecr/how-to-create-local-npm-registry.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-ab0e5bc0").then(t)}},{name:"v-701e8b40",path:"/v6.2/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-701e8b40").then(t)}},{name:"v-3d12ebad",path:"/v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-git.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3d12ebad").then(t)}},{name:"v-43efab4d",path:"/v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-43efab4d").then(t)}},{name:"v-ebd258e6",path:"/v6.2/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-ebd258e6").then(t)}},{name:"v-6847b620",path:"/v6.2/tutorials/micro-frontends/angular.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6847b620").then(t)}},{name:"v-27be8b6a",path:"/v6.2/tutorials/micro-frontends/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-27be8b6a").then(t)}},{path:"/v6.2/tutorials/micro-frontends/index.html",redirect:"/v6.2/tutorials/micro-frontends/"},{name:"v-4486ad80",path:"/v6.2/tutorials/micro-frontends/authentication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4486ad80").then(t)}},{name:"v-23fbd1b8",path:"/v6.2/tutorials/micro-frontends/communication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-23fbd1b8").then(t)}},{name:"v-7bef863e",path:"/v6.2/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7bef863e").then(t)}},{path:"/v6.2/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/index.html",redirect:"/v6.2/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{name:"v-67b9aca6",path:"/v6.2/tutorials/micro-frontends/react.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-67b9aca6").then(t)}},{name:"v-07879720",path:"/v6.2/tutorials/micro-frontends/widget-configuration.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-07879720").then(t)}},{name:"v-adb93754",path:"/v6.3/docs/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-adb93754").then(t)}},{path:"/v6.3/docs/index.html",redirect:"/v6.3/docs/"},{name:"v-3514fc0c",path:"/v6.3/docs/community/code-of-conduct.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3514fc0c").then(t)}},{name:"v-b64319e8",path:"/v6.3/docs/component-generator/component-gen-customize.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-b64319e8").then(t)}},{name:"v-4120e3f8",path:"/v6.3/docs/community/contributing.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4120e3f8").then(t)}},{name:"v-dcd8b7f4",path:"/v6.3/docs/component-generator/component-gen-tech.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-dcd8b7f4").then(t)}},{name:"v-64ee1b00",path:"/v6.3/docs/component-generator/component-gen-overview.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-64ee1b00").then(t)}},{name:"v-1450c2a6",path:"/v6.3/docs/concepts/custom-resources.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1450c2a6").then(t)}},{name:"v-3bdbce85",path:"/v6.3/docs/concepts/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3bdbce85").then(t)}},{path:"/v6.3/docs/concepts/index.html",redirect:"/v6.3/docs/concepts/"},{name:"v-258a5de6",path:"/v6.3/docs/concepts/pda-architecture.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-258a5de6").then(t)}},{name:"v-80e62764",path:"/v6.3/docs/ecr/ecr-bundle-details.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-80e62764").then(t)}},{name:"v-6ab3389c",path:"/v6.3/docs/ecr/ecr-bundle-filters.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6ab3389c").then(t)}},{name:"v-00077730",path:"/v6.3/docs/ecr/ecr-bundle-presentation-config.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-00077730").then(t)}},{name:"v-0cf3f5ec",path:"/v6.3/docs/ecr/ecr-bundle-versions-faq.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0cf3f5ec").then(t)}},{name:"v-65aa6b28",path:"/v6.3/docs/ecr/ecr-how-microservices-connect-to-apps.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-65aa6b28").then(t)}},{name:"v-5899f08a",path:"/v6.3/docs/ecr/ecr-overview.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-5899f08a").then(t)}},{name:"v-19e7e228",path:"/v6.3/docs/ecr/ecr-troubleshooting-guide.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-19e7e228").then(t)}},{name:"v-1b9bdef1",path:"/v6.3/docs/getting-started/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1b9bdef1").then(t)}},{path:"/v6.3/docs/getting-started/index.html",redirect:"/v6.3/docs/getting-started/"},{name:"v-516c114a",path:"/v6.3/docs/ecr/ecr-uninstall-flow.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-516c114a").then(t)}},{name:"v-400aa74c",path:"/v6.3/docs/getting-started/quick-reference.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-400aa74c").then(t)}},{name:"v-3723c578",path:"/v6.3/docs/reference/caching-and-clustering.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3723c578").then(t)}},{name:"v-8852b36c",path:"/v6.3/docs/getting-started/welcome-wizard.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-8852b36c").then(t)}},{name:"v-6a3fd5e8",path:"/v6.3/docs/reference/cluster-resource-limits.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6a3fd5e8").then(t)}},{name:"v-efcc73e8",path:"/v6.3/docs/reference/databases.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-efcc73e8").then(t)}},{name:"v-438781d6",path:"/v6.3/docs/reference/entando-apis.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-438781d6").then(t)}},{name:"v-2e9dbc86",path:"/v6.3/docs/reference/deployment-structure.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-2e9dbc86").then(t)}},{name:"v-98694d68",path:"/v6.3/docs/reference/entando-cli.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-98694d68").then(t)}},{name:"v-47f57e71",path:"/v6.3/docs/reference/freemarker-tags/freemarker-core-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-47f57e71").then(t)}},{name:"v-1c5b09bf",path:"/v6.3/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1c5b09bf").then(t)}},{name:"v-4fd3bacc",path:"/v6.3/docs/reference/identity-management.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-4fd3bacc").then(t)}},{name:"v-6a6e256c",path:"/v6.3/docs/reference/local-tips-and-tricks.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6a6e256c").then(t)}},{name:"v-55ae2236",path:"/v6.3/docs/releases/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-55ae2236").then(t)}},{path:"/v6.3/docs/releases/index.html",redirect:"/v6.3/docs/releases/"},{name:"v-08b0f4d8",path:"/v6.3/tutorials/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-08b0f4d8").then(t)}},{path:"/v6.3/tutorials/index.html",redirect:"/v6.3/tutorials/"},{name:"v-6e996aa2",path:"/v6.3/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-6e996aa2").then(t)}},{name:"v-037f6074",path:"/v6.3/tutorials/backend-developers/run-local.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-037f6074").then(t)}},{name:"v-95ff1c02",path:"/v6.3/tutorials/cms/app-builder/hello-world.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-95ff1c02").then(t)}},{name:"v-346e3ce6",path:"/v6.3/tutorials/backend-developers/update-data-model.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-346e3ce6").then(t)}},{name:"v-7b427e40",path:"/v6.3/tutorials/cms/content-attributes.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-7b427e40").then(t)}},{name:"v-72927900",path:"/v6.3/tutorials/cms/content-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-72927900").then(t)}},{name:"v-77ce6300",path:"/v6.3/tutorials/cms/content-templates-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-77ce6300").then(t)}},{name:"v-a2fb3f00",path:"/v6.3/tutorials/cms/content-types-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a2fb3f00").then(t)}},{name:"v-16fa72cc",path:"/v6.3/tutorials/cms/digital-assets-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-16fa72cc").then(t)}},{name:"v-d071ee00",path:"/v6.3/tutorials/cms/creating-protected-resources.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d071ee00").then(t)}},{name:"v-0980427e",path:"/v6.3/tutorials/cms/page-management.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-0980427e").then(t)}},{name:"v-712e7cb8",path:"/v6.3/tutorials/customize-the-platform/change-default-datasources-and-connections/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-712e7cb8").then(t)}},{path:"/v6.3/tutorials/customize-the-platform/change-default-datasources-and-connections/index.html",redirect:"/v6.3/tutorials/customize-the-platform/change-default-datasources-and-connections/"},{name:"v-f53df298",path:"/v6.3/tutorials/customize-the-platform/add-rest-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-f53df298").then(t)}},{name:"v-f24c0590",path:"/v6.3/tutorials/customize-the-platform/connecting-external-db.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-f24c0590").then(t)}},{name:"v-9ab51f54",path:"/v6.3/tutorials/customize-the-platform/extend-app-builder.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-9ab51f54").then(t)}},{name:"v-04fefc4a",path:"/v6.3/tutorials/customize-the-platform/invoking-api.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-04fefc4a").then(t)}},{name:"v-d9a24a5c",path:"/v6.3/tutorials/customize-the-platform/pda-tutorial.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-d9a24a5c").then(t)}},{name:"v-9833fbb4",path:"/v6.3/tutorials/devops/backing-up-and-restoring-your-environment.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-9833fbb4").then(t)}},{name:"v-a7ad4b84",path:"/v6.3/tutorials/devops/build-core-image.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a7ad4b84").then(t)}},{name:"v-151998f0",path:"/v6.3/tutorials/devops/default-database.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-151998f0").then(t)}},{name:"v-10c1b3bc",path:"/v6.3/tutorials/devops/external-database/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-10c1b3bc").then(t)}},{path:"/v6.3/tutorials/devops/external-database/index.html",redirect:"/v6.3/tutorials/devops/external-database/"},{name:"v-846210da",path:"/v6.3/tutorials/devops/clustering-caching/caching-and-clustering.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-846210da").then(t)}},{name:"v-483bee76",path:"/v6.3/tutorials/devops/external-keycloak/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-483bee76").then(t)}},{path:"/v6.3/tutorials/devops/external-keycloak/index.html",redirect:"/v6.3/tutorials/devops/external-keycloak/"},{name:"v-1b846906",path:"/v6.3/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1b846906").then(t)}},{name:"v-80e5c274",path:"/v6.3/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-80e5c274").then(t)}},{name:"v-b6142aea",path:"/v6.3/tutorials/devops/installation/google-cloud-platform/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-b6142aea").then(t)}},{path:"/v6.3/tutorials/devops/installation/google-cloud-platform/index.html",redirect:"/v6.3/tutorials/devops/installation/google-cloud-platform/"},{name:"v-1f0dbe86",path:"/v6.3/tutorials/devops/installation/open-shift/openshift-install.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-1f0dbe86").then(t)}},{name:"v-a2a432b4",path:"/v6.3/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a2a432b4").then(t)}},{name:"v-856d3940",path:"/v6.3/tutorials/ecr/deploy-components-without-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-856d3940").then(t)}},{name:"v-3a7efb40",path:"/v6.3/tutorials/ecr/ecr-private-images.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3a7efb40").then(t)}},{name:"v-58d00a40",path:"/v6.3/tutorials/ecr/ecr-private-git-repo.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-58d00a40").then(t)}},{name:"v-69699fc0",path:"/v6.3/tutorials/ecr/export-bundle-from-application.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-69699fc0").then(t)}},{name:"v-08f2d46c",path:"/v6.3/tutorials/ecr/publish-simple-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-08f2d46c").then(t)}},{name:"v-8df458c0",path:"/v6.3/tutorials/ecr/publish-project-bundle.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-8df458c0").then(t)}},{name:"v-63795daa",path:"/v6.3/tutorials/micro-frontends/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-63795daa").then(t)}},{path:"/v6.3/tutorials/micro-frontends/index.html",redirect:"/v6.3/tutorials/micro-frontends/"},{name:"v-cafac8c0",path:"/v6.3/tutorials/micro-frontends/authentication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-cafac8c0").then(t)}},{name:"v-23d1ddc4",path:"/v6.3/tutorials/micro-frontends/angular.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-23d1ddc4").then(t)}},{name:"v-a598da14",path:"/v6.3/tutorials/micro-frontends/communication.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-a598da14").then(t)}},{name:"v-f69511c4",path:"/v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-f69511c4").then(t)}},{path:"/v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/index.html",redirect:"/v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{name:"v-59f43a00",path:"/v6.3/tutorials/micro-frontends/widget-configuration.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-59f43a00").then(t)}},{name:"v-3be4ca38",path:"/v6.3/tutorials/micro-frontends/react.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-3be4ca38").then(t)}},{name:"v-bd433584",path:"/v6.3/tutorials/samples/install-standard-demo.html",component:tt,beforeEnter:function(e,n,t){yn("Layout","v-bd433584").then(t)}},{path:"*",component:tt}],at={title:"Entando Developers",description:"Entando Developers",base:"/",headTags:[["link",{rel:"icon",href:"/theme/favicon.png"}],["meta",{name:"viewport",content:"width=device-width, initial-scale=1"}],["script",{src:"/theme/javascript/hotjar.js"}],["script",{src:"https://www.googletagmanager.com/gtag/js?id=UA-17222082-5"}],["script",{src:"/theme/javascript/ga.js"}]],pages:[{frontmatter:{layout:"SpecialLayout"},regularPath:"/",relativePath:"README.md",key:"v-8f9ecbbc",path:"/",lastUpdated:"1/7/2021, 3:34:46 PM",content:""},{frontmatter:{},regularPath:"/docs/",relativePath:"docs/README.md",key:"v-6105f836",path:"/docs/",lastUpdated:"1/27/2021, 11:20:41 AM",content:" Redirecting to the current Docs...\n \n"},{frontmatter:{},regularPath:"/docs/getting-started/",relativePath:"docs/getting-started/README.md",key:"v-f5704990",path:"/docs/getting-started/",lastUpdated:"1/27/2021, 11:20:41 AM",content:" Redirecting to the current Getting Started guide...\n \n"},{frontmatter:{layout:"JHipsterLayout"},regularPath:"/jhipster.html",relativePath:"jhipster.md",key:"v-33b5fb82",path:"/jhipster.html",lastUpdated:"7/28/2020, 4:50:23 PM",content:""},{frontmatter:{sidebarDepth:0},regularPath:"/next/docs/",relativePath:"next/docs/README.md",key:"v-6f3b39b2",path:"/next/docs/",headers:[{level:2,title:"Entando Architecture",slug:"entando-architecture"},{level:2,title:"Why Kubernetes?",slug:"why-kubernetes"}],lastUpdated:"6/30/2020, 3:48:02 PM",content:" WARNING \n This documentation is for the version of Entando currently under development and is a work in progress.\nSome screenshots or references to the previous version may be out-of-date and some documented features may\nonly be available by building from source. \n Entando Platform \n Entando is a  micro frontend platform for Kubernetes  that helps enterprises innovate faster with parallel development teams that have end-to-end autonomy across the entire stack. \n With native support for Javascript app development, a micro frontend and microservices architecture, deployment of apps in containers that can be individually scaled up and down, and automated management of containers with Kubernetes, we simplify the move for enterprises looking to modernize across on-prem and cloud infrastructures. \n Entando Architecture \n \n The Entando platform includes the following major elements: \n \n Entando App Engine : assemble micro frontends & microservices and compose them on a page. \n Entando App Builder : the user interface to build and design applications. \n Entando Component Generator : provide advanced data modeling capabilities and automatically generate the corresponding microservices and micro frontends. \n Entando Component Repository : a shared, internal repository to encourage code reuse across the enterprise. \n Entando Identity Management : token-based authentication across multiple domains and connect service providers with identity providers. \n Entando WCMS : a web content management system that supports headless CMS. \n (optional)  Entando Business Automation Bundle : workflow and task automation including out of the box integration with Red Hat Process Automation Manager (PAM). \n Why Kubernetes? \n Instead of you doing the work to ensure your apps and services stay up and running, Kubernetes does the work for you. For each app or service, you can set resource limits, the number of pods you want backing each service, upgrade strategy, and auto-scaling. Kubernetes actively manages your cluster to match your defined resource utilization and ensures your site doesn't go down. \n How Google Runs Containers in Production \n Each week, Google deploys over 2 billion containers in production to run all of its services like Gmail, YouTube, and Search. Kubernetes is Google's open source solution to automate the management of containers at scale. \n \n Over 50% of Fortune 500 companies use Kubernetes with product offerings from Amazon Elastic Kubernetes Service (EKS), Google Cloud Platform (GKE), IBM (Red Hat) OpenShift, Microsoft Azure (AKS), and VMWare Pivotal (PKS). \n"},{title:"Entando Contributor Covenant Code of Conduct",frontmatter:{},regularPath:"/next/docs/community/code-of-conduct.html",relativePath:"next/docs/community/code-of-conduct.md",key:"v-374a5768",path:"/next/docs/community/code-of-conduct.html",headers:[{level:2,title:"Our Pledge",slug:"our-pledge"},{level:2,title:"Our Standards",slug:"our-standards"},{level:2,title:"Enforcement Responsibilities",slug:"enforcement-responsibilities"},{level:2,title:"Scope",slug:"scope"},{level:2,title:"Enforcement",slug:"enforcement"},{level:2,title:"Enforcement Guidelines",slug:"enforcement-guidelines"},{level:3,title:"1. Correction",slug:"_1-correction"},{level:3,title:"2. Warning",slug:"_2-warning"},{level:3,title:"3. Temporary Ban",slug:"_3-temporary-ban"},{level:3,title:"4. Permanent Ban",slug:"_4-permanent-ban"},{level:2,title:"Attribution",slug:"attribution"}],lastUpdated:"7/21/2020, 6:50:11 AM",content:" Entando Contributor Covenant Code of Conduct \n Our Pledge \n We as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation. \n We pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community. \n Our Standards \n Examples of behavior that contributes to a positive environment for our\ncommunity include: \n \n Demonstrating empathy and kindness toward other people \n Being respectful of differing opinions, viewpoints, and experiences \n Giving and gracefully accepting constructive feedback \n Accepting responsibility and apologizing to those affected by our mistakes,\nand learning from the experience \n Focusing on what is best not just for us as individuals, but for the\noverall community \n \n Examples of unacceptable behavior include: \n \n The use of sexualized language or imagery, and sexual attention or\nadvances of any kind \n Trolling, insulting or derogatory comments, and personal or political attacks \n Public or private harassment \n Publishing others' private information, such as a physical or email\naddress, without their explicit permission \n Other conduct which could reasonably be considered inappropriate in a\nprofessional setting \n Enforcement Responsibilities \n Community leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful. \n Community leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate. \n Scope \n This Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. \n Enforcement \n Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncommunity@entando.com. \n All complaints will be reviewed and investigated promptly and fairly. \n All community leaders are obligated to respect the privacy and security of the\nreporter of any incident. \n Enforcement Guidelines \n Community leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct: \n 1. Correction \n Community Impact : Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community. \n Consequence : A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested. \n 2. Warning \n Community Impact : A violation through a single incident or series\nof actions. \n Consequence : A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban. \n 3. Temporary Ban \n Community Impact : A serious violation of community standards, including\nsustained inappropriate behavior. \n Consequence : A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban. \n 4. Permanent Ban \n Community Impact : Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals. \n Consequence : A permanent ban from any sort of public interaction within\nthe community. \n Attribution \n This Code of Conduct is adapted from the  Contributor Covenant ,\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html. \n Community Impact Guidelines were inspired by  Mozilla's code of conduct\nenforcement ladder . \n For answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations. \n"},{title:"Contributing to Entando",frontmatter:{},regularPath:"/next/docs/community/contributing.html",relativePath:"next/docs/community/contributing.md",key:"v-af1249b0",path:"/next/docs/community/contributing.html",headers:[{level:2,title:"Contributing to the Source",slug:"contributing-to-the-source"},{level:2,title:"Code Style and Formatting",slug:"code-style-and-formatting"},{level:3,title:"Java",slug:"java"},{level:3,title:"Javascript",slug:"javascript"},{level:3,title:"Find the Code",slug:"find-the-code"},{level:2,title:"Get Help",slug:"get-help"},{level:2,title:"Licenses",slug:"licenses"}],lastUpdated:"2/22/2021, 4:38:05 PM",content:" Contributing to Entando \n There are many ways to contribute to Entando including participating in the  Entando Forum , opening issues on GitHub,  updating documentation , building bundles using the  Entando Component Repository , and contributing directly to the source. \n Contributing to the Source \n Entando welcomes contributions to our source code repositories. This is a brief overview of how to create a pull request for an Entando repository. \n If you're new to forks in the git world checkout this guide  Working with Forks \n \n Find the repository you want to edit on the Entando GitHub\n \n https://github.com/entando \n https://github.com/entando-k8s \n \n \n Create a fork of the repository you want to update \n Make your changes or updates on your fork. We recommend making your changes on a branch so that you can update your commits as needed before creating your PR \n Submit a PR against the main (or master) branch of the repository you're working against. If you're fixing a specific issue reference that issue number in the notes and linked issues \n Watch the automated builds to make sure everything passes \n The Entando team will merge your changes! \n Code Style and Formatting \n Most Entando repositories enforce code style rules. References and setup for the main\nsource types are provided below. \n Java \n Java rules are based on checkstyle and PMD can be found at in the  entando-code-style  project. There are configuration files for Intellij, Eclipse, and Netbeans for automated formatting. \n Javascript \n Code style and formatting rules for all Entando javascript projects are enforced by linters in every project. For a reference example see: .sass-lint.yml and .eslintrc.js in the  App builder \n In the future these rules will be replaced by Prettier. \n Find the Code \n Entando source can be found on GitHub in the following organizations. \n \n https://github.com/entando \n https://github.com/entando-k8s \n \n For an overview of the key projects in both GitHub organizations and their role in the architecture see  Entando Deployment Structure \n Get Help \n If you have questions, need help, or want to find out more about contributing join us at \n \n Entando Forum \n Community Slack \n Licenses \n The Entando Platform is 100% open source and most Entando repositories are licensed under the LGPL V3.0. The entando-docs repository is one exception with a  CC BY 4.0 license . See the LICENSE file in the root directory of a given repository for its specific license information. \n Entando libraries licensed with LGPL V3.0 that are used to build applications may be linked to proprietary applications. If linked statically, the application code must also be released as LGPL. If the application is linked dynamically to Entando, the proprietary code does not need to be released. \n A commercial open source license is provided for the Entando Platform for customers with Gold and Platinum subscriptions. This license permits freely extending or modifying Entando without requiring contribution of confidential IP back to the open source community. \n"},{title:"Customizing the Entando Component Generator",frontmatter:{},regularPath:"/next/docs/component-generator/component-gen-customize.html",relativePath:"next/docs/component-generator/component-gen-customize.md",key:"v-16019acc",path:"/next/docs/component-generator/component-gen-customize.html",lastUpdated:"10/14/2020, 10:22:23 AM",content:" Customizing the Entando Component Generator \n The Entando Component Generator is an instance of a JHipster blueprint that can be extended to match your team's needs and requirements. If you're interested in extending the blueprint or creating your own blueprint, contact us on the  Entando Forum  or  Community Slack  and we'll help you get started. \n The source for the Entando blueprint can be found  here . \n To learn more about creating blueprints and to see other blueprints available from JHipster checkout the  blueprint documentation  or visit  JHipster  for an overview. \n"},{title:"Component Generation Technologies",frontmatter:{},regularPath:"/next/docs/component-generator/component-gen-tech.html",relativePath:"next/docs/component-generator/component-gen-tech.md",key:"v-4e11c52a",path:"/next/docs/component-generator/component-gen-tech.html",headers:[{level:2,title:"Technology in the Generated Components",slug:"technology-in-the-generated-components"},{level:2,title:"Blueprint Technology",slug:"blueprint-technology"}],lastUpdated:"11/25/2020, 9:35:26 AM",content:" Component Generation Technologies \n Technology in the Generated Components \n When generating a microservice using the Entando Component Generator there are a number of technical choices that need to be made \n \n Microservice code\n \n The Component Generator currently only supports the generation of Spring Boot microservices but will support the generation of Quarkus based services soon. \n If you're interested in using Quarkus in your Entando app contact us on the  Forum  or  Community Slack  and we'll help you get started. \n \n \n Database type\n \n Entando recommends standardizing your choice of database to simplify operational maintenance but you do have the ability to use different databases for different microservices if you choose. \n Supported choices are none, MySQL, and Postgres. Enterprise customers can choose Oracle but should contact Entando Support for details. \n \n \n Development databases\n \n You can choose to utilize a full RDBMS or developers can utilize lightweight in memory or on disk databases with h2. \n \n \n Caching implementation\n \n When generating a microservice you will be presented with the type of cache to inject into the services. It is recommended that this is a standard choice for all of the microservices in your application but can be customized on a per service basis if desired. \n \n \n Build system\n \n Determines the java build tool to use when building your services \n Supports maven or gradle \n \n \n Other technologies\n \n Users of the component generator can also decide to use other technologies from JHipster or from the JHipster marketplace. \n There are many powerful technologies in the marketplace but it is up to the developer to integrate any choices from the marketplace into their Entando application. Entando doesn't provide any direct support for marketplace tech choices. \n \n \n Micro frontends\n \n Users can optionally choose to generate micro frontends for entities generated via the blueprint. \n The Entando Component Generator only provides micro frontends in React from the generation flow but developers can create and bundle micro frontends in other technologies as well. \n \n \n \n If you want to try out these choices follow the tutorial on  creating Entando microservices and micro frontends using the component generator \n Blueprint Technology \n JHipster and the Entando Blueprint are built using EJS which is a Javascript based templating language that provides powerful constructs for large scale file generation. Learn more about EJS here at  https://ejs.co/  or checkout the core  Jhipster Generator  or  Entando Blueprint  for examples of EJS in action. \n"},{title:"Overview",frontmatter:{},regularPath:"/next/docs/component-generator/component-gen-overview.html",relativePath:"next/docs/component-generator/component-gen-overview.md",key:"v-d835eeb8",path:"/next/docs/component-generator/component-gen-overview.html",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Objectives",slug:"objectives"},{level:2,title:"Generated Component Flow",slug:"generated-component-flow"}],lastUpdated:"10/14/2020, 10:22:23 AM",content:" Overview \n Introduction \n The Entando Component Generator powered by JHipster is a tool that gives developers the ability to quickly generate Entando components that can be used to extend an Entando Application. \n The component generator takes advantage of the concept of  JHipster blueprints  to provide powerful templating and standard generation patterns. \n Objectives \n The component generator has two main objectives \n \n \n Accelerate development \n \n Automate the creation of microservices and micro frontends with code that runs without changes. Start from running software. \n Code is meant to be developed on and changed by developers. Ready for customization. \n Using standard tools, technologies, and patterns that can be consumed by developers who are not familiar with the underlying blueprint \n \n \n \n Standardize microservice creation and technology choices \n \n Encode business standards for networking, monitoring, build tools, and distribution into a blueprint to ensure that developers are starting from a technical point that matches your teams requirements \n Ensure code follows standards and practices of your teams including code formatting, testing tools, static analysis tools, package structures, and other rules specific to your organization \n Enable teams to quickly recognize and adopt code from system integrators and other third parties because the patterns and standards are encoded in the starting point of your applications \n Generated Component Flow \n This section provides an overview of the component generation process. If you want to jump into the code and a tutorial start here:  Entando Component Generator Tutorial \n \n \n \n Create components \n \n The Component Generator will create a Spring Boot microservice and optionally will create React micro frontends for entities that you add to your project \n The microservice and generated micro frontends are runnable out of the box and preconfigured to connect to  Entando Identity Management \n The code is meant to be edited and enhanced by developers. JHipster provides interactive updates and merges if you need to re-run the generator or add new functionality via JHipster \n The microservice includes liquibase and integrated data mocking if you want to generate data in your API calls \n \n \n \n Define bundle and deploy assets \n \n The Entando blueprint includes scripts and tools to automatically generate a bundle ready for deployment to the ECR. The bundle will include your microservice, generated microfrontends, and any microfrontends that you have created manually under the  ui  folder \n The generated Spring Boot microservice can be built and deployed to a Docker registry using the provided maven Jib plugin \n Generated bundles can be pushed to a git repository of the users choice \n \n \n \n Deploy bundles to  Entando Component Repository (ECR) \n \n Once your Docker images are pushed to your registry and your bundle is available in Git you can generate an Entando bundle descriptor and push the bundles to the ECR \n The bundles can be versioned and updated using tags in the git repository \n \n \n \n Install in Entando Apps \n \n Once the bundles are in the ECR they are available for deployment in any Entando application that has access to the ECR in the cluster \n \n \n \n"},{title:"Overview",frontmatter:{},regularPath:"/next/docs/concepts/",relativePath:"next/docs/concepts/README.md",key:"v-1eed0fc5",path:"/next/docs/concepts/",headers:[{level:2,title:"Entando App Engine",slug:"entando-app-engine"},{level:2,title:"Entando App Builder",slug:"entando-app-builder"},{level:2,title:"Entando Component Generator",slug:"entando-component-generator"},{level:2,title:"Entando Component Repository",slug:"entando-component-repository"},{level:2,title:"Entando Identity Management",slug:"entando-identity-management"},{level:2,title:"Entando WCMS",slug:"entando-wcms"},{level:2,title:"Entando Cluster Citizens",slug:"entando-cluster-citizens"},{level:3,title:"Architecture diagram",slug:"architecture-diagram"},{level:3,title:"Members of the cluster",slug:"members-of-the-cluster"},{level:2,title:"Entando Ingresses",slug:"entando-ingresses"},{level:3,title:"What is an ingress",slug:"what-is-an-ingress"},{level:3,title:"How ingresses are used in an Entando Cluster",slug:"how-ingresses-are-used-in-an-entando-cluster"},{level:3,title:"Default Ingress HTTP Routes",slug:"default-ingress-http-routes"},{level:3,title:"Exposing plugins in the EntandoApp domain",slug:"exposing-plugins-in-the-entandoapp-domain"},{level:3,title:"How to check ingresses in my cluster",slug:"how-to-check-ingresses-in-my-cluster"},{level:3,title:"Learn more",slug:"learn-more"}],lastUpdated:"1/29/2021, 10:47:17 AM",content:' Overview \n A portal, website, web app, or mobile app built with Entando is called an Entando application.\nAn Entando application is an assembly of out of the box and/or custom built components running on the\nEntando Platform. Components can be widgets, micro frontends, microservices, page templates, WCMS content or WCMS content types. \n Entando App Engine \n The Entando App Engine is the heart of the Entando Platform by providing the primary out-of-the-box services for\ndeveloping applications. Key features: \n \n Expose the APIs the Entando App Builder uses to provide the page and content management interface for your application. \n Handle the work of assembling micro frontends and microservices and combining them on specific pages as defined by the Entando App Builder. \n Provide the data access layer to persist the page and application design. \n Manage the cluster infrastructure. \n \n See also:  APIs tutorial \n Entando App Builder \n The Entando App Builder is the feature-rich management interface used to design and build pages for Entando applications. \n See also:  Widget Tutorial \n Entando Component Generator \n The Entando Component Generator is Entando\'s implementation of  JHipster  that allows users to\nquickly and efficiently generate the skeleton of an Entando Component. The Entando Component Generator provides advanced\ndata modeling capabilities including object relational mapping and automatic generation of micro frontends and microservices.\nThe generated skeleton serves as a starting point to help a development team swiftly meet the needs of the business. \n See also:  Entando JHipster Blueprint \n Entando Component Repository \n The Entando Component Repository (ECR) is used to store and retrieve shareable components so they can be used in multiple\nEntando applications across the enterprise. \n See also:  ECR Overview \n Entando Identity Management \n Entando Identity Management is the  Keycloak -based token-based authentication mechanism used by the\nEntando platform. It provides the ability to add Single Sign On capabilities across multiple domains and to connect service\nproviders with identity providers. \n See also:  Entando Authentication \n Entando WCMS \n The Entando Web Content Management System (WCMS) is a lightweight content and digital asset management system with support\nfor headless operation. It allows management of widgets and html fragments so they can be placed within an Entando application. \n See also:  Content Types  or  Content Templates \n Entando Cluster Citizens \n The purpose of this guide is to give an overview of the members of an Entando cluster and their role. \n Architecture diagram \n Let’s start with a picture of an Entando 6 cluster and how the various\nmembers interact with each other. \n Members of the cluster \n An Entando 6 cluster is composed of various citizens which interact with\neach other. Most of these citizens have a Custom Resource Definition\nfile associated with them and are deployable on Kubernetes using the\nEntando operator and controllers. \n Entando app \n An Entando application is composed of three parts: \n \n \n Entando App Builder : the user interface to customize and build an Entando application, as well as interact with the Entando Component Repository. \n \n \n Entando App Engine : the backend APIs providing access to Entando\nservices. \n \n \n Entando Component Manager : the service providing the Entando\nComponent Repository functionality, e.g. listing the available\nbundles, install/uninstall a bundle, etc. Check the  dedicated\nsection  for more details. \n \n \n The interaction between these three components (and the rest of the\nEntando cluster) use the authorization/authentication features provided\nby Keycloak. \n Entando Component Manager \n As briefly introduced before, the Entando component manager is able to\nlist the EntandoDeBundles accessible from the EntandoApp and provide the\ninstall/uninstall services to install a bundle on an Entando App. All of\nthese services are made possible by the communication with the Entando\nKubernetes service, the only service of the Entando ecosystem (other\nthan the operator itself) able to interact with the cluster and some of\nthe Entando custom resources. \n Entando Kubernetes Service \n The Entando Kubernetes Service is part of the Entando cluster\ninfrastructure custom resource, and provides an access point to some of\nthe custom resources defined by Entando, in particular: \n \n \n Entando applications \n \n \n Entando plugins \n \n \n Entando links \n \n \n Entando Component Repository bundles \n \n \n Some of the main services provided by the Entando Kubernetes Service\nare: \n \n \n Provide a list of the available EntandoDeBundles to the\ncomponent-manager \n \n \n Deploy a plugin during the installation of a bundle or discovery of\nan already available plugin and expose that to an app \n \n \n Create a link between an EntandoApp and an EntandoPlugin to expose\nthe plugin’s APIs to the EntandoApp and the micro frontends (MFEs) \n Entando Component Repository bundles \n An EntandoDeBundle - or Component Repository bundle - is a package with\na set of Entando components and resources. The Entando component manager\nis able to read these kind of packages and install the components to\nextend the functionalities of an EntandoApp. For more details on the\nEntandoDeBundle and the Entando Component Repository, check the\n component repository overview \ndocumentation \n Entando plugin \n An Entando plugin is a microservice that exposes APIs reusable by one or\nmore Entando apps. Usually the plugin services are exposed to the\nEntando developer and the end users via micro frontends. Check the\n micro frontends  tutorials for more details. You can\nquickly generate an Entando plugin using the  Entando JHipster Blueprint . The generated project\nwill be ready to work in an Entando environment providing the\nintegration with Keycloak, generating a set of default micro frontends\nand exposing the plugin’s logic via an EntandoDeBundle (check the\nreferences for details). \n Keycloak \n Keycloak in Entando 6 is responsible for authorization and\nauthentication All the members of an Entando 6 cluster interact with\nkeycloak to verify user/service authorization to perform any specific\ntask. Check out the references below for more details on keycloak. \n Entando Ingresses \n What is an ingress \n An Ingress is a Kubernetes resource which purpose is to expose HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. \n How ingresses are used in an Entando Cluster \n When deploying an Entando Cluster, ingresses are generated for the resources that requires to be exposed to the outside world. The process of creating an ingress, setup the correct routes and the certificates is done by the via the Entando Operator and the entando custom resource controllers. \n Keycloak ingress \n An dedicated ingress is created for keycloak to expose the authentication and authorization functionalities. Having a dedicated ingress is required to guarantee that both token issuing and token validation work correctly, even when the services using the keycloak instance are on different namespaces. \n Cluster infrastructure ingress \n Another ingress is created for the cluster infrastructure services in order to expose the api endpoint to interact with the cluster correctly \n Entando App ingress \n Another ingress is automatically created to expose App builder, App engine and the Entando component manager, a service part of the ECR.\nThe three containers are served under the same domain, and this is beneficial as they are able to interact without cross-origin issues. \n The Entando App ingress is also used when linking an Entando Plugin with and Entando App, operation that usually happens when a bundle containing an Entando Plugin is installed via the ECR in an Entando App. Check out the dedicated section for details. \n Entando Plugin ingress \n Also Entando Plugins are automatically exposed via an ingress when deployed in an Entando Cluster. \n Default Ingress HTTP Routes \n In this table you can see what are the default routes that are exposed for each ingress\n \n \n \n \n \n \n \n Ingress \n Ingress Http route \n Application \n \n \n \n \n Keycloak ingress \n /auth \n Keycloak \n \n \n Entando cluster infrastructure ingress \n /k8s \n Entando K8S service \n \n \n Entando App ingress \n /entando-de-app \n App engine \n \n \n /app-builder/ \n App builder \n \n \n /digital-exchange \n Entando component manager \n \n \n /<plugin-ingressPath> \n Entando plugin linked to the app \n \n \n Entando plugin ingress \n /<plugin-ingressPath> \n Entando plugin \n \n \n \n Note : The Entando plugin  ingressPath  variable is defined in the Entando Plugin custom resource under the  spec  element. The plugin ingress path is also used to expose the plugin under the Entando App domain \n Exposing plugins in the EntandoApp domain \n The process of exposing an Entando Plugin under the same domain (ingress) of the Entando App is made possible from the creation of an  EntandoAppPluginLink  custom resource and the corresponding controller. \n Once the link between the Entando App and the Entando Plugin is created, the controller reads the specification of such link and automatically creates the HTTP routes in the Entando App so that the plugin is exposed on the same domain as the App builder, App engine and Component manager. \n This allows the Microfrontend developers that need to access the plugin to not worry about CORS policy or knowing what is the full path where the plugin is exposed. The plugin is referencable using relative urls. \n How to check ingresses in my cluster \n Using the Openshift dashboard \n On the Openshift dashboard, Ingresses are not exposed directly as pods and deployments. The dashbaord provides direct access to the Ingress Routes (or simply routes) under the  Applications > Routes  menu. \n \n To see the ingress resources, you need to access them from the  Resources > Other resources  menu. From the dropdown you should select the  Ingress  resource and therefore you should be able to see the ingress available on that specific project/namespace \n Using kubectl from the command line \n From the command line, getting the ingress is very easy. Once you know the namespace(s) where your Entando Cluster is deployed, you simply need to use the \n kubect get ingresses.extensions -n <namespace>\n \n Here an example of the result in a test namespace \n > kubectl get ingresses.extensions -n local\n\nNAME               CLASS    HOSTS                               ADDRESS     PORTS   AGE\nqst-eci-ingress   <none>   qst-eci-local.192.168.1.9.nip.io   127.0.0.1   80      2d1h\nqst-ingress       <none>   qst-local.192.168.1.9.nip.io       127.0.0.1   80      2d1h\nqst-kc-ingress    <none>   qst-kc-local.192.168.1.9.nip.io    127.0.0.1   80      2d1h\n \n To get more details about a specific ingress, you can use the  get  command specifing the ingress name you want to check and the  yaml  output format \n > kubectl get ingresses.extensions -n local qst-ingress -o yaml\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  creationTimestamp: "2020-05-13T15:27:08Z"\n  generation: 1\n  labels:\n    EntandoApp: qst\n  managedFields:\n  - apiVersion: extensions/v1beta1\n    fieldsType: FieldsV1\n    fieldsV1:\n      f:status:\n        f:loadBalancer:\n          f:ingress: {}\n    manager: nginx-ingress-controller\n    operation: Update\n    time: "2020-05-13T15:27:08Z"\n  name: qst-ingress\n  namespace: local\n  ownerReferences:\n  - apiVersion: entando.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: EntandoApp\n    name: qst\n    uid: aa7053e1-fd8b-419f-bdee-df3018c013fa\n  resourceVersion: "16802097"\n  selfLink: /apis/extensions/v1beta1/namespaces/local/ingresses/qst-ingress\n  uid: e9b6f027-369a-4b84-b4b1-736a6e49f180\nspec:\n  rules:\n  - host: qst-local.192.168.1.9.nip.io\n    http:\n      paths:\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8080\n        path: /entando-de-app\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8083\n        path: /digital-exchange\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8081\n        path: /app-builder/\n        pathType: ImplementationSpecific\nstatus:\n  loadBalancer:\n    ingress:\n    - ip: 127.0.0.1\n Learn more \n For more details about ingress concept in Kubernetes please refer to the official documentation: \n \n Kubernetes Ingress documentation \n Openshift Routes documentation \n \n'},{title:"PDA Architecture",frontmatter:{},regularPath:"/next/docs/concepts/pda-architecture.html",relativePath:"next/docs/concepts/pda-architecture.md",key:"v-565f93b4",path:"/next/docs/concepts/pda-architecture.html",headers:[{level:2,title:"PDA MFEs",slug:"pda-mfes"},{level:2,title:"PDA API",slug:"pda-api"},{level:2,title:"Sidecar",slug:"sidecar"},{level:2,title:"PDA Core",slug:"pda-core"},{level:2,title:"PAM Impl",slug:"pam-impl"}],lastUpdated:"6/30/2020, 3:00:04 PM",content:" PDA Architecture \n The objective of this document is to provide an explanation for the components\nthat compose the Process Driven Applications plugin (PDA) architecture from a\ndeployment perspective as well as how they interact with each other. \n The image below shows the components in high level: \n PDA MFEs \n The PDA Micro Frontends run on the browser and they render the UI custom\ncomponents the user interacts with. These components are written in React and\nthey fetch data from the PDA API, passing the Keycloak token for authentication.\nThe MFEs also make calls to the Entando Core API in order to retrieve the\nsettings required for the configuration UI. These components will be available\non Entando App Builder after the PDA plugin bundle is installed and the user\ncan create pages with them. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n PDA API \n The Spring Boot application that communicates with the engine and make its data\navailable in a Rest API. It interacts with Keycloak to validate the token and\nwith the sidecar to retrieve the connections/sensitive data, depending on how it\nwas deployed. The application shouldn't call specific engine classes directly,\ninstead it always calls the abstractions defined in PDA Core library. The engine\nimplementation to use is decided at runtime based on the connection details\nprovided. It is important to note that the PDA API application is stateless,\nsince it doesn't have a database. All data available on the API is retrieved\nfrom the BPM engine. After bundle installation, it will be deployed as a\nmicroservice in the Kubernetes infrastructure and an Ingress will be created to\nmake the API available to the MFEs, as described by the Entando Plugin custom\nresource. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin \n Sidecar \n The sidecar is another application (docker container) deployed in the same Pod\nas the PDA API. It exposes services to manage connection details, which will be\nstored as secrets in Kubernetes. The PDA API communicates with the sidecar to\nmanage BPM engine connection details. \n The source code for this component:\n https://github.com/entando/entando-plugin-sidecar \n PDA Core \n This is the library that defines the interfaces and abstractions that should be\nimplemented to interact with specific BPM engines. This way it is possible to\nhave multiple engine implementations at the same time. \n The source code for this component:\n https://github.com/entando/pda-core-engine \n PAM Impl \n The Red Hat PAM implementation for the PDA Core library. If the connection maps\nto a PAM engine, these are the classes that are going to be executed when the\nPDA API requests for engine operations. This implementation communicates with\nthe Kie Server, which executes the defined process operations. \n The source code for this component:\n https://github.com/entando/pda-redhatpam-engine \n"},{title:"Bundle and Component Descriptors",frontmatter:{sidebarDepth:2},regularPath:"/next/docs/ecr/ecr-bundle-details.html",relativePath:"next/docs/ecr/ecr-bundle-details.md",key:"v-eed78d1c",path:"/next/docs/ecr/ecr-bundle-details.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:3,title:"Bundle Conventions",slug:"bundle-conventions"},{level:3,title:"Bundle Descriptor",slug:"bundle-descriptor"},{level:2,title:"Plugin",slug:"plugin"},{level:3,title:"Kubernetes pod names",slug:"kubernetes-pod-names"},{level:3,title:"Permissions",slug:"permissions"},{level:2,title:"Widget",slug:"widget"},{level:2,title:"Fragment",slug:"fragment"},{level:2,title:"Page Template",slug:"page-template"},{level:2,title:"Page",slug:"page"},{level:2,title:"CMS Asset",slug:"cms-asset"},{level:2,title:"Content Template",slug:"content-template"},{level:2,title:"Content Type",slug:"content-type"},{level:2,title:"Content",slug:"content"},{level:2,title:"Categories",slug:"categories"},{level:2,title:"Groups",slug:"groups"},{level:2,title:"Labels",slug:"labels"},{level:2,title:"Languages",slug:"languages"},{level:2,title:"Static Resources",slug:"static-resources"}],lastUpdated:"3/23/2021, 4:48:24 AM",content:' Bundle and Component Descriptors \n Overview \n The Entando Component Manager reads the  descriptor.yaml  file from the root of the bundle package and uses it to install any components and resources included in the bundle. Here is the basic bundle structure: \n .\n├ descriptor.yaml\n├ resources/\n│ └ ...\n└ ... (folders reported in descriptor.yaml file)\n Bundle Conventions \n \n \n The bundle descriptor file needs to be named  descriptor.yaml  or the bundle will not be recognized. \n \n \n Static resources should be placed in a  resources  folder. They are not explicitly referenced in the  descriptor.yaml  file itself. \n Bundle Descriptor \n The bundle descriptor file aggregates all included components and has the following structure: \n \n Warning \n Remember the file needs to be named  descriptor.yaml . \n \n descriptor.yaml. \n code: survey_bundle # The bundle ID\ndescription: This is the survey bundle # The description of the bundle\n\ncomponents: # All components will be here\nOptional. Use if the component requires a deployment\n  plugins:\n    - folder/you/want/my_plugin_descriptor.yaml\n    - folder/you/want/another_plugin_descriptor.yaml\nTo create widgets you will need to add references to the descriptor file\'s\n  widgets:\n    - widgets/my_widget_descriptor.yaml\n    - widgets/another_widget_descriptor.yaml\nTo create fragments, you will need to add references to the descriptor file\'s\n  fragments:\n    - fragments/my_fragment.yaml\nTo create Page Templates you will need to add references to the descriptor file\'s\n  pageModels:\n    - pageModels/my_page_model_descriptor.yaml\n    - pageModels/another_page_model_descriptor.yaml\nTo create and publish pages you will need to add references to the descriptor file\'s\n  pages:\n    - page/my_page_descriptor.yaml\n    - page/another_page_descriptor.yaml\nTo create a CMS Asset you will need to add a reference to the descriptor file and put on the same location the image or file you want to upload.\n  assets:\n    - assets/my-asset/my_asset_descriptor.yaml\n    - assets/my-asset/my_image.jpg\nTo create Content Types you will need to add references to the descriptor file\'s\n  contentTypes:\n    - contentTypes/my_content_type_descriptor.yaml\nTo create Content Templates you will need to add references to the descriptor file\'s\n  contentModels:\n    - contentModels/my_content_model_descriptor.yaml\n    - contentModels/another_content_model_descriptor.yaml\nTo create and publish Contents you will need to add references to the descriptor file\'s\n  contents:\n    - contents/my_content_descriptor.yaml\n    - contents/another_content_descriptor.yaml\nTo create categories you will need to add references to the descriptor file\'s\n  categories:\n    - categories/my_categories.yaml\nTo create groups you will need to add references to the descriptor file\'s\n  groups:\n    - groups/my_groups.yaml\nTo create labels you will need to add references to the descriptor file\'s\n  labels:\n    - labels/my_labels.yaml\nTo enable labels you will need to add references to the descriptor file\'s\n  languages:\n    - languages/languages.yaml\n Plugin \n Here is an example of a plugin descriptor: \n Plugin descriptor.yaml \n image: "entando/my-image:1.0.0" # The docker image used to create the plugin\ndeploymentBaseName: "myplugin" # The base name to assign to the pods that have to be created in Kubernetes\ndbms: "postgresql" # The DBMS the plugin will use\nroles: # The roles the plugin will expose in keycloak\n  - "task-list"\n  - "task-get"\n  - "connection-list"\n  - "connection-get"\n  - "connection-create"\n  - "connection-delete"\n  - "connection-edit"\nhealthCheckPath: "/actuator/health" # The health check path that kubernetes will use to check status of the plugin deployment\ningressPath: "/myhostname.io/entando-plugin" # the ingress path to assign to the plugin deployment\npermissions: # a list of keycloak clientId / role to bind each to the other\n  - clientId: realm-management\n    role: manage-users\n  - clientId: realm-management\n    role: view-users\n Kubernetes pod names \n Each plugin is deployed onto Kubernetes using composite names. The first part is created reading the descriptor file, the second one is appended autonomously by Kubernetes.\nThis second part is 31 char long and each Kubernetes pod name length must be at most 63: longer name will result in the fail of the deployment. \n deploymentBaseName \n Initially, the first part of the pod name was generated concatenating and manipulating the  image  field value, however sometimes this approach could lead to a pod name longer than 63.\nTo solve this problem, another (optional) property is available:  deploymentBaseName . \n It accepts a string not longer than 32 and, if present, its value will be used as the first part for the pod\'s names, instead of the  image  one. \n In the previous example of the descriptor a possible resulting pod name will be this one in case the  deploymentBaseName  property is not present: \n entando-my-image-1-0-0-server-deployment-6f86f459wj9k \n and this one if the  deploymentBaseName  property is present: \n myplugin-server-deployment-6f86f459wj9k \n Please note that if you are using the  deploymentBaseName  property and you want to install more versions of the same plugin at the same time, you need to specify different values for  deploymentBaseName , maybe including the plugin version. \n Permissions \n The  permissions  property specifies a list of coupled clientId and roles that will be bound in Keycloak. \n To find them you can open the Keycloak console and then navigate to  clients  →  awesomeplugin-server  →  Service Account Roles . \n Currently using a non-existing clientId or role will be ignored and the plugin deployment will succeed without errors. \n TIP \n The more verbose CRD plugin descriptor format is deprecated as of Entando 6.3 but is documented  here . \n Widget \n Here is an example of a widget descriptor: \n Widget descriptor.yaml. \n code: another_todomvc_widget # The Widget identification\n\ntitles: # Widget\'s Titles\n  en: TODO MVC Widget # Title in English\n  it: TODO MVC Widget # Title in Italian\n\ngroup: free # The owner group of the widget\nOptional. The UI Path, the widget.ftl file will have the customUi content\ncustomUiPath: widget.ftl\nOptional. The Custom UI\ncustomUi: >-\n    <h1>My custom widget UI</h1>\nOptional. ConfigUI\nconfigUi:\n  customElement: todomvc-config # The name of the custom-element used to render the configUI\n  resources:\n    - <bundleid>/static/js/main.js # The resources necessary to the custom element to render the configUI, like the code\n Fragment \n Fragment descriptor.yaml. \n code: my_fragment # The unique id\nOptional. The fragment content\nguiCode: >-\n  "<div>Here the content</div>"\nOptional. A path to a FreeMarker file containing the fragment content.\nguiCodePath: fragment.ftl\n Page Template \n Page Template descriptor.yaml. \n code: todomvc_page_template # The Page Template identification\ndescription: TODO MVC basic page template # The Page Template description\n\ntitles: # Page Template\'s Titles\n  en: TODO MVC PageTemplate # Title in English\n  it: TODO MVC PageTemplate # Title in Italian\nThe Page Template configuration\nconfiguration:\n  frames: # All frames\n    - pos: 0 # Frame position\n      description: Header # Frame description\n      sketch: # Frame sketch configuration\n        x1: 0\n        y1: 0\n        x2: 11\n        y2: 1\n      defaultWidget:\n        code: my-widget # the code of the widget to apply when using the button "apply default widgets" in the page configuration UI\nA simplified way to define a Frame\n    - pos: 1\n      description: Breadcrumb\n      sketch: { x1: 0, y1: 0, x2: 11, y2: 1 }\nOptional. Define the Page Template in a separate file or inside the descriptor file with `template`\ntemplatePath: page.ftl\nOptional. Define the Page Template this way or in a separate file with `templatePath`\ntemplate: >-\n  <#assign wp=JspTaglibs[\\"/aps-core\\"]>\n  <!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.0 Transitional//EN\\">\n  <html>\n      <head>\n          <title><@wp.currentPage param=\\"title\\" /></title>\n      </head>\n      <body>\n          <h1><@wp.currentPage param=\\"title\\" /></h1>\n          <a href=\\"<@wp.url page=\\"homepage\\"/>\\">Home</a><br>\n          <div>\n              <h1>Bundle 1 Page Template</h1>\n              <@wp.show frame=0 />\n          </div>\n      </body>\n  </html>\n Page \n This descriptor enables a page to be created and published via a bundle. Status can be  published  or  draft . The widgets section can be used to fully configure a page layout. \n Page descriptor.yaml. \n code: dashboard\nparentCode: homepage\ntitles:\n  en: My dashboard\n  it: La mia Dashboard\npageModel: dashboard\nownerGroup: free\njoinGroups: []\ndisplayedInMenu: true\nseo: false\ncharset: utf-8\nECR will publish the page according to this property\nstatus: published|draft\nPage Configuration\nwidgets:\n  - code: Brand-Logo\n    config: null\n    pos: 0\n  - code: Login_buttons\n    config: null\n    pos: 2\n  - code: seeds_card\n    config:\n      cardname: creditcard\n    pos: 6\n  - code: list_item\n    config:\n      icon: managealerts\n      count: \'0\'\n      title: Alerts\n    pos: 7\n  - code: list_item\n    config:\n      icon: viewstatements\n      count: \'0\'\n      title: View Statements\n    pos: 11\n  - code: seedscard-transaction-table\n    config: null\n    pos: 13\n CMS Asset \n This descriptor contains the metadata required for uploading and updating a CMS Asset. \n Asset descriptor.yaml. \n correlationCode: \'my-reference-code\'\ntype: image\nThis file should be placed on same folder as the descriptor.yaml\nname: 113f4437cac3b3f3d4db7229f12287a4_d3.png\ndescription: 113f4437cac3b3f3d4db7229f12287a4_d3.png\ngroup: free\ncategories: []\n Content Template \n Content-template descriptor.yaml. \n id: 8880003\ncontentType: CNG\ndescription: Demo Content Template\nOptional. Define the Content Template Shape in a separate file or inside descriptor file with `contentShape`\ncontentShapePath:\nOptional. Define the Content Template Shape this way or in a separate file with `contentShapePath`\ncontentShape: >-\n  <article>\n    <h1>$content.Title.text</h1>\n    <h2>Demo content template</h2>\n    #if ( $content.MainBody.text != "" )\n    $content.MainBody.text\n    #end\n  </article>\n\n\nwidgets:\n  - code: Brand-Logo\n    config: null\n    pos: 0\n  - code: Login_buttons\n    config: null\n    pos: 2\n  - code: seeds_card\n    config:\n      cardname: creditcard\n    pos: 6\n  - code: list_item\n    config:\n      icon: managealerts\n      count: \'0\'\n      title: Alerts\n    pos: 7\n  - code: list_item\n    config:\n      icon: viewstatements\n      count: \'0\'\n      title: View Statements\n    pos: 11\n  - code: seedscard-transaction-table\n    config: null\n    pos: 13\n Content Type \n For more details on the Content Type properties, refer to the  Content Type\ndocumentation . \n Content-type descriptor.yaml. \n code: CNG\nname: Demo\nstatus: 0\n\nattributes:\n  - code: title\n    type: Text\n    name: Title\n    roles:\n      - code: jacms:title\n        descr: The main title of a Content\n    disablingCodes: []\n    mandatory: true\n    listFilter: false\n    indexable: false\n\n    enumeratorStaticItems: string\n    enumeratorStaticItemsSeparator: string\n    enumeratorExtractorBean: string\n\n    validationRules:\n      minLength: 0\n      maxLength: 100\n      regex: string\n      rangeStartString: string\n      rangeEndString: string\n      rangeStartStringAttribute: string\n      rangeEndStringAttribute: string\n      equalString: string\n      equalStringAttribute: string\n      rangeStartDate: string\n      rangeEndDate: string\n      rangeStartDateAttribute: string\n      rangeEndDateAttribute: string\n      equalDate: string\n      equalDateAttribute: string\n      rangeStartNumber: 0\n      rangeStartNumberAttribute: string\n      rangeEndNumber: 0\n      rangeEndNumberAttribute: string\n      equalNumber: 0\n      equalNumberAttribute:\n      ognlValidation:\n        applyOnlyToFilledAttr: false\n        errorMessage: Something\n        keyForErrorMessage: some\n        keyForHelpMessage: thing\n        ognlExpression: string\n Content \n This descriptor enables a content to be created and optionally published via a bundle, according to the  status  property. The content id is optional and can be auto generated or explicitly declared for linking from other components, like Content Widget. \n Content descriptor.yaml. \n id: NWS650\ntypeCode: NWS\ndescription: Dealing with a financial emergency\nmainGroup: free\nstatus: PUBLIC\nattributes:\n  - code: title\n    values:\n      en: Dealing with a financial emergency\n  - code: subtitle\n    values:\n      en: |\n        <p>How to tackle financial stress</p>\n  - code: body\n    values:\n      en: |\n        <p>For many Americans, financial concerns are their number-one stress point. Here are 6 ways to help reduce your money stress and get motivated to take control of your finances.</p>\n  - code: img\n    values:\n      en:\n        correlationCode: \'651\'\n        name: bank_750xx684385064_d0.jpg\n  - code: links\n    elements:\n      - code: links\n        value:\n          symbolicDestination: \'#!U;http://www.mysite.com/!#\'\n          destType: 1\n          urlDest: \'http://www.mysite.com/\'\n          pageDest: null\n          contentDest: null\n          resourceDest: null\n        values:\n          en: mio sito\n      - code: links\n        value:\n          symbolicDestination: \'#!U;http://www.mysite.com/!#\'\n          destType: 1\n          urlDest: \'http://www.mysite.com/\'\n        values:\n          en: mio sito 2\n  - code: attaches\n    elements:\n      - code: attaches\n        values:\n          en:\n            correlationCode: \'205\'\n            name: Entando_Admin_Console_Overview_4.3.3_EN.pdf\n Categories \n This descriptor contains a  list  of Categories. \n Category descriptor.yaml. \n - code: new-category # Identifies the category\n  parentCode: home # The parent category, home is the base category\n  titles:\n    it: "Una nuova categoria" # Category name in Italian\n    en: "New category" # Category name in English\n Groups \n This descriptor contains a  list  of Groups. \n Group descriptor.yaml. \n - code: my_group # Identifies the group\n  name: "My group" # The name of the group\n Labels \n This descriptor contains a  list  of Labels. \n Label descriptor.yaml. \n - key: MY-FIRST-LABEL # Identifies the label\n  titles: # The titles on the label\n    it: Mio Titolo # The title in Italian\n    en: My Title # The title in English\n Languages \n This descriptor contains a  list  of Languages to enable during the installation process. \n Language descriptor.yaml. \n- code: en\ndescription: English\n- code: it\ndescription: Italian \n Static Resources \n In order to upload static files, you will need to create a folder called\n resources . All files inside this folder will be uploaded into Entando using the same\nfolder structure. \n resources/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.css\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n On the structure mentioned above, the resulting files in the Entando\narchitecture will be: \n yourbundleid/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.js\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n \n Important \n yourbundleid  is the  code  property inside  descriptor.yaml \n \n If you need to use one of these static files in a widget or page template, use this FTL\ntag  <@wp.resourceURL /> : \n <img src="<@wp.resourceURL />yourbundleid/images/logo.png">\n<link rel="stylesheet" href="<@wp.resourceURL />yourbundleid/css/styles.css">\n<link rel="shortcut icon" href="<@wp.resourceURL />yourbundleid/images/favicon.ico" type="image/x-icon"/>\n<script type="application/javascript" src="<@wp.resourceURL />yourbundleid/js/script.js"><\/script>\n \n '},{title:"Filtering bundles",frontmatter:{},regularPath:"/next/docs/ecr/ecr-bundle-filters.html",relativePath:"next/docs/ecr/ecr-bundle-filters.md",key:"v-33ba85c0",path:"/next/docs/ecr/ecr-bundle-filters.html",headers:[{level:2,title:"Filtering bundles by component",slug:"filtering-bundles-by-component"},{level:3,title:"Supported labels keys are:",slug:"supported-labels-keys-are"},{level:3,title:"Example",slug:"example"},{level:2,title:"Filtering bundles by status",slug:"filtering-bundles-by-status"},{level:2,title:"Filtering bundles by textual search",slug:"filtering-bundles-by-textual-search"},{level:2,title:"Mixing search criteria",slug:"mixing-search-criteria"}],lastUpdated:"8/3/2020, 1:21:54 PM",content:' Filtering bundles \n ECR bundles are filterable by component, by status or by textual research. \n Filtering bundles by component \n ECR bundles are filterable by component from App Builder user interface. \n \n Behind the scenes, filtering is done using the label-based filtering provided out of the box from Kubernetes. \n To enable filtering of a bundle, the custom-resource representing the bundle on the Entando Cluster needs to contain the correct labels. An important note on the values to add the  labels  field, even if to correctly define a label in a k8s resource both the key and the value are required, from an Entando point of view only the key part of the label is used for filtering. The value could be set to anything, but our reccomendation is to use  "true"  for clarity and simplicity. \n Supported labels keys are: \n \n \n \n \n \n \n \n Label entry \n Description \n \n \n \n \n widget: "true" \n The bundle contains one or more microfrontends (widgets)  \n \n \n plugin: "true" \n The bundle contains one or more microservices (plugins) \n \n \n fragment: "true" \n The bundle contains one or more fragments \n \n \n pageTemplate: "true" \n The bundle contains one or more page templates \n \n \n contentType: "true" \n The bundle contains one or more content types \n \n \n contentTemplate: "true" \n The bundle contains one or more content templates \n Example \n Here is an example of the metadata for a ecr bundle containg micro-frontends, some microservices and page templates \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: demo-bundle\n  labels:\n    widget: "true"\n    plugin: "true"\n    pageTemplate: "true"\nspec:\n  details:\n  ...\n Filtering bundles by status \n ECR bundles are filterable by status from App Builder user interface. \n \n You can choose to see the full list of the bundles available in Kubernetes cluster by selecting the  Explore  tab, or the list of the currently installed bundles by clicking on the  Installed  tab. \n Filtering bundles by textual search \n You can search for bundles containing some keywords by executing a textual search. \n \n You can open the menu on the left to select which field to target. \n If you are creating a new bundle, keep in mind the textual search is performed against data extracted from the bundle CRD file. \n Mixing search criteria \n You can mix all previous search criteria to refine the scope of your search as you want.\nFor example, you could search for all available bundles ( Explore  tab) that contain  Page Templates  components\n(using the checkboxes) and the word  Login  in their name (using the textual search). \n'},{title:"How to customize bundle info shown in Entando App Builder",frontmatter:{},regularPath:"/next/docs/ecr/ecr-bundle-presentation-config.html",relativePath:"next/docs/ecr/ecr-bundle-presentation-config.md",key:"v-6a7a1ee8",path:"/next/docs/ecr/ecr-bundle-presentation-config.html",lastUpdated:"8/3/2020, 1:21:54 PM",content:" How to customize bundle info shown in Entando App Builder \n \n In the image above you can see an example of a bundle as is displayed in the ECR user interface inside the Entando App Builder. \n The corresponding custom-resource file on Kubernetes is similar to this: \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: simple-entando-bundle\nspec:\n  details:\n    name: \"Entando Bundle\"\n    description: An example of an Entando bundle\n    dist-tags:\n      latest: v0.0.1\n    time:\n      created: '2020-05-20T15:59:21.946Z'\n      modified: '2020-05-20T15:59:21.946Z'\n      v0.0.1: '2020-05-20T15:59:21.946Z'\n    versions:\n      - v0.0.1\n    keywords:\n      - entando6\n    author: Entando\n    thumbnail: >-\n      data:image/jpeg;base64,....\n  tags:\n....\n \n In order to change the UI elements, you need to update the custom-resource in accordance with this table \n \n \n \n Field \n UI Element \n \n \n \n \n spec.details.name \n Set the bundle title \n \n \n spec.details.description \n Set the bundle description (only visible in the list presentation format) \n \n \n spec.details.thumbnail \n Set the bundle thumbnail, expressed as a base64 encoded string \n \n \n spec.details.dist-tags.latest \n Set what's the latest version of the bundle \n \n \n \n"},{title:"Bundle versions and updates - FAQ",frontmatter:{},regularPath:"/next/docs/ecr/ecr-bundle-versions-faq.html",relativePath:"next/docs/ecr/ecr-bundle-versions-faq.md",key:"v-6fac01ac",path:"/next/docs/ecr/ecr-bundle-versions-faq.html",headers:[{level:2,title:"Does the ECR support versioning?",slug:"does-the-ecr-support-versioning"},{level:2,title:"How is a bundle version defined?",slug:"how-is-a-bundle-version-defined"},{level:2,title:"What format should I use to version my bundle?",slug:"what-format-should-i-use-to-version-my-bundle"},{level:2,title:"As a bundle developer, how should I create a new version of a bundle?",slug:"as-a-bundle-developer-how-should-i-create-a-new-version-of-a-bundle"},{level:2,title:"How to prevent a particular bundle version from being visible in the ECR?",slug:"how-to-prevent-a-particular-bundle-version-from-being-visible-in-the-ecr"},{level:2,title:"My bundle contains a microservice generated with the Entando Component Generator, does the version of the microservice have to be the same as the bundle version?",slug:"my-bundle-contains-a-microservice-generated-with-the-entando-component-generator-does-the-version-of-the-microservice-have-to-be-the-same-as-the-bundle-version"},{level:2,title:"How bundle versions are installed from the ECR",slug:"how-bundle-versions-are-installed-from-the-ecr"}],lastUpdated:"8/4/2020, 6:59:38 AM",content:" Bundle versions and updates - FAQ \n Does the ECR support versioning? \n A bundle, as discussed in the  overview , is a package containing one or more components.\nAs in many other packaging systems, the ECR supports bundle versioning, allowing developers to create and release improvements of their package over time. \n How is a bundle version defined? \n In the ECR, the bundle custom resource comes with a set of  tags , each one representing a version of the bundle.\nHere an example for a CMS quickstart bundle \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n    name: cms-quickstart-bundle\nspec:\n  details:\n    name: Entando Example CMS Bundle\n    description: Example Bundle containing CMS components for the Quickstart experience\n  tags:\n    - integrity: ''\n      shasum: ''\n      tarball: 'https://github.com/entando/entando-cms-quickstart-bundle.git'\n      version: v0.0.1\n    - integrity: ''\n      shasum: ''\n      tarball: 'https://github.com/entando/entando-cms-quickstart-bundle.git'\n      version: v0.0.2\n \n As you can see from the code above, the bundle  cms-quickstart-bundle  has 2 versions available.\nEach version in the  tags  object must correspond a tag in the git repository provided in the  tarball  field. \n What format should I use to version my bundle? \n The ECR requires versions to follow the  semantic versioning 2.0.0 , with the possibility to prepend a  v  to the version itself. Some valid bundle versions are: \n \n 1.0 \n v0.1.0-alpha \n 1.0.1-SNAPSHOT \n 22.109.10234-RC.1 \n As a bundle developer, how should I create a new version of a bundle? \n If you're a bundle developer and you want to release a new version of your bundle, you can simply update the content of your bundle and commit the changes to the bundle git repository.\nOnce all the required changes are committed, you can create a new tag in the git repository using the  git tag  command and publish it to the remote repository using the  git push --tags  command \n For example, let's assume my bundle already has a version  1.0.0  and I want to publish the version  2.0.0  of my bundle, here the commands I need to use to create and publish the new tag: \n     git tag -a \"2.0.0\" -m \"My new version\"\n    git push --tags\n How to prevent a particular bundle version from being visible in the ECR? \n If, for some reason, you don't want a particular version to be available for the installation, you can proceed as follows: \n \n You can edit the bundle directly using the command  kubectl edit entandodebundles.entando.org -n <namespace-of-the-bundle> <name-of-the-bundle> \n \n or if you still have the original file you can also: \n \n remove the undesired version from the tag list in your bundle Kubernetes file ( integrity ,  shasum ,  tarball  and  version ) \n delete your bundle from your cluster using a command like this  kubectl delete -f your-bundle-file.yml [-n your-cluster-namespace] \n upload your bundle again to Kubernetes using a command like this  kubectl create -f your-bundle-file.yml [-n your-cluster-namespace] \n My bundle contains a microservice generated with the Entando Component Generator, does the version of the microservice have to be the same as the bundle version? \n The version of the microservice - or to be more precise the docker image associated with the microservice - isn't bound to the version of the bundle containing the microservice itself. \n This gives the bundle developer complete control over the bundle release process, especially in those situations where the bundle contains more components and even more microservices. \n How bundle versions are installed from the ECR \n When the user decides to install a version of the bundle, the ECR checks the provided tag in the git repository and clones locally just the content of the repository for that tag. \n For this reason it's important that for each provided tag in the custom-resource a corresponding tag is available in the git repository, otherwise the ECR will not be able to donwload the bundle and will throw an error. Note that the ECR can only see published tags, so make sure that all the time you create a new tag in your git repository you publish it to the remote repository too. \n"},{title:"How Microservices get Connected to Entando Apps",frontmatter:{},regularPath:"/next/docs/ecr/ecr-how-microservices-connect-to-apps.html",relativePath:"next/docs/ecr/ecr-how-microservices-connect-to-apps.md",key:"v-4060beac",path:"/next/docs/ecr/ecr-how-microservices-connect-to-apps.html",headers:[{level:2,title:"How a Microservice from a Bundle gets Deployed with the ECR?",slug:"how-a-microservice-from-a-bundle-gets-deployed-with-the-ecr"},{level:2,title:"Other Options",slug:"other-options"},{level:2,title:"Kubernetes naming conventions",slug:"kubernetes-naming-conventions"}],lastUpdated:"10/15/2020, 12:19:03 PM",content:" How Microservices get Connected to Entando Apps \n In this document we will describe some of the assumptions and details related to the process of connecting a microservice part of a bundle to an Entando App. \n In order to fully understand the concepts explained in this piece of the documentation, please make sure you have familiarity with these concepts: \n \n Entando custom resources \n Entando ingresses \n How a Microservice from a Bundle gets Deployed with the ECR? \n When a bundle containing a microservice is installed using the ECR, behind the scenes some actions take place. \n \n To begin, an  EntandoPlugin custom resource  is generated starting from the PluginDescriptor. Some fields will be automatically generated from the provided image. \n \n \n From the  image  field in the PluginDescriptor, we will extract the  organization ,  name  and  version  of the image. \n organization ,  name  and  version  are then converted to valid characters and composed to form the plugin name ( metadata.name ), the labels ( metadata.labels ) and the ingressPath ( spec.ingressPath ) of the custom resource. \n \n NOTE : Two PluginDescriptors having images with the same organization, name and version will generate a custom resource with the same  metadata.name  and  spec.ingressPath . \n \n Next, a check for a microservice with the same name is performed to verify if a new deployment is required for the microservice. \n If a microservice with the same name is not available in the namespace where the Entando App has been deployed, a new EntandoPlugin custom resource is created and deployed in the namespace using the details defined in the bundle. \n At the same time, an EntandoAppPluginLink custom resource is deployed in the namespace in order to expose the microservice ingress path on the EntandoApp ingress. \n If both the EntandoPlugin custom resource and the EntandoAppPluginLink are deployed correctly, the APIs of the microservice will be available from the same domain of the EntandoApp, making it possible reach those APIs from the EntandoApp using relative urls. \n \n This is the standard flow when no other micorservice with a given name is already available in the EntandoApp namespace. \n If there is an existing microservice with the same name as the one generated from the PluginDescriptor, the ECR will connect the EntandoApp to\nthe existing microservice by generating and deploying the required EntandoAppPluginLink per step 3 above.\nThis way, plugins can be reused by many applications at the same time. \n Other Options \n The naming convention recommendations above are accurate for creating bundles and for self contained applications where the Entando operator is managing the lifecycle of your microservices. If you have a substantial API infrastructure or you intend to deploy a large number of versioned microservices you can also utilize Entando with API management infrastructure like API gateways. If you are using an API gateway or other API abstraction layer you will need to manually manage the ingress for your micro frontends in your application to point to the API gateway deployment. \n In cases where conflicts occur bundles can easily be renamed by updating metdata. \n Kubernetes naming conventions \n Here some rules about naming conventions extracted from the  Kubernetes documentation on object names and ids \n \n Most resource types require a name that can be used as a DNS subdomain name as defined in RFC 1123. This means the name must: \n \n contain no more than 253 characters \n contain only lowercase alphanumeric characters, '-' or '.' \n start with an alphanumeric character \n end with an alphanumeric character \n \n \n"},{title:"Overview",frontmatter:{},regularPath:"/next/docs/ecr/ecr-overview.html",relativePath:"next/docs/ecr/ecr-overview.md",key:"v-6a1103a4",path:"/next/docs/ecr/ecr-overview.html",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Glossary",slug:"glossary"},{level:3,title:"Component",slug:"component"},{level:3,title:"ECR Bundle",slug:"ecr-bundle"},{level:3,title:"EntandoDeBundle custom resource",slug:"entandodebundle-custom-resource"},{level:3,title:"Entando-component-manager",slug:"entando-component-manager"},{level:3,title:"Entando-K8S-service",slug:"entando-k8s-service"},{level:2,title:"Architecture",slug:"architecture"},{level:2,title:"Example flow",slug:"example-flow"}],lastUpdated:"8/3/2020, 1:21:54 PM",content:" Overview \n Introduction \n The Entando Component Repository (ECR) is meant to be a repository to\nshare reusable components among different Entando instances. \n The following glossary relates to the ECR and related concepts: \n Glossary \n Component \n An Entando component - simply referred to as component - is a piece of\nreusable code/resource to be used in an Entando widget, page or\napplication. Examples of components are widgets, microfrontends,\ncontent-types, labels, plugins, and static resources \n ECR Bundle \n An ECR bundle - is a package containing one or more components and a\n'descriptor.yaml' file providing information about the bundle. The\nbundle is published on an Git registry and is shared with an Entando\napplication using the EntandoDeBundle custom resource. \n EntandoDeBundle custom resource \n The EntandoDeBundle custom resource is a Kubernetes custom resource\nreadable by the Entando6 operator. It’s used to provide information\nabout an ECR bundle and make the bundle available in kubernetes for the\nentando-component-manager. \n Entando-component-manager \n The entando-component-manager - a.k.a component-manager is part of the\nEntando6 app and dialogs both with the Kubernetes cluster via the\nentando-k8s-service and with the entando-core. The\nentando-component-manager reads the bundles from the cluster and exposes\nthem via an API accessible from AppBuilder. The component-manager is\nalso responsible of the installation/removal of components from\nentando-core \n Entando-K8S-service \n The Entando-K8S-Service is part of the Entando infrastructure and is\nresponsible for the low-level communication with the K8S cluster API. \n Architecture \n \n From an architectural point of view, the ECR is composed of \n \n The EntandoDeBundles which contain the metadata associated with a bundle \n The Entando-k8s-service which reads the bundles from the\ncluster/namspace(s) and serves them via a consumable API \n The Component-manager which creates the connection between the EntandoApp\nand the K8S-service. \n Example flow \n \n \n The user lands on the ECR page in app-builder and wants to see the\nlist of bundles shared with that EntandoApp \n \n \n AppBuilder asks the component-manager for the list of available\nbundles \n \n \n Component-manager queries the k8s-service to get the available\nbundles \n \n \n The k8s-service queries the cluster/namespace(s) it is able to read\nfrom for available bundles and returns the list to the\ncomponent-manager \n \n \n Component-manager returns a list to App-Builder \n \n \n The user is able to see the available bundles and is able to install\none or more of them \n \n \n"},{title:"Entando's Custom Resources for Kubernetes",frontmatter:{},regularPath:"/next/docs/concepts/custom-resources.html",relativePath:"next/docs/concepts/custom-resources.md",key:"v-78d2ca34",path:"/next/docs/concepts/custom-resources.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"The Core Entando Custom Resources",slug:"the-core-entando-custom-resources"},{level:2,title:"The ResourceRequirements specification",slug:"the-resourcerequirements-specification"},{level:2,title:"EntandoKeycloakServer",slug:"entandokeycloakserver"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Example",slug:"example"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties"},{level:2,title:"EntandoClusterInfrastructure",slug:"entandoclusterinfrastructure"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-2"},{level:2,title:"EntandoApp",slug:"entandoapp"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-3"},{level:2,title:"EntandoPlugin",slug:"entandoplugin"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-4"},{level:2,title:"EntandoAppPluginLink",slug:"entandoapppluginlink"},{level:3,title:"Overview",slug:"overview-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-5"},{level:2,title:"EntandoDatabaseService",slug:"entandodatabaseservice"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-6"},{level:2,title:"EntandoCompositeApp",slug:"entandocompositeapp"},{level:3,title:"Overview",slug:"overview-7"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-7"}],lastUpdated:"3/24/2021, 9:59:27 AM",content:' Entando\'s Custom Resources for Kubernetes \n Objective \n This document provides an overview of the Entando Kubernetes Custom Resources and their semantics in Entando 6. \n Prerequisites \n \n Basic knowledge of Kubernetes and how to deploy Docker images to it \n Basic knowledge of Helm and how Helm Charts use YAML templates for parameterized deployments to Kubernetes \n Overview \n Amongst the many features it offers, Kubernetes also comes with a REST API that for dozens of different resources types.\nGenerally these API off full Create/Retrieve/Update/Delete (CRUD) access to each of the resource types. We\ntypically format these resources in YAML or JSON and use commandline tools such as\n kubectl  or  oc  to manage them. Each of these resources has a clearly defined structure\nthat is well documented in the  Kubernetes API  .\nKubernetes  also allows clients to subscribe to events generated as these resources get updated. These subscriptions\nare called \'watches\' and allow clients to be notified whenever the state of a resource changes. Kubernetes also\nenforces very strong role based access control (RBAC) support on all resources, with permissions down to the level\nof granularity of operation (Create/Retrieve/Update/Delete/Watch) per resource. \n The basic architecture for Kubernetes worked so well for the developers of Kubernetes that they decided to also make it\navailable to third  party developers. Kubernetes now offers a mechanism to allow 3rd parties to provide its own custom\nresource types that still leverage the CRUD support, event subscriptions and RBAC provided by Kubernetes out of the box.\nThis mechanism is referred to as Custom Resources. \n Custom Resources are very commonly used with Kubernetes Operators. Operators are Docker images that have been\ndeployed to Kubernetes Deployments. The generally observe a set of custom resources and perform some operations against\nthe Kubernetes API to reflect the state changes in the Custom Resource. We can say that the Custom Resources are associated\nwith specific semantics in how they are translated to \n One can introduce a new Custom Resource into Kubernetes by registering a Custom Resource Definition (CRD). This is really\njust another yaml or json resource that defines the structure of the Custom Resource to be installed using the OpenAPI\nJSON Schema format. When talking about Custom Resources, it is very important to distinguish between Custom Resource\nDefinitions and Custom Resources. CRD\'s are static type definitions provided by an Operator\nprovider such as Entando. For those familiar with programming languages, CRD\'s are like class definitions, whereas\nCustom Resources are actual instances of that class. \n Entando introduces two groups of Custom Resources. On the one hand, there are the core Entando Custom Resources required\nfor a basic installation of Entando in a Kubernetes cluster. These Custom Resources directly result in other\nKubernetes resources being deployed in the cluster. On the other hand, there are the Custom Resources specific\nto the Entando Component Repository that serve primarily as metadata for other Entando components. \n The Core Entando Custom Resources \n The Entando Operator observes all the Core Entando Custom Resources in one or more namespaces. This means that if a Core\nEntando Custom Resource is created, updated or deleted, the Entando Operator will trigger a new run-to-completion Pod\nthat will translate that state change into a state change in the actual Kubernetes Cluster. Often, this will\nresult in the Deployment of one or more Docker images, but also one or more Services and sometimes and Ingress\ntoo. We refer to the Docker Images that implement these run-to-completion Pods as Entando Kubernetes Controllers. \n The Entando Operator itself is also implemented as a Docker Image. You can have a closer look at how it works in the\n entando-k8s-controller-coordinator  project on Github.\nApart from the normal Maven, Java and Docker files one would expect, you will also notice the\n entando-k8s-controller-coordinator Helm Chart .\nThis Helm Chart is basically the entrypoint for installations of Entando 6 on Kubernetes. More detailed instructions\non how to install the Entando 6 Operator are available in our\n installation instructions \n The ResourceRequirements specification \n All of the Entando Custom Resources that result in physical Kubernetes Deployments can be configured with specific\nresource requirements. These settings can be provided under the  spec  object of the custom resource. It currently\nsupports the following attributes: \n \n spec.resourceRequirements.storageRequest  - the initial storage requested from the persistence provider. Please keep\nin mind that resizable storage is not supported by all storage providers, and that this may be the final size of the storage\nallocated. \n spec.resourceRequirements.storageLimit  - the maximum amount of storage required by the deployment. \n spec.resourceRequirements.memoryRequest  - the initial memory requested from the node the deployment\'s primary container is running on \n spec.resourceRequirements.memoryLimit  - the maximum amount of memory the deployment\'s primary container will use. If\nit exceeds this amount, the container maybe be terminated by Kubernetes. \n spec.resourceRequirements.cpuRequest  - the initial CPU allocation from the node the deployment\'s primary container is running on \n spec.resourceRequirements.cpuLimit  - the maximum CPU allocation for the deployment\'s primary container. \n spec.resourceRequirements.fileUploadLimit   - the maximum upload file size supported by the deployment \n \n All of these attributes require a number and a unit of measurement, e.g. "64Mi". Please consult the\n official Kubernetes documentation \nfor more information on how to configure these attributes. \n EntandoKeycloakServer \n The EntandoKeycloakServer Custom Resource is used to deploy and configure a Red Hat Keycloak Server instance on the\ncluster. After deploying this Keycloak instance, the Entando Operator will create a Kubernetes Secret that provides\nthe necessary information for subsequent deployment operations to access the Keycloak instance as the Admin user. This\nallows the rest of the Entando Kubernetes Controllers to create a Keycloak OIDC client for every HTTP service that\ngets deployed. If you already have a Keycloak instance that you would use, you can skip this custom resource entirely\nand simply create the `keycloak-admin-secret\' in the operator\'s namespace as specified in\n this tutorial \n Overview \n \n Entando Cluster Citizen:  Keycloak \n Custom Resource Definition:  EntandoKeycloakServer \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-keycloak-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-keycloak \n Github Repo:  entando/entando-keycloak \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoKeycloakServer"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-keycloak"\n  namespace: "keycloak-namespace"\nspec:\n  dbms: "postgresql"\n  imageName: "entando/entando-keycloak"\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  environmentVariables: \n    - name: KEYCLOAK_WELCOME_THEME\n      value: my-custom-theme\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof a previously  configured  EntandoDatabaseService ,\nthe Keycloak image will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor Keycloak to use. If left empty, or given value of \'none\', Keycloak will be deployed using its own internal\nH2 database. \n spec.imageName  is used to provide a customized image. By default, the operator will use the  entando/entando-keycloak \ndiscussed above. When using the default image, please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of this image will be calculated.\nWhen you need to customize the theme or add extensions to Keycloak, you can create your own custom image and provide\nthe value in this property. In this custom image, make sure you use the default image ( entando/entando-keycloak )\nas a base image. You can then add your customizations and build your own image. Please use a fully qualified\nDocker image name here. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for Keycloak. Please ensure that this is\naccessible using the default routing suffix of your Entando Operator Deployment, or a DNS name previously\nregistered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n keycloak-admin-secret  being replaced by a Secret connecting you to this newly created Keycloak instance.\nTheoretically one could use multiple Keycloak instances in a cluster, in which case this property should be false. \n spec.environmentVariables  is a Map of environment variables to pass to the Keycloak Docker image. For example, this could\nbe used to select a specific theme for Keycloak to use using the variable KEYCLOAK_WELCOME_THEME. These parameters\nare applied to the container\'s environment variables after all variables have been calculated. It can therefore\nalso be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Keycloak Server \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Keycloak Server container. \n EntandoClusterInfrastructure \n The EntandoClusterInfrastructure custom resource can be used to create the shared services that Entando requires in a cluster.\nAt the time of the writing of this document, there is really only one service, which is the Entando K8S Service, but this\nmay change in future. Deployments resulting from this custom resources are configured to use the default Keycloak\nServer specified in the  keycloak-admin-secret  using the  entando  realm. An Ingress will also be created as part of this\ndeployment. At this point, there is no way to customize the image in question. \n Overview \n \n Entando Cluster Citizen:  Entando Kubernetes Service \n Custom Resource Definition:  EntandoClusterInfrastructure \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-cluster-infrastructure-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-k8s-service \n Github Repo:  entando-k8s/entando-k8s-service \n \n \n Possible Database Images: none \n Example \n ---\nkind: "EntandoClusterInfrastructure"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-eci"\n  namespace: "eci-namespace"\nspec:\n  keycloakSecretToUse: some-keycloak-secret\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  environmentVariables: \n    - name: ENTANDO_NAMESPACES_TO_OBSERVE\n      value: my-namespace\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando K8S Service. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n entando-cluster-infrastructure-secret  being replaced by a Secret connecting you to this newly created\nEntando K8S Service.  Theoretically one could use multiple Entando K8S Services in a cluster, in which\ncase this property should be false for new Entando K8S Services that should not override the default Secret. \n spec.environmentVariables  is a Map of environment variables to pass to the Entando K8S Service Docker image. For example, this could\nbe used to override the ENTANDO_NAMESPACES_TO_OBSERVE variable that configures the set of Kubernetes namespaces\nthis service should read EntandoDeBundles from. Also note that all of the\n Spring variables in entando-k8s-service project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando K8S Service \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Entando Kubernetes Service container. \n EntandoApp \n An EntandoApp is a Deployment of a Docker image that hosts an Entando and Java based web application. Entando offers two\nstandard images that can be used, but generally we expect our customers to provide their own images here. An EntandoApp\nDeployment packages three images into a single Pod: the Entando App Image in question, AppBuilder and Component Manager. \n Overview \n \n Custom Resource Definition:  EntandoApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-controller \n Github Repo:  entando/entando-k8s-app-controller \n \n \n Deployment Details - Entando App:\n \n Docker image:  entando/entando-de-app-wildfly   or    entando/entando-de-app-eap \n Github Repo:  entando-k8s/entando-de-app \n Entando Cluster Citizen:  Entando App \n \n \n Deployment Details - AppBuilder:\n \n Docker image:  entando/app-builder \n Github Repo:  entando/app-builder \n \n \n Deployment Details - ComponentManager:\n \n Docker image:  entando/entando-component-manager \n Github Repo:  entando-k8s/entando-component-manager \n Entando Cluster Citizen:  Component Manager \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-app"\n  namespace: "my-namespace"\nspec:\n  standardServerImage: wildfly\n  customServerImage: your-org/your-image:4.3.2\n  dbms: "postgresql"\n  ingressPath: my-app\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  environmentVariables: \n    - name: ENTANDO_VAR1\n      value: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n  ecrGitSshSecretName: my-secret\n Explanation of properties \n \n spec.standardServerImage  can be either wildfly  or  eap . This instructs the Entando Operator to use one of the\ntwo standard Entando App images.\n \n For  wildfly  it will deploy the  entando/entando-de-app-wildfly  image \n For  eap  it will deploy the  entando/entando-de-app-eap  image\nThis property and the  spec.customServerImage  are  assumed to be mutually exclusive. Only provide a value to\none of the two. Please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of these images will be calculated. \n \n \n spec.customServerImage  can be used to deploy the Docker image containing your own custom Entando App. Please\nfollow the instructions on how to  build your own image . \nThis property and the  spec.standardServerImage  are  assumed to be mutually exclusive. Only provide a\nvalue to one of the two. \n spec.dbms  is used to select the database management of choice. If left empty, a default value of  postgresql \nis assumed. The value  none  is not supported. If this value matches up to the  spec.dbms  property\nof a previously configured  EntandoDatabaseService ,\nthe Entando App will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the EntandoApp to use. \n spec.ingressPath  specifies the web context of the Entando App to be deployed. This is required to create a single\npath entry in the Ingress that is used to expose the Entando App. The default behaviour of Wildfly and\nJBoss EAP is to use the name of the WAR file that is deployed, but it is possible to override this in the EntandoApp\nproject itself using a  jboss-web.xml  file .\nIn the absence of the  jboss-web/xml  file, the web context  would be the the\nMaven artifactId of the Entando Opp project. It is also possible to modify this by changing the  <finalName>  element\nin the Maven  pom.xml \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure containining the Entando Component Repository for this App to use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando App. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. Keep in mind that EntandoPlugins linked to this app will\nalso be made available on this host. \n spec.environmentVariables  is a Map of environment variables to pass to the EntandoApp Docker image. For example, this could\nbe used to provide connection details for custom datasources or message queues as discussed in the\n custom datasources tutorial . Also note that all of the\n Spring variables in an Entando project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to each of the three containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando App \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Entando App Engine container. \n spec.ecrGitSshSecretName  - a secret containing a private key file named  rsa_id  that matches a public key configured in the Git server. \n EntandoPlugin \n An Entando Plugin is a microservice that can be made available to one or more EntandoApps in the cluster. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin . The\nDeployment resulting from an EntandoPlugin is also a multi-container Pod deployment, and will include both the\nplugin Docker image specified and the EntandoPluginSidecar Docker Image \n Overview \n \n Custom Resource Definition:  EntandoPlugin \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-plugin-controller \n Github Repo:  entando/entando-k8s-plugin-controller \n \n \n Deployment Details - plugin:\n \n Docker image: as provided by user \n Entando Cluster Citizen:  Plugin \n \n \n Deployment Details - EntandoPluginSidecar:\n \n Docker image:  entando/entando-plugin-sidecar \n Github Repo:  entando/entando-plugin-sidecar \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoPlugin"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-plugin"\n  namespace: "my-namespace"\nspec:\n  image: your-org/your-image:4.3.2\n  securityLevel: lenient\n  ingressPath: /my-plugin\n  healthCheckPath: /actuator/health\n  dbms: "postgresql"\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  roles:\n    - code: admin\n      name: Administrators\n    - code: user\n      name: Users\n  permissions: \n    - clientId: some-keycloak-client \n      role: some-admin\n    - clientId: another-keycloak-client \n      role: another-admin\n  environmentVariables: \n    - name: ENTANDO_VAR1\n      value: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.image  is the Docker image you can provide for the plugin you want to deploy. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin \nCurrently only Docker images hosting Spring Boot applications are supported. It is therefore of  utmost\nimportance to start off with our blueprint and ensure that the resulting Spring Boot application respects\nthe Spring variables to be set from the Entando Operator. \n spec.dbms  is used to select the database management of choice. If left empty, or if the value is  none , it\nis assumed that the plugin in question does not required a database. If this value matches up to\nthe  spec.dbms  property  of a previously  configured\n EntandoDatabaseService ,\nthe Entando Plugin will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the Entando Plugin to use. \n spec.ingressPath  specifies the web context where the Entando Plugin will be made available when linked to EntandoApps.\nPlease ensure this is in sync with the  server.servlet.context-path  property set on your Spring Boot application. \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure this Plugin will use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando Plugin. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. This hostname will not be used from your Widgets that you\nhave implemented for this plugin as these widgets will use the hostname of the EntandoApp they are being used from.\nThis hostname is useful for embedded web user interfaces used only on this plugin, such as admin user interfaces\nor diagnostic user interface. \n spec.roles  specifies the set of roles that this plugin expects. At deployment time, the Entando Operator ensures\nthat each of these roles are created on Keycloak for the Keycloak client representing this EntandoPlugin. It is\nup to the Plugin provider to ensure that Spring Security has been set up to enforce the access rules implied\nby the individual roles. Each role has a unique  code  and a more human readable   name  as property. \n spec.permissions  specifies the set of permissions this plugin requires on other services with known Keycloak Clients.\nAt deployment time, the Entando Operator will use the service account user of this EntandoPlugin\'s Keycloak Client\nand create the necessary role bindings on the specified client id of the service to be used.\nEach permission specifies the  clientId  in Keycloak of the target service, and the  role  that this EntandoPlugin\nshould be bound to in that Keycloak client. \n spec.environmentVariables  is a Map of environment variables to pass to the EntandoPlugin Docker image.\nIt is entirely up to the plugin provider to determine the semantics of each variable. We strongly suggest for\nplugin provider  to use  the standard Spring Property Resolver syntax for Spring variables, as this would allow\nany of these variables to be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited\nSpring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to both containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando Plugin \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Entando Plugin container. \n EntandoAppPluginLink \n The EntandoAppPluginLink custom resource is created when an AppBuilder user links an EntandoPlugin to the current\nEntandoApp, or deploys an EntandoPlugin for use in the current EntandoApp. The Entando Operator processes the resulting\nEntandoAppPluginLink and creates a path for the Plugin on the Ingress that exposes the EntandoApp in question. This path\nis determined by the  spec.ingressPath  property on the EntandoPlugin custom resource itself. If the EntandoPlugin\nresides in a namespace other than the namespace of the EntandoApp, the EntandoOperator creates a Kubernetes\nService in the namespace of the EntandoApp that simply delegates to the Service in the namespace of the EntandoPlugin. \n Overview \n \n Custom Resource Definition:  EntandoAppPluginLink \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-plugin-link-controller \n Github Repo:  entando/entando-k8s-app-plugin-link-controller \n Example \n ---\nkind: "EntandoAppPluginLink"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-link"\n  namespace: "my-namespace"\nspec:\n  entandoAppName: my-app\n  entandoAppNamespace: my-namespace\n  entandoPluginName: my-app\n  entandoPluginNamespace: my-namespace\n Explanation of properties \n \n spec.entandoAppName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.name \n spec.entandoAppNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.namespace \n spec.entandoPluginName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.name \n spec.entandoPluginNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.namespace \n EntandoDatabaseService \n By default, the Entando Operator deploys one of either the MySQL or PostgreSQL database Docker images for every custom\nresource that requires a database. Many customers may however have existing infrastructure for their databases which\nthey may want to leverage. The EntandoDatabaseService custom resource allows customers to deploy a Service that points\nto an external database. When deploying one of the Entando custom resources that require a database, the Entando\nOperator will look for EntandoDatabases in the same namespace, and if it finds one with the same  spec.dbms  setting\nas the database required by the custom resource , it will create a dedicated schema/username/password combination\nfor the custom resource and point the deployment emanating from custom resource to this external database. \n \n Custom Resource Definition:  EntandoDatabaseService \n Example \n ---\nkind: "EntandoDatabaseService"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-database-service"\n  namespace: "my-namespace"\nspec:\n  dbms: "osracle"\n  host: 10.0.12.41\n  port: 1521\n  databaseName: mydb \n  tablespace: \n  secretName: some-secret\n  jdbcParameters:\n    maxStatements: 300 \n    loginTimeout: 180\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof the Entando custom resource that will use it. Valid values are  oracle ,  postgresql  and  mysql . \n spec.host  can either be a valid IPv4 address, or a hostname. Where an IP address is provided, the Entando Operator\nwill create a Kubernetes Service with an associated EndPoints resource to allow for routing to this address. Where\na hostname is provided, the Entando Operator will simply create a Kubernetes Service of type  cname \n spec.port  is the port that the external database service is running on. This value is optional in which case we will\nuse the default port for the DBMS vendor in question \n spec.databaseName  is the name of the database that the Entando Operator should be creating schemas in. This property\nis only for use with PostgreSQL and Oracle, as MySQL doesn\'t distinguish between schemas and databases. \n spec.tablespace  is only required for Oracle so that Schemas can be created in different tablespaces. \n spec.secretName  should be the name ( Secret.metadata.name ) of a Kubernetes Secret in the same namespace that has\na  username  key and a  password  key that will provide the Entando Operator with the necessary access and permissions\nto create Schemas and users on the database in question. \n spec.jdbcParameters  is a map of name/value pairs that will be appended to the JDBC connection string to allow for\nfurther customization of the actual connection to the database. \n EntandoCompositeApp \n The EntandoCompositeApp custom resource can be used to package a collection of Entando Core Custom Resources in a\nsingle YAML file for sequential deployment. Keep in mind that one can already use standard YAML syntax to package\na set of Kubernetes resources in a single file, separating each resource with a triple dash ( --- ). The purpose\nof this custom resource is therefor specifically to ensure that the deployment of the previous \'component\' has\ncompleted, and that  the resulting Pod is up and running before commencing deploying on the \'component\'. \n The primary use case of this custom resource is to package a full Entando App and all its supporting service and\nplugins for easy installation as is often required for demos and POCs. Creating this kind of dependency for typical\nproduction deployments is not advised, as it will inevitably result in a violation of pipeline isolation. The\nmore commonly recommended approach is for your Entando Apps and Plugins to be fully deployable in isolation. Use this\ncustom resource with care. \n Overview \n \n Custom Resource Definition:  EntandoCompositeApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-composite-app-controller \n Github Repo:  entando/entando-k8s-composite-app-controller \n Example \n ---\nkind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-composite-app"\n  namespace: "my-namespace"\nspec:\n  components:\n    - kind: "EntandoKeycloakServer"\n         metadata:\n           name: "my-kc"\n         spec:\n           dbms: postgresql\n           isDefault: true\n           replicas: 1\n       - kind: "EntandoClusterInfrastructure"\n         metadata:\n           name: "my-eci"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           isDefault: true\n       - kind: "EntandoApp"\n         metadata:\n           name: "my-app"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           standardServerImage: wildfly\n           ingressPath: /entando-de-app\n       - kind: "EntandoPlugin"\n         metadata:\n           name: "my-pda"\n         spec:\n           image: "docker.io/entando/entando-process-driven-plugin:latest"\n           replicas: 1\n           dbms: "mysql"\n Explanation of properties \n \n spec.components  specifies the list of Entando Core Custom Resources to be deployed  in sequence . Please note\nthat only the Entando Custom Resources discussed in this section can be used in this list. Custom resources\nrelated to the Entando Component Repository never result in actual deployments on the Kubernetes cluster and\ntherefore do not need to be specified in any sequence. You can use the normal triple dash YAML notation to\ninclude them in the same YAML file \n \n'},{title:"Troubleshooting ECR",frontmatter:{},regularPath:"/next/docs/ecr/ecr-troubleshooting-guide.html",relativePath:"next/docs/ecr/ecr-troubleshooting-guide.md",key:"v-ddaca3a8",path:"/next/docs/ecr/ecr-troubleshooting-guide.html",headers:[{level:2,title:"A bundle installation/removal has failed, how to access the logs?",slug:"a-bundle-installation-removal-has-failed-how-to-access-the-logs"},{level:3,title:"Overview",slug:"overview"},{level:3,title:"Solution",slug:"solution"},{level:2,title:"My bundle has an issue, how should I publish a new version of the bundle?",slug:"my-bundle-has-an-issue-how-should-i-publish-a-new-version-of-the-bundle"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Solution",slug:"solution-2"},{level:2,title:"Bundle installation fails because a file has not been found in the bundle",slug:"bundle-installation-fails-because-a-file-has-not-been-found-in-the-bundle"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Solution",slug:"solution-3"},{level:2,title:"Bundle installation failed due to plugin(s) images not reachable",slug:"bundle-installation-failed-due-to-plugin-s-images-not-reachable"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Solution",slug:"solution-4"},{level:2,title:"I can't uninstall a bundle because some components are in use",slug:"i-can-t-uninstall-a-bundle-because-some-components-are-in-use"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Solution",slug:"solution-5"}],lastUpdated:"8/3/2020, 1:21:54 PM",content:" Troubleshooting ECR \n A bundle installation/removal has failed, how to access the logs? \n Overview \n Currently the Entando component manager logs are available in kubernetes via dashboard (openshift) or cli tools (k9s or kubectl).\nIf in you Entando cluster you have more than one Entando App custom resource, you will need to know what's the correct component-manager to check using the corresponding Entando App name and namespace where the app has been deployed. \n Solution \n Using  kubectl  and assuming for simplicity that you have only one Entando App named  quickstart  and your Entando cluster is only composed of one namespace, also named  quickstart ,\nyou can get the component-manager logs using the command \n kubectl logs -f deployment/quickstart-server-deployment --namespace quickstart -c de-container\n \n Note : the  -f  flag is optional and could be used to follow the logs for debugging purposes \n My bundle has an issue, how should I publish a new version of the bundle? \n Overview \n Sometimes a bundle could have some issues: typos in the  descriptor.yaml  file, wrong references of components or to not available docker images are just a few of the possible errors. \n Solution \n \n If the bundle is shared using a git repository, you can make the required changes to your project and publish the new version to git and generate a new tag for it. \n Once the new tag is published, update the bundle costum-resource avaialble in you Entando Cluster by adding the new tag to the  tags  objects  and replacing the latest  dist-tags  to point to this new version. \n Proceed with the new installation \n \n If you're actively working on your bundle and you simply want to verify things are working correctly, instead of generating a new tag for each release of the bundle you can try to keep overriding a specific tag using the git command  git tag -f . We suggest you to follow this practice only during development and not in production. \n Bundle installation fails because a file has not been found in the bundle \n Overview \n When a component that is referenced in the  descriptor.yaml  is missing in the bundle or not correctly referenced, the bundle installation fails and in the logs is reported which file has not been found. \n ERROR - File with name {filename} not found in the bundle\n Solution \n When such a problem happens, verify that the component referenced in the descriptor file are actually present in the bundle and that the reference is properly typed. \n Publish a new version of your bundle as described in the\n \"My bundle has an issue\"  section \n Bundle installation failed due to plugin(s) images not reachable \n Overview \n Plugin included in a bundle are referenced using their docker image. Sometime the image is not available - maybe has not yet be published or is in a private docker registry - and plugin installation can't happen and the entire bundle installation process can't finish successfully \n Solution \n Verify that the docker image you are referencing is correct and publicly available. \n \"My bundle has an issue\"  section \n I can't uninstall a bundle because some components are in use \n Overview \n When removing an installed bundle, the Entando component manager verfies that the bundle components\nare not in use by any other component. Removing such components would cause an error during removal\nas in certain case the deleting a component in use is not permitted. \n Solution \n In order to prevent such errors, the user is alerted and required to manually decouple the bundle\ncomponents before beign able to completely remove the bundle from the system. \n"},{title:"Bundle uninstall",frontmatter:{},regularPath:"/next/docs/ecr/ecr-uninstall-flow.html",relativePath:"next/docs/ecr/ecr-uninstall-flow.md",key:"v-1a735e6e",path:"/next/docs/ecr/ecr-uninstall-flow.html",headers:[{level:2,title:"Uninstall process",slug:"uninstall-process"},{level:2,title:"Troubleshooting",slug:"troubleshooting"}],lastUpdated:"8/3/2020, 1:21:54 PM",content:" Bundle uninstall \n Uninstall process \n To uninstall a bundle that was previously installed on an Entando App Engine, from Entando App builder UI go to\nthe  Component Repository  tab and select the bundle you want to uninstall \n \n An initial check is made to verify none of the bundle components are in use.\nIf any of the components are in use, a popup will alert you.\nNote that you can't force the removal of a bundle if its components are in use. \n Once the removal process starts: \n \n Bundle resources are deleted from the Entando App Engine \n Components included in the bundle are removed from the Entando App Engine \n Plugins are unlinked \n Troubleshooting \n If any error happens during the uninstall process and you don't know what to do,\ncheck out the  Troubleshooting guide  or the  Entando Forum \n"},{title:"Quick Reference",frontmatter:{},regularPath:"/next/docs/getting-started/quick-reference.html",relativePath:"next/docs/getting-started/quick-reference.md",key:"v-61ed8be8",path:"/next/docs/getting-started/quick-reference.html",headers:[{level:2,title:"Quick Reference",slug:"quick-reference"}],lastUpdated:"11/23/2020, 10:50:55 AM",content:" Quick Reference \n Just the steps, for advanced users. \n \n Install  Multipass \n Launch VM \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n Open Ubuntu shell \n multipass shell ubuntu-lts\n \n Install k3s \n curl  -sfL https://get.k3s.io  |   sh  -\n \n Check for node ready \n sudo  kubectl get node\n \n Download custom resource definitions \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n Create custom resources \n sudo  kubectl create -f dist/crd\n \n Create namespace \n sudo  kubectl create namespace entando\n \n Download Helm chart (or  generate your own ) \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/entando.yaml\n \n Configure external access to your cluster with your VM IP \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n \n Deploy Entando \n sudo  kubectl create -f entando.yaml\n \n Check for quickstart-composite-app-deployer  Completed \n sudo  kubectl get pods -n entando --watch\n \n Get URL to access Entando App Builder from your browser \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n "},{title:"Getting Started with Entando",frontmatter:{sidebarDepth:2},regularPath:"/next/docs/getting-started/",relativePath:"next/docs/getting-started/README.md",key:"v-d4bd3f66",path:"/next/docs/getting-started/",headers:[{level:2,title:"Automatic Install",slug:"automatic-install"},{level:2,title:"Manual Install",slug:"manual-install"},{level:3,title:"Install Kubernetes",slug:"install-kubernetes"},{level:3,title:"Prepare Kubernetes",slug:"prepare-kubernetes"},{level:3,title:"Deploy Entando",slug:"deploy-entando"},{level:2,title:"Log in to Entando",slug:"log-in-to-entando"},{level:2,title:"Next Steps",slug:"next-steps"}],lastUpdated:"3/11/2021, 5:55:10 AM",content:" Getting Started with Entando \n You have two options for getting started with Entando. \n \n Automatically install Entando via the Entando command-line interface (CLI) . This is the fastest way to start up an Entando application in Kubernetes. \n Manually install Entando step by step . This is useful if you're preparing a shared cluster rather than a local developer environment, the CLI defaults don't meet your specific needs, or if you want to customize the deploy itself. \n Automatic Install \n The following steps will launch an Ubuntu VM via Multipass, install Kubernetes, and then deploy Entando to it. \n \n Install  Multipass \n \n https: //multipass.run/#install\n \n \n Install Entando into Kubernetes on Ubuntu using the  Entando CLI \n \n curl  -sfL https://get.entando.org  |   bash \n \n \n The progress of the install will be displayed on the console and can take 10 minutes or so depending on the time needed to download the Docker images. The sequence of steps matches the manual steps below. It can be useful to review those steps to help understand what the CLI is doing. \n Once complete, the installer will give you the URL to access the  Entando App Builder . \n Login with username: admin  and password:  adminadmin . See the  Log in to Entando  section for more information and next steps. \n Manual Install \n This in-depth guide takes a learn-as-you-go approach, and will give you a working knowledge of Kubernetes as you get Entando up and running in a local environment. \n \n Install Kubernetes \n Prepare Kubernetes Environment \n Deploy Entando \n \n Note: For advanced or long-time Entando users, check out our  Quick Reference  install guide with just the steps. \n Since Entando is designed to run on Kubernetes, let's get started by installing our own instance of Kubernetes locally. \n We've tested a variety of Kubernetes implementations including Minikube, Minishift, CodeReady Containers, K3s, and Microk8s to find the best combination of low cpu/memory usage, fast startup times, and minimal configuration so we can get started quickly. After downloading the necessary files, we'll have our own instance of Kubernetes up and running in < 60 seconds. \n What's Needed to Run Kubernetes? \n Kubernetes is a container orchestrator designed to manage a server cluster. It requires at least one master node running a Linux OS. We'll be using Multipass to create a lightweight Ubuntu VM in seconds that runs on a bare metal hypervisor for speed and performance. \n Install Kubernetes \n Enable Hypervisor \n Why a Hypervisor? \n Hypervisors allow you to create and run virtual machines. Virtualization software that run on top of your operating system like VirtualBox or VMWare Workstation are Type 2 hypervisors. Type 1 hypervisors run on bare metal. \n \n Let's install a bare metal hypervisor for optimal performance. \n Mac:  Install  hyperkit . \n brew  install  hyperkit\n \n Windows:   Install Hyper-V \n \n What if my machine doesn't support hyperkit or Hyper-V? \n Use a Type 2 hypervisor that runs on top of your operating system: \n \n Install Virtual Box:\n Mac \n Windows \n Launch Ubuntu VM \n Why Multipass? \n Multipass is a cross-platform tool developed by the publishers of Ubuntu to create lightweight Ubuntu VMs in seconds. \n \n \n \n Install  Multipass \n \n \n Launch VM \n \n \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n \n Open a shell \n \n multipass shell ubuntu-lts\n Run Kubernetes \n Why K3s? \n K3s is a certified Kubernetes distribution designed for production workloads in resource-constrained environments. \n It's packaged as a single <40MB binary that reduces the dependencies and steps needed to install, run and auto-update a production Kubernetes cluster. \n \n \n Install  k3s \n \n curl  -sfL https://get.k3s.io  |   sh  -\n \n \n Check for  Ready   STATUS . \n \n sudo  kubectl get node\n \n \n What's running out of the box? \n sudo  kubectl get pods -A\n \n \n \n Congratulations! \n You now have a local instance of Kubernetes up and running. \n \n Now that Kubernetes is running, you can setup kubectl to send commands directly to k3s from the host machine rather than from within the VM. See the instructions  here . \n Prepare Kubernetes \n To install Entando, we'll add  Custom Resources , create a  Namespace , download a  Helm  chart, and configure external access to our cluster. \n Add Custom Resources \n Why Custom Resources? \n Standard resources in Kubernetes include things like  Pods , which are a group of one or more containers,  Services , the way to call or access your pods, and  Ingresses , for managing external access to your cluster. \n Custom resources  let you store and retrieve structured data. Combining a custom resource with a custom controller allows you to define a desired state to automate the running of your applications or services in a Kubernetes cluster. \n \n Examples of custom resources in Entando are: \n \n Entando App Engine \n Entando Identity Management System \n \n From your Ubuntu shell: \n \n Download custom resource definitions. \n \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n \n Create custom resources \n \n sudo  kubectl create -f dist/crd\n Create Namespace \n What are Namespaces? \n Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual clusters are called  namespaces. \n You can use namespaces to allocate resources and set cpu/memory limits for individual projects or teams. They can also encapsulate projects from one another. \n \n sudo  kubectl create namespace entando\n Download Helm Chart \n What is Helm? \n Helm is a package manager for Kubernetes that helps you define, install, and upgrade Kubernetes applications.\nThis  Getting Started  guide uses a Helm-generated file with a number of default values to help get you started faster,\ne.g. use embedded databases, don't include OpenShift support, don't include PDA widgets, etc. If you want to\nchange any of those defaults please see  https://github.com/entando-k8s/entando-helm-quickstart . \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/entando.yaml\n EntandoCompositeApp \n To quickly deploy an application, Entando uses a Kubernetes Custom Resource named  EntandoCompositeApp . It's composed of 3 parts: \n \n EntandoKeycloakServer  (authentication manager) \n EntandoClusterInfrastructure  (interface between Entando app and Kubernetes) \n EntandoApp  (core logic application) \n \n To speed up the  Getting Started  environment, embedded databases are used by default for these components.\nSee  this tutorial  for more information on how to change your\ndatabase connection. \n Configure Access to Your Cluster \n What about Networking? \n Entando sets up  Ingresses  in Kubernetes to expose HTTP routes from outside the cluster to services within the cluster. We'll use this to access Entando from a local browser. \n If you run into network issues during startup or if you are using Windows for your local development instance, please see  the tips . Symptoms can include having Entando fail to completely start the first time or a working Entando installation may fail to restart later. \n \n To set up external access to your cluster, you'll need to replace the value of\n ENTANDO_DEFAULT_ROUTING_SUFFIX  with your Ubuntu IP. You can look up your Ubuntu IP, and edit the\nYAML file manaully, but running the below commands will automatically update the IP address for you. \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n Deploy Entando \n Deploying the Helm chart will deploy all of the Kubernetes resources required for Entando to run. \n sudo  kubectl create -f entando.yaml\n \n sudo  kubectl get pods -n entando --watch\n \n \n What does a successful startup look like? \n \n First, you'll see the Entando operator:  ContainerCreating  >  Running \n Next, the Entando composite app deployer:  Pending  >  ContainerCreating  >  Running \n Then, Keycloak:  kc-deployer  >  kc-db-deployment \n \n Jobs / Deployments \n \n Jobs, like  kc-db-preparation-job  run once, and are  Completed :  0/1 \n Database deployments, like  kc-db-deployment , should end up as  Running :  1/1 \n The Keycloak server deployment  kc-server-deployment , should end up as  Running :  1/1 \n The  quickstart-server-deployment  should end up as  3/3 \n \n Lifecycle Events \n \n Each line represents an event:  Pending ,  ContainerCreating ,  Running  or  Completed \n Restarts should ideally be  0 ; otherwise, there was a problem with your cluster, and Kubernetes is trying to self-heal \n \n ubuntu@test-vm : ~ $   sudo  kubectl get pods -n entando --watch \n NAME                                   READY   STATUS              RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg   0/1     ContainerCreating   0          3s\nquickstart-operator-8556c9c6f8-9ghwg   0/1     Running             0          49s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     ContainerCreating   0          0s\nquickstart-composite-app-deployer-picaju7bf0   1/1     Running             0          20s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     ContainerCreating   0          0s\nquickstart-operator-8556c9c6f8-9ghwg           1/1     Running             0          88s\nquickstart-kc-deployer-mx7ms3sc2l              1/1     Running             0          19s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          0s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     ContainerCreating   0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Running             0          77s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    1/1     Running             0          87s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          13s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     PodInitializing     0          15s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Completed           0          17s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     ContainerCreating   0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Running             0          3m\nquickstart-kc-server-deployment-66484d596d-qr78q   1/1     Running             0          4m36s\nquickstart-kc-deployer-mx7ms3sc2l                  0/1     Completed           0          6m50s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     ContainerCreating   0          0s\nquickstart-eci-deployer-kx9nhop22g                 1/1     Running             0          5s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     ContainerCreating   0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Running             0          97s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running             0          2m7s\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed           0          2m15s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     ContainerCreating   0          1s\nquickstart-deployer-os19rw3eto                       1/1     Running             0          6s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          0s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     ContainerCreating   0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Running             0          7s\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running             0          19s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          4s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          5s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          8s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          9s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          6m42s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m20s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m22s\nquickstart-db-preparation-job-5a55b267-6             0/1     PodInitializing     0          7m23s\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed           0          7m25s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          0s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     ContainerCreating   0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     Running             0          2m35s\nquickstart-server-deployment-5597597575-gtptz        1/3     Running             0          2m37s\nquickstart-server-deployment-5597597575-gtptz        2/3     Running             0          2m38s\nquickstart-server-deployment-5597597575-gtptz        3/3     Running             0          3m5s\nquickstart-deployer-os19rw3eto                       0/1     Completed           0          11m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed           0          20m\n \n \n \n Press  Ctrl-C  to exit the watch command once everything is up and running. \n \n What pods come out of the box? \n sudo  kubectl get pods -n entando\n \n NAME                                                 READY   STATUS      RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg                 1/1     Running     0          132m\nquickstart-kc-db-deployment-c57f75d7f-wxmqr          1/1     Running     0          130m\nquickstart-kc-db-preparation-job-1d6ab9b6-7          0/1     Completed   0          129m\nquickstart-kc-server-deployment-66484d596d-qr78q     1/1     Running     0          128m\nquickstart-kc-deployer-mx7ms3sc2l                    0/1     Completed   0          130m\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running     0          123m\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed   0          124m\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running     0          121m\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed   0          121m\nquickstart-server-deployment-5597597575-gtptz        3/3     Running     0          113m\nquickstart-deployer-os19rw3eto                       0/1     Completed   0          121m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed   0          131m\n \n \n \n Get the URL to access Entando from your local browser. \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n \n Example URL: \n \n quickstart-entando.192.168.64.33.nip.io/app-builder/\n Log in to Entando \n Now that we've installed Entando, let's log in to the  Entando App Builder . \n \n \n Username:  admin \n Password:  adminadmin \n \n After login, change your password to activate your account. \n \n Note: If the login process hangs for more than 5 seconds, refresh the browser. \n \n \n The App Builder is where we'll compose our micro frontends alongside CMS pages and content. \n Congratulations! \n We now have Entando up and running on Kubernetes in our local environment. \n Next Steps \n Choose one of the following actions to continue your journey with Entando! \n \n \n Build Your First Application:  Use the  Welcome Wizard  to build your first application via guided prompts. \n \n \n Try a Tutorial:  Take advantage of the  Learning Paths  which organize a few of the most popular tutorials by user type. \n \n \n Dig Deeper into Entando Concepts:  Review the  Docs  sections to more deeply understand the Entando building blocks. \n \n \n Learn about the Quickstart Environment:  See the  Quickstart Tips  for more information on how to manage your Getting Started or quickstart environment. \n \n \n \n"},{title:"Welcome Wizard",frontmatter:{},regularPath:"/next/docs/getting-started/welcome-wizard.html",relativePath:"next/docs/getting-started/welcome-wizard.md",key:"v-3d4c5d6e",path:"/next/docs/getting-started/welcome-wizard.html",lastUpdated:"11/24/2020, 10:18:43 AM",content:" Welcome Wizard \n The Welcome Wizard is displayed when you first log in to the Application Builder. You can also start it later by going to the top navigation bar in the Application Builder, click on the information icon, and click  Begin Welcome Wizard . You can disable it from the wizard popup by selecting  Don't show next time  and then  Close , or by going to  My Profile → Preferences  and setting the  Welcome Wizard  preference to  Off . \n \n The Wizard will guide you through the key steps in designing and publishing a page in your application: \n \n Create a Page by setting its title, code, location, group, and template. \n Design the Page by placing a set of pre-configured widgets on the page. \n Preview the Page \n Publish the Page \n \n For more information see the following tutorials: \n \n Page Management \n Widgets and Fragments \n Content Creation \n Digital Assets \n \n"},{title:"Caching and Clustering in an Entando Application",frontmatter:{},regularPath:"/next/docs/reference/caching-and-clustering.html",relativePath:"next/docs/reference/caching-and-clustering.md",key:"v-c5890230",path:"/next/docs/reference/caching-and-clustering.html",headers:[{level:2,title:"App Engine Clustering and High Availability",slug:"app-engine-clustering-and-high-availability"},{level:2,title:"Caching",slug:"caching"},{level:3,title:"Data Management",slug:"data-management"},{level:2,title:"Infinispan Implementation (Default)",slug:"infinispan-implementation-default"},{level:2,title:"Redis Implementation",slug:"redis-implementation"},{level:2,title:"Performance",slug:"performance"},{level:3,title:"Cache Management",slug:"cache-management"}],lastUpdated:"1/12/2021, 11:06:14 AM",content:" Caching and Clustering in an Entando Application \n App Engine Clustering and High Availability \n The Entando App Engine can be deployed as a clustered set of instances using the clustering and replication ability of Kubernetes. The App Engine is\nbacked by a shared cache with two chioices of implementation out of the box. \n See this tutorial for configuring and testing a clustered instance of the App Engine. \n The clustering of microservices built to add functionality to an Entando application is separate from the clustering used by the App Engine. The microservices\nhave a separate clustering configuration and setup depending on the implementation and choices made in creating those microservices. See the documentation\nfor your microservices caching implementation for details on configuring and deploying clustered microservices. \n Caching \n Data Management \n At startup time the App Engine will load all database data into the shared cache. When a page is rendered or content is fetched that content will be served from the cache. In the event of a write to the cache the cache and database will both be updated. \n The following objects are cached in the base App Engine implementation \n \n Pages \n Page templates \n Categories \n Widgets \n Configuration (application level configuration) \n Roles \n Groups \n Languages \n Labels (i18n) \n User profiles \n API Catalog (legacy API metadata separate from swagger) \n Data models and data types (deprecated) \n Infinispan Implementation (Default) \n The default implementation, included in the quickstart and base images of the release, of the cache for the App Engine utilizes  Infinispan in Library Mode  and it is managed via configuration in the app server hosting the Entando App Engine. \n \n To utilize this implementation you can add replicas of the app engine (entando-de-app) to your deployment. New pods will automatically join the cluster. Ensuring a high availability deployment distributed across nodes depends on the underlying Kubernetes implementation and goals of the deployment. It is up to the implementor of the cluster and the application to ensure that the applications are scheduled to nodes and deployed in a fashion that meets the uptime and performance goals of the Entando Application. \n Read more here  for tutorials and step by step instructions on using the Infinispan cache in an Entando App. \n Redis Implementation \n An Entando App can also be configured to utilize an external  Redis  cache. In a Redis implementation of an Entando App the cache is deployed separately from the App Engine and the App Engine is configured to connect to the deployed instance. \n \n The Redis cache is not deployed by the Entando Operator and must be managed by the implementing teams dev ops or Kubernetes cluster administrators. \n Read more here  for tutorials and step by step instructions on using a Redis cache in an Entando App. \n Performance \n As you design your Entando App Engine cluster there are a couple of things to keep in mind: \n \n In a read only implementation, or an implementation with infrequent writes to the cached objects listed above, the network latency between pods on different nodes will not be a major driver of runtime performance. Each pod will have a fully replicated copy of the cache \n In write heavy implementations network latency between nodes can be a factor in performance\n \n The overall performance impact of network latency will vary depending on the implementation. The performance depends on the types of objects being written, the size of those objects, and whether the writes invalidate single objects or entire lists of objects in the cache. \n \n \n \n In general, it is recommended that performance testing on clustered instances matches the expected runtime traffic pattern of a live application. Every application will have a unique performance profile. \n Cache Management \n When a new replica of an Entando App joins a cluster of applications the cache is replicated to that node. If the cache is very large or the network is slow this may add to the total startup time of the new instance. Existing instances will continue to function. \n"},{title:"Cluster Resource Limits",frontmatter:{},regularPath:"/next/docs/reference/cluster-resource-limits.html",relativePath:"next/docs/reference/cluster-resource-limits.md",key:"v-7bc2fb4c",path:"/next/docs/reference/cluster-resource-limits.html",headers:[{level:3,title:"Cluster Resource Limits",slug:"cluster-resource-limits"},{level:3,title:"Bundle size limitations",slug:"bundle-size-limitations"}],lastUpdated:"6/30/2020, 3:00:04 PM",content:" Cluster Resource Limits \n Entando needs a well-defined amount of resources in order to start and Kubernetes takes care of using only the needed amount of them.\nHowever, you can choose to impose boundaries on the minimum and maximum used/allocated resources by updating the downloaded  entando.yaml  file and setting the  ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS  property to true.\nIn this way, Entando will allocate a predefined amount of resources and Kubernetes will act more strictly checking for resource availability. See  Kubernetes resources  for more information. \n By not imposing limits you can minimize initial needed resources and startup time, leaving Kubernetes free to manage its resources as he wants.\nBy imposing limits you can obtain a better-balanced system. \n It's important to note that, accordingly to the Kubernetes documentation, in order to deploy on a namespace with a\n ResourceQuotas  on memory and cpu, \n \n every Container must have a memory request, memory limit, cpu request, and cpu limit \n \n so, in that case, you will need to set  ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS  to true, otherwise your deploy will fail. \n Here you can see the detailed resource requests/limits per container: \n \n \n \n Component \n Mem requests \n CPU requests \n Mem limits \n CPU limits \n \n \n \n \n AppBuilderDeployableContainer \n 128Mi \n 125m \n 512Mi \n 500m \n \n \n EntandoAppDeployableContainer \n 448Mi \n 375m \n 1792Mi \n 1500m \n \n \n ComponentManagerDeployableContainer \n 192Mi \n 188m \n 768Mi \n 750m \n \n \n EntandoPluginSidecarDeployableContainer \n 192Mi \n 188m \n 768Mi \n 750m \n \n \n EntandoPluginDeployableContainer \n 256Mi \n 250m \n 1024Mi \n 1000m \n \n \n EntandoK8SServiceDeployableContainer \n 192Mi \n 250m \n 768Mi \n 1000m \n \n \n KeycloakDeployableContainer \n 192Mi \n 250m \n 768Mi \n 1000m \n Bundle size limitations \n Entando supports bundles without size limitations, you can install as many bundles as you want and bundles as big as you desire. \n The only thing you have to check is the  <YOUR-APP-NAME>-de-pvc  volume size. Each bundle is installed in that volume, so when it reaches its maximum capacity you will not be able to install bundles anymore. \n You can find  quickstart-de-pvc  volume inside de-container container, that is part of the pod named  <YOUR-APP-NAME>-server-deployment-*** , where asterisks should assume values based on your instance.\nFeel free to set its size accordingly to your needs. \n"},{title:"Manage Entando Databases",frontmatter:{},regularPath:"/next/docs/reference/databases.html",relativePath:"next/docs/reference/databases.md",key:"v-d1257868",path:"/next/docs/reference/databases.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Lightweight, low-config Databases with PostgreSQL and MySQL",slug:"lightweight-low-config-databases-with-postgresql-and-mysql"},{level:2,title:"Existing External Databases",slug:"existing-external-databases"},{level:3,title:"Structure",slug:"structure"},{level:3,title:"How it works",slug:"how-it-works"},{level:3,title:"Keeping track of credentials",slug:"keeping-track-of-credentials"},{level:2,title:"Vendor specific notes",slug:"vendor-specific-notes"},{level:3,title:"Oracle",slug:"oracle"},{level:3,title:"Notes",slug:"notes"},{level:3,title:"MySQL",slug:"mysql"},{level:3,title:"Resulting Connection String",slug:"resulting-connection-string-2"},{level:3,title:"Notes",slug:"notes-2"},{level:3,title:"PostgreSQL",slug:"postgresql"},{level:2,title:"Skipping database preparation",slug:"skipping-database-preparation"},{level:3,title:"How it works",slug:"how-it-works-2"}],lastUpdated:"3/24/2021, 9:59:27 AM",content:' Manage Entando Databases \n Overview \n Entando’s Docker images currently support three different relational\ndatabase management systems: PostgreSQL, MySQL and Oracle. With\nPostgreSQL and MySQL, by default, Entando’s will automatically create a\nKubernetes Deployment hosting the database management systems. However,\nfor Oracle, and also for other scenarios that may require it, Entando\nsupports connectivity to existing external databases. This document\nprovides the user with the necessary information to decide how to manage\nEntando’s databases. \n Lightweight, low-config Databases with PostgreSQL and MySQL \n When deploying Entando Custom Resources that require databases to a new\nNamespace, the default behavior for Entando is to create a Kubernetes\nDeployment. It uses the standard Openshift compliant images: \n \n \n centos/mysql-57-centos7 and \n \n \n centos/postgresql-96-centos7) \n \n \n This is a fairly low-configuration approach, as Entando will create and\ninitialize the databases transparently. Persistent data is stored on any\nPersistent Volume that meets our Persistent Volume Claim requirements.\nWhen an Entando Custom Resource is redeployed, the Persistent Volumes\nremain in tact. Since the subsequent data initialization is idempotent,\nthe supporting Deployments will scale up and behave as expected. \n Generally our services encapsulate the database they use entirely, and\nprovide facilities to import and export the data without needing any\nknowledge of the internal workings of the underlying data store. For\nmost simple Entando Apps the database doesn’t grow too large and is\nfairly easy to manage. This state of affairs allowed us to keep our\ndatabases isolated from each other, thus allowing for isolated\ndeployments without needing complex coordination of database migration\nfor the different deployment pipelines. \n It is worth noting that these database Deployments are not clustered.\nThe customer is therefore strongly advised to provide redundancy and\nclustering in the form of clustered storage. These database deployments\ndo specify a restartPolicy of \'Always\', so in the event of a\nnon-corrupting failure, the database Pod should therefore restart in\nabout 30 seconds. This by no means offers the features of a full\ndatabase cluster, but may suffice for many scenarios. \n However, in more advanced use cases, such as the use of our CMS\nfunctionality, this simplistic approach may not scale. And where there\nis a a centralized database admin team, or where there is a requirement\nto comply to strict organizational governance w.r.t. databases, this\napproach does result in a multitude of databases that may be difficult\nfor the database admin team to manage. \n Existing External Databases \n For this reason, Entando can also be configured to use an existing\ndatabase service provided by the customer. In these scenarios, the\ncustomer is expected to take responbility for the lower level database\noperations such as tablespace creation, permissions and clustering.\nEntando will however still be responsible for creating and populating\nthe tables, indices and foreing keys. Entando will also create all of\nthese in the appropriate table \'container\' for the DBMS in question such\nas a schema (Oracle/PostgreSQL) or a database (MySQL). In order to\nachieve this, Entando installs a dedicated CustomResourceDefinition in\nKubernetes, called an \'EntandoDatabaseService\' \n The idea is for EntandoDatabaseService custom resources to be created in\nthe namespace the EntandoApps and EntandoPlugin that should use them\nwill be created. The EntandoDatabaseService is usually created along\nwith a secret that carries admin credentials to the database in\nquestion. \n Structure \n The EntandoDatabaseService custom resource looks like this: \n  EntandoDatabaseService\nmetadata:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\nspec:\n  dbms: string, one of oracle, postgresql or mysql\n  host: string, either an ip address or hostname where the database service is hosted\n  port: integer, the port on which the database service is hosted\n  databaseName: string, the name of the database, only required for PostgreSQL and Oracle\n  secretName: the name of the Secret in the same namespace carrying admin credentials to the database service\n  tablespace: (Oracle only)  the tablespace to use to create the required schemas in\n  jdbcParameters: a map containing name-value pairs for any additional parameters required for the JDBC driver to connect to the database.\n \n The Secret that will provide the admin credentials, identified by the\nabove  secretName  should look like this: \n Secret:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\n  stringData:\n    username: string, name of an admin user that can create schemas and other users\n    password: string, password of the above user\n How it works \n In order for the EntandoApp and EntandoPlugin deployer to pick up the\ncorrect database service, the EntandoDatabaseService needs to be created\nBEFORE the EntandoApps and EntandoPlugins are created. There can be\nmultiple EntandoDatabaseServices in the namespace, but they need to\npoint to database services of different vendors, i.e. PostgreSQL, Oracle\nand MySQL. Entando currently cannot enforce any validation but if there\nare two EntandoDatabaseServices that have the same DBMS vendor, it will\nsimply pick the first one and continue. Please ensure that only one\nEntandoDatabaseService exists for each DBMS vendor you need to use. \n Once the appropriate EntandoDatabaseServices have been created, any\nEntandoApp or EntandoPlugin that is created will have to specify the\nappropriate DBMS vendor in their  spec.dbms  property. If the\nEntandoOperator detects an EntandoDatabaseService with a matching DBMS\nvendor, it will continue to create the necessary schemas on the specific\ndatabase. If the EntandoOperator does not detect an\nEntandoDatabaseService with a matching DBMS vendor, it will fall back\nonto its default behaviour which is to create a matching Deployment and\nspin up a database service from the same namespace. If the  spec.dbms \nproperty is not specified on an EntandoApp, the EntandoOperator will\ndefault to PostgreSQL. If the  spec.dbms  property is not specified on\nan EntandoPlugin, the EntandoOperator will assume that the EntandoPlugin\nin question does not require a database and hence bypass any database\nand schema creation. \n When the EntandoOperator processes your Entandoapp or EntandoPlugin with\nan appropriate  spec.dbms  specified, it will create a Schema/User pair\nfor each datasource required. A typical EntandoApp deployment requires 3\ndatasources (portdb,servdb and dedb). Plugins generally only require one\ndatasource (plugindb). \n The database schema and user created will have the same name. The name\nis derived from the name of the EntandoPlugin or EntandoApp by replacing\nall characters that are not ANSI-SQL compliant with an underscore. The\ndatasource name is then suffixed to the schema name. When defining the\nname of your app or plugin, please keep in mind that some DBMS vendors\ndo not support long schema names. Future versions of Entando will allow\nyou to override the schema prefix for an app or plugin, but for now this\nis a limitation one has to keep in mind. \n Keeping track of credentials \n The EntandoOperator generates a Kubernetes Secret for each schema/user\ncombination it creates. The name of this secret is the concatenation of\nthe name of the EntandoApp or EntandoPlugin, the datasource qualifier\nand then the suffix "-secret". For instance, for an EntandoApp called\n"my-app" the "portdb" datasource will have a corresponding Kubernetes\nSecret called "my-app-portdb-secret". The EntandoOperator will never\noverwrite or update an existing database secret. We generate a random\nstring for the password which is generally considered the safest\napproach. If you do however wish to change the password in for the\nresulting user, please remember to update the password on the Kubernetes\nSecret too. Such an operation is however error prone and could result in\nsubsequent deployments failing. \n The EntandoOperator’s schema creation logic is idempotent. If it\ntherefore finds that the generated schema/user combination found in the\nassociated Kuberentes Secret already exists, it won’t do anything.\nHowever, it will attempt to log in, and if it fails to log in, it will\nattempt to create the user. If the user already exists, but with a\ndifferent password than the one in the Kubernetes Secret, all subsequent\ndeployment operations will fail. \n Vendor specific notes \n Oracle \n Example \n   EntandoDatabaseService\n    metadata:\n      name:oracle-service\n    spec:\n      dbms: oracle\n      host: 10.0.0.13\n      port: 1521\n      databaseName: ORCLPDB1.localdomain\n      secretName: oracle-secret\n      tablespace: entando_ts\n      jdbcParameters: {}\n  Secret:\n    metadata:\n      name: oracle-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting connection string: \n jdbc:oracle:thin:@//10.0.0.13:1521/ORCLPDB1.localdomain \n Notes \n Oracle has some rather complicated rules in building the correct\nconnection string. Please note that for the sake of portability and\nlightweight image we are limited to the thin driver. The  databaseName \ncould also be an Oracle service as opposed to an Oracle  SID . Please\ncoordinate with your Oracle DB Admin to determine exactly what value to\nuse here. We strongly recommend testing your settings with some code or\na tool that constructs JDBC connection. \n When the EntandoOperator prepares the schemas for your EntandoApp or\nEntandoPlugin, it will create a user for every datasource required, and\nas is standard behaviour for Oracle, that user will have its own schema\nwith the same name. Permissions are set up to ensure that one user\ncannot access tables from another user’s schema. Please note that Oracle\nlimits schema names to 30 characters. If you intend to use Oracle,\nplease keep the name of your apps and plugins short enough. The suffixes\nthat we append to the app or plugin name to ensure the resulting schema\nname is unique are usually shorter than 8 characters, so names of about\n20 characters should be safe. \n You can specify which tablespace Entando should use to create the\nschemas in using the  spec.tablespace  property \n ORA-01704: string literal too long \n Entando requires extended datatypes to be activated in Oracle 12c and\nhigher\n( https://oracle-base.com/articles/12c/extended-data-types-12cR1 ) \n MySQL \n Example \n EntandoDatabaseService\n  metadata:\n    name:mysql-service\n  spec:\n    dbms: mysql\n    host: 10.0.0.13\n    port: 3306\n    databaseName:\n    secretName: mysql-secret\n    jdbcParameters:\n       useSSL: "true"\nSecret:\n  metadata:\n    name: mysql-secret\n  stringData:\n    username: admin\n    password: admin123\n Resulting Connection String \n jdbc:mysql://10.0.0.13:3306 \n Notes \n MySQL doesn’t really support schemas, or more accurately, it doesn’t\ndistinguish between schemas and databases. For this reason, no\ndatabaseName is required. The EntandoOperator will therefore create an\nentirely new database for each datasource your EntandoApp or\nEntandoPlugin requires. It will also create a user with the same name as\nthe database with permission set up to ensure one user cannot access the\ndatabase of another user. Please note that MySQL limits database names\nto 63 characters. Keep this in mind when defining the names of your\nEntandoApps and EntandoPlugins \n PostgreSQL \n Example \n   EntandoDatabaseService\n    metadata:\n      name:postgresql-service\n    spec:\n      dbms: postgresql\n      host: 10.0.0.13\n      port: 5432\n      databaseName: my_db\n      secretName: postgresql-secret\n      jdbcParameters: {}\n\n  Secret:\n    metadata:\n      name: postgresql-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting Connection String \n jdbc:postgresql://10.0.0.13:5432/my_db \n Notes \n PostgreSQL behaves very similar to Oracle when it comes to how it\nassociates a user with its own schema. The current username is used as a\ndefault schema/prefix to resolve tables. As with Oracle, Entando ensures\nthat two users don’t have access to each other’s schemas. \n Skipping database preparation \n When an Entando App is being deployed, there is an operator responsible for the entire deployment process. It takes care also of DB creation and preparation.\nIf you have an already prepared DB (schemas, tables, and all other stuff), you could skip schemas creation and DB preparation of the EntandoApp in order to speed up the deploy process. \n You can achieve this by specifying some properties for the EntandoApp component present in the helm generated file. Look at  this  for more info. \n For  spec.dbms  property you should choose  none , then you should add all needed DB connection parameters.\nAfter updating parameters with the one you need, you should end with a yaml like this: \n - kind: "EntandoApp"\n  metadata:\n    annotations: {}\n    labels: {}\n    name: "example-qs"\n  spec:\n    dbms: "none"\n    replicas: 1\n    standardServerImage: wildfly\n    ingressPath: /entando-de-app\n    environmentVariables:\n      - name: SPRING_DATASOURCE_USERNAME\n        value: admin\n      - name: SPRING_DATASOURCE_PASSWORD\n        value: adminadmin\n      - name: SPRING_DATASOURCE_URL\n        value: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_dedb"\n      - name: SPRING_JPA_DATABASE_PLATFORM\n        value: org.hibernate.dialect.PostgreSQLDialect\n      - name: PORTDB_URL\n        value: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_portdb"\n      - name: PORTDB_USERNAME\n        value: admin\n      - name: PORTDB_PASSWORD\n        value: adminadmin\n      - name: PORTDB_CONNECTION_CHECKER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n      - name: PORTDB_EXCEPTION_SORTER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n      - name: SERVDB_URL\n        value: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_servdb"\n      - name: SERVDB_USERNAME\n        value: admin\n      - name: SERVDB_PASSWORD\n        value: adminadmin\n      - name: SERVDB_CONNECTION_CHECKER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n      - name: SERVDB_EXCEPTION_SORTER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n How it works \n Using  spec.dbms: "none"  will cause the operator to skip that initial schema/user creation step entirely.\nThen adding those variables under the  spec.environmentVariables  section will supply connection parameters that will be used by EntandoApp.\nKeep in mind that all these parameters will be applied to each of the containers in the EntandoApp pod and that they will also override existing values. \n'},{title:"Entando Deployment Structure",frontmatter:{},regularPath:"/next/docs/reference/deployment-structure.html",relativePath:"next/docs/reference/deployment-structure.md",key:"v-9fd918ac",path:"/next/docs/reference/deployment-structure.html",headers:[{level:2,title:"entando-operator",slug:"entando-operator"},{level:2,title:"database init containers",slug:"database-init-containers"},{level:2,title:"entando-de-app",slug:"entando-de-app"},{level:2,title:"app-builder",slug:"app-builder"},{level:2,title:"component-manager",slug:"component-manager"},{level:2,title:"entando-k8s-service",slug:"entando-k8s-service"},{level:2,title:"keycloak",slug:"keycloak"},{level:2,title:"Other Key Repositories",slug:"other-key-repositories"},{level:3,title:"entando-core",slug:"entando-core"},{level:3,title:"entando-cms",slug:"entando-cms"},{level:3,title:"entando-components",slug:"entando-components"},{level:3,title:"Entando Kubernetes Controllers",slug:"entando-kubernetes-controllers"}],lastUpdated:"12/9/2020, 11:30:45 AM",content:" Entando Deployment Structure \n This page provides a high level overview of the key Entando GitHub repositories along with a brief description\nof how those repositories are realized in a running Entando deployment. The descriptions provided here are meant\nas a guide for identifying opportunities to dig deeper into the architecture and how things are structured\nrather than a panacea for understanding the architecture. \n entando-operator \n The Entando operator coordinates the installation and configuration of all of the components of an Entando\nCluster. The operator can be installed once per Entando Cluster and used to coordinate the plugin lifecycle for\nmultiple Entando applications across many namespaces. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-controller-coordinator/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-controller-coordinator \n Customization \n It is unlikely that the operator will be customized as part of an Entando implementation. It is not built to\nbe extended inside the codebase. The most common pattern will be to use the existing custom resources that the\noperator knows how to deploy to extend the Entando platform. \n database init containers \n During installation an Entando application needs to create several databases and also to initialize those\ndatabases with information when deploying from a backup in your images. At initialization the  entando-k8s-dbjob \nwill be run 5 times in total. Once for keycloak, twice for the entando application (port and serv dbs), once to\npopulate the Entando application database, and once to create the Component Repository database. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-dbjob \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-dbjob \n \n The screenshot below highlights the init containers for the Entando application schema creation, db\ninitialization, and component repository database. \n \n Many managed kubernetes instances like OpenShift won’t show init containers in their dashboards. So if you’re\ntroubleshooting you may need to look deeper. When fetching logs for an init container using kubectl you must\npass the container name as an argument to the call. For example, \n     kubectl logs <pod> -c <container> -n <namespace>        \n    kubectl logs quickstart-kc-db-preparation-job-ddbdbddb-a  -c quickstart-kc-db-schema-creation-job -n sprint1-rc\n Customization \n It is unlikely that the init containers will be customized as part of an Entando project. The init containers\nwill automatically restore a backup included in your application so that you can create custom images that\ninclude your application setup.\nSee  Backing Up and Restoring Your Environment . \n entando-de-app \n The  entando-de-app  is a J2EE application and is an instance of the  entando-core  (see a description of the\n entando-core  repo below). Reviewing the dependencies of this application in the pom.xml will reveal the\ndependencies on the  entando-core ,  entando-engine , and  admin-console  which encompass the core\nfunctionality in versions of Entando prior to Entando 6. In a quickstart deployment the  entando-de-app  is deployed as part of the  entando-composite-app  multi\ncontainer pod. \n \n GitHub:  https://github.com/entando-k8s/entando-de-app/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-de-app-eap , https://hub.docker.com/repository/docker/entando/entando-de-app-wildfly \n Customization \n The  entando-de-app  is very likely to be customized as part of an Entando implementation. This image can be\ncustomized with new APIs, legacy Entando plugins, new database tables, or other extensions to the  entando-core .\nIt is highly recommended that most extensions to the platform in Entando 6 occur in microservices. However, legacy\nintegrations, extensions to the CMS, and migrations from earlier Entando versions may require changes to the  entando-de-app . \n app-builder \n The  app-builder  is the front end of the  entando-de-app . It communicates with the  entando-de-app  via  REST\nAPIs . The  app-builder  is a React JS application and is served via node in the default\ndeployment. In a quickstart deployment the  app-builder  container is deployed in the  entando-composite-app \nmultiple container pod. The  app-builder  also communicates with the Component Manager via REST API to fetch\ninformation about Entando bundles deployed to the Entando Component Repository (ECR). \n \n GitHub:  https://github.com/entando/app-builder/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/app-builder/ \n Customization \n The  app-builder  is built to be customized and will be customized as part of many Entando implementations.\nThe  app-builder  can be customized at runtime via micro frontends\n widget configuration . The  app-builder  can also be\ncustomized via the integration of custom modules that are added at\n build time . \n component-manager \n The  component-manager  provides the link between the entando-de-app (or your custom core instance) and the\nEntando Component Repository (ECR). The  component-manager  queries the entando-k8s service to fetch available\nbundles that have been deployed as custom resources inside of an Entando cluster.\nThe  component-manager  also manages the relationships between an Entando application and the\ninstalled plugins. This can be seen in the plugin link custom resources in Kubernetes. \n \n GitHub:  https://github.com/entando-k8s/entando-component-manager/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-component-manager/ \n Customization \n It is unlikely that the  component-manager  will be customized as part of an Entando implementation. \n entando-k8s-service \n The  entando-k8s-service  acts as an abstraction layer to fetch data from kubernetes APIs. The primary\nfunctionality is in discovering and making available for installation Entando plugins. The\n entando-k8s-service  is invoked by the  component-manager . \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-service/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-service/ \n Customization \n It is very unlikely that the  entando-k8s-service  will be customized as part of an Entando implementation. \n keycloak \n The  entando-keycloak  project is an extension of the base Keycloak images. The extension provides the default\nthemes for Entando, a customized realm and clients, and adds the Oracle ojdbc jars for connection to Oracle\ndatabases. \n \n GitHub:  https://github.com/entando/entando-keycloak/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-keycloak/ \n Customization \n The keycloak image will often be customized as part of an Entando implementation. Common extensions will\ninclude changing the theme, adding default connections, adding default social logins, adding default clients,\nor other changes. \n Other Key Repositories \n entando-core \n The entando-core project is a J2EE application that exposes APIs for the Entando CMS, includes the legacy\nadmin console, and includes the portal-ui project that performs the server side composition for pages\nrendered via an Entando application. Note that only the composition is performed server side.\nJavascript code is rendered on the client. The entando-core is realized via an instance that includes the\nWAR files generated from a core build as dependencies. In a default deployment this is the  entando-de-app . \n \n GitHub:  https://github.com/entando/entando-core/ \n DockerHub: None (deployed to maven central) \n Customization \n For users familiar with versions prior to Entando 6 there will be cases where the  entando-core  is customized.\nIn most cases these customizations will be delivered via WAR overlay in the instance project.\nUsing WAR overlay is a functional approach for users already  familiar with the process but it is highly\nrecommended to extend the platform using microservices for new projects. \n entando-cms \n The  entando-cms  project is the  app-builder  (React JS) side of the Entando WCMS. It is bundled into the\n app-builder  at build time and will be included in the default deployment of the  app-builder  in almost all cases. \n \n GitHub:  https://github.com/entando/entando-cms/ \n DockerHub: None (deployed to npm) \n Customization \n In some cases the  entando-cms  may be customized if new custom features are added to CMS specific\nfunctionality. However, most cases will use the more general  app-builder  extension points noted above.\nThe  entando-cms  does not expose any dedicated extension interfaces outside of those already provided by the\n app-builder . \n entando-components \n The entando-components project is a collection of legacy plugins for Entando 5 and earlier. These plugins are deployed as WAR dependencies in an entando-core instance. \n \n GitHub:  https://github.com/entando/entando-components/ \n DockerHub: None (deployed to maven central) \n Entando Kubernetes Controllers \n There are a number of controllers that are available to the Entando operator to manage installations and\ncomponents in an Entando Cluster. Those controllers are small and lightweight images that are executed as\nrun to completion pods to manage the installation flow for different parts of the infrastructure. The\ncontrollers are implemented using Quarkus. For more information on the controllers, the Entando custom\nresources, and configuring your Entando deployment see also:\n Custom Resources . \n GitHub: \n \n https://github.com/entando-k8s/entando-k8s-composite-app-controller/ \n https://github.com/entando-k8s/entando-k8s-plugin-controller/ \n https://github.com/entando-k8s/entando-k8s-cluster-infrastructure-controller/ \n https://github.com/entando-k8s/entando-k8s-app-controller/ \n https://github.com/entando-k8s/entando-k8s-app-plugin-link-controller/ \n \n DockerHub: \n \n https://hub.docker.com/repository/docker/entando/entando-k8s-composite-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-plugin-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-cluster-infrastructure-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-plugin-link-controller/ \n Customization \n It is unlikely that the controllers will be customized as part of an Entando implementation. \n"},{title:"Accessing Entando APIs",frontmatter:{sidebarDepth:2},regularPath:"/next/docs/reference/entando-apis.html",relativePath:"next/docs/reference/entando-apis.md",key:"v-0c8ecefa",path:"/next/docs/reference/entando-apis.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:3,title:"Enable or disable the Swagger UI in a running container",slug:"enable-or-disable-the-swagger-ui-in-a-running-container"},{level:2,title:"How to find your client secret",slug:"how-to-find-your-client-secret"},{level:2,title:"Setup in local environment",slug:"setup-in-local-environment"},{level:3,title:"Configure Keycloak",slug:"configure-keycloak"},{level:3,title:"Start the Entando Application",slug:"start-the-entando-application"},{level:2,title:"APIs Overview",slug:"apis-overview"},{level:3,title:"API structure",slug:"api-structure"},{level:3,title:"Models",slug:"models"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"2/5/2021, 4:29:16 PM",content:" Accessing Entando APIs \n Overview \n Entando includes the Swagger UI in a quickstart environment and is reachable at  /entando-de-app/api/swagger-ui.html : \n http://[your-host-name]/entando-de-app/api/swagger-ui.html\n Enable or disable the Swagger UI in a running container \n The Swagger UI can be enabled or disabled in a running container by modifying the SPRING_PROFILES_ACTIVE environment variable for the entando-de-app container. \n \n Edit the deployment. The name may be different outside of a quickstart environment. \n \n sudo kubectl -n entando edit deployment/quickstart-server-deployment\n \n \n \n (Optional) Scale the deployment  spec.replicas  to 0 before updating the deployment. This is necessary if you're using an in-memory database, e.g. the default quickstart configuration, and will prevent database errors that can happen on an immediate restart after the profile is changed. Save the deployment to apply the change. \n \n \n Find the entando-de-app env variables section under  spec.template.spec.containers.env[image: entando-de-app] \n \n \n 4a. To enable the swagger UI, add the SPRING_PROFILES_ACTIVE environment variable, if it's missing, or add  swagger  to its comma-delimited list. \n         - name: SPRING_PROFILES_ACTIVE\n          value: default,swagger\n \n 4b. To disable the swagger UI, remove  swagger  from the value. \n \n \n (Optional) Reset the deployment  spec.replicas  back to 1. \n \n \n Save the deployment to apply the change. \n How to find your client secret \n You'll need your client credentials to execute the Entando APIs. \n \n \n Login into your Keycloak instance \n \n \n Go to  Administration → Clients \n \n \n Select the desired client (e.g. in a quickstart environment this is  quickstart-server ) \n \n \n Click on the  Credentials  tab to get the secret \n Setup in local environment \n You may prefer to run a local standalone Entando application for some tasks. You'll need Java 11, maven, and Keycloak for authentication. See  these instructions  to setup a standalone Keycloak. \n Configure Keycloak \n Configure your Keycloak client in order to support Swagger UI. A quickstart environment has this pre-configured. \n \n \n Login to your Keycloak instance \n \n \n Access the Administration console \n \n \n Click on  Clients  on the left bar and select your client (e.g.  quickstart-server ) \n \n \n Update the following values under  Settings : \n \n Set  Valid Redirect URIs  to  http://localhost:[your port]/entando-de-app/*  or  *  to allow all redirect URIs. \n Set  Web Origins  to  http://localhost:[your port]  or  *  to accept all origins. \n Start the Entando Application \n \n \n Clone the Entando reference application: \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n Start the application with the following options: \n \n Enable the Swagger profile via  -Dspring.profiles.active=swagger \n Enable the Keycloak profile via  -Pkeycloak \n Configure the application connection to Keycloak itself. For simplicity this uses the same client credentials you'll use to try out the APIs.\n \n Set  -Dkeycloak.auth.url  to your Keycloak endpoint (including  /auth ), e.g.  -Dkeycloak.auth.url=http://my-keycloak-server/auth \n Set  -Dkeycloak.client.id  to your client id, e.g.  -Dkeycloak.client.id=quickstart-server \n Set  -Dkeycloak.client.secret  to your client secret, e.g.  -Dkeycloak.client.secret=my-secret . See  How to find your client secret  above. \n \n \n (Optional) Set -Djetty.port=8085  if the default port 8080 is already in use. \n (Optional) To skip the docker steps (or if you don't have docker installed/running), add  -DskipDocker=true \n \n Here's a full example: \n mvn clean package jetty:run-war -Pjetty-local -Pderby -Pkeycloak -Dspring.profiles.active=swagger -Djetty.port=8085 -Dorg.slf4j.simpleLogger.log.org.eclipse.jetty.annotations.AnnotationParser=error -Dkeycloak.auth.url=http://my-keycloak-host/auth -Dkeycloak.client.id=quickstart-server -Dkeycloak.client.secret=my-client-secret -DskipDocker=true\n \n \n \n Wait for the application to start. \n [INFO] Started ServerConnector@1355c8be{HTTP/1.1, (http/1.1)}{0.0.0.0:8085}\n[INFO] Started @66257ms\n[INFO] Started Jetty Server\n \n \n \n Navigate to the Swagger UI in a browser at  /entando-de-app/api/swagger-ui.html \n  http://localhost:[your port]/entando-de-app/api/swagger-ui.html\n APIs Overview \n The Entando core exposes REST APIs for every action that can be taken in\nthe App Builder environment. For example, you can use\nthese APIs to create pages, create page templates or to add widgets to\npages. The APIs can be used to support automation, testing, or\nintegrations with external systems. \n API structure \n All of the APIs share a common top level structure. Each response will\ncontain a top level entry for  errors ,  metadata , and  payload . \n The  errors  will always contain code and a message string indicating an\nerror condition in the request. The  metadata  section is used for\npaging, sorting, filtering and data that is distinct from the body. The\nbody of each response is included in the  payload  section of the\nresponse and varies according to each API. \n Models \n All of the model classes returned by the Entando core are annotated so that the model definition is included in the Swagger documentation. At the bottom of the Swagger page all of the model classes returned by the API endpoints can be found. \n Tutorial \n \n \n Access your application Swagger UI as discussed above \n \n \n Click on the  Authorize  button in the upper right corner \n \n \n Enter the client id and client secret in the open window and click  Authorize \n \n \n If you are redirected to the Entando login page, log in with your credentials (default are  admin / adminadmin ) \n \n \n You will be redirected to the Swagger UI page, now authenticated \n \n \n Use the  Try it out  button on the APIs \n \n \n Scroll to  widget-controller \n \n \n Select the blue GET row \n \n \n Select  Try it out \n \n \n Look at the results in the window. You should see a Server response with Code 200 and full response body. \n \n \n \n \n"},{title:"Entando CLI",frontmatter:{sidebarDepth:2},regularPath:"/next/docs/reference/entando-cli.html",relativePath:"next/docs/reference/entando-cli.md",key:"v-63e6ea8c",path:"/next/docs/reference/entando-cli.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Installation",slug:"installation"},{level:3,title:"Prerequisites",slug:"prerequisites"},{level:3,title:"Install the CLI",slug:"install-the-cli"},{level:3,title:"Check Environment",slug:"check-environment"},{level:3,title:"Update the CLI",slug:"update-the-cli"},{level:2,title:"Available Commands",slug:"available-commands"},{level:2,title:"Project Management",slug:"project-management"},{level:3,title:"Project Setup",slug:"project-setup"},{level:3,title:"Prepare and Publish a Bundle",slug:"prepare-and-publish-a-bundle"},{level:3,title:"Run a Project locally",slug:"run-a-project-locally"},{level:2,title:"Bundle Commands",slug:"bundle-commands"},{level:2,title:"Diagnostic Commands",slug:"diagnostic-commands"},{level:2,title:"Reference",slug:"reference"}],lastUpdated:"3/11/2021, 5:55:10 AM",content:' Entando CLI \n Overview \n The Entando Command Line Interface (CLI) provides a set of commands that accelerate the developer experience by assisting the developer with common tasks such as quickly installing a new copy of Entando, generating an Entando project via JHipster, deploying an Entando Bundle, etc. \n Installation \n Prerequisites \n The basic requirements for the CLI vary depending on the category of developer tasks. The Entando CLI is able to install secondary dependencies using the  ent check-env  command as described  here . \n \n \n \n Category \n Prerequisite \n \n \n \n \n Basic Development \n git or  git for windows \n \n \n \n nvm or  nvm for windows \n \n \n Install Entando in a local VM \n multipass \n \n \n Build and publish Entando Bundles \n docker and docker-compose \n \n \n \n a git repository for the bundle artifacts \n \n \n \n a Docker Hub account (or organization) for microservice Docker images \n \n \n Deploy an Entando Bundle \n a Kubernetes cluster with admin access. This could be a local cluster (created via the CLI or manually) or a shared remote cluster. \n \n \n \n TIP \n If you follow the automated option in  Getting Started , then the CLI will be  installed for you along with an Ubuntu VM containing k3s Kubernetes and a quickstart Entando application. \n Install the CLI \n Install the current offical release of the CLI via the following command. \n curl  -L https://get.entando.org/cli  |   bash \n Check Environment \n Use the  check-env  command to prepare your environment for development. This will verify the presence of additional dependencies (such as git, curl, java, JHipster, etc.) as well as the appropriate versions for your specific Entando instance. In most cases  check-env  will automatically install those dependencies and will prompt the developer for guidance or approval as needed. \n ent check-env develop\n Update the CLI \n The CLI can be updated to the latest version (corresponding to your Entando version) using the following command. You should run  ent check-env develop  after updating the CLI in case any dependency versions have changed. \n bash   < ( curl  -L  "https://get.entando.org/cli" )  --update\n Available Commands \n Use  ent help  to review the list of available commands. \n ~~~~~~~~~~~~~~~~~~~\n Entando CLI\n~~~~~~~~~~~~~~~~~~~\n\n> Essentials:\n  - Activate using:  ~/.entando/ent/quickstart/cli/v6.3.0/activate\n  - Dectivate using: ~/.entando/ent/quickstart/cli/v6.3.0/deactivate\n\n> Available commands:\n  - app                  => Helps managing an EntandoApp\n  - app-info             => Displays information about an entando app\n  - bundler              => Wrapper for the ENT private installation of the entando bundle tool.\n  - check-env            => Checks the environment for required dependencies and settings\n  - diag                 => Runs some diagnostic and collects the related info in a tgz file\n  - help                 => Helps in having help\n  - host                 => Helps managing the system that hosts the quickstart VM\n  - jhipster             => Wrapper for the ENT private installation of jhipster.\n  - kubectl              => Helper for using kubectl in ent managed scenarios\n  - npm                  => Wrapper for the ENT private installation of npm. This is mostly for internal use\n  - pod                  => Displays information related to a set of pods\n  - prj                  => Helps managing Entando bundle projects\n  - quickstart           => Helps locally installing entando instances\n  - run-tests            => Run the internal tests\n\n> Further info about entando:\n  - ~/.entando/ent/quickstart/cli/v6.3.0/README.md\n  - https://www.entando.com/\n  - https://dev.entando.org/\n\n> ⚠ RECOMMENDED FIRST STEP ⚠ :\n  - Check the dependencies (ent check-env --help)\n \n Check the help text ( --help ) for any command to see its specific options, e.g.  ent check-env --help . \n Project Management \n These are common sequences for an Entando project. \n Project Setup \n \n Setup a project directory \n \n mkdir  testProject  &&   cd  testProject\n \n \n Generate the project skeleton using the JHipster-based Entando Blueprint. \n \n ent jhipster --blueprints entando\n \n \n Generate an entity and MFEs. \n \n ent jhipster entity Conference\n \n \n Build the new project. Using the  ent-prj  wrapper saves having to build each part of the project individually. The first run can be slower due to node downloads for any MFEs. \n \n ent prj build\n \n See  this tutorial  for more details. \n Prepare and Publish a Bundle \n Use the publication system (pbs) to assemble your Entando project into a bundle that can be loaded into Kubernetes. You\'ll need your github credentials, a github repository to hold your bundle artifacts, and a Docker Hub account or organization. \n \n Initialize the bundle directory \n \n ent prj pbs-init\n \n \n Publish the build artifacts to github and Docker Hub \n \n ent prj pbs-publish\n \n \n Create a Kubernetes Custom Resource and apply it to your Entando instance. You can modify the target namespace parameter ( -n ) if you changed it from the default. \n \n ent prj generate-cr  |  ent kubectl apply -n entando -f -\n \n See  this tutorial  for more details. \n Run a Project locally \n \n Startup Keycloak. This uses docker-compose under the hood. \n \n ent prj ext-keycloak start\n \n \n Startup the backend microservices \n \n ent prj be-test-run\n \n \n Startup one or more of the frontend widgets, each from its own shell. \n \n ent prj fe-test-run\n \n See  this tutorial  for more details. \n Alternatively, you can perform a completely clean install of the CLI by removing your  ~/.entando  directory and then reinstalling the CLI per the instructions above. This will also remove the private copies of JHipster, Entando Blueprint, etc. \n rm  -rf ~/.entando.\n Bundle Commands \n Use the  ent bundler  command to prepare a bundle for publication or extract a bundle from an application. \n \n Prepare a bundle custom resource from a Git repository. The project command ( ent prj generate-cr ) provides a wrapped version of this command. See the help for options including the bundle name, description, repository, etc. The output of this command is a yaml file which can be piped to a file or directly to  ent kubectl  for application to Kubernetes. \n \n   ent bundler from-git\n \n See  this tutorial  for an example using this command. \n \n Point the bundler to an existing Entando application and extract its components (pages, content, etc.) and static assets into a custom bundle. You can use this bundle to migrate Entando components from one environment to another (e.g. Dev to QA), to provide a template for building a new Entando application, or as the skeleton of an Entando solution. The bundler provides an interactive mode which allows you to identify the components to be exported from the application. The output of this command is the same bundle folder structure created by an Entando project including a top-level descriptor file. \n \n   ent bundler from-env  \n \n You will need to provide an  env.json  file in the same directory where the bundler is run. This is used to configure the application URLs and client credentials. \n { \n    "coreBaseApi" :   "http://<YOUR-DOMAIN-OR-IP>/entando-de-app" , \n    "k8ssvcApi" :   "http://<YOUR-DOMAIN-OR-IP>/k8s" , \n    "clientId" :   "<YOUR-CLIENT-ID>" , \n    "clientSecret" :   "<YOUR-CLIENT-SECRET>" \n } \n \n See  this tutorial  for more instructions on exporting a bundle including how to setup your  env.json . \n Diagnostic Commands \n The following commands can be useful to more quickly understand what is happening with an Entando Application. If you followed the Getting Started steps to setup Entando then the CLI was automatically installed in the Multipass VM and you can run these commands from there. \n \n ent app-info  display basic information about Kubernetes and the Entando resources (e.g. namespace, pods, ingresses) \n \n ent app-info\n \n \n ent pod-info  display the  kubectl describe  and  kubectl logs  for each of the major Entando pods in a given namespace. \n \n ent pod-info\n \n \n ent diag  list the current pods in a given Entando namespace and prepare a diagnostic tar.gz containing  kubectl describe  and  kubectl logs  for each of the major Entando pods. This can be highly useful when working with Entando Support. \n \n ent diag\n \n Output: \n ubuntu@entando:~$ ent diag\nPlease provide the namespace (entando):\n## DNS rebinding protection TEST\n## LOCAL INFO\n## K8S INFO\n> POD: quickstart-kc-deployer-pbyjdp1dom\n>       CONTAINER: deployer\n> POD: quickstart-eci-deployer-smectg3hxy\n>       CONTAINER: deployer\n> POD: quickstart-deployer-9ul8cyjtiq\n>       CONTAINER: deployer\n> POD: quickstart-composite-app-deployer-nlz9lxc6do\n>       CONTAINER: deployer\n> POD: quickstart-eci-k8s-svc-deployment-79c4894767-5p85d\n>       CONTAINER: k8s-svc-container\n> POD: quickstart-kc-server-deployment-85987fc84c-flrlw\n>       CONTAINER: server-container\n> POD: quickstart-operator-7bfd7fc8cd-gd774\n>       CONTAINER: operator\n> POD: quickstart-server-deployment-f69f84798-g6lx5\n>       CONTAINER: server-container\n>       CONTAINER: de-container\n>       CONTAINER: appbuilder-container\n> Collected diagdata available under "~/.entando/reports/entando-diagdata-2020-11-19T02:58:47+0000" for consultation\n> Collected diagdata available in archive "~/.entando/reports/entando-diagdata-2020-11-19T02:58:47+0000.tgz"\n Reference \n \n Source repository:  https://github.com/entando/entando-cli/tree/develop \n \n'},{title:"Entando Identity Management -- Keycloak",frontmatter:{},regularPath:"/next/docs/reference/identity-management.html",relativePath:"next/docs/reference/identity-management.md",key:"v-241d4be8",path:"/next/docs/reference/identity-management.html",headers:[{level:2,title:"Logging into your Keycloak Instance",slug:"logging-into-your-keycloak-instance"},{level:2,title:"Authentication",slug:"authentication"},{level:2,title:"Authorization",slug:"authorization"},{level:3,title:"Plugins/Microservices",slug:"plugins-microservices"},{level:3,title:"Core",slug:"core"},{level:2,title:"Social Login",slug:"social-login"},{level:2,title:"One Time Passwords",slug:"one-time-passwords"},{level:2,title:"Themes and Look and Feel",slug:"themes-and-look-and-feel"}],lastUpdated:"3/19/2021, 11:11:23 AM",content:' Entando Identity Management -- Keycloak \n Entando Identity Management is powered by Keycloak. The Keycloak instance used for your Entando apps\ncan be  externally installed  or you can use a dedicated instance on a per application basis. The sections below details the architecture and documentation required to customize your Keycloak instance. \n Logging into your Keycloak Instance \n In an Entando deployment Keycloak is protected by a Secret deployed in your Kubernetes instance. To get the default admin credentials you can query Kubernetes for the secret with this command: \n kubectl get secret <project-name>kc-admin-secret -n <namespace> -o go-template="{{println}}Username: {{.data.username | base64decode}}{{println}}Password: {{.data.password | base64decode}}{{println}}{{println}}"\n \n Replace  <project-name>  and  <namespace>  with your values. If you\'re not sure of the secret name you can run \n kubectl get secrets -n <namespace>\n \n And search for the secret that ends in  kc-admin-secret \n Authentication \n In Entando 6 all authentication goes through Keycloak. This ensures that a micro frontend can call a microservice with a token that is available on the client. \n \n By using Keycloak as a central point of authentication the Entando architecture is able to provide a single unified view of identity to the entire architecture. With this architecture Entando becomes more portable and can be integrated into other IDPs without changes to the source. Keycloak acts as an  abstraction to the underlying IDP. \n Authorization \n Plugins/Microservices \n Authorization for the microservices comes from clients and roles in keycloak. The authorizations are stored in the JWT token and are available to the services when invoked. \n Core \n Authorization for the entando-core and WCMS is provided by the Entando user management database. When a user is authenticated to the entando-core  a copy of that user is added to the Entando user management database.  That copy is made in support of the authorization flow noted below. \n As noted above when a user is authenticated to the entando-core via keycloak a copy of that user is added to the entando-core user management database in support of WCMS functionality.  Using the App Builder WCMS roles and groups can be assigned to a user for access to functions in the App Builder or for portal-ui based content access in the runtime application The code that copies the user into the entando-core can be customized to automatically create groups and roles as needed for an application but it is something that must be done on a per implementation basis. \n For more details on the code that copies users and data to the WCMS database see the  entando-keycloak-plugin . The readme in that project includes properties that are available to your Entando app. \n For a deeper look See:  KeycloakAuthorizationManager.java  in the plugin for an example of adding attributes programatically. In particular, the  processNewUser  method. \n Social Login \n Keycloak allows Entando to provide social login as an out of the box capability. See the  Keycloak Social Identity Providers  for documentation on enabling and configuring social logins in your Entando apps. \n One Time Passwords \n Keycloak enables Entando applications to provide login via One Time Passwords (OTP) as well. See the  Keycloak OTP Policies  for more details on configuring and enabling OTP in your application. \n Themes and Look and Feel \n Developers can also customize the look and feel of the login page and all of the identity management system that ships with Entando. The  Keycloak Theme Documentation  provides a lot of details on creating your own theme. \n You can also review the code for the  Entando Theme  as an example Keycloak theme to start from. \n'},{title:"jACMS Aps Core Tag Library",frontmatter:{},regularPath:"/next/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",relativePath:"next/docs/reference/freemarker-tags/freemarker-JACMS-tags.md",key:"v-c90a8f02",path:"/next/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",headers:[{level:2,title:"Tag content",slug:"tag-content"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contenttag"},{level:3,title:"Description",slug:"description"},{level:3,title:"Attributes",slug:"attributes"},{level:2,title:"Tag contentInfo",slug:"tag-contentinfo"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentInfoTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentinfotag"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:2,title:"Tag contentList",slug:"tag-contentlist"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentListTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentlisttag"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:2,title:"Tag contentListFilter",slug:"tag-contentlistfilter"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistfiltertag"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Attributes",slug:"attributes-4"},{level:2,title:"Tag contentListUserFilterOption",slug:"tag-contentlistuserfilteroption"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag=",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistuserfilteroptiontag"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Attributes",slug:"attributes-5"},{level:2,title:"Tag searcher",slug:"tag-searcher"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.SearcherTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-searchertag"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Attributes",slug:"attributes-6"},{level:2,title:"Tag rowContentList",slug:"tag-rowcontentlist"},{level:2,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-rowcontentlisttag"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"}],lastUpdated:"11/3/2020, 4:20:16 AM",content:' jACMS Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: jacmsaps \n \n \n URI: /jacms-aps-core \n Tag  content \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentTag \n Description \n Displays the content given its ID. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content to display. It can accept "expression language". \n \n \n modelId \n false \n Id of the model to use to display the content. The model ID can be either specified explicitly (the model must match the content to serve) or the type name ("list" or "default"); in the latter case the model specified in the configuration will be used. The model must adhere to the content being returned. "Expression language" is accepted. \n \n publishExtraTitle \n false \n Toggles the insertion of the values of the titles in the Request Context. The title values are extracted from the attribute marked with the role "jacms:title". Admitted values are (true, false), default \'false\'. \n \n \n var \n false \n Inserts the rendered content in a variable of the page context with the name provided. \n \n \n attributeValuesByRoleVar \n false \n Inserts the map of the attribute values indexed by the attribute role, in a variable of the page context with the name provided. \n Tag  contentInfo \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentInfoTag \n Description \n Return information of a specified content. The content can will be extracted by id from widget parameters or from request parameter. The tag extract any specific parameter (by "param" attribute) or entire ContentAuthorizationInfo object (setting "var" attribute and anything on "param" attribute). \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content \n \n \n param \n false \n Admitted values for "param" attribute are: \'contentId\' (returns the code of content id), \'mainGroup\' (returns the code of owner group), \'authToEdit\' (returns true if the current user can edit the content, else false). \n \n \n var \n false \n Inserts the required parameter (or the entire authorization info object) in a variable of the page context with the name provided. \n Tag  contentList \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentListTag \n Description \n Loads a list of contents IDs by applying the filters (if any). Only the IDs of the contents accessible in the portal can be loaded. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the search result. \n \n \n contentType \n false \n Sets the code of the content types to search. The name must match the configured one, respecting capital letters and spaces. \n \n \n category \n false \n Identifier string of the category of the content to search. \n \n \n cacheable \n false \n Toggles the system caching usage when retrieving the list. Admitted values (true, false), default "true". \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n userFilterOptionsVar \n false \n Name of the variable in the page context that holds the user filter options \n Tag  contentListFilter \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag \n Description \n "ContentListTag" sub-tag, it creates a filter to restrict the result of the content search. Please note that the filters will be applied in the same order they are declared and the result of the search will reflect this fact. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n String used to filter and sort the contents. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "created" allows sorting by date of creation of content - "modified" allows sorting by date of modification of content. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata \n \n \n value \n false \n The filtering value. \n \n \n start \n false \n Filters the contents by attribute type or by the field specified with the key (respect the following matches): Text field -→ start Text Text attribute type -→ start Text Numeric attribute type -→ start Numeric date attribute type -→ start data If the data filter is used: - today, oggi or odierna will select all the contents with a date greater or equal to the system date - using date with the pattern "dd/MM/yyyy" will select all the contents with a date greater or equal to the one inserted. \n \n \n end \n false \n Similar the the "start" attribute but with the opposite behavior. \n \n \n order \n false \n Specifies the sorting behavior of the IDs found: "ASC"ending or "DESC"ending. By default no ordering is performed. \n \n \n likeOption \n false \n Toggles the \'like\' functionality. Admitted values: (true, false). Default: false. The option is available for metadata and on Text Content attributes. \n Tag  contentListUserFilterOption \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag = \n Description \n "ContentListTag" sub-tag, it creates a custom user filter to restrict the result of the content search by front-end user. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n The key of the filter. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "fulltext" allows filter by full-text search<br /> - "category" allows filter by a system category. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata. \n Tag  searcher \n Tag Class  com.agiletec.plugins.jacms.aps.tags.SearcherTag \n Description \n Generates a list of content IDs, restricting them to the key word contained in the "search" parameter of the http request. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n yes \n Name of the variable, stored in the page context, containing the list of content IDs. \n Tag  rowContentList \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag \n Description \n Publish a list of contents. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the contents (list of properties of key "contentId" and "modelId"). \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n \n'},{title:"Aps Core Tag Library",frontmatter:{},regularPath:"/next/docs/reference/freemarker-tags/freemarker-core-tags.html",relativePath:"next/docs/reference/freemarker-tags/freemarker-core-tags.md",key:"v-7fd3ecd6",path:"/next/docs/reference/freemarker-tags/freemarker-core-tags.html",headers:[{level:2,title:"Tag action",slug:"tag-action"},{level:3,title:"Description",slug:"description"},{level:3,title:"Example",slug:"example"},{level:3,title:"Attributes",slug:"attributes"},{level:3,title:"Tag class",slug:"tag-class"},{level:2,title:"Tag categories",slug:"tag-categories"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:3,title:"Tag class",slug:"tag-class-2"},{level:2,title:"Tag checkHeadInfoOuputter",slug:"tag-checkheadinfoouputter"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:3,title:"Tag class",slug:"tag-class-3"},{level:2,title:"Tag cssURL",slug:"tag-cssurl"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Attributes",slug:"attributes-4"},{level:3,title:"Tag class",slug:"tag-class-4"},{level:2,title:"Tag currentPage",slug:"tag-currentpage"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Attributes",slug:"attributes-5"},{level:3,title:"Tag class",slug:"tag-class-5"},{level:2,title:"Tag currentWidget",slug:"tag-currentwidget"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Attributes",slug:"attributes-6"},{level:3,title:"Tag class",slug:"tag-class-6"},{level:2,title:"Tag fragment",slug:"tag-fragment"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"},{level:3,title:"Tag class",slug:"tag-class-7"},{level:2,title:"Tag freemarkerTemplateParameter",slug:"tag-freemarkertemplateparameter"},{level:3,title:"Description",slug:"description-8"},{level:3,title:"Attributes",slug:"attributes-8"},{level:3,title:"Tag class",slug:"tag-class-8"},{level:2,title:"Tag headInfo",slug:"tag-headinfo"},{level:3,title:"Description",slug:"description-9"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Attributes",slug:"attributes-9"},{level:3,title:"Tag class",slug:"tag-class-9"},{level:2,title:"Tag i18n",slug:"tag-i18n"},{level:3,title:"Description",slug:"description-10"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Attributes",slug:"attributes-10"},{level:3,title:"Tag class",slug:"tag-class-10"},{level:2,title:"Tag ifauthorized",slug:"tag-ifauthorized"},{level:3,title:"Description",slug:"description-11"},{level:3,title:"Example",slug:"example-8"},{level:3,title:"Attributes",slug:"attributes-11"},{level:3,title:"Tag class",slug:"tag-class-11"},{level:2,title:"Tag imgURL",slug:"tag-imgurl"},{level:3,title:"Description",slug:"description-12"},{level:3,title:"Example",slug:"example-9"},{level:3,title:"Attributes",slug:"attributes-12"},{level:3,title:"Tag class",slug:"tag-class-12"},{level:2,title:"Tag info",slug:"tag-info"},{level:3,title:"Description",slug:"description-13"},{level:3,title:"Example",slug:"example-10"},{level:3,title:"Attributes",slug:"attributes-13"},{level:3,title:"Tag class",slug:"tag-class-13"},{level:2,title:"Tag internalServlet",slug:"tag-internalservlet"},{level:3,title:"Description",slug:"description-14"},{level:3,title:"Example",slug:"example-11"},{level:3,title:"Attributes",slug:"attributes-14"},{level:3,title:"Tag class",slug:"tag-class-14"},{level:2,title:"Tag nav",slug:"tag-nav"},{level:3,title:"Description",slug:"description-15"},{level:3,title:"Example",slug:"example-12"},{level:3,title:"Attributes",slug:"attributes-15"},{level:3,title:"Tag class",slug:"tag-class-15"},{level:2,title:"Tag outputHeadInfo",slug:"tag-outputheadinfo"},{level:3,title:"Description",slug:"description-16"},{level:3,title:"Attributes",slug:"attributes-16"},{level:3,title:"Tag class",slug:"tag-class-16"},{level:2,title:"Tag pageInfo",slug:"tag-pageinfo"},{level:3,title:"Description",slug:"description-17"},{level:3,title:"Attributes",slug:"attributes-17"},{level:3,title:"Tag class",slug:"tag-class-17"},{level:2,title:"Tag pager",slug:"tag-pager"},{level:3,title:"Description",slug:"description-18"},{level:3,title:"Example",slug:"example-13"},{level:3,title:"Attributes",slug:"attributes-18"},{level:3,title:"Tag class",slug:"tag-class-18"},{level:2,title:"Tag parameter",slug:"tag-parameter"},{level:2,title:"Tag pager",slug:"tag-pager-2"},{level:3,title:"Description",slug:"description-19"},{level:3,title:"Example",slug:"example-14"},{level:3,title:"Attributes",slug:"attributes-19"},{level:3,title:"Tag class",slug:"tag-class-19"},{level:2,title:"Tag printHeadInfo",slug:"tag-printheadinfo"},{level:3,title:"Description",slug:"description-20"},{level:3,title:"Attributes",slug:"attributes-20"},{level:3,title:"Tag class",slug:"tag-class-20"},{level:2,title:"Tag resourceURL",slug:"tag-resourceurl"},{level:3,title:"Description",slug:"description-21"},{level:3,title:"Example",slug:"example-15"},{level:3,title:"Attributes",slug:"attributes-21"},{level:3,title:"Tag class",slug:"tag-class-21"},{level:2,title:"Tag show",slug:"tag-show"},{level:3,title:"Description",slug:"description-22"},{level:3,title:"Example",slug:"example-16"},{level:3,title:"Attributes",slug:"attributes-22"},{level:3,title:"Tag class",slug:"tag-class-22"},{level:2,title:"Tag url",slug:"tag-url"},{level:3,title:"Description",slug:"description-23"},{level:3,title:"Example",slug:"example-17"},{level:3,title:"Attributes",slug:"attributes-23"},{level:3,title:"Tag class",slug:"tag-class-23"},{level:2,title:"Tag pageWithWidget",slug:"tag-pagewithwidget"},{level:3,title:"Description",slug:"description-24"},{level:3,title:"Example",slug:"example-18"},{level:3,title:"Attributes",slug:"attributes-24"},{level:3,title:"Tag class",slug:"tag-class-24"},{level:2,title:"Tag currentUserProfileAttribute",slug:"tag-currentuserprofileattribute"},{level:3,title:"Description",slug:"description-25"},{level:3,title:"Attributes",slug:"attributes-25"},{level:3,title:"Tag class",slug:"tag-class-25"},{level:2,title:"Tag userProfileAttribute",slug:"tag-userprofileattribute"},{level:3,title:"Description",slug:"description-26"},{level:3,title:"Attributes",slug:"attributes-26"},{level:3,title:"Tag class",slug:"tag-class-26"}],lastUpdated:"8/4/2020, 5:01:47 PM",content:' Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: wp \n \n \n URI: /aps-core \n Tag  action \n Description \n Build the URL to call a jsp or a functionality of a servlet defined\nwithin the system. This tag can use the ParameterTag sub-tag to add url\nparameters. \n Example \n (<@wp.action path="/do/my.action" var="myaction" />)  or\n (<@wp.action path="/JSP/my.jsp" var="my.jsp"/>) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n path \n no \n The relative path of jsp or servlet to invoke, relative to the context of web-application \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n Tag class \n com.agiletec.aps.tags.ActionURLTag \n Tag  categories \n Description \n Return the list of the system categories on SelectItem objects. \n Example \n <@wp.categories var="systemCategories" titleStyle="prettyFull" root="$\\{userFilterOptionVar.userFilterCategoryCode}" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n titleStyle \n no \n The style of the single select item. Currently it can be \'default\' (single title node), \'full\' (title with all parents) or \'prettyFull\' (title with all parents in form of \'..\'). The default when none is given is \'default\'. \n \n \n fullTitleSeparator \n no \n The separator beetwen the titles when \'titleStyle\' is \'full\' or \'prettyFull\'. \n \n \n var \n no \n Name of the page-scoped variable where to place the list of categories. \n \n \n root \n no \n The root of the categories to show. The default is the system root categories \n Tag class \n com.agiletec.aps.tags.CategoriesTag \n Tag  checkHeadInfoOuputter \n Description \n This sub-tag verifies the availability of the information to display.\nThis sub-tag can be used only in a page template, in conjunction with\n\'outputHeadInfo\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to analyse. \n Tag class \n com.agiletec.aps.tags.CheckHeadInfoOutputterTag \n Tag  cssURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the css files. \n Example \n <@wp.cssURL />href="<@wp.cssURL />myportal.css" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n Tag class \n com.agiletec.aps.tags.CssURLTag \n Tag  currentPage \n Description \n Returns the requested information held by the current page bean. \n Example \n <@wp.currentPage param="code" var="currentViewCode" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n false \n The wanted parameter: actually can be either "title", "owner" (group), "code", "hasChild" or "childOf" (with attribute "targetPage"). The default when none is given is "title". \n \n \n langCode \n no \n Code of the language to use for the page information being returned. \n \n \n var \n no \n Name of the page context variable where the information are placed. Please note that the in this case the special characters will not be escaped. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n no \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.CurrentPageTag \n Tag  currentWidget \n Description \n Returns information about the widget where the tag resides. To obtain\ninformation about a widget placed in a frame other than the current, use\nthe "frame" attribute. \n Example \n <@wp.currentWidget param="config" configParam="name" var="configName" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n yes \n The requested parameter. It can assume one of the following values: - "code" returns the code of the associated widget type (empty if none associated) - "title" returns the name of the associated widget type (empty if none associated) - "config" returns the value of the configuration parameter declared in the "configParam" attribute. The default is "title". \n \n \n configParam \n no \n Name of the configuration parameter request. This attribute is mandatory when the attribute "param" is set to "config". \n \n \n var \n no \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n frame \n false \n Id of the frame hosting the widget with the desired information. \n \n \n escapeXml \n no \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n com.agiletec.aps.tags.CurrentWidgetTag \n Tag  fragment \n Description \n Print a gui fragment by the given code. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n code \n true \n The code of the fragment to return. \n \n \n var \n false \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n escapeXml \n false \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n org.entando.entando.aps.tags.GuiFragmentTag \n Tag  freemarkerTemplateParameter \n Description \n Add a parameter into the Freemarker’s TemplateModel Map. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Name of the variable where the requested information is pushed. \n \n \n valueName \n true \n Name of the variable of the page context where extract the information. \n \n \n removeOnEndTag \n false \n Whether to remove the parameter on end of Tag. Possible entries (true, false). Default value: false. \n Tag class \n org.entando.entando.aps.tags.FreemarkerTemplateParameterTag \n Tag  headInfo \n Description \n Declares the information to insert in the header of the HTML page. The\ninformation can be passed as an attribute or, in an indirect manner,\nthrough a variable of the page context. It is mandatory to specify the\ntype of the information. \n Example \n <@wp.headInfo type="JS" info="entando-misc-bootstrap/bootstrap.min.js" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Declaration of the information type. Currently only "CSS" is currently supported. \n \n \n info \n no \n Information to declare. This is an alternative of the "var" attribute. \n \n \n var \n no \n Name of the variable holding the information to declare. This attribute is the alternative of the "info" one. This variable can be used for those types of information that cannot be held by an attribute. \n Tag class \n com.agiletec.aps.tags.HeadInfoTag \n Tag  i18n \n Description \n Return the string associated to the given key in the specified language.\nThis string is either returned (and rendered) or can be optionally\nplaced in a page context variable. This tag can use the ParameterTag\nsub-tag to add label parameters. \n Example \n <@wp.i18n key="COPYRIGHT" escapeXml="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the label to return. \n \n \n lang \n no \n Code of the language requested for the lable. \n \n \n var \n no \n Name of the variable (page scope) where to store the wanted information. In this case the special characters will not be escaped. \n \n \n escapeXml \n no \n Toggles the escape of the special characters of the returned label. Admitted values (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.I18nTag \n Tag  ifauthorized \n Description \n Toggles the visibility of the elements contained in its body, depending\non user permissions. \n Example \n <@wp.ifauthorized permission="enterBackend"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n permission \n no \n The code of the permission required. \n \n \n groupName \n no \n The name of the group membership required. \n \n \n var \n no \n The name of the (boolean) page context parameter where the result of the authorization check is placed. \n Tag class \n com.agiletec.aps.tags.CheckPermissionTag \n Tag  imgURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the images to\ndisplay as static content outside the cms. \n Example \n <@wp.imgURL />entando-logo.png" alt="Entando - Access. Build. Connect." /> \n Attributes \n Tag class \n com.agiletec.aps.tags.ImgURLTag \n Tag  info \n Description \n Returns the information of the desired system parameter. \n Example \n <@wp.info key="systemParam" paramName="applicationBaseURL" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the desired system parameter, admitted values are: "startLang" returns the code of start language of web browsing "defaultLang" returns the code of default language "currentLang" returns the code of current language "langs" returns the list of the languages defined in the system "systemParam" returns the value of the system param specified in the "paramName" attribute. \n \n \n var \n no \n Name of the variable where to store the retrieved information (page scope). In this case the special characters will not be escaped. \n \n \n paramName \n no \n Name of the wanted system parameter; it is mandatory if the "key" attribute is "systemParam", otherwise it is ignored. \n \n \n escapeXml \n no \n Toggles the escape of the special characters in the information returned. Admitted values are (true,false), the former being the default value. \n Tag class \n com.agiletec.aps.tags.InfoTag \n Tag  internalServlet \n Description \n Tag for the "Internal Servlet" functionality. Publishes a function\nserved by an internal Servlet; the servlet is invoked from a path\nspecified in the attribute "actionPath" or by the widget parameter\nsharing the same name. This tag can be used only in a widgets. \n Example \n <@wp.internalServlet actionPath="/ExtStr2/do/jpuserreg/UserReg/initRegistration" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n actionPath \n false \n The init action path. \n \n \n staticAction \n false \n Whether to execute only the given action path. Possible entries (true, false). Default value: false. \n Tag class \n com.agiletec.aps.tags.InternalServletTag \n Tag  nav \n Description \n Generates through successive iterations the so called "navigation" list.\nFor every target/page being iterated (inserted in the page context) are\nmade available the page code, the title (in the current language) and\nthe link. Is it also possible to check whether the target page is empty\n-that is, with no configured positions- or not. \n Example \n <@wp.nav var="page"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n spec \n no \n Declares the set of the pages to generate. \n \n \n var \n yes \n Name of the page context variable where the data of target being iterated are made available. \n Tag class \n com.agiletec.aps.tags.NavigatorTag \n Tag  outputHeadInfo \n Description \n Iterates over various information in HTML header displaying them; this\ntag works in conjunction with other specific sub-tags. Please note that\nthe body can contain only a sub-tag, or information, at once. This tag\nmust be used only in a page template. E.g (<@wp.outputHeadInfo\ntype="CSS">) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to return, in accordance with the sub-tag to use. \n Tag class \n com.agiletec.aps.tags.HeadInfoOutputterTag \n Tag  pageInfo \n Description \n Returns the information of the specified page. This tag can use the\nsub-tag "ParameterTag" to add url parameters if the info attribute is\nset to \'url\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n pageCode \n true \n The code of the page. \n \n \n info \n false \n Code of required page parameter. Possible entries: "code" (default value) , "title", "owner" (group), "url", "hasChild" or "childOf" (with attribute "targetPage"). \n \n \n langCode \n false \n Code of the language to use for the returned information. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. In this case, the system will not escape the special characters in the value entered in pageContext. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n false \n Whether to escape HTML. Possible entries (true, false). Default value: true. \n Tag class \n com.agiletec.aps.tags.PageInfoTag \n Tag  pager \n Description \n List pager. \n Example \n <@wp.pager listName="result" objectName="groupContent" max="10" pagerIdFromFrame="true" advanced="true" offset="5"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n max \n no \n The maximum value for each object group. \n \n \n listName \n yes \n Name of the list as found in the request. \n \n \n objectName \n yes \n Name of the object currently iterated. The following methods are exposed:  getMax, getPrevItem, getNextItem, getCurrItem, getSize, getBegin, getEnd, getMaxItem, getPagerId. \n \n \n pagerId \n no \n Sets the ID of the pager itself, it has to be used when two or more pagers exist in the same page. This attributes overrides "pagerIdFromFrame". \n \n \n pagerIdFromFrame \n no \n Sets the ID of the pager (mandatory when two or more pagers share the same page) based upon the frame where the tag is placed. Admitted values are (true, false), the latter being the default. Please note that the "pagerId" attribute takes precedence over this one. \n \n \n advanced \n no \n Toggles the pager in advanced mode. Admitted values are (true, false). the advanced mode of the tag is used when the list to iterate over is huge. \n \n \n offset \n no \n This attribute is considered only when the pager is in advanced mode. This is the numeric value of the single step increment (or decrement) when iterating over the list \n Tag class \n com.agiletec.aps.tags.PagerTag \n Tag  parameter \n Tag  pager \n Description \n This tag can be used to parameterise other tags. The parameter value can\nbe added through the \'value\' attribute or the body tag. When you declare\nthe param tag, the value can be defined in either a value attribute or\nas text between the start and the ending of the tag. \n Example \n <@wp.parameter name="resourceName"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n name \n true \n The name of the parameter. \n \n \n value \n false \n The value of the parameter. \n Tag class \n com.agiletec.aps.tags.ParameterTag \n Tag  printHeadInfo \n Description \n Returns the information to display. This sub-tag must be used only in a\npage template, in conjunction with \'outputHeadInfo\'. \n Attributes \n Tag class \n com.agiletec.aps.tags.HeadInfoPrinterTag \n Tag  resourceURL \n Description \n Returns URL of the resources. \n Example \n <@wp.resourceURL />static/js/entando-misc-html5-essentials/html5shiv.js"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n root \n no \n Declares the resource root. If not otherwise specified, the value of SystemConstants.PAR_RESOURCES_ROOT_URL is used. \n \n \n folder \n no \n Declares a specific directory for the desired resources. Unless specified, the value "" (empty string) is used in the generation of the URL. \n Tag class \n com.agiletec.aps.tags.ResourceURLTag \n Tag  show \n Description \n Defines the position of inclusion of a widget. This tag can be used only\nin a page template. \n Example \n <@wp.show frame="0" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n frame \n yes \n The positional number of the frame, starting from 0. \n Tag class \n com.agiletec.aps.tags.WidgetTag \n Tag  url \n Description \n Generates the complete URL of a portal page. The URL returned is either\nreturned (and rendered) or placed in the given variable. To insert\nparameters in the query string the sub-tag "ParameterTag" is provided. \n Example \n <@wp.url paramRepeat="true" > \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n page \n no \n Code of the destination page. The default is the current page. \n \n \n lang \n no \n Code of the language to use in the destination page. \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n \n \n paramRepeat \n no \n Repeats in the URL all the parameters of the actual request. \n \n \n excludeParameters \n no \n Sets the list of parameter names (comma separated) to exclude from repeating. By default, this attribute excludes only the password parameter of the login form. Used only when paramRepeat="true". \n Tag class \n com.agiletec.aps.tags.URLTag \n Tag  pageWithWidget \n Description \n Search and return the page (or the list of pages) with the given widget\ntype. When "filterParamName" and "filterParamValue" attributes are\npresent, the returned list will be filtered by a specific widget\nconfiguration. \n Example \n <@wp.pageWithWidget widgetTypeCode="userprofile_editCurrentUser" var="userprofileEditingPageVar" listResult="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Attribute_description: \n \n \n widgetTypeCode \n true \n The code of the widget to search \n \n \n filterParamName \n false \n Optional widget config param name \n \n \n filterParamValue \n false \n Optional widget config param value \n \n \n listResult \n false \n Optional, dafault false. When true the result is a list of pages, when false the returned page is the first occurence \n Tag class \n com.agiletec.aps.tags.PageWithWidgetTag \n Tag  currentUserProfileAttribute \n Description \n Current User Profile tag. Return a attribute value of the current user\nprofile. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.CurrentUserProfileAttributeTag \n Tag  userProfileAttribute \n Description \n User Profile tag. Return a attribute value from the profile givea an\nusername. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n username \n true \n the username \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.UserProfileAttributeTag \n'},{title:"Entando 6.x Release Notes",frontmatter:{},regularPath:"/next/docs/releases/",relativePath:"next/docs/releases/README.md",key:"v-8f8b9fb6",path:"/next/docs/releases/",headers:[{level:2,title:"New Features and Major Fixes",slug:"new-features-and-major-fixes"},{level:2,title:"Previous Releases",slug:"previous-releases"}],lastUpdated:"12/18/2020, 10:32:39 AM",content:" Entando 6.x Release Notes \n New Features and Major Fixes \n This information will be provided when the next version of Entando is released. \n Previous Releases \n Please see the  Versions  list in the main navigation menu above to access documentation and release notes for previous versions of Entando. \n"},{title:"Development Tips and Tricks",frontmatter:{sidebarDepth:2,redirectFrom:"/next/tutorials/devops/local-tips-and-tricks.html"},regularPath:"/next/docs/reference/local-tips-and-tricks.html",relativePath:"next/docs/reference/local-tips-and-tricks.md",key:"v-0d268fa8",path:"/next/docs/reference/local-tips-and-tricks.html",headers:[{level:2,title:"Quickstart Management",slug:"quickstart-management"},{level:3,title:"General",slug:"general"},{level:3,title:"Multipass",slug:"multipass"},{level:3,title:"Entando in Kubernetes",slug:"entando-in-kubernetes"},{level:2,title:"Shared Servers",slug:"shared-servers"},{level:2,title:"Network Issues",slug:"network-issues"},{level:3,title:".nip.io isn't allowed",slug:"nip-io-isn-t-allowed"},{level:3,title:"The IP address changed after the initial install",slug:"the-ip-address-changed-after-the-initial-install"},{level:2,title:"Windows Development",slug:"windows-development"},{level:3,title:"Multipass loses control of VMs",slug:"multipass-loses-control-of-vms"},{level:3,title:"Hyper-V IP Changes",slug:"hyper-v-ip-changes"},{level:3,title:"JHipster",slug:"jhipster"},{level:3,title:"Multipass with VirtualBox",slug:"multipass-with-virtualbox"}],lastUpdated:"2/22/2021, 4:16:33 PM",content:" Development Tips and Tricks \n We've collected a list of tips and tricks for optimizing your local quickstart or  Getting Started  development environment. We invite you to ask questions, collaborate with the community, and share your own favorite\npractices over on the  Entando forum . \n Quickstart Management \n Here are a few common questions about the quickstart environment which uses Multipass to launch an Ubuntu VM, install K3s Kubernetes into it, and then deploy Entando. \n General \n \n How can I remove a quickstart environment? . If you want to completely remove the VM created by Multipass then you can use  multipass delete <VM-NAME>  (where the default VM-NAME for a quickstart is  entando ) and then  multipass purge  to recover the resources. If you just want to shutdown Entando but keep the VM you can use  multipass shell <VM-NAME>  to shell into the VM and then remove the namespace via  sudo kubectl delete namespace entando . \n Multipass \n \n How can I shell into a Multipass VM?   multipass shell <VM-NAME> . If you don't provide a VM-NAME, multipass will use the default name  primary  and even launch it for you if it doesn't exist. \n What do I need to do after restarting my laptop?  By default Multipass is installed as a service and will restart automatically. If Multipass isn't running, you'll need to first start the service, and then you can start your VM via  multipass start <VM-NAME> . Kubernetes will start automatically along with any installed pods, including Entando. It can take a few minutes for all of the pods to start completely but you can use  sudo kubectl -n entando pods --watch  to observe the progress. \n How can I idle or pause my Entando instance?  You can use either  multipass stop <VM-NAME>  or  multipass suspend <VM-NAME> , if you'd rather preserve the VM state. You can then use  multipass start <VM-NAME>  to start the VM. \n What else can Multipass do?  You can run  multipass help  or refer to the  Multipass docs  for more information on Multipass. \n Entando in Kubernetes \n \n How can I install a new copy of Entando into an existing VM?  The quickstart deploys Kubernetes resources into a dedicated namespace,  entando  by default. You can simply delete the namespace,  sudo kubectl delete namespace entando , if you want to delete all of its resources. You can then re-create the namespace and re-install by applying the Helm template for your environment. Alternatively, you can use  ent quickstart --vm-reuse=true  but you'll need to set other  ent quickstart  options so check the  ent  help. \n How can I shell into a running pod or view its logs?  You can use the standard Kubernetes commands, e.g.  sudo kubectl exec -it <POD-NAME> -c <CONTAINER-NAME -- bash  or  sudo kubectl logs <POD-NAME> <CONTAINER-NAME> \n What do I if Entando doesn't start completely?  The most common cause for this is a networking problem. See the  Network issues  section below for details. If all else fails reach out to the Entando team on Slack or in the Forums. \n Shared Servers \n We've recommended using Multipass as a way to quickly spin up an Ubuntu VM to host a local Kubernetes cluster for test purposes. There are many times when a local environment is useful but most teams utilize a shared Kubernetes cluster managed by an operations team and installed either on premise or with a cloud provider for full integration testing, CI/CD, DevOps, etc. \n Network Issues \n A local Entando 6.3 quickstart installation (e.g. what you'll get if you follow the  Getting Started  guide) may use a set of local domain names to enable accessing Entando services. Your IP address will vary but may look something like this: \n quickstart-entando.192.168.99.1.nip.io\nquickstart-kc-entando.192.168.99.1.nip.io\nquickstart-eci-entando.192.168.99.1.nip.io\n \n The base domain configured via the ENTANDO_DEFAULT_ROUTING_SUFFIX (e.g. in your entando.yaml) is based on a fixed IP address and that address is configured during the initial installation. That setting is used to generate ingress routes to map incoming URLs to individual services. In production environments there's generally a dedicated network layer to manage IPs/routing (both on premise and cloud) but those options are often not readily available in a local setup. Here are a couple common issues that can prevent Entando from starting in a local environment: \n  .nip.io isn't allowed \n \n This could be because of firewall settings or corporate security policies. The simplest workaround is to manually edit your /etc/hosts file and map the necessary domains to the IP of your local virtual machine. \n \n  192.168.99.1 quickstart-kc-entando.192.168.99.1.nip.io\n 192.168.99.1 quickstart-eci-entando.192.168.99.1.nip.io\n 192.168.99.1 quickstart-entando.192.168.99.1.nip.io\n \n \n If you add microservices to your installation, you may need to add additional mappings for the new ingresses. \n See  this section below  for detailed steps on Windows. \n  The IP address changed after the initial install \n \n The workaround noted above (e.g. update your /etc/hosts file) can also be used here. Simply update the IP address in the first column to use the current IP of your virtual machine. \n On Windows this can happen simply because your laptop restarted. See  Windows Hyper-V IP Changes  below. \n Windows Development \n Multipass loses control of VMs \n Q: What do I do if Multipass cannot access my VMs? \n A:  The most common symptoms include an  IP=UNKNOWN  entry when issuing a  multipass list  and any attempts to stop or shell into the VM will fail. \n Internet Connection Sharing (ICS) is a Windows service that provides Internet connectivity to virtual machines and its  hosts.ics  file can occasionally get corrupted. Restarting the host laptop or desktop should remedy this but a quicker and simpler fix is to shutdown any VMs using the hypervisor (Hyper-V or VirtualBox), remove the  hosts.ics  file from  Windows/System32/drivers/etc  using elevated privileges, and then restart the VM(s). You can examine the  hosts.ics  file first to check if it is well-formed or if it contains spurious numbers or letters rather than clean IP to VM-NAME mappings. \n Hyper-V IP Changes \n Q: My Entando installation stops working when I restart Windows. How can I fix this? \n A:  The basic issue is that Windows Hyper-V makes it difficult to set a static IP for a VM. (See this  forum post  for details.) As discussed  above , Entando's ingress routes rely on an fixed IP address and will break if the IP address changes after initial installation. Here are a few options to solve this issue, short of modifying your router or network switch settings: \n Option 1: Single host routing \n The simplest way to deal with the peculiarities of Hyper-V IP assignments is to avoid it by using the Windows-specific mshome.net addresses. This allows you to access a VM by using an address like  <VM-NAME>.mshome.net . If you set up your enviroment using the  Automatic Install  instructions, then the ent CLI will select the single host option for you and the address will be  entando.mshome.net . You can accomplish the same thing yourself using the  ent quickstart  script but see its  --help  for the current set of options. \n Option 2: Manually update your hosts file \n The next simplest option to re-enable external access to your cluster is to update your hosts file after each Windows restart. \n You need two pieces of information for this workaround and you'll need administrator access to do this. \n \n Determine the original IP used for your VM. This is included in the  ENTANDO_DEFAULT_ROUTING_SUFFIX  or you can see it included in the ingress names. Run  kubectl -n entando get ingress  and you should see something like this: \n \n NAME                          CLASS    HOSTS                                           \nquickstart-kc-ingress         <none>   quickstart-kc-entando.192.168.235.100.nip.io  \nquickstart-eci-ingress        <none>   quickstart-eci-entando.192.168.235.100.nip.io  \nquickstart-ingress            <none>   quickstart-entando.192.168.235.100.nip.io    \n \n \n Determine the current IP using  hostname -I  in the VM or by running  multipass list  from Windows: \n \n $ multipass list\nName                    State             IPv4             Image\nprimary                 Running           172.31.118.12   Ubuntu 18.04 LTS\n \n \n As a Windows administrator, edit your hosts file  (C:\\Windows\\System32\\drivers\\etc\\hosts)  to map any needed URLs from the old IP to the new IP. This will bypass .nip.io lookups. \n \n 172.31.118.12 quickstart-kc-entando.192.168.235.100.nip.io\n172.31.118.12 quickstart-eci-entando.192.168.235.100.nip.io\n172.31.118.12 quickstart-entando.192.168.235.100.nip.io\n \n \n You should now be able to access your Entando URLs via the new IP. If your Entando installation stalled during startup, it should continue starting up as soon as the external address is functional again. \n Option 3: Add a Windows route \n This option is a little more involved the first time but it means repairing your network settings can be done very easily later. In this case you'll pick a static IP, configure a Windows route to map it to the Hyper-V interface, and claim the IP in the Ubuntu VM via a netplan entry. \n You'll need to run all of these steps before installing Entando the first time but then just steps #1 and #2 after subsequent Windows restarts. \n \n \n Determine an IP that is unused on your local network. You can use ping or other tools for this but in the following steps we assume that your selected IP is 192.168.99.1. \n \n \n Determine the interface address to Hyper-V, e.g. 32 below. Use cmd  route print  and look for the Interface entry for Hyper-V: \n \n \n Interface List\n 32...00 15 5d 86 45 20 ......Hyper-V Virtual Ethernet Adapter\n \n \n Using elevated privileges, add a persistent route to map your IP to the Hyper-V interface: \n \n route -p add [YOUR-IP] mask 255.255.255.255 0.0.0.0 IF [HYPER-V-INTERFACE]\nroute -p add 192.168.99.1 mask 255.255.255.255 0.0.0.0 IF 32\n \n \n \n Verify the route was added by using  route print 192.168.99.1 . This command is useful after restart to check if the route needs to be created again. \n \n \n Next, configure your VM to claim the same address. Shell into the VM using  winpty multipass shell [YOUR-VM-NAME] . \n \n \n Change to the root user to make the following steps simpler:  sudo -i \n \n \n Determine your network adapter via  ip link , e.g. eth0. You just need the name. It's often second in the list after the loopback adapter. \n \n \n ubuntu@primary:~$  ip   link \n 1 : lo:  < LOOPBACK,UP,LOWER_UP >  mtu  65536  qdisc noqueue state UNKNOWN mode DEFAULT group default qlen  1000 \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n 2 : eth0:  < BROADCAST,MULTICAST,UP,LOWER_UP >  mtu  1500  qdisc mq state UP mode DEFAULT group default qlen  1000 \n    link/ether 00:15:5d:00:1a:0c brd ff:ff:ff:ff:ff:ff\n \n \n \n cd /etc/netplan \n \n \n Create a netplan entry starting with 0 so it's loaded first:  vi 0-entando.yaml \n \n \n network : \n   version :   2 \n   renderer :  networkd\n   ethernets : \n     [ YOUR - NETWORK - ADAPTER ] : \n       dhcp4 :  no\n       addresses :  \n         -   [ YOUR - IP ] /24\n \n Example: \n network : \n   version :   2 \n   renderer :  networkd\n   ethernets : \n     eth0 : \n       dhcp4 :  no\n       addresses :  \n         -  192.168.99.1/24\n \n \n \n Apply the changes via  netplan apply \n \n \n Verify connectivity via  ping 192.168.99.1  from the VM. You should get a response rather than a timeout. \n \n \n (Optional) Run a python server to verify you can access the VM from the host at  http://192.168.99.1:8000.  It may take a minute or so before the server is ready. \n \n \n python3 -m http.server 8000\n \n \n You should now be able to install Entando using the static IP. If your Entando installation stalled during startup and was previously configured using the static IP, it should continue starting up as soon as the external address is functional again. \n Option 4: Reinstall Entando \n We're including this option because it works and requires no additional configuration. If you plan to regularly work with Entando we recommend developing against a centralized and shared Kubernetes instance rather than running a full stack locally. If you need a cluster locally we recommend using option 1 or 2. \n JHipster \n Q: How can I run JHipster on Windows? \n A:  JHipster requires a TTY interface for its menus to function correctly. Here are a few options to satisfy that requirement on Windows: \n \n Run  jhipster  under cmd or Powershell \n Using Git Bash, run  winpty jhipster.cmd \n Use Ubuntu bash via WSL (1 or 2) or within the Multipass VM \n Multipass with VirtualBox \n Multipass supports the use of VirtualBox on Windows as an alternative to using Hyper-V, say if you're using Windows Home. See the Multipass documentation on how to configure it to work with VirtualBox. \n In order to get Entando working correctly with this setup you will need to add a port forwarding rule so you can access Entando from your host system. \n \n \n Create your VM within Multipass. \n \n \n Go to the Oracle VM VirtualBox Manager and edit the  Network  settings for the VM. \n \n \n Go to the  Advanced  options and click  Port Forwarding Rules \n \n \n Add a new rule. \n \n Name : your choice \n Protocol : TCP \n Host IP : leave this blank \n Host Port : 80 \n Guest IP : leave this blank \n Guest Port : 80 \n Click OK \n \n \n \n At this point any requests to port 80 on your localhost should be forwarded to the VM. \n \n \n You can now identify the IP of your host and use that to configure the  ENTANDO_DEFAULT_ROUTING_SUFFIX  in your yaml file, e.g.  192.168.64.25.nip.io . You should not use the non-routable address (e.g. 10.0.2.15) identified from within the guest VM itself, but rather use the IP of the host. \n \n \n"},{frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/",relativePath:"next/tutorials/README.md",key:"v-357745d0",path:"/next/tutorials/",headers:[{level:2,title:"Learning Paths",slug:"learning-paths"},{level:3,title:"Frontend Developers",slug:"frontend-developers"},{level:3,title:"Backend Developers",slug:"backend-developers"},{level:3,title:"DevOps",slug:"devops"}],lastUpdated:"3/19/2021, 4:22:12 PM",content:" WARNING \n This documentation is for the version of Entando currently under development and is a work in progress.\nSome screenshots or references to the previous version may be out-of-date and some documented features may\nonly be available by building from source. \n Tutorials \n Entando simplifies the development of modern apps: \n \n Built using modern JavaScript frameworks \n Backed by microservices deployed in containers, and \n Orchestrated by Kubernetes for fully automated DevOps lifecycles \n \n \n Entando supports full stack micro frontend and microservice architectures for codebases that are easier to undestand, maintain, and debug across large, distributed teams, and comes with a private component repository that makes it easy for teams to share and reuse components. \n Use the navigation on the left to find step-by-step tutorials for common tasks or check out our learning paths below for a more structured approach. \n Learning Paths \n Frontend Developers \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Build a Basic Widget \n Add Configuration to a Widget \n Generate Micro Frontends and Microservices Based on a Database Entity \n \n \n Create a React Micro Frontend \n Enable Communication between MFEs \n \n \n \n Create an Angular Micro Frontend \n \n \n \n \n Create and Manage Content \n Backend Developers \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Build and Publish a Simple Bundle \n Build and Publish a Project Bundle \n Extend the Entando App Builder \n \n \n Generate Micro Frontends and Microservices Based on a Database Entity \n Export a Bundle from an Existing Application \n \n \n \n Run Micro Frontends and Microservices in your local env \n Use JDL Studio to Create a Complex Database Entity \n DevOps \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Set Up Entando on a Local Kubernetes Cluster \n Backing Up and Restoring Your Entando Environment \n Automate Integration Testing With a CI/CD Pipeline   (Coming Soon) \n \n \n Set Up Entando on Amazon Elastic Kubernetes Service (EKS) \n Customize the base Entando Application via a Docker Image \n \n \n \n Set Up Entando on Azure Kubernetes Service (AKS) \n Connect your Entando Application to an External Database \n \n \n \n Set Up Entando on Google Kubernetes Engine (GKE) \n Install the Standard Demo Application \n \n \n \n Set Up Entando on Red Hat OpenShift \n \n \n \n \n \n"},{title:"Generate Microservices and Micro Frontends",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",relativePath:"next/tutorials/backend-developers/generate-microservices-and-micro-frontends.md",key:"v-c55c8274",path:"/next/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:3,title:"Manual Setup",slug:"manual-setup"},{level:2,title:"Generate the Project",slug:"generate-the-project"},{level:3,title:"Project Structure",slug:"project-structure"},{level:2,title:"Next Steps",slug:"next-steps"}],lastUpdated:"3/19/2021, 4:22:12 PM",content:" Generate Microservices and Micro Frontends \n Overview \n This tutorial shows you how to use the Entando Component Generator powered by  JHipster  to create microservices and micro frontends for eventual deployment to the  Entando Component Repository  and Entando applications. \n \n The general flow of the component generation is: \n \n Run the Entando Blueprint to create your components (Spring Boot microservice and optionally React micro frontends) \n Customize and enhance your generated code \n Build an Entando bundle from your components \n Deploy a custom resource for your bundle into Kubernetes \n Install your Entando bundle into your Entando Application(s) \n Prerequisites \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. Java, npm, git, JHipster, Entando Blueprint). \n ent check-env develop\n Manual Setup \n The  ent jhipster  command is the recommended way to generate microservices and micro frontends but you can also setup JHipster and the Entando Blueprint yourself. You should then use the  jhipster  command instead of  ent jhipster  for the tutorial. \n \n Install JHipster \n \n npm   install  -g generator-jhipster@6.9.1 \n \n \n Install the Entando Blueprint \n \n npm   install  -g generator-jhipster-entando@6.3.0\n Generate the Project \n \n Setup a new project directory \n \n mkdir  testProject  &&   cd  testProject\n \n \n Use  ent jhipster  to generate the project skeleton using the Entando Blueprint \n \n ent jhipster --blueprints entando\n \n \n You'll be presented with a series of prompts to configure your project. The list below provides a set of choices.  You can select the defaults in every step of the tutorial. Just hit Enter at each step. \n \n \n If you want to go through the choices follow this guide. Except where noted below in bold you can choose what works best for you. Base values for the tutorial are in parentheses.\n \n What is the base name of your application?  (Up to you) \n As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts.  (8081) \n What is your default Java package name? (Up to you) \n Which *type* of database would you like to use?  (SQL)\n \n If you pick no database here you'll be building a stateless microservice which is a valid choice but the rest of this tutorial won't work) \n \n \n Which *production* database would you like to use?  (PostgreSQL or MySQL) \n Which *development* database would you like to use?  (H2 with disk-based persistence ) \n Do you want to use the Spring cache abstraction?  (Yes, with the Caffeine implementation) \n Do you want to use Hibernate 2nd level cache?  (Yes) \n Would you like to use Maven or Gradle for building the backend?   Maven  <-- this is required for Entando and is the default \n Which other technologies would you like to use?  (Don't select any other technologies) \n What name would you give to the bundle to share on an Entando digital-exchange?  Enter a name for your Entando bundle or accept the default \n Which is the organization name to use when publishing the docker image?   At this point enter the name of the organization where you are going to push your docker image. If you're using your own docker hub account you should enter your username here.  (this can be changed later as needed) \n Would you like to generate micro frontends when creating entities?  (Always) \n Would you like to enable internationalization support  (Up to you) \n Please choose the native language of the application  (Up to you) \n Please choose additional languages to install  (if you picked internationalization) \n Besides JUnit and Jest, which testing frameworks would you like to use?  (Up to you) \n Would you like to install other generators from the JHipster Marketplace?  (No) \n \n \n \n \n Next, add an Entity to your microservice and create the corresponding Micro Frontends. For the tutorial,  Conference  is the name of the entity that will be added to the application. \n \n ent jhipster entity Conference \n \n \n Add Fields \n \n Do you want to add a field to your entity?  (Yes) \n What is the name of your field?  (Enter  name ) \n What is the type of your field?  (Select  String ) \n Do you want to add validation rules to your field?  (No) \n Do you want to add a field to your entity?  (Yes) \n What is the name of your field?  (Enter  location ) \n What is the type of your field?  (Select  String ) \n Do you want to add validation rules to your field?  (No) \n Do you want to add a field to your entity?  (No) \n Do you want to add a relationship to another entity?  (No) \n Do you want to use separate service class for your business logic?  (Up to you)\n \n If yes: \n Do you want to use a Data Transfer Object (DTO)?  (Up to you) \n Do you want to add filtering?  (Up to you) \n \n \n Is this entity read-only?  (Up to you) \n Do you want pagination on your entity?  (Yes, with infinite scroll) \n If you asked to be prompted about micro frontends when generating the project:\n \n Do you want to generate micro frontends?  (Up to you) \n \n \n \n \n At this point the blueprint will generate controllers, repositories, services, and micro frontends for your entity.\n \n Overwrite src/main/resources/config/liquibase/master.xml?  When prompted with a conflict at this stage enter  a  for All. This will override existing files with the configuration changes needed for your new entity. \n \n \n \n You now have a Entando project including a Spring Boot microservice with database integration and React-based micro frontends. \n Project Structure \n \n /src/main/docker  contains Docker files to help with local development environments \n /src/main/java  and  src/main/resources  contain the microservice codebase and configuration \n /ui  holds the React-based micro frontends. By default each entity gets an MFE for details, form, and table. \n /bundle  is used to assemble the project code into an Entando bundle. \n Next Steps \n You now have a choice: \n \n Build your Entando bundle and deploy your microservice and micro frontends to the Entando Component Repository. \n Go to the Running Locally tutorial to run your micro frontends and microservice in your local dev environment. \n Learn about the key elements included in the Blueprint generated widgets \n Iterate on your data model using the JHipster Domain Language (JDL) \n \n"},{title:"Run Blueprint-generated Microservices and Micro Frontends in Dev Mode",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/backend-developers/run-local.html",relativePath:"next/tutorials/backend-developers/run-local.md",key:"v-a1b993f4",path:"/next/tutorials/backend-developers/run-local.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"CLI Steps",slug:"cli-steps"},{level:2,title:"Manual Steps",slug:"manual-steps"},{level:3,title:"Start Keycloak using docker-compose",slug:"start-keycloak-using-docker-compose"},{level:3,title:"Start the microservice",slug:"start-the-microservice"},{level:3,title:"Start the table widget",slug:"start-the-table-widget"},{level:3,title:"Start the form widget",slug:"start-the-form-widget"},{level:3,title:"Start the details widget",slug:"start-the-details-widget"},{level:3,title:"Widget Details notes:",slug:"widget-details-notes"},{level:2,title:"Notes",slug:"notes-3"},{level:3,title:"Change Keycloak dev settings",slug:"change-keycloak-dev-settings"},{level:3,title:"The service-url Variable",slug:"the-service-url-variable"},{level:3,title:"User is not authenticated message",slug:"user-is-not-authenticated-message"}],lastUpdated:"1/29/2021, 9:58:37 AM",content:' Run Blueprint-generated Microservices and Micro Frontends in Dev Mode \n Overview \n This tutorial will take you through running an Entando project (microservice and micro frontends) in a local development environment. If you haven\'t generated your Entando project yet, start with the  Generate Microservices and Micro Frontend  tutorial first. \n The steps below assume you are working in the top-level project directory. \n CLI Steps \n The following steps make use of the Entando  ent prj  command. See the  Manual Steps  section below for a more detailed description of what the individual commands do. \n \n Startup Keycloak. This uses docker-compose under the hood. Since this is using Docker it will continue to run in the background until you stop it via  ent prj ext-keycloak stop . You can also view its logs using  ent prj ext-keycloak logs . \n \n ent prj ext-keycloak start\n \n \n Startup the Spring Boot application containing your microservices. The logs will be shown on the console and you can stop the application via  CTRL+C . \n \n ent prj be-test-run\n \n \n Startup one or more of the frontend widgets, each from its own shell. You can stop the application using  CTRL+C . This command runs React in development mode so any changes you make to the source files should be immediately seen in the browser. \n \n ent prj fe-test-run\n Manual Steps \n Start Keycloak using docker-compose \n \n Startup the Keycloak server: \n \n   docker-compose -f src/main/docker/keycloak.yml up\n Notes: \n \n If you have to install docker-compose you can follow this guide:\n https://docs.docker.com/compose/install/ \n By default docker-compose will recreate the keycloak container (and reset the H2 database) each time it is started. There are two options if you want to retain your changes across restarts:\n \n add the  --no-recreate  option to the command above to reuse the container \n update the keycloak.yml to add a persistent volume. \n Start the microservice \n \n \n Start the generated Microservice executing the command: \n ./mvnw\n Notes: \n If you want to reset the widget data (as example if you deleted all rows from the table widget) if during the generation of the microservice you selected "H2 with disk-based persistence" you can delete the target folder, restart the microservice and the data will be regenerated. \n Start the table widget \n Now you can start your generated table widget: \n \n \n Go to the table widget folder in your project: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n After the login process you’ll be redirected to the widget page and you can see the table widget with some generated data. \n Start the form widget \n Now you can start your generated form widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the form widget folder in your project: \n cd ui/widgets/<your-entity-name>/formWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Form widget notes: \n If you want to load other data you have to change the index.html file in the folder: \n cd ui/widgets/<your-entity-name>/formWidget/public\n \n and change the id attribute in this line: \n <my-entity-form service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Start the details widget \n You can also start your generated details widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the details widget folder in your project: \n cd ui/widgets/<your-entity-name>/detailsWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Widget Details notes: \n If you want to load other data you have to change the index.html file in the public folder: \n cd ui/widgets/<your-entity-name>/detailsWidget/public\n \n and change the "id" attribute in this line: \n <my-entity-details service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Notes \n Change Keycloak dev settings \n If you want to change your Keycloak settings to use another keycloak installation (not the docker-compose pre-configured one) or if you want to change the service-url of your widget you can change the parameters set in the  .env.local  file that was generated by the entando-blueprint in the root folder of your react widgets: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n then edit the file  .env.local \n By default this variables are set to: \n REACT_APP_SERVICE_URL=http://localhost:8081/services/<your-application-name>/api\nREACT_APP_KEYCLOAK_URL=http://localhost:9080/auth\nREACT_APP_KEYCLOAK_REALM=jhipster\nREACT_APP_KEYCLOAK_CLIENT_ID=web_app\n The service-url Variable \n The  service-url  variable is the Microservice API URL. \n User is not authenticated message \n When you run the widgets if you see the message:  User is not authenticated . This means that probably your keycloak application is not running so please check if the docker-compose command is still in execution. \n'},{title:"Update the Project Data Model",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/backend-developers/update-data-model.html",relativePath:"next/tutorials/backend-developers/update-data-model.md",key:"v-b0b79db4",path:"/next/tutorials/backend-developers/update-data-model.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"3/19/2021, 4:22:12 PM",content:" Update the Project Data Model \n Overview \n This tutorial shows how you can use the Entando Component Generator powered by  JHipster  to quickly update the data model for your Entando project. \n Prerequisites \n The steps below assume you already have an existing project and are working in the top-level project directory. If you don't have a project yet, please see  this tutorial . \n Tutorial \n \n Start by extracting the current application description using JHipster. The resulting JHIpster Domain Language (JDL) file includes the entity definitions that will be used as a starting point for your design work. \n \n ent jhipster export-jdl export.jdl\n \n \n This file contains the application configuration as well as entity definitions for your project. For simplicity, we'll create a new file containing just the elements describing the entities. If you followed the tutorial above, that section could be as simple as this: \n \n entity Conference {\n  name String\n}\n \n \n You can now take this definition and enhance it by adding fields, additional entities, mappings between tables, field validation, etc. The easiest way to do this is by using the online JDL-Studio or corresponding JHipster IDE plugins/extensions. See  the JHipster docs  for more information on those options. Once you're done enhancing your data model, you should create a new file containing it, e.g.  conference.jdl. \n \n entity Conference {\n  name String required\n  location String\n  date ZonedDateTime\n}\n\nentity Session {\n  name String required\n  track Track required\n}\n\nenum Track {\n  BUSINESS, TECHNICAL\n}\n\nrelationship OneToMany {\n   Conference to Session\n}\n \n In this case we've added two fields to the Conference entity, introduced the Session entity plus an enum, and added a mapping between the two entities. This is the view you'll get in JDL-Studio for the updated data model. \n \n \n Now import the jdl file into your application. You may be asked if you want to generate MFEs depended on your options when first generating the project. \n \n ent jhipster import-jdl conference.jdl\n \n If you kept the original project structure, this step will update your data model, add entries to Liquibase so the database schema can be upgraded at deploy time, add new service methods to your microservice, add fields to your MFEs, etc. \n \n You can now build your updated project and  run it locally  or  deploy it to Entando . For a full local test you can use the following commands to build the project, then start Keycloak, the microservices, and one of the MFEs. \n \n ent prj build\nent prj xk start\nent prj be-test-run\nent prj fe-test-run\n \n You can repeat steps 3-5 as many times as needed throughout the life of your project. \n"},{title:"Widgets and Fragments",frontmatter:{},regularPath:"/next/tutorials/cms/app-builder/hello-world.html",relativePath:"next/tutorials/cms/app-builder/hello-world.md",key:"v-6dcdd3a3",path:"/next/tutorials/cms/app-builder/hello-world.html",headers:[{level:2,title:"Create a Widget",slug:"create-a-widget"},{level:2,title:"Create a UX Fragment",slug:"create-a-ux-fragment"},{level:2,title:"FreeMarker Basics in Entando",slug:"freemarker-basics-in-entando"}],lastUpdated:"1/29/2021, 10:47:17 AM",content:' Widgets and Fragments \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Create a Widget \n For this example you will use the Entando App Builder to build and\ndisplay a simple widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. For a more advanced example you can try  this tutorial  which includes building and deploying a micro frontend as a widget in Entando. \n \n \n In the App Builder menu, go to:  Components → Micro frontends & Widgets \n \n At bottom of the page, select ADD \n \n \n \n Now create a widget with the sample HTML code.  Enter into the following fields: \n \n Code:  MyHelloWorld \n en Title:  Hello World \n it Title:  Ciao Mondo \n Custom UI field:  <h2>Hello World</h2> \n Select SAVE \n Note: the Custom UI Field is a freemarker template where you can put raw html and include freemarker logic. This allows you to import javascript, css, or any normal HTML. \n \n \n \n Select a new Home Page \n \n Go To:  Pages → Settings \n From the “Home Page” dropdown menu, select “Home / Service” and select SAVE \n \n \n \n Place the widget on the page \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the right hand column, drag and drop the new widget into an open frame in the page \n From the top of the page, select PREVIEW \n You should see "Hello World" on the page \n \n \n \n Publish the updated page \n \n Go To:  Pages → Management \n Note for the row showing the Services page, the Status is now yellow \n Select the Kebab button and select PUBLISH \n Create a UX Fragment \n A UX Fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic HTML,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …  tag. \n Starting from the simple widget tutorial above: \n \n \n Create a new fragment: \n \n In the App Builder Go To:  Components → UX Fragments \n At bottom of page, select ADD, and enter the following fields \n Code:  test \n Gui Code:  <h2>Hello World</h2> \n Select SAVE \n \n \n \n Place the fragment in a template: \n \n Go To:  Pages → Page Templates \n On the row for service, select EDIT \n In the  Template  text box, add   <@wp.fragment code="test"/>  on a new line between the  <body>  and   </body>  tags \n SAVE the page template \n \n \n \n View the page with the new fragment: \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the top of the page, select PREVIEW \n Note: You will see the fragment  <h2> This is a fragment. </h2>  which includes the HTML tags. By default html embedded via a fragment tag is escaped so you get it rendered exactly as you enter it. You’ll need to un-escape it to get it to render correctly. \n \n \n \n Update the Fragment: \n \n Go To:  Pages → Page Templates \n On the row for service, select EDIT \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n \n View the page with the updated fragment: \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the top of the page, select PREVIEW \n See correctly rendered fragment \n FreeMarker Basics in Entando \n The FreeMarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > … \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof FreeMarker. \n https://freemarker.apache.org \n'},{title:"Content Templates",frontmatter:{redirectFrom:"/next/tutorials/cms/content-models-tutorial.md"},regularPath:"/next/tutorials/cms/content-templates-tutorial.html",relativePath:"next/tutorials/cms/content-templates-tutorial.md",key:"v-116b6840",path:"/next/tutorials/cms/content-templates-tutorial.html",headers:[{level:2,title:"Create a Content Template",slug:"create-a-content-template"}],lastUpdated:"11/9/2020, 2:49:22 PM",content:" Content Templates \n Content Templates define how the information in a Content item is displayed to an end user once published. Content Templates provide styling and layout for Contents Type and can be used to show the same content in different ways. Content Templates can be managed within the App Builder. \n Create a Content Template \n Creating a Content Template is fairly simple. From the App Builder\napplication \n \n \n Go to  Content → Templates \n \n \n Click on the  Add content template  to create a new Content\nTemplate. \n \n \n \n \n \n Access the  Add Content Template  page, where you can \n \n \n Edit the  Code . It is the unique identifier of the content template.\nYou can insert up to 10 numbers. It’s mandatory. \n \n \n Edit the  Name . It is the name or description of the content\ntemplate. \n \n \n Choose the  Content Type  in the dropdown list. \n \n \n Edit the  HTML Model  based on Velocity language \n \n \n (Optional) Define the CSS  Style Sheet  to be applied to the  HTML Model \n \n \n Press the Save button \n \n \n \n \n \n"},{title:"Content Attributes",frontmatter:{redirectFrom:"/next/tutorials/cms/list-of-content-attributes.html"},regularPath:"/next/tutorials/cms/content-attributes.html",relativePath:"next/tutorials/cms/content-attributes.md",key:"v-2516cca0",path:"/next/tutorials/cms/content-attributes.html",headers:[{level:2,title:"Simple Attribute Types",slug:"simple-attribute-types"},{level:2,title:"Composed Attribute Types",slug:"composed-attribute-types"}],lastUpdated:"11/9/2020, 2:49:22 PM",content:" Content Attributes \n Attributes can be seen as the smallest elements that compose a Content\nType. In other words, a Content Type is just a collection of different\nattributes. Attributes are responsible for carrying the actual\ninformation inside a Content in Entando and could be of different types.\nIn this chapter, we will review and describe the different attribute\ntypes. \n Firstly, we can distinguish simple attribute types from composite\nattribute types. In the first case, the attribute type carries a single\npiece of information (for example, an image), while the latter is an\naggregation of simple attribute types (for example, a set of images). \n Simple Attribute Types \n Attach \n This represents the information carried by a file, which is attached to\nthe content. \n It consists of an URL corresponding to the desired file present in the\nsystem’s resources, and a text which can either indicate the description\nor the name of the file. \n This attribute type is rendered as a button named “Add”. By pushing that\nbutton, the user is prompted to select a desired file present in the\nsystem’s Digital Assets Attachments list. \n Boolean \n This attribute type represents a boolean value which can either be true\nor false. This attribute type is rendered as two radio buttons labeled\n“Yes” and “No”. \n Checkbox \n This attribute type behaves in the same way as a Boolean does – it is\nactually an alternative to the Boolean attribute type - but it is\nrendered with a checkbox labeled “Yes” or “No”. \n Date \n This attribute type represents a date, tracking time within a content;\nit is often used to filter contents appearing in lists by publication\ndate, etc. \n It is rendered as a datepicker. \n Timestamp \n This attribute type is specialized for the Date attribute, allowing you\nto also specify the hour, minute and second. \n It is rendered as a datepicker for the date, and a select for hours,\nminutes and seconds. \n Enumerator \n The enumerator attribute type represents textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements which are mandatory and declares the set of available\nchoices; \n \n \n Separator, which is optional and declares the character to use to\nseparate the arguments of the enumerator. By default the comma “,”\nis used. \n \n \n ExtractorBean: this parameter represents the name of the Spring bean\nto use to process the values of the enumerator. The name must\nexactly match the id of the bean as defined in the Spring\nconfiguration file. \n \n \n It is rendered as a select list. \n Enumerator Map \n The enumerator map attribute type represent textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements in the form of a separated list of key=value pairs, (i.e.\nkey1=value1,key2=value2) \n \n \n Separator, which is optional and declares the character to use to\nseparate the key, values pairs. By default the comma is used. \n \n \n It is rendered as a select list which shows the available values. \n Hypertext \n This attribute type holds HTML tagged text; it retains a single value\nfor all languages. \n Even if this attribute type could support all HTML tags, we strongly\nrecommend using only tags which provide meaning and avoid those which\ndecorate or add graphics. \n Hypertext attributes are rendered as a text area in the content edit\npage; if the CKEditor is active, the user has access to a set of\nadditional functionalities from a dedicated editor’s toolbar. Such as\ntable insertion and table manipulation, special characters insertion,\nstring formatting, links creation. \n Image \n This attribute type binds an image resource to the content. \n The image is always taken from the Digital Assets images list. The user\nwill need to specify the description accompanying the image. \n Usually attributes of type Image are not indexed and are not used to\nfilter contents. \n It is rendered as a button named “Add” that, when pushed, allows the\nuser to select an image from the Digital Assets images list. Once\nselected the user is presented with a preview, as a thumbnail, of the\nimage and has the possibility to define some parameters: \n \n \n Text which is mandatory and by default takes the name of the\nselected image \n \n \n legend (optional) \n \n \n alt (optional) \n \n \n description (optional) \n \n \n title (optional) \n \n \n Link \n This attribute type represents an hypertext link; it is normally used to\ninclude a link in your content: it is possible to define up to three\ndifferent types of links: \n \n \n external links: a link pointing to a location external to the Entando\nportal \n \n \n link to page: a link which points to a page of the portal \n \n \n link to a content: a link to another content \n \n \n It is rendered as a button named “Add” that when pushed opens up a modal\nwindow from which the user can select the link type. \n Longtext \n This attribute type represents a simple unformatted text; it supports\nseveral languages and is normally used for small descriptions, when a\nshort string won’t suffice. \n It supports minimum length , maximal length and regular expressions as\noptional parameters. \n It is rendered as a textarea. \n Monotext \n Monotext represents the information in textual form, but supports only a\nlanguage; it is used for all \n those fields which do not require localization. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n Number \n This attribute type holds an integer number; it retains a single value\nfor all languages. \n Supports the optional parameters: From, To, and Equal to. \n It is rendered as a textfield. \n Text \n This attribute type holds a string; it retains a single value for all\nlanguages. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n ThreeState \n Conceptually similar to the Boolean attribute, this attribute type\nallows a third status “Both” to be present. \n It is rendered as a radio button with “Yes”, “No”, “Both” options. \n Composed Attribute Types \n All the attributes types of the previous chapter can only retain a\nsingle type of information, but sometimes it is desirable to aggregate\ndifferent types of attributes into one attribute: this is where composed\nattributes are used. \n From a functional point of view, it would be perfectly legal to build a\ncontent type specifying all the attributes back to back: the content\nwould be formally complete, but from a logical point of view the\nattributes would appear mutually unrelated and, worse, the relationship\nbetween them would not be explicit. \n Entando offers three types of composed attributes: List, Monolist,\nComposite. \n List \n This Attribute Type represents a set of independent and homogeneous\nelementary Attribute types, each associated with one of the languages\ndefined in the system. \n An immediate consequence is that this kind of list can handle only\nmono-language basic attributes. \n It is rendered with a button named “Add” that if pushed presents the\nuser a prompt to select or define the single elements which compose the\nlist. \n Monolist \n This attribute type is a list that is common to all the system\nlanguages; this kind of list handles multi-language and mono-language\nattributes. \n It is rendered with a button named “Add” that, if pushed, presents the\nuser with a prompt to select or define the single elements that compose\nthe monolist. \n Composite \n This attribute type is an aggregate of different, non-homogeneous,\nsimple attributes types. The aggregation of different types is treated\nas a single unit. \n It is rendered as a combination of the elementary attribute types, where\neach attribute type presents the proper rendering. \n"},{title:"Content Creation",frontmatter:{},regularPath:"/next/tutorials/cms/content-tutorial.html",relativePath:"next/tutorials/cms/content-tutorial.md",key:"v-21d85140",path:"/next/tutorials/cms/content-tutorial.html",headers:[{level:2,title:"Creating Content",slug:"creating-content"},{level:2,title:"Finding Content",slug:"finding-content"},{level:2,title:"Content Actions",slug:"content-actions"}],lastUpdated:"11/6/2020, 10:28:12 AM",content:" Content Creation \n This document provides an overview of Content Management and how to create Content that can be displayed in an application. The App Builder is used to create, edit and publish content stored in the web content management system (WCMS). \n Creating Content \n To see the list of Content in the WCMS: \n \n Go to  Content → Management . All existing\ncontent is displayed in a table list. \n \n \n To create a new Content item and add it to the list \n \n Select the  Add Content  button. A drop-down list will let you\nchoose which Content Type the content will be based on. \n \n \n You will be asked to provide the following information: \n \n \n Info \n \n \n Content Type . This information is pre-defined, and lists the\ncontent type for the content. \n \n \n Description . The specific Content's name or description. This field\nis mandatory. \n \n \n \n \n Groups \n \n \n Owner Group.  Use the drop-down list to choose the\navailable user group that can manage the content.\nThis field is mandatory and may be predefined. \n \n \n Join Group.  Use the drop-down list to choose the\navailable user group to share the content with and select +. The group\nselected will only be able to share and can not\nadministrate this content. This field is not mandatory. \n \n \n Categories.  Select the category(s) and select + to add a classification to the\ncontent to use for searching and sorting.  This field is not mandatory. \n \n \n Content Attributes.  Define each required attributes field and any optional fields\ndefined by the content types used for this Content. This field is mandatory. \n \n \n \n \n \n Save the new content by selecting: \n \n \n Save : The content will be saved in a draft version. \n \n \n Save and Continue : The content will be saved and the editable form will be displayed. \n \n \n Save and Approve : The content will be saved, approved and published. \n Finding Content \n You can list specific Content by using the filters: \n \n \n All : All created Content is displayed (Draft, To Approve and\nApproved/Published) \n \n \n Pending Changes : All created Content that was saved by only clicking on the\n Save  or  Save and Continue  button. The content is not\napproved and therefore is not ready to be published. \n \n \n Ready for Approval : All created Content that is in  Ready  status,\nand saved by clicking on the  Save  or  Save and Continue  button.\nThe content is ready for review but has not yet been approved and\ntherefore has not been published. \n \n \n Published : All created Content that has been saved and approved\nby clicking on the  Save and Approve  button. This content has been\npublished. \n \n \n \n In the table list, contents are listed with several parameters: Name,\nCreated by, Last Edited, Type, Created Date, Owner Group, Join Group,\nStatus, Restrictions, Code, Actions. Fields can be added or deleted from view by selecting or unselecting them\nin the Columns drop-down menu. \n Content Actions \n For all Content in the list, you have access to a set of actions\nthrough the  Actions  kebab button, such as: \n \n \n Edit : update the data fields in the content definition \n \n \n Delete : remove the content \n \n \n Clone : replicate the content \n \n \n Publish : make the content visible \n \n \n Unpublish : hide the content \n \n \n \n All Content in the list can be saved to your local file system by clicking the\n Download  button and selecting either CSV or XLS format. \n \n"},{title:"Content Types",frontmatter:{},regularPath:"/next/tutorials/cms/content-types-tutorial.html",relativePath:"next/tutorials/cms/content-types-tutorial.md",key:"v-3d80f340",path:"/next/tutorials/cms/content-types-tutorial.html",headers:[{level:2,title:"Create a Content Type",slug:"create-a-content-type"}],lastUpdated:"11/9/2020, 2:49:22 PM",content:" Content Types \n A Content Type is used to represent or to model a Content.\nIt is characterized by a set of  Attribute Types , each of which defines the value of their properties, called Attributes. A Content is\nan instance or specialization of the Content Type. \n Create a Content Type \n Creating Contents Types is fairly simple. The Content Types are managed\nthrough the Web CMS, its user interface is made available in the App\nBuilder application. \n \n \n Go to  Content → Types \n \n \n Click on the  Add Content Type  button to create a new Content\nType. \n \n \n \n \n \n You be asked to provide \n \n \n Code . The code is the unique identifier of the content type,\nthat must be 3 uppercase letters, (e.g. CNN). It’s mandatory. \n \n \n Name.  The name must be max 50 characters uppercase and\nlowercase letters, including numbers and special characters,\n(e.g. Conference_News). It’s mandatory. \n \n \n \n \n \n \n \n Select the  Save  button, then you’ll see \n \n \n Content Type Information : \n \n \n Code . The value is pre-filled. \n \n \n Name . The name is pre-filled. \n \n \n \n \n Metadata \n \n \n Page for on-the-fly publishing \n \n \n Default content template \n \n \n Default content template for lists \n \n \n \n \n \n \n Default content template  and  Default content template for lists  are used\nrespectively to show the detailed view of the Content and its\nrepresentation as an element in a list. \n \n Attributes \n \n In the Attributes section, select the  Type  from the drop-down list.\nThe list contains all the available attributes types that define which\nproperties/attributes will characterize the Content. \n \n The Add button will start the configuration of the single attribute\ntype. Every attribute type has its own configuration. \n For example, to configure the  Text  Attribute Type, choose Text from\nthe Types drop-down menu and then press the Add button. \n \n \n \n You should specify the following fields \n \n \n Type:  the value is pre-filled. It represents the selected\nattribute type. \n \n \n Code : You should insert the name of the attribute. (You\ncan insert max 10 characters uppercase and lowercase letters,\nnumbers, and special characters _ ). (e.g. title) \n \n \n Name : You should insert the description of the attribute.\n(You can insert max 50 characters uppercase and lowercase letters,\nincluding numbers and special characters). (e.g. Title). \n \n \n You should declare if the attribute is  mandatory ,\n searchable , and  to be used as a filter in the list. \n \n \n The  Roles  section it is possible to assign the  jacms:title\nAttribute Role  to this attribute; in this way other plugins or\nservices will know that within the CNG entity this attribute is a\ntitle, whatever the key is; however, for sake of clarity, the Code\nof the attribute is Title. \n \n \n The remaining fields related to  Sections  and  Validation -\nOGNL  sections are not mandatory and can be left empty. \n \n \n Press the  Continue  button. The Text attribute type requires no\nadditional configuration step. \n \n \n You can add other Attributes Types. \n \n \n Press the  Save  button. The Content type will be saved and displayed\nin the table list \n \n"},{title:"Page and Content Protection",frontmatter:{},regularPath:"/next/tutorials/cms/creating-protected-resources.html",relativePath:"next/tutorials/cms/creating-protected-resources.md",key:"v-d8c69380",path:"/next/tutorials/cms/creating-protected-resources.html",headers:[{level:2,title:"Create a Group",slug:"create-a-group"},{level:2,title:"Protect a Page",slug:"protect-a-page"},{level:2,title:"Protect Content",slug:"protect-content"},{level:2,title:"Protect Images and Attachments",slug:"protect-images-and-attachments"},{level:2,title:"Freemarker Tags and Consuming Protected Resources",slug:"freemarker-tags-and-consuming-protected-resources"}],lastUpdated:"11/9/2020, 2:49:22 PM",content:" Page and Content Protection \n In the Entando Web Content Management System (WCMS) you have the ability to protect pages, content, and digital assets (images and files) by assigning groups that have the authorization to view those assets. If users without the correct authorization attempt to view those assets the platform will return an error. You can handle those errors as required for your application with dedicated error pages or by adding logic to your widgets or freemarker templates. \n Create a Group \n Protected pages, content, and digital assets in the WCMS are protected by assigning groups to the resource that is being created. You can add new groups in the Entando App Builder as follows: \n \n Go to  Users → Groups  from the left navigation \n Select  Add \n Enter a  Name  and a  Code  for your group` \n \n The groups you create here can be utilized to protect pages, content, images, and attachments in the CMS. Groups can be assigned to individual users in the  Users  section of the app builder or as part of a customization of your entando-core-app using APIs or custom code. \n Pages and Content have settings for an  Owner Group  as well as a set of optional  Join Groups . The  Owner Group  indicates the team within the  App Builder  who owns and can modify the page. Additional groups can be given access to the item via the  Join Group  setting. Note: the default App Builder configuration prevents the  Owner Group  from being changed after the item is created. \n Protect a Page \n \n Select  Pages → Management  from the left navigation \n Create a new page. Assign values as you see fit \n To protect a page, assign the  Owner Group  to any group other than  Free Access \n (Optional) Add groups via  Join Group \n Finish configuring the page and select  Save \n \n At this point only users assigned to either the  Owner Group  or  Join Group  will have the ability to view that page. They can also manage the Page if they have the appropriate App Builder role. \n If you would like to test this, navigate to the page URL in a private or incognito browser window and you will be redirected to the  Sign in to Proceed Further  page of your application.\nThe  Sign in to Proceed Further  page can be changed by going to  Pages → Settings  and picking the page you would like to render to users who need to sign in. \n Protect Content \n \n Select  Content → Management  from the left navigation \n Select the  Add Content  button and pick the content type to be created \n To protect a content item, assign the  Owner Group  to any group other than  Free Access \n (Optional) Add groups via  Join Group \n Finish configuring the page and select  Save \n \n The content you are creating will only be available to users assigned to the  Owner Group  of  Join Group . The default WCMS widgets will only return content authorized for a given user. See the  freemarker tags  section below for information on creating custom widgets that utilize protected content. \n Images and Attachments and Groups \n When creating content the  Owner Group  of the content and the  Group  assigned to the digital asset must match. For example, when creating content with an  Owner Group  of  Administrators  the content creator will be unable to select images and attachments that are assigned a different group. The exception to this is assets with a group of  Free Access . Assets with  Free Access  can be added to protected content. \n Protect Images and Attachments \n Images and attachments uploaded to the CMS can be protected by assigning groups. \n \n Select  Content → Assets  from the left navigation \n Upload your file(s) \n In the provided modal window select the  Group  that you would like to own the asset \n Only users with the assigned  Group  will have the ability to view the asset you've created\n \n The asset will only be available to content with the same  Group  unless the attachment or image has been given a group of  Free Access \n Freemarker Tags and Consuming Protected Resources \n The WCMS provides a set of freemarker tags to assist in consuming protected assets in widgets and pages. The  if-authorized  and  tag-nav  tags can help in rendering page lists and fetching assets. \n The  content  and  content-list  tags also provide the ability to fetch and render protected content and protected lists of content. \n Additionally, the   REST APIs  allow clients to fetch protected pages and assets by group via query parameters. The content REST APIs also include the ability to filter by group and access level. \n"},{title:"Digital Assets",frontmatter:{},regularPath:"/next/tutorials/cms/digital-assets-tutorial.html",relativePath:"next/tutorials/cms/digital-assets-tutorial.md",key:"v-a55faf84",path:"/next/tutorials/cms/digital-assets-tutorial.html",headers:[{level:2,title:"Create a Digital Asset",slug:"create-a-digital-asset"},{level:2,title:"Editing Assets",slug:"editing-assets"},{level:3,title:"Cropping Images",slug:"cropping-images"},{level:2,title:"Embedding an Asset in a Page",slug:"embedding-an-asset-in-a-page"},{level:2,title:"Including an Asset in a Content",slug:"including-an-asset-in-a-content"},{level:2,title:"Configuring Allowed File Extensions for Upload",slug:"configuring-allowed-file-extensions-for-upload"}],lastUpdated:"11/6/2020, 10:28:12 AM",content:" Digital Assets \n The Web Content Management System (WCMS) includes capabilities that let you manage contents and digital assets. Digital Assets are images, documents, and other media\nfiles in specific formats. \n Default Supported Document Formats:  The Entando WCMS can be\nconfigured to allow you to load or exclude any type of file extension\nfrom being loaded to your site. For the app builder you should also include the MIME type of the asset you want to allow. The default set of extensions are:\n pdf,xls,doc,ppt,txt,rtf,sxw,sxc,odt,ods,odp,tar,gz,zip,rar,flv,swf,avi,wmv,ogg, \n mp3,wav,ogm,mov,iso,nrg,docx,docm,xlsx,xlsm,xlsb,pptx,pptm,ppsx,ppsm,sldx,sldm \n Default Supported Image Formats :  jpg, jpeg, png, svg,svg+xml \n Create a Digital Asset \n To manage the Digital Assets through the WCMS: \n \n Go to  Content → Types \n \n Add a new image or a new document file \n \n Press the  Drag and Drop or Browse your computer  button and\nchoose, from your file system, images and documents files that you\nwould like to upload \n \n \n \n From the  Add file  modal window, you must choose one of the\navailable Groups and then the  Upload  button. If categories have\nbeen defined, you can apply them to the asset in this step. \n \n \n \n \n The image file that you just uploaded is displayed in the list; a\nstatistical overview of the number of the uploaded resources (images\nand documents) is provided. The App Builder’s interface allows the\nusers to choose grid and list view; most of the time, users prefer\nto use list view when they are searching with specific requirements,\nwhile they love grid view for exploring. For every resource, image,\nor document, the list shows the following information: \n \n \n Preview \n \n \n Name \n \n \n Type \n \n \n Uploaded By \n \n \n Uploaded At \n \n \n Group \n \n \n Categories \n \n \n Actions \n \n \n \n \n Furthermore, the interface lets you perform all management actions, as: \n \n \n Edit:  update the information data related to every single\nresource (image and document) \n \n \n Duplicate:  copy identically the resource from the original \n \n \n Download:  transfer the resource to your local machine \n \n \n Delete:  remove the resource \n \n \n You can list the contents by filtering with: \n \n \n All : All added files are displayed, images and documents both. \n \n \n Images : All added images are displayed \n \n \n Documents : All added documents are displayed. \n Editing Assets \n Once you have a digital asset in place, you have several editing and viewing options. Click the asset's  Actions  button and select  Edit  to update the asset's name/description, categories, and the file represented. \n Cropping Images \n You can crop images newly uploaded via Digital Assets. You can either crop the image dynamically or by using pre-configured crop ratios. \n To set pre-configured crop ratios: \n \n Select  CMS → Content Settings \n Under  Settings Image Crop Dimensions,  click  Add crop dimension . \n Enter a crop ratio, using numeric values separated by a colon. \n Click  Save . \n \n To dynamically crop an image: \n \n Edit the asset by opening  Actions  menu > Edit.\n \n Buttons representing your pre-defined crop ratios are below the image. Clicking any of those buttons changes the selected crop area based on the chosen ratio. \n You can create multiple crops of a single image as part of the upload process. The right side of the screen displays the list of crops created during the current session. \n \n \n \n \n \n Use your mouse or the buttons below the image to move or change the crop area, then click  Save  to crop the selected area. Repeat the process as many times as needed.\n \n Click  Close  to return to the Digital Assets screen. \n Embedding an Asset in a Page \n The uploaded asset can be embedded in a page by using  <@wp.resourceUrl path/to/asset . The path can be found in the CMS Configuration > File Browser page. \n \n Example usage:\n <img src=\"<@wp.resourceUrl cms/images/butterfly_d0_d3.jpg\" \n Including an Asset in a Content \n The asset can be included in a content of a type that has an  Attach  or  Image  attribute. \n \n Create a content type with an image attribute.\n \n Create a content based on the created  type.\n \n Under the  Content Attributes  section at the bottom of the page, click the  Add  button beside the image attribute. It will then open a modal that allows you to select an asset by clicking the  Use  action.\n Configuring Allowed File Extensions for Upload \n The types of files that can be uploaded to an Entando application are controlled by\nconfiguration in the server side of the app builder. If you're using the quickstart this will be the\n entando-de-app . \n There are two properties that control these settings and they are set in  src/main/conf/systemParams.properties  and are a comma delimitted list of values. The property keys are \n \n jacms.imageResource.allowedExtensions= \n jacms.attachResource.allowedExtensions= \n \n If you are configuring the upload for both the App Builder and the legacy Admin Console you should include\nboth the MIME type of the asset and the file extension. The APIs that support resources will check MIME type of the uploaded asset. \n An example configuration for images. \n \n jacms.imageResource.allowedExtensions=jpg,jpeg,png,svg,svg+xml \n \n Where  svg+xml  is the MIME type for an svg image. \n The  systemParams.properties  file is bundled into the WAR and the image for the application so you will need to create and deploy image to reflect changes for these properties in your application. \n"},{title:"Adding a new API to the core app",frontmatter:{},regularPath:"/next/tutorials/customize-the-platform/add-rest-api.html",relativePath:"next/tutorials/customize-the-platform/add-rest-api.md",key:"v-04e55b50",path:"/next/tutorials/customize-the-platform/add-rest-api.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"10/30/2020, 8:52:39 AM",content:" Adding a new API to the core app \n Prerequisites \n \n \n Java 11 \n \n \n maven \n Overview \n This guide will take you through adding a new REST API to the Entando\ncore app. In some cases it is better to add new APIs to the core rather\nthan creating a new microservice. Some example cases where adding new\nAPIs to the core is recommended are: \n \n \n When extending or adding functionality to the WCMS \n \n \n When you have a simple use case requiring persistence that is\nspecific to only the application you’re working within \n \n \n When exposing configurations that are needed by the portal-ui during\npage rendering \n \n \n For small changes that don’t warrant a full stand-alone microservice \n \n \n You can build widgets and micro frontends that take advantage of these\nAPIs in the same way that your micro-frontends can invoke APIs exposed\nby other services. \n Tutorial \n Creating a controller and services \n \n \n Create a new java package in the project using your favorite IDE at\nthe path  org.entando.training . \n \n \n Under that package add packages for  controllers  and  services . \n \n \n Create a class called  DemoController.java  from the\ntraining package into the controllers package. \n \n This is a normal Spring rest controller and it will be\ndiscovered by annotations. \n \n \n \n Copy  DemoService.java  from the\ntraining package into the services package. \n \n This is a normal Spring service that will be autowired into the\ncontroller. The data in this service is hardcoded but this is\nwhere you can wire in external services or other parts of the\nEntando architecture to fetch the data. \n \n \n \n Copy  commonConfig.xml  to\n src/main/resources/spring/aps/managers . \n \n \n The goal is to enable package scanning for annotation driven\nspring services. This includes the package scan for your package\ndefined above. If you want to scan another package, then you\nneed to add another path to this file. This is the only spring\nXML you will need to change if you want to build annotation\ndriven beans in Entando. \n \n \n See also web.xml for deeper details. \n \n \n \n \n Review the code and annotations in the controller to understand how\nthe APIs are protected and integrated. \n \n \n @RestAccessControl  is a custom Entando annotation that can be used\nto restrict APIs by role. \n \n The rest of the annotations are normal Spring annotations. \n \n \n \n Restart your app using jetty. \n \n \n if you get an error add the entries below to\n src/main/conf/systemParams.properties  This is temporary \nParameters for Argon2 algorithm encryption\nalgo.argon2.type=ARGON2i\nalgo.argon2.hash.length=32\nalgo.argon2.salt.length=16\nalgo.argon2.iterations=4\nalgo.argon2.memory=65536\nalgo.argon2.parallelism=4\nalgo.default.key=changeit\n \n \n \n \n \n Go to Swagger \n \n \n Find the demo-controller and try your new endpoints out using\nswagger \n \n \n"},{title:"Page Management",frontmatter:{redirectFrom:"/next/tutorials/cms/publish-a-content-tutorial.html"},regularPath:"/next/tutorials/cms/page-management.html",relativePath:"next/tutorials/cms/page-management.md",key:"v-d5ee8bbc",path:"/next/tutorials/cms/page-management.html",headers:[{level:2,title:"Create a Page",slug:"create-a-page"},{level:2,title:"Create a Page Template",slug:"create-a-page-template"}],lastUpdated:"3/11/2021, 2:36:21 PM",content:' Page Management \n The App Builder provides the capability to publish application pages containing content as well as other Entando components. Page Templates are used to layout the available frames on a page. \n Create a Page \n \n Go to  Pages → Management \n Click  Add \n \n \n You will need to supply at least the following fields: \n \n Title : used for SEO \n Code : must be unique \n Page placement : the location of the Page in the Page Tree \n Owner Group : the Group that has access to the Page \n Page Template : the structure and presentation of the Page \n \n \n \n Click the green  Save and Design  button. This brings you to the Designer section which lets you place widgets into the Page Template frames. \n \n \n \n Add widgets by dragging them from the right column into the desired frame. \n If you select the  Content  widget, its corresponding settings page will be shown. \n \n \n \n Click  Add existing content  to bring up the Content selection view. \n \n \n \n \n In the Search field, you can type the name of the content that you\nwould like to publish. Remember\nthat in order to publish the content on your page, it must first be saved\nand approved. \n \n \n Select the appropriate content item from the list. \n \n \n Press the  Save  button. \n \n \n \n \n \n The title of the selected content item will now be displayed in the widget settings. \n \n \n Press the  Save  button. \n \n \n Click on the  Preview  button to show the page preview with the updated settings. \n \n \n Click on the  Publish  button to publish the page. \n \n \n Click on the  View published page  button to view the published page in your application. \n Create a Page Template \n Page Templates provide the scaffolding of a Page and are constructed using two main elements: \n \n A  JSON configuration  field which lists the set of frames that can be used on a page.\n \n Each item in the frames array represents a frame or slot in the page, characterized by the following values:\n \n pos  - a zero-based position index (starts from zero). This value is used in\nAPIs to address a specific widget on the page. \n descr  - the frame description displayed on Page Design view \n mainFrame  - designates the primary frame in the Page Template \n defaultWidget  - widget code for a default widget to use in this frame. Page Template developers can use this field to provide suggestions on common widgets, e.g. header and footer widgets. \n sketch  - an object with 4 coordinates (x1,x2,y1,y2) to allow the developer to place the widgets in the Page preview. Sketch’s x and y values go from 0 to 11 (similar to columns in Bootstrap), so if you want to place a 2x2 frame at the top left corner of the page, the values would be  x1: 0, x2: 1 y1: 0 y2: 1 . \n \n \n \n \n A  Template  field which uses Freemarker code to setup the HTML page itself.\n \n To add a frame in a specific place of the page, add  <@wp.show frame=0 /> , where frame is the pos variable from the  JSON configuration .  <#assign wp=JspTaglibs["/aps-core"]>  is required at the top of the template to setup the  wp  variable. \n Common code can be shared across pages by using  UX Fragments  and  <@wp.fragment code="\\<FRAGMENT\\_CODE\\>" escapeXml=false /\\> . \n \n \n \n This tutorial prepares a Page Template with two frames on it. \n \n \n Go to  Pages → Templates → Add \n \n \n Enter the following: \n \n \n \n Code: double_frame \n \n Note: dashes are not allowed \n \n \n Name: Double Frame \n JSON Configuration: \n \n { \n   "frames" :   [ \n     { \n       "pos" :   0 , \n       "descr" :   "Frame 1" , \n       "mainFrame" :   false , \n       "defaultWidget" :   null , \n       "sketch" :   { "x1" :   0 ,   "y1" :   0 ,   "x2" :   11 ,   "y2" :   1 } \n     } , \n     { \n       "pos" :   1 , \n       "descr" :   "Frame 2" , \n       "mainFrame" :   false , \n       "defaultWidget" :   null , \n       "sketch" :   { "x1" :   0 ,   "y1" :   2 ,   "x2" :   11 ,   "y2" :   3 } \n     } \n   ] \n } \n \n \n Template: \n \n < #assign  wp = JspTaglibs [ "/aps-core" ] > \n <! DOCTYPE   HTML   PUBLIC   "-//W3C//DTD HTML 4.0 Transitional//EN" > \n < html > \n   < head > \n       < title > < @wp . currentPage param = "title"   /> </ title > \n   </ head > \n   < body > \n     < h1 > < @wp . currentPage param = "title"   /> </ h1 > \n     < div > < @wp . show frame = 0   /> </ div > \n     < div > < @wp . show frame = 1   /> </ div > \n   </ body > \n </ html > \n \n Include the following fragment in the  head  section if you want to make use of the user\'s identity information from Keycloak. \n < @wp . fragment code = "keycloak_auth"  escapeXml = false   /> \n \n \n You should see the  Template preview  reflecting the desired two frame layout. \n Click  Save  to save your template. \n \n'},{title:"Change Default Datasources and Connections",frontmatter:{},regularPath:"/next/tutorials/customize-the-platform/change-default-datasources-and-connections/",relativePath:"next/tutorials/customize-the-platform/change-default-datasources-and-connections/README.md",key:"v-268e1178",path:"/next/tutorials/customize-the-platform/change-default-datasources-and-connections/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a Docker project for your own base image to Entando's standard base image(s)",slug:"_1-create-a-docker-project-for-your-own-base-image-to-entando-s-standard-base-image-s"},{level:3,title:"2. Customize the standalone.xml/standalone-openshift.xml file using environment variables.",slug:"_2-customize-the-standalone-xml-standalone-openshift-xml-file-using-environment-variables"},{level:3,title:"3. Build your own Docker base image",slug:"_3-build-your-own-docker-base-image"},{level:3,title:"4. Modify your Entando App project to use the new Docker base image",slug:"_4-modify-your-entando-app-project-to-use-the-new-docker-base-image"},{level:3,title:"5. Build and push your custom Docker image",slug:"_5-build-and-push-your-custom-docker-image"},{level:3,title:"6. Deploy your EntandoApp with the correct environment variables",slug:"_6-deploy-your-entandoapp-with-the-correct-environment-variables"}],lastUpdated:"3/24/2021, 9:59:27 AM",content:' Change Default Datasources and Connections \n Purpose \n This tutorial explains how to customize our EAP and Wildfly base Docker images, and then configure the EntandoApp custom resource to use these customizations. \n Requirements \n \n \n The Entando Operator is running in the target names \n \n \n Keycloak and the Entando Cluster Infrastructure have been deployed \n \n \n The required external databases and other services are up and running. \n \n \n Your own custom project as described in  the tutorial \n Steps \n 1. Create a Docker project for your own base image to Entando\'s standard base image(s) \n Create a project, ideally in Git repository, and put the following files in the folder \n 1.1. The standalone.xml/standalone-openshift.xml file of choice \n It is essential for your custom Docker image to use a file from one of the official Entando Docker base images. \n If you intend to use provide your own EAP based image, please use this\n standalone-openshift.xml \nfile. \n If you intend to use provide your own Wildfly based image, please use this\n standalone.xml \nfile. \n Please note that if you create your own base image with a different version of EAP or Wildfly, using these files\nmay have unintended consequences. \n 1.2. Any modules that may be required for your datasource or other connection resource \n If the resource you need to connect to requires some custom classes, such as JDBC drivers, please add these as \na module to Wildfly/EAP. As an example, you can look at our\n Derby database module \nthat Entando uses for embedded databases. Please ensure that the path of the folder containing the jar files reflects\nthe fully qualified name of the module in the module.xml file. \n 1.3 Dockerfile \n In your Dockerfile, please be sure to extend the correct base image, and add the correct configuration file to\nthe correct location in the target image. \n For EAP, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=185:0 ./standalone-openshift.xml /opt/eap/standalone/configuration\n \n For Wildfly, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=1001:0 ./standalone.xml /wildfly/standalone/configuration\n \n Please take note of the user ownership in these different Dockerfiles. This is quite important as Openshift will\nexpect the user/group ownership to be respected. \n 2. Customize the standalone.xml/standalone-openshift.xml file using environment variables. \n You can now modify your Wildfly/EAP configuration to meet your requirements. Where the configuration could differ\nfrom one environment to a next, we strongly advise using environment variable expressions ( ${env.VAR_NAME} ). The most likely change\nthat would be required in this file is the addition of a datasource. Here is an example of how to add a datasource\nto the datasources subsystem. All the environment variables starting with \'YOURDB\' can be specified from the Docker\ncontainer. \n    ...\n    <subsystem xmlns="urn:jboss:domain:datasources:5.0">\n      <datasources>\n        <datasource jndi-name="${env.YOURDB_JNDI}" enabled="true" use-java-context="true" pool-name="yourDbDataSource" use-ccm="true">\n          <connection-url>${env.YOURDB_URL}</connection-url>\n          <driver>${env.YOURDB_DRIVER}</driver>\n          <security>\n            <user-name>${env.YOURDB_USERNAME}</user-name>\n            <password>${env.YOURDB_PASSWORD}</password>\n          </security>\n        </datasource>\n \n Please take extra care not to remove any lines from these files. This is of particular importance in the case of the\nEAP image as, on startup, scripts in the official EAP look for certain placeholders in this file and populates them\nfrom other environment variables. \n 3. Build your own Docker base image \n You can now build your Docker base image. It is highly recommended that you consider using a dedicated CI/CD build\ntool such as Jenkins X to build the base image and maintain traceability between your source code and the resulting\nDocker image. One possible build command could look like this: \n docker build . -t your-docker-registry.com/your-org/your-base-image:1.0.0 \n 4. Modify your Entando App project to use the new Docker base image \n You can now modify your Entando App project that you have forked as described in the\n relevant tutorial . You would require two changes to the pom.xml file\nof the sample project. \n \n Firstly, you would need to change the variable  server.base.image  to reflect the fully\nqualified URI of your Docker image for EAP and/or Wildfly. For example, if you decided to extend the Wildfly image,\ngo to the Maven profile with the id  wildfly  and change the   server.base.image  to look like this: \n \n <server.base.image>your-docker-registry.com/your-org/your-base-image:1.0.0</server.base.image> \n \n Then you need to change the  <from>  element in the Fabric8 Maven Docker Plugin to reflect this variable.\nNavigate to the first  <image>  element in the pom.xml file. You have found the correct one\nif it contains the following xml: \n \n <from>entando/${server.base.image}:${entando.version}</from> \n Delete the  entando/  prefix and the  :${entando.version}  suffix: \n <from>${server.base.image}</from> \n Please note that, should you still require support for both Wildfly and EAP in your Maven pom, you may need to\nrepeat this exercise for both the  eap  and  wildfly  profiles. \n 5. Build and push your custom Docker image \n Before building your Docker image, it would be a good idea to change the name of the image you want to build. Navigate\nto the previously modified  <image>  element in the Fabric8 Maven Docker Plugin.You can change the  <name>  element\nto reflect your preferred name, e.g. \n <name>your-docker-registry.com/your-org/your-entando-app:1.0.0</name> \n Run: \n mvn clean package -Pwildfly -Pderby \n A new Docker image should now be available named  your-docker-registry.com/your-org/your-entando-app:1.0.0 \n Log into the Docker registry in question and then push the image: \n docker push your-docker-registry.com/your-org/your-entando-app:1.0.0 \n You are now ready to deploy this image. \n 6. Deploy your EntandoApp with the correct environment variables \n The final step is to configure your EntandoApp deployment with the correct environment variables. As is the case with\nall the Entando Custom Resources that result in actual deployments, the property  spec.environmentVariables  will be translated\ninto environment variables on each of the Containers in the Deployment\'s Pod. For an EntandoApp named \'my-app\',\nthe new state of the EntandoApp would could be placed in a file named  my-app.yaml  that would look something like this: \n       kind: "EntandoApp"\n      metadata:\n        name: "my-app"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        customServerImage: your-docker-registry.com/your-org/your-entando-app:1.0.0\n        ingressPath: /your-entando-app\n        environmentVariables:\n          - name: YOURDB_JNDI\n            value: java/your-ds\n          - name: YOURDB_URL\n            value: "jdbc:postgresql://somehost.com:5432/mydb"\n          - name: YOURDB_DRIVER\n            value: postgresql\n          - name: YOURDB_USERNAME\n            value: my_user\n          - name: YOURDB_PASSWORD\n            value: mypassword\n      entandoStatus:\n        entandoDeploymentPhase: requested\n\n \n Notice how this Custom Resource specifies a  parameter  for each environment variable that was referenced from the\n standalone.xml  file referenced earlier. \n To apply the changes to your deployment, change the  entandoStatus.entandoDeploymentPhase  property to requested and\napply the file: \n kubectl apply -f my-app.yaml\n \n '},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/next/tutorials/customize-the-platform/connecting-external-db.html",relativePath:"next/tutorials/customize-the-platform/connecting-external-db.md",key:"v-08657d5c",path:"/next/tutorials/customize-the-platform/connecting-external-db.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"7/13/2020, 3:29:21 PM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando applicaiton is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n See  Databases  for other details on Entando databases. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Tutorial: Invoking Entando Core APIs",frontmatter:{},regularPath:"/next/tutorials/customize-the-platform/invoking-api.html",relativePath:"next/tutorials/customize-the-platform/invoking-api.md",key:"v-7d2b47ee",path:"/next/tutorials/customize-the-platform/invoking-api.html",headers:[{level:2,title:"General Overview",slug:"general-overview"},{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Set up a Postman environment",slug:"_1-set-up-a-postman-environment"},{level:3,title:"2. Get an access token",slug:"_2-get-an-access-token"},{level:3,title:"2. Prepare a generic API request",slug:"_2-prepare-a-generic-api-request"},{level:2,title:"QE ready APIs",slug:"qe-ready-apis"},{level:2,title:"Notes on QE requests collections structure",slug:"notes-on-qe-requests-collections-structure"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"8/4/2020, 5:01:47 PM",content:' Tutorial: Invoking Entando Core APIs \n General Overview \n Entando supports Swagger and it is accessible, if activated, from its\nweb interface from the base application URL at /api/swagger-ui.html. A\ncomplete list of all available core APIs can be obtained from Swagger. \n Core APIs can be invoked directly from Swagger or from any other\nsuitable tool, i.e., curl or Postman are two common ones. Postman has\nbeen extensively used in API testing and automated API testing because\nof the possibilities it offers and it is the suggested tool. \n All Entando core APIs are accessible from the base URL, for example:\nlocalhost:8080/entando-de-app/api. For example, the Page Controller will\nbe available under /pages from the Base URL (i.e.\nlocalhost:8080/entando-de-app/api/pages), or the Page Template Controller\nwill available under /pageModels (i.e.\nlocalhost:8080/entando-de-app/api/pageModels) and so on. \n Before being able to perform any API request, we will first need to\nobtain an  authorization token , that is achieved with a specific POST\nrequest sent to the oauth/token endpoint, after successful\nauthentication, an access token is returned which grants access to all\nAPI endpoints and actions for which the authenticated user has defined\nprivileges. \n (Refer to User Management Roles for details) \n The best way to proceed in case of extensive testing with APIs with\nPostman, is to set up an environment and define a variable that will\nkeep the access token saved from the POST request to /oauth/token. \n Purpose \n Set up an environment ready to invoke Entando core APIs \n Requirements \n To complete this tutorial you will need: \n \n \n Postman \n \n \n A running Entando 6 instance \n Steps \n 1. Set up a Postman environment \n Create a new Postman environment and define the following variables: \n access_token: (no value)\nrefresh_token: (no value)\nurl: URL of your application (i.e. http://localhost:8080/entando-de-app)\n \n Be careful with the URL variable and make sure you do not have a\ntrailing slash. \n Set Postman to use this environment. \n 2. Get an access token \n Getting an access token is a prerequisite to be able to invoke any API.\nThe following is the required activity. \n \n \n create a Postman collection, name it for example "Access Token" \n \n \n create a new POST request with the following parameters: \n \n \n \n URL field\n{{url}}/api/oauth/token\n \n Note that we are calling the "url" environmental variable for\nconvenience. \n Autorization section\n   Type: Basic Auth\n   Username: (a valid Entando consumer must be defined in Entando) (Refer to appropriate documentation on how to do that) (i.e. appbuilder)\n   Password: (password of the defined consumer) (i.e. appbuilder_secret)\n\nHeaders section\n    Content-Type: application/x-www-form-urlencoded\n\nBody section\nSelect from the radio button the option: x-www-form-urlencoded\n    username: (valid Entando user (i.e. admin))\n    password: (password of the valid user)\n    grant_type: password\n \n The tests section is convenient as we can then set any new API request\nin such a way to make use of that access token. The first line of code\ndefines a variable called "data", which hosts the JSON parsed\nresponseBody from the POST request just sent to /oauth/token; The second\nline sets the environment variable "access_token" to the value returned\nby the POST request. \n Tests section\n    var data = JSON.parse(responseBody);\n    postman.setEnvironmentVariable("access_token", data.access_token);\n \n Launch the POST request to test it, and if successful, you should get a\nresponse like this: \n {\n    "access_token": "b96096493a40b1a7364bd54a6ffb609b",\n    "token_type": "bearer",\n    "refresh_token": "79ff84062b5dc13663961a833b0788f9",\n    "expires_in": 3599\n}\n \n also if you open in edit the Postman environment, you should see that\nthe access_token and the refresh_token variables values have been\nupdated. \n 2. Prepare a generic API request \n Create a new request with the following parameters: \n Authorization section: Inherit auth from parent\n\nHeaders section:\n create the key Authorization with Value: Bearer{{access_token}}\n create the key Content-Type with Value: application/json\n \n Select the appropriate method (GET, DELETE, POST etc.) for your request\nand fill up the URL with appropriate values i.e.\n(localhost:8080/entando-de-app/api/pages) then add to the Body section,\nif needed, the appropriate payload in JSON format, remember to select\nraw and JSON (application/json). \n QE ready APIs \n QE has developed a set of collection requests to automate API testing,\nexamples of that are available on github at\n https://github.com/entando/entando-QE/tree/master/postman_API . \n To use them ,first git clone the project and use the built in Postman\nimporting features. \n Import first the Postman Environment file which can be found under the\nenvironment folder. When imported, from Postman, open in edit that\nenvironment and change the "url" variable to the appropriate value for\nyour specific installation, i.e  http://localhost:8080/entando-de-app/ \nand save it. \n Import from Postman the collections you would like to use and they will\nbecome available in the Postman collections Panel ready to be run. \n Notes on QE requests collections structure \n Each collection is so designed to test a particular use case i.e.\n"Delete an existent page", "Delete a page which has children" etc. \n By design each QE Postman collection is: \n \n \n indipendent (does not require other collections) \n \n \n general (does not make any assumption on the specific Entando\napplication) \n \n \n can be run automatically, with newman, please refer to\n https://github.com/entando/entando-QE  for details \n \n \n Following those requirements, each collection will need to "prepare" the\nenvironment for the actual test. That is achieved by using specific\nrequests, called "helpers", and their only purpose is to create/delete\nall the needed objects. \n Another class of helpers is used to check the persistence of the actions\nperformed by the APIs, i.e. check that after a DELETE, something really\nhas been deleted. \n The request that implements the use case, we can call it main request,\ndoes not contain the word "HELPER" in its name, and it is the only one\ninside a given collection. \n Because collections are designed primarily to run automatically, we have\ndone extensive use of collection variables, so variables like the API\nURL, object names, object codes or payloads are usually defined as a\ncollection variable and can be accessed by all requests inside the\ncollection. \n Conclusion \n This guide let you start invoking Entando 6 APIs \n'},{title:"Tutorial: Extending the App Builder",frontmatter:{},regularPath:"/next/tutorials/customize-the-platform/extend-app-builder.html",relativePath:"next/tutorials/customize-the-platform/extend-app-builder.md",key:"v-2ac5fb7a",path:"/next/tutorials/customize-the-platform/extend-app-builder.html",headers:[{level:2,title:"Creating a Basic Application",slug:"creating-a-basic-application"},{level:2,title:"Understanding the Stand Alone Environment",slug:"understanding-the-stand-alone-environment"},{level:2,title:"Customizing the Menu",slug:"customizing-the-menu"},{level:2,title:"Customizing the menu labels",slug:"customizing-the-menu-labels"},{level:2,title:"Customizing the Routes",slug:"customizing-the-routes"},{level:2,title:"state",slug:"state"},{level:2,title:"Customizing the Reducers",slug:"customizing-the-reducers"},{level:2,title:"userList",slug:"userlist"},{level:3,title:"connecting to the store",slug:"connecting-to-the-store"},{level:2,title:"Page Models",slug:"page-models"},{level:3,title:"Connecting to the Store",slug:"connecting-to-the-store-2"},{level:2,title:"Adding the API Calls",slug:"adding-the-api-calls"},{level:2,title:"Creating the Thunk",slug:"creating-the-thunk"},{level:2,title:"changing the mapDispatchToProps in the containers",slug:"changing-the-mapdispatchtoprops-in-the-containers"},{level:2,title:"Updating the List components",slug:"updating-the-list-components"},{level:2,title:"clear the default value of the reducer",slug:"clear-the-default-value-of-the-reducer"}],lastUpdated:"8/4/2020, 5:01:47 PM",content:" Tutorial: Extending the App Builder \n Apps for the Entando App Builder are developed as standalone\napplications which can be run using  npm start  in standalone mode. \n Each application should be deployed in npm using the  @entando \nnamespace and will export into their dist folder several items used by\nthe App Builder when integrating it into the full application. \n Creating a Basic Application \n To create a basic application, use the  entando\nfpg  running the\n npx @entando/fpg ab-app <appName>  command. \n the  appName  should only contain alphanumeric characters and\nunderscores, and should begin with a letter. \n This will create inside the working directory, a boilerplate app-builder\napp in a directory named  <appName>  argument. \n i.e. \n using the command  npm @entando/fpg ab-app testing  inside your home\ndirectory, a directory named  testing  will be created containing the\napp. \n All dependencies will already be installed allowing you to  cd  inside\nthe project directory and run  npm start  to start the app running. \n Understanding the Stand Alone Environment \n Each app for the App Builder, can run in both a stand alone mode and an\nintegrated mode. Using  npm start  will use standalone mode. \n In this environment you’ll be looking at the user interface of the app\ninside a default page. This page, which includes a default menu, will\nnot be exported and therefore can be customized. \n To better understand which elements and components are being exported to\nApp Builder, it is best to understand the anatomy of the app. \n Exports \n Each app will have a  babel.js  export file similar to: \n      import  menu  from   'ui/common/LinkMenu' ; \n     import   {  cms  as  state  }   from   'state/rootReducer' ; \n     import   {  routes ,  routesDir  }   from   'ui/App' ; \n     import  en  from   'locales/en' ; \n     import  it  from   'locales/it' ; \n\n     const  testing  =   { \n      id :   'testing' , \n      menu , \n      state , \n      routes , \n      routesDir , \n      locales :   { \n        en , \n        it , \n       } , \n     } ; \n\n     export   default  testing ; \n id: is the app id. \n This parameter is used by App Builder to differentiate all integrated\napps. \n menu: is a React component containing all the menu elements. \n These elements are used inside the standalone environment and inside the\nintegrated environment as a second level menu. The boilerplate app\ncontains a basic menu. \n      import  React  from   'react' ; \n     import   {  LinkMenuItem  }   from   '@entando/menu' ; \n     import   {  FormattedMessage  }   from   'react-intl' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-SECTION_ID\" \n          label = { < FormattedMessage id = \"testing.menu.SECTION_NAME\"  defaultMessage = \"SECTION_NAME\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n\n     export   default  LinkMenu ; \n Customizing the Menu \n For this exercise, we will create two links inside the menu. The first\nwill link to a page listing all the users inside the entando instance.\nThe second will list all the existing page templates inside the Entando\ninstance. \n For this example we’re using existing APIs from the Entando core just\nfor simplicity, you can instead call any API or data source. \n In your app project, open  src/ui/common/LinkMenu.js  and update the\nconst to the code below. \n      const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"testing.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"testing.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n \n it is important that both the  <LinkMenuItem>  id property and the\n`<FormattedMessage>`properties inside label have the correct values\nassigned, i.e.: \n the LinkMenuItem id will be  menu-userList  while the FormattedMessage\nid will be  testing.menu.userList  and the defaultMessage will be\n User List . \n locales \n The locales files are objects that contain all of the i18n locales of\nthe app. \n By default the boilerplate contains both the english and italian i18n\nfiles. \n In your app project in  src/locales/en.js  and  src/locales/it.js  you\ncan see your labels. \n      export   default   { \n      locale :   'en' , \n      messages :   { \n         'testing.title' :   '' , \n         'testing.label.errors' :   '' , \n         'testing.label.cancel' :   '' , \n         'testing.chooseAnOption' :   '' , \n         'testing.tip' :   '' , \n         'testing.new' :   '' , \n         'testing.save' :   '' , \n         'testing.saveAndApprove' :   '' , \n         'testing.unpublish' :   '' , \n         'testing.setContentAs' :   '' , \n         'testing.cancel' :   '' , \n         'testing.saveAndContinue' :   '' , \n         'testing.stickySave.status' :   '' , \n         'testing.stickySave.lastAutoSave' :   '' , \n       } , \n     } ; \n \n While running in standalone mode the boilerplate does not offer a way\nfor the user pick a locale, but both will be loaded inside app-builder\nand will be consumed as intended by it, using the correct one based on\nthe user-picked language. \n It is of course possible to change the standalone app to give the user\nthe option to choose the locale in here as well, but this is not\nsomething will be covering in this tutorial. \n Customizing the menu labels \n To customize the existing menu labels, we’ll add the new label ids\ninside both the english and Italian locale files: \n \n Note \n If you named your app something besides  testing  you’ll need to fix\nthese tags to match the name of your app. \n \n      ... \n    messages :   { \n         ... \n         'testing.menu.userList' :   'List of Users' , \n         'testing.menu.pageModelList' :   'Page Models' , \n         ... \n     } , \n     ... \n \n The key in the messages object matches the id of the\n`<FormattedMessage>`component we placed inside the menu, while its\nvalue is the actual string that will be displayed depending on the\ncurrently active language. \n Routes and RoutesDir \n Both of these elements are imported from  src/ui/App.js . The first one\nis a collection of actual  <Route>  components, and the second one is an\nobject containing each route data, i.e.: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n     ] ; \n \n The constant  ROUTE_TESTING  is imported from  src/app-init/routes.js \n Customizing the Routes \n Next we will create the two routes for the two links we have created by\ncreating first the two constants needed. \n In your IDE open  src/app-init/routes.js \n      export   const   ROUTE_TESTING   =   '/testing' ; \n     export   const   ROUTE_USER_LIST   =   '/testing/user-list' ; \n     export   const   ROUTE_PAGE_MODELS   =   '/testing/page-models' ; \n \n \n Note \n Change the value of  testing  to what you selected for the name of\nyour App extension. \n \n The value of each constant will be the path of the route. It is\nimportant that each route is a subroute of the id of the app itself,\notherwise this may cause name collision when running inside the\nintegrated environment of app-builder. \n Both routes are next imported inside  App.js : \n Update the imports with your new ROUTE tags. \n      import   { \n       ROUTE_TESTING , \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n \n and then add to the  routesDir  constant: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n       { \n        path :   ROUTE_USER_LIST , \n         render :   ( )   =>   < > user list < / > , \n       } , \n       { \n        path :   ROUTE_PAGE_MODELS , \n         render :   ( )   =>   < > page models < / > , \n       } , \n     ] ; \n \n Next, import the routes constants inside  LinkMenu.js  and change\naccordingly the  to  property of the  <LinkMenuItem>  component: \n      ... \n     import   { \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"tatata.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = { ROUTE_USER_LIST } \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"tatata.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = { ROUTE_PAGE_MODELS } \n         / > \n       < / > \n     ) ; \n     ... \n \n Next clicks on the links in the menu will change the routes and display\nthe content defined in the  App.js  file. \n state \n The state in src/babel.js is the combined reducer of the app, the\nrootReducer.js contains the combined reducer of the app and exports it,\nbut also contains the entire reducer of the app when running in\nstandalone mode. \n      export   const  testing  =   combineReducers ( { \n       // implement here your app specific reducers \n     } ) ; \n\n     export   default   combineReducers ( { \n      apps :   combineReducers ( {  testing  } ) , \n      api , \n      currentUser , \n      form , \n      loading , \n      locale , \n      messages , \n      modal , \n      pagination , \n     } ) ; \n \n The app specific reducers are stored inside the  apps  object, this is\ndone to avoid possible name collisions with any reducer stored inside\napp-builder when running the app in integrated mode. \n Customizing the Reducers \n Next we will be creating the two reducers for the user list and page\nmodels. They will be created inside two new directories\n src/state/apps/testing/userList/  and\n src/state/apps/testing/pageModels . The  types.js  files will contain\nthe two action types that we’ll need. \n userList/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_USERS = 'apps/testing/add-users';\n \n pageModels/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_PAGE_MODELS = 'apps/testing/page-models/add-page-models';\n \n The value of both constants contain the whole namespace\n apps/testing/REDUCER  this is done to avoid any possible name collision\nwhen running the app in integrated mode. \n Next create both actions files: \n userList/actions.js \n      import   { \n       ADD_USERS , \n     }   from   'state/apps/testing/userList/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addUsers   =   users   =>   ( { \n      type :   ADD_USERS , \n      payload :  users , \n     } ) ; \n \n pageModels/actions.js \n      import   { \n       ADD_PAGE_MODELS , \n     }   from   'state/apps/testing/pageModels/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addPageModels   =   pageModels   =>   ( { \n      type :   ADD_PAGE_MODELS , \n      payload :  pageModels , \n     } ) ; \n \n then the selectors: \n userList/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getUserList   =   state   =>  state . apps . testing . userList ; \n     export   const  getList  =   createSelector ( getUserList ,   userList   =>  userList . list ) ; \n \n pageModels/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getPageModels   =   state   =>  state . apps . testing . pageModels ; \n     export   const  getList  =   createSelector ( getPageModels ,   pageModels   =>  pageModels . list ) ; \n \n And finally the reducers. The default state is going to contain some\nsample data for us to display. \n userList/reducer.js \n      import   {   ADD_USERS   }   from   'state/apps/testing/userList/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'active' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'admin' , \n            email :   'admin@entando.com' , \n           } , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'disabled' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'User Name' , \n            email :   'user1@entando.com' , \n           } , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_USERS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n pageModels/reducer.js \n      import   {   ADD_PAGE_MODELS   }   from   'state/apps/testing/pageModels/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          code :   'home' , \n          descr :   'Home Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n         { \n          code :   'service' , \n          descr :   'Service Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_PAGE_MODELS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n Last, we can add the two reducers just created to the\n src/state/rootReducer.js \n      ... \n     import  userList  from   'state/apps/testing/userList/reducer' ; \n     import  pageModels  from   'state/apps/testing/pageModels/reducer' ; \n\n     export   const  testing  =   combineReducers ( { \n      pageModels , \n      userList , \n     } ) ; \n     ... \n \n we will now be able to see with the  reduxDevTools  in our browser. To\nview this state in your reduxDevTools go to: \n State -→ apps -→ testing -→ pageModels  and\n State -→ apps -→ testing -→ userList \n Creating the UI Components \n At this point, both routes created should be rendering a simple string.\nWe will next create the actual component that will be rendered inside\nthe page. \n userList \n Inside  src/ui/userList/  create the  List  component. Create the\n userList  directory and  List.js  file in that directory. \n      import  React  from   'react' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( )   =>   { \n       const  data  =   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n       ] ; \n\n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n               < tr > \n                 < td > username < / td > \n                 < td > registration < / td > \n               < / tr > \n             < / thead > \n             < tbody > \n               { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Next, change the route inside  src/ui/App.js . Add the import below and\nupdate the component to reference the List component created in the\nprior step. \n      ... \n     import  List  from   'ui/userList/List' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  List , \n       } , \n     ... \n \n The table will now display correctly when clicking on the menu item. \n connecting to the store \n Next let’s connect the component to the store to get the data from the\nreducer. \n The first step is creating the  ListContainer.js  next to the  List \ncomponent file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/userList/selectors' ; \n\n     import  List  from   'ui/userList/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The List\nfile should now look like this: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Make sure that you remove the predefined  data  const since the data\nwill now be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js .\nUpdate the import to the container and update the component in\n ROUTE_USER_LIST  to the new ListContainer. \n      ... \n     import  ListContainer  from   'ui/userList/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  ListContainer , \n       } , \n     ... \n \n Go back to your app. We will now see the data inside the table\nreflecting the content of the storage. \n Page Models \n inside  src/ui/pageModels/  we are going to create the  List  component \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n\n     export   default  List ; \n \n Next change the route inside  src/ui/App.js \n      ... \n     import  ListPageModels  from   'ui/pageModels/List' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  ListPageModels , \n       } , \n     ... \n \n The table will now be displayed correctly when clicking on the menu\nitem. \n Connecting to the Store \n Next, connect the component to the store to get the data from the\nreducer. \n The very first thing we’ll do is create the  ListContainer.js  next to\nthe  List  component file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/pageModels/selectors' ; \n\n     import  List  from   'ui/pageModels/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The whole\nList component will have this content: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . code } < / td > \n           < td > { row . descr } < / td > \n         < / tr > \n       ) ) ; \n\n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > code < / td > \n               < td > descr < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n     export   default  List ; \n \n Next make sure that you remove the predefined  data  const since the\ndata will be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js \n      ... \n     import  PageModelsListContainer  from   'ui/pageModels/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  PageModelsListContainer , \n       } , \n     ... \n \n You will now see the data inside the table reflecting the content of the\nstorage. \n Connecting the app to an Entando core instance \n By default the app is using mocks and not connecting to any Entando core\ninstance. \n Because the app is making use of  @entando/apimanager  we can easily\nchange this by setting up two  .env  variables inside the  .env  file in\nthe project root: \n     REACT_APP_DOMAIN=http://localhost:8080/entando-app\n    REACT_APP_USE_MOCKS=false\n \n The  REACT_APP_DOMAIN  must pointing towards the domain and container\nwhere the Entando instance is running and  must not  contain trailing\nslashes. \n Once this is done to make the change happen we will have to stop the app\nusing  ctrl + c  and re run it with  npm start . \n Now the toast stating  This application is using mocks  won’t be popping\nup anymore. \n You can make sure that the configuration is correct by looking at the\nnetwork section in the browser dev tools. By default the app\nautomatically makes an admin login against a plain Entando instance to\nauthenticate the user and to be able to consume any protected api. \n This is not an ideal scenario and it is meant to be used only for\ndebugging purposes for many reasons: \n \n \n the username and password should never be hardcoded in your app \n \n \n if authentication is required the user should be the one performing\nthe login action \n \n \n the plain default passwords in use won’t be useful against a proper\nproduction instance of Entando \n Adding the API Calls \n We are now going to add api calls for both users and page models to\nretrieve the data live instead of relying on our store’s default state. \n Inside  src/api  create the  users.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   ( \n       makeRequest ( \n         { \n          uri :   ` /api/users ${ params } ` , \n          method :   METHODS . GET , \n          mockResponse :   { } , \n          useAuthentication :   true , \n         } , \n        page , \n       ) \n     ) ; \n \n and then create the  pageModels.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   makeRequest ( { \n      uri :   ` /api/pageModels ${ params } ` , \n      method :   METHODS . GET , \n      mockResponse :   { } , \n      useAuthentication :   true , \n     } ,  page ) ; \n Creating the Thunk \n In order to use the api call we next create a thunk action, which is a\nredux action with side effects, like an API call. \n inside the  src/state/apps/testing/userList/actions.js  file we are\ngoing to add the new action: \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getUsers , \n     }   from   'api/users' ; \n     ... \n\n     // thunks \n\n     export   const  fetchUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getUsers ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( json )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addUsers ( json . payload ) ) ; \n             }   else   { \n               dispatch ( addErrors ( json . errors . map ( err   =>  err . message ) ) ) ; \n             } \n             resolve ( ) ; \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Next do the same inside  src/state/apps/testing/pageModels/actions.js : \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getPageModels , \n     }   from   'api/pageModels' ; \n     ... \n\n     // thunks \n\n     export   const  fetchPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getPageModels ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( data )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addPageModels ( data . payload ) ) ; \n               resolve ( ) ; \n             }   else   { \n               dispatch ( addErrors ( data . errors . map ( err   =>  err . message ) ) ) ; \n               resolve ( ) ; \n             } \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Now with two exports, it is safe to remove the\n eslint-disable-next-line  comment on line 5 of both files. \n changing the mapDispatchToProps in the containers \n Next, in order to pass the newly created thunk to both List components,\nwe’ll update the containers accordingly, as: \n src/ui/userList/ListContainer.js \n      ... \n     import   {  fetchUsers  }   from   'state/apps/testing/userList/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchUsers ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n \n src/ui/pageModels/ListContainer.js \n      ... \n     import   {  fetchPageModels  }   from   'state/apps/testing/pageModels/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchPageModels ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n Updating the List components \n Both List components were simple components with only a  render  method,\ntherefore could be declared as simple constants. \n Next we will fetch data during the  componentDidMount  life cycle event\nwhich will require we turn the constant into a class on top of changing\nthe PropTypes to add the new fetch method passed down to the component. \n src/ui/userList/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . username } < / td > \n             < td > { row . registration } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > username < / td > \n                   < td > registration < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n \n src/ui/pageModels/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . code } < / td > \n             < td > { row . descr } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > code < / td > \n                   < td > descr < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n clear the default value of the reducer \n Now we should be fetching data from the server, therefore we can safely\nmake the list key in the  defaultState  object an empty array: \n src/state/apps/testing/userList/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n \n src/state/apps/testing/pageModels/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n adding additional dependencies \n It may be necessary to set additional dependencies for your project. If\nthe need arises, it is important to remember a few rules: \n Only actual dependencies that are not already included in  app-builder \ncan be added as pure dependencies. Every other dependency must either be\na  devDependency  or  peerDependency . \n If you are not careful you may end up with duplicated dependencies that\n will  result in errors manifesting themselves when running the app\ninside App Builder. \n running the app in integrated mode within App Builder \n After running  npm install  in the App Builder, the user can run the\n npm run app-install <appId>  command to install the app. \n This command will trigger a download of the app from npm and the\ninstallation of its component within App Builder. After the installation\nprocess is complete, it will be possible to either  npm start  or\n npm build  App Builder. \n To install a dev app, like the one developed in this tutorial which have\nnot been previously published on npm, you will need to use additional\nflags and will have to run a few additional commands. \n Before running the Install command  make sure that you have\nuninstalled all existing peer and dev dependencies to avoid collision\nwith app builder. To do so, from the app builder app directory\n( testing , in this tutorial) just run in the correct order the\nfollowing commands: \n npm run babel \n npm i --only=production \n The first will create the dist directory that will be needed by App\nBuilder while the second one will uninstall anything but production\ndependencies. \n Next, from the App Builder directory, run the install command with these\nadditional flags: \n \n \n -d  specify the relative path where the app is installed. When\nusing this flag the appId should be the normalized app name, without\nthe  @entando/  prefix. \n \n \n -p  specify the package name if it is different from the appId \n \n \n to use flags you will have to use the double dash in the command: \n npm run app-install —  cms -d ../testing -p @entando/testing \n the value in the  -p  flag should always match the actual name of the\napp that is going to be installed inside App Builder . You can check\nyour app name inside the  package.json  file of your app. \n If you experience problems after running the build command delete the\n node_modules  directory before running the second command. \n"},{title:"Business Objective",frontmatter:{},regularPath:"/next/tutorials/customize-the-platform/pda-tutorial.html",relativePath:"next/tutorials/customize-the-platform/pda-tutorial.md",key:"v-0b5b2676",path:"/next/tutorials/customize-the-platform/pda-tutorial.html",headers:[{level:2,title:"Micro Frontend",slug:"micro-frontend"},{level:2,title:"Process Automation Manager (PAM)",slug:"process-automation-manager-pam"},{level:2,title:"Business Process Modeling Notation (bpmn)",slug:"business-process-modeling-notation-bpmn"},{level:2,title:"Decision Model and Notation (dmn)",slug:"decision-model-and-notation-dmn"},{level:2,title:"Back End for Front End (BFF)",slug:"back-end-for-front-end-bff"},{level:2,title:"Task List",slug:"task-list"},{level:3,title:"PAM Implementation",slug:"pam-implementation"},{level:2,title:"Task Details",slug:"task-details"},{level:3,title:"PAM Implementation",slug:"pam-implementation-2"},{level:2,title:"Task Comments",slug:"task-comments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-3"},{level:2,title:"Task Forms",slug:"task-forms"},{level:3,title:"PAM Implementation",slug:"pam-implementation-4"},{level:2,title:"Attachments",slug:"attachments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-5"},{level:2,title:"New Process Form",slug:"new-process-form"},{level:2,title:"Summary Card",slug:"summary-card"},{level:3,title:"PAM Implementation",slug:"pam-implementation-6"},{level:2,title:"Totals Over Time",slug:"totals-over-time"},{level:3,title:"PAM Implementation",slug:"pam-implementation-7"},{level:2,title:"Styling",slug:"styling"},{level:2,title:"Implementing a New Engine or Integrating a New Task Source",slug:"implementing-a-new-engine-or-integrating-a-new-task-source"},{level:2,title:"Creating a new PDA MFE",slug:"creating-a-new-pda-mfe"},{level:2,title:"Communication between MFEs",slug:"communication-between-mfes"},{level:2,title:"Micro Frontend Overview",slug:"micro-frontend-overview"},{level:3,title:"Task forms",slug:"task-forms-2"},{level:2,title:"Widgets",slug:"widgets"},{level:2,title:"Building From source",slug:"building-from-source"},{level:2,title:"Code Style",slug:"code-style"},{level:2,title:"Sonar",slug:"sonar"}],lastUpdated:"11/9/2020, 2:49:22 PM",content:' Business Objective \n The Entando Process Driven Applications plugin is built to provide a\nrich and full featured user experience to allow for the management and\ncompletion of business processes and automation. The UX is delivered a\ngeneral purpose UX layer built using micro frontends that can be\nutilized for any business process or task engine. Customers drive the UX\nlayer by utilizing a pre-developed Entando integration or by\nimplementing a set of interfaces on the server side. The backend is a\nSpring Boot microservice that provides a pluggable interface allowing\nfor the injection of any underlying process or automation toolkit. The\ninterfaces and steps for creating a new PDA backend implementation are\nprovided below. This document provides an overview of the Entando\nProcess Driven Apps (PDA) plugin. The initial section covers the\nbusiness functionality and user facing micro frontends. The second\nsection covers the architecture and the points of extension for the PDA\nplugin. The third provides a detailed technical overview for developers\nto add new functionality to a PDA implementation. \n Terminology \n Micro Frontend \n A Micro frontend architecture is an approach to developing web\napplication as a composition of small frontend apps. Instead of writing\na large monolith frontend application, the application is broken down\ninto domain specific micro frontends, which are self-contained and can\nbe developed and deployed independently. \n Process Automation Manager (PAM) \n A business process automation engine built and maintained by Red Hat \n Business Process Modeling Notation (bpmn) \n Business Process Model and Notation (BPMN) is a graphical representation\nfor specifying business processes in a business process model. \n Decision Model and Notation (dmn) \n Decision Model and Notation is a standard published by the Object\nManagement Group. It is a standard approach for describing and modeling\nrepeatable decisions within organizations to ensure that decision models\nare interchangeable across organizations. \n Back End for Front End (BFF) \n A microservice architecture allows teams to iterate quickly and to\ndevelop technology to scale rapidly. The Backend for Frontend (BFF)\narchitecture is a type of pattern built with microservices. The key\ncomponent of this pattern is an application that connects the front-end\nof your application with the backend. This BFF Code Pattern will help\nyou build that component according to IBM’s best practices. \n PDA Micro Frontends \n This section provides an overview of each of the micro frontends (MFE)\nthat are available as part of the Entando PDA plugin. In cases below\nwhere there are details specific to the PAM implementation they are\nprovided for that MFE. When extending the integration layer to other\nengines or custom implementations it will be up to the integrating team\nto define behavior and datasource for each MFE. \n Task List \n The task list MFE provides a user with a list of visible tasks that are\neither assigned to that user or that are potentially ownable by that\nuser. In the default implementation the visible tasks are limited to a\nsingle process instance. At configuration time the application designer\nis given the option to select a set of columns that will be visible in\nthe task list for that page. \n PAM Implementation \n The default PAM implementation makes the top level task fields available\nin the task list for selection. It is possible to fetch task and process\nvariables for rendering in the task list but these values are excluded\nby default due to the additional API call overhead required. \n Task Details \n The task details MFE renders detailed information about a given task.\nThe task details widget is intended to give the final user processing a\ntask the information necessary to complete the task at hand. The task\ndetails are rendered in a read only grid. See the styling section below\nfor changing and customizing the layout. \n PAM Implementation \n The PAM integration renders task variables in the task details widget. \n Task Comments \n The task comments MFE gives the user the ability to view notes attached\nto a given task and to add new notes to a task. \n PAM Implementation \n The PAM implementation reads and publishes notes to the comments\nendpoint \n Task Forms \n The task form implementation renders a form specific to a task and gives\nthe user the ability to complete that form. The form implementation is a\nwrapper around a JSON schema that describes the layout, style and\ncontent of the form. It is up to the backend implementation to transform\nto the schema and default ux layout needed to render the form. See the\ntechnical documentation below for more on the JSON schema based\nimplementation. \n PAM Implementation \n The PAM implementation of forms depends on the presence of a form\ndefinition being present on the PAM task. The Entando PAM engine\nimplementation transforms from the PAM format to the JSON schema to\nrender the form. And it transforms the API format back to the PAM format\nbased on the form definition in PAM. There are some limitations on form\ncustomization due to the format required to return data to PAM. See the\nforms section in the technical documentation for more information. \n Attachments \n The attachments MFE gives the user to view documents attached to a\ntask/case/process and to add new documents to a task/case/process. \n PAM Implementation \n The PAM implementation posts the documents to the PAM endpoints for\nstorage. Future features will include using Entando document storage for\nstoring documents and a pluggable document management interface. \n New Process Form \n The new process form renders a form that allows the final user to\nprovide the information necessary to instantiate a new business process\ninstance. The technology for generating the process form is the same as\nthe JSON schema definition used for task forms. === PAM Implementation\nThe PAM implementation depends on a form definition being attached to\nthe process definition. Entando transforms the PAM representation into a\nJSON schema form that can be rendered to the final user. \n Summary Card \n The summary card MFE provides a view into aggregate data for the process\nimplementation. The rendered information includes a total value, a trend\nvalue, and a selector for timeframe. The summary card allows the\napplication developer to select a request for rendering the requested\ninformation which maps to a call in the underlying engine to provide the\nsummarized data. \n PAM Implementation \n The PAM implementation of the summary card widget relies on the PAM\ncustom query functionality. The PAM PDA engine exposes configuration\nthat allows users/developers to define a custom query in a config file\nthat will be executed to render the summary card. This implementation\nallows the data rendered on the summary cards to be changed via\nconfiguration. In the application there is a properties file that allows\nthe implementer to provide a custom query for each of the cards. \n Totals Over Time \n The totals over time MFE provides a dual axis line/bar graph providing\ntrend information about the process environment. The MFE also provides\nthree summary values for comparison over the same time period. \n PAM Implementation \n The PAM implementation of the totals over time MFE utilizes custom\nqueries to fetch the summary data rendered in the chart. The queries\nused in the implementation are defined in configuration files in the MFE\nand can be updated to render data specific to a given implementation. \n Customizing the Process Driven Application \n Styling \n The Entando PDA MFEs are styled via a material UI theme. That theme can\nbe downloaded and updated here:\n https://github.com/entando/frontend-libraries/tree/master/packages/entando-ui \n Implementing a New Engine or Integrating a New Task Source \n Implementing a new Engine for Process Driven Applications means to\ncreate a new Java Project and implement the interfaces defined in the\npda-core-engine project. So, the new project should include the\npda-core-engine as a dependency. To see an implementation in action,\ntake a look at the pda-redhatpam-engine project, which implements the\nRed Hat PAM engine integration. After the engine is implemented, the JAR\nfile resulting from the implementation should be available in the\nclasspath for entando-process-driven-plugin, which is the project that\nis ultimately executed and exposes the Rest APIs for the frontend\napplication. One way to do that is by publishing the engine\nimplementation to a Maven repository and adding it as a dependency to\nthe entando-process-driven-plugin project. Below are the descriptions of\nthe key classes and interfaces in the pda-core-engine project that need\nto be inherited or implemented when creating a new engine\nimplementation: \n \n \n Engine: This class represents a BPM engine and exposes the services\nthat are available for that specific implementation. It is intended\nto be inherited and the subclass should provide the real\nimplementation for each service by calling the superclass\nconstructor with the service implementations as arguments. If any\nservice is not supported, a null value should be passed to the\ncorresponding constructor argument. The engine can provide\nimplementations for the the following service interfaces: \n \n \n TaskService: defines service methods for task retrieval from the\nBPM engine. \n \n \n TaskDefinitionService: defines service methods related to task\ndefinition. A task definition specifies which fields or columns\nare available for all task instances. \n \n \n TaskCommentService: defines service methods related to task\ncomment manipulation. It should be implemented if the task\ncomment is supported by the engine. \n \n \n TaskAttachmentService: defines service methods to operate on\ntask attachments. It should be implemented if the engine\nsupports file attachment on the task. \n \n \n TaskFormService: defines service methods for task form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n TaskLifecycleService: defines service methods related to the\ntask lifecycle. The lifecycle operations move the task from one\nstate to another. \n \n \n TaskLifecycleBulkService: defines methods for bulk lifecycle\noperations. Like the TaskLifecycleService, methods here move the\ntask from one state to another, but this interface works with\nmultiple tasks at a time. \n \n \n ProcessService: defines service methods for process definitions\noperations. \n \n \n ProcessFormService: defines service methods for process form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n GroupService: define service methods related to groups from the\nBPM engine. \n Creating a new PDA MFE \n There are no limitations on the stack that could be used to create PDA\nMFEs. Custom Elements are a great way to hide implementation details\nwhile providing a neutral interface to others. To create a simple PDA\nMFE, implement your solution using technologies you are familiar with\nand wrap it in a custom element. Build your solution with a custom\nelement and upload the built files (Settings > File Browser) in\n/public/ folder. Go to  UX Pattern > Widget  section of the admin panel\nand press “Add” to add a new widget. Enter widget code, titles, select\ngroup (for free access to everybody, select “Free Access”), and fill the\nCustom UI: \n <#assign wp=JspTaglibs["/aps-core"]>\n<script src="<@wp.resourceURL />path/from/static/bundle.js"><\/script>\n<your-custom-element parameter=”value” />\n \n <#assign wp=JspTaglibs["/aps-core"]>  - provides access to wp variable\nthat is used to get resource URL. After you add the widget, go to the\npage tree, select a page where you would like to use the widget and\nconfigure it. Drag and drop the widget into a frame and publish the\npage. \n Communication between MFEs \n Communication between MFEs can be achieved using Custom Events. Each\nwidget can define events that it will emit and register to events that\nare important to it. \n const createWidgetEvent = eventType => {\n  return payload => {\n    const widgetEvent = new CustomEvent(eventType, { payload });\n    window.dispatchEvent(widgetEvent);\n  };\n};\n\n\nconst subscribeToWidgetEvent = (eventType, eventHandler) => {\n  window.addEventListener(eventType, eventHandler);\n  return () => {\n    window.removeEventListener(eventType, eventHandler);\n  };\n};\n \n Custom element then creates the events it emits and registers to the\nevents that it wants to react to \n constructor(props) {\n  super(props);\n\n  // other code\n\n  this.onClickSubmit = createWidgetEvent(‘myWidget.onSubmit’);\n}\n\nconnectedCallback() {\n\n  // other code\n\n  this.unsubscribeFromWidgetEvents = subscribeToWidgetEvent(\n    ‘otherWidget.onClickClear’,\n    () => {\n      // callback function when otherWidget fires the onClickClear custom event\n    }\n  }\n}\n Technical Documentation \n Micro Frontend Overview \n Task forms \n Widgets containing form (e.g., task completion form widget) use JSON\nschema to dynamically create forms. Widget implementation uses\nreact-jsonshema-form library that converts forms’ JSON schemas into\nReact components. Our initial implementation uses Material UI components\nvia Material UI theme library rjsf-material-ui as baseline and has\nEntando specific templates, widgets and fields (which are\nreact-jsonshema-form terms for parts of forms). In this section you will\nlearn about basic setup of the form, but if you would like to learn\nmore, please refer to react-jsonshema-form documentation. Themed JSON\nform is created using the withTheme() method from the\nreact-jsonschema-form package \n import { withTheme } from \'react-jsonschema-form\';\nimport { Theme as MuiRJSForm } from \'rjsf-material-ui\';\n\nconst JSONForm = props => {\n\n  const ThemedForm = withTheme(MuiRJSForm);\n\n  // ...\n\n  return (\n    <ThemedForm\n    schema={formSchema}\n    uiSchema={uiSchema}\n    {...customTemplates}\n    widgets={customWidgets}\n    formData={formData}\n    onSubmit={e => onSubmitForm(e)}\n    >\n  );\n};\n\nexport default JSONForm;\n \n For JSON Form to work, the form schema is mandatory. It’s a JSON\ndefinition of the form’s structure. Users can also provide form data via\nformData variable, which should follow the structure of JSON schema; and\nUI schema using uiSchema variable, which allows users to customise the\nform’s UI (components, rules, types, etc.) To test JSON schema, UI\nschema and form data, you can use react-jsonschema-form sandbox\nenvironment. Custom Entando templates, widgets, and fields provide a\npossibility to customise the layout of the form using Grid components.\nTo specify what area a field or subform should fill, users can provide\nsize parameter in UI schema’s ui:options object. Size refers to Material\nUI’s grid column widths (Material UI documentation) where the area the\nfrom can take up is divided into 12 columns and value 12 (a default\nvalue if size is not provided) means the field or subform should take up\nall 12 columns. That means that size should be a value from 1 to 12. If\ntwo fields that are next to each other have size values 8 and 4\nrespectively - they will fit into one row, first field being 2 times\nwider than the second field. User can also provide innerSize parameter\nto size the input inside the field. This helps with formatting - if user\nwants a two column layout and have smaller input fields inside these\ncolumns. Multicolumn layout can also be achieved using\ngenerateColumnedOFT(columnSize) functionality, basically providing the\ndefault columnSize to the created form. generateColumnedOFT returns an\nObjectFieldTemplate that is used as a template for all object fields\n(fields that contain properties inside of them). To help us understand\nthe mapping between JSON schema and UI schema lets define an example\nschema: \n {\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "$id": "http://entando.org/schemas/pda-form.json",\n  "title": "Mortgage Application Form",\n  "type": "object",\n  "properties": {\n    "Application": {\n      "title": "Application",\n    "type": "object",\n    "required": [],\n    "properties": {\n        "mortgageamount": {\n          "type": "integer",\n          "title": "Mortgage amount",\n          "description": "Mortgage amount"\n        },\n        "downpayment": {\n          "type": "integer",\n          "title": "Down Payment",\n          "description": "Down Payment"\n        },\n        "applicant": {\n          "title": "Applicant",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "name": {\n              "type": "string",\n              "title": "Name",\n              "description": "Name",\n              "maxLength": 100\n            },\n            "annualincome": {\n              "type": "integer",\n              "title": "Annual Income",\n              "description": "Annual Income"\n            }\n          }\n        },\n        "property": {\n          "title": "Property",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "age": {\n              "type": "integer",\n              "title": "Age of property",\n              "description": "Age of property"\n            },\n            "address": {\n              "type": "string",\n              "title": "Address of property",\n              "description": "Address of property",\n              "maxLength": 100\n               }\n          }\n        }\n      }\n    },\n    "inlimit": {\n      "type": "boolean",\n    "title": "Is mortgage application in limit?"\n    }\n  }\n}\n \n From this JSON (you can copy & paste it into the react-jsonschema-form\nsandbox) we can see that there is a main form with a title “Mortgage\nApplication Form”. Root “Mortgage Application Form” form has two\nproperties - one is a subform  Application  and the second one is just a\ncheckbox field (field ID is inlimit). Application subform contains 2\nfields: Mortgage amount (field ID is mortgageamount) and Down Payment\n(field ID is downpayment); and two subforms - Applicant (field ID is\napplicant) and Property (field ID is property). Applicant subform\ncontains 2 fields - Name (field ID is name) and Annual Income (field ID\nis annualincome). Property subform contains 2 fields - Age of property\n(field ID is age) and Address of property (field ID is address) By\ndefault (without providing UI schema) they are all listed one field per\nrow. To use Entando’s implementation of Grid layout, users have to\nprovide UI schema with details about each field. For example, if we\nwould like to have a layout that looks like this (fields are marked\n [ field name ] ): \n +----------------------------------------------------------------------------+\n| Mortgage Application Form                                                  |\n+----------------------------------------------------------------------------+\n| Application                                                                |\n+----------------------------------+-----------------------------------------+\n| [Mortgage amount]                | [Down Payment]                          |\n+----------------------------------+-----------------+-----------------------+\n| Applicant                                          | Property              |\n+----------------------------------+-----------------+-----------------------+\n| [Name]                           | [Annual Income] | [Age of property]     |\n+----------------------------------+-----------------+-----------------------+\n|                                                    | [Address of property] |\n+----------------------------------------------------+-----------------------+\n \n To set up the UI schema you have to define each field you want to\ncustomise by addressing using the field IDs - to add options to\nApplicant’s Name field, you will have to create an object tree going\nfrom root object through Application —> Applicant —> Name (using IDs\nit’s Application.applicant.name). UI schema for the table layout defined\nabove would look like this: \n {\n  Application: {\n    \'ui:options\': {\n      size: 12, // <-- this value is not mandatory as size is 12 columns-wide by default\n    },\n    mortgageamount: {\n      \'ui:disabled\': true, // <-- user can define fields disabled at UI schema level\n      \'ui:options\': {\n        size: 6, // <-- Mortgage amount field should take up half of the row\n      },\n    },\n    downpayment: {\n      \'ui:options\': {\n        size: 4, // <-- Down payment field should take up the other half of the row\n      },\n    },\n    applicant: {\n      \'ui:options\': {\n        size: 8, // <-- Applicant subform should take up 8 out of 12 columns\n      },\n      name: {\n        \'ui:options\': {\n          size: 8, // <-- Applicant name field should take up 8 columns in the 8 columns that Applicant subform occupies\n        },\n      },\n      annualincome: {\n        \'ui:options\': {\n          size: 4, // <-- Annual Income field taking up the remaining 4 columns\n        },\n      },\n    },\n    property: {\n      \'ui:options\': {\n        size: 4, // <-- Property subform should take up the remaining 4 out of 12 columns\n      },\n      // note that property\'s fields are not mentioned - defaulting them to 12 columns in are that is available to them\n    },\n  },\n};\n\nAs Material UI components are used for field templates, there might be a need to pass some Material UI options into the field. You can do that by adding muiProps object to the ui:options.\nFor example, if you would like to make the Down payment field resizable, you can add multiline: true to muiProps option. If you want to make the field take up multiple rows by default, add rows and rowsMax fields. The latter limits how many rows should be added until the scroll bar is shown.\ndownpayment: {\n  \'ui:options\': {\n    size: 4,\n    muiProps: {\n      multiline: true,\n      rows: 2,\n      rowsMax: 4\n    }\n  }\n}\n Widgets \n Different types of widgets can be applied by passing the type via\n"ui:widget". Property tells the form which UI widget should be used to\nrender a field. You can read about react-jsonschema-form supported\nwidgets here. \n Building From source \n Reference the component projects for instructions to build from source.\n https://github.com/entando/entando-process-driven-plugin \n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n https://github.com/entando/pda-redhatpam-engine \n https://github.com/entando/pda-core-engine \n Code Style \n See:  https://github.com/entando/entando-code-style \n Sonar \n https://sonarcloud.io/organizations/entando/projects \n'},{title:"Backing Up and Restoring an Entando Application",frontmatter:{redirectFrom:"/next/tutorials/customize-the-platform/app-engine/building-prepackaged-image.html"},regularPath:"/next/tutorials/devops/backing-up-and-restoring-your-environment.html",relativePath:"next/tutorials/devops/backing-up-and-restoring-your-environment.md",key:"v-424dcb66",path:"/next/tutorials/devops/backing-up-and-restoring-your-environment.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Create a Backup",slug:"create-a-backup"},{level:2,title:"Restore a Backup",slug:"restore-a-backup"}],lastUpdated:"3/19/2021, 5:02:52 AM",content:' Backing Up and Restoring an Entando Application \n Prerequisites \n \n \n Java 11 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n \n \n This tutorial will show you how you can use an Entando application that\nyou have built as a launching point for creating new applications. \n Create a Backup \n This step requires using a running Entando environment to take an application backup.\nThe output of this step is a local directory with the files (database and static assets) you can use to restore the application later. \n \n \n Log into  App Builder \n \n \n Go to  Configuration → Database \n \n \n Click on  Create A Backup  and wait for the process to complete. All of the static assets and database backups are persisted to a PVC in /entando-data on the server pod. \n \n \n Transfer the files from the server-container. The details will vary depending on your kubernetes environment. \n \n \n \n \n \n kubectl \n OpenShift \n \n \n \n \n kubectl cp <pod>:<path> <local-path> \n oc rsync <pod>:<path> <localPath> \n \n \n e.g. kubectl cp quickstart-server-deployment-7b8c699599-f84zq:/entando-data backup \n e.g. oc rsync app-entando-server-deployment-67fd5b9954-s72mb:/entando-data \n \n \n \n \n You should see 3 directories -  databases ,  protected , and  resources .\nThe  protected  directory contains the timestamped backup you triggered from the  App Builder . \n Restore a Backup \n In this tutorial you’ll create a custom copy of an Entando Application, install the\nbackup files, build a Docker image from the updated app, and deploy it as a new application. Steps 3 and 4 can be skipped if you simply want to create a custom application. \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the  entando-de-app  you just cloned: \n cd entando-de-app\n \n \n \n Take the backup file and unzip it in a location of your choice. \n \n \n This zip contains all of the assets, content, and metadata\nneeded to launch an Entando application. We are going to package\nthe static assets and database backup into a Docker image. \n \n \n Entando will automatically instantiate and populate the app from\nthe most recent backup \n \n \n \n \n Move the resources and protected folders from your Entando backup into your\n entando-de-app  application under  src/main/webapp  replacing any content that is\nalready there. \n \n \n Build a docker image from the core app replacing the value of the tag in the  -t   with the tag you want to use for your image. \n mvn clean package\ndocker build . -f Dockerfile.wildfly -t  / : \n \n \n Create a repository on your docker account to house your new\napplication \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:<YOUR-VERSION>\n \n \n \n Now we need to generate a new application for deployment to\nKubernetes using the helm chart \n \n \n If you have an output from helm from before you can re-use it\nand just apply the changes to the config map. In this case skip to step 12. \n \n \n Or you can re-run helm and change the output \n \n \n \n \n Re-run the helm command for your environment \n \n \n Open the output yaml file from the helm command in the text editor\nof your choice \n \n For example:  vi training-alpha.yaml \n \n \n \n In that file look for the  ConfigMap \n \n \n The config map defines all of the images that are available as\npart of the deployment. They aren’t all used concurrently. \n \n \n You can also view this config map in  kubernetes/OpenShift \n \n \n \n \n Now you need to update the deployment to use your customized Wildfly\nimage. Find  entando-de-app-wildfly  in the config map \n \n Note that we are changing the de-app but you could create a\ncustom version of any of the included images \n \n \n \n Change the version to match the version you used for your image \n \n \n Change the "organization" to the name of your main image repository\norganization and if you aren’t using docker.io (DockerHub) then\nchange the registry as well. \n \n \n Save the file \n \n \n Follow the deployment steps you went through when you originally\ndeployed your Entando application to your Kubernetes instance \n \n \n Once deployed go to the  App Builder  in your app \n \n \n Click  Go To Homepage  and you should see your restored application. \n \n \n'},{title:"Building a Docker Image for the Entando Core",frontmatter:{redirectFrom:"/next/tutorials/customize-the-platform/app-engine/build-core-image.html"},regularPath:"/next/tutorials/devops/build-core-image.html",relativePath:"next/tutorials/devops/build-core-image.md",key:"v-5ff106e2",path:"/next/tutorials/devops/build-core-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"3/19/2021, 5:02:52 AM",content:" Building a Docker Image for the Entando Core \n Prerequisites \n \n \n Java 11 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will take you through the basic steps to create a docker\nimage from an Entando core application. A more detailed guide with\nadditional commands and configuration can be found here: \n https://github.com/entando-k8s/entando-de-app \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Build a docker image from the core app replacing the value of the tag in the  -t   with the tag you want to use for your image. \n mvn clean package\ndocker build . -f Dockerfile.wildfly -t <YOUR-USER>/<YOUR-REPO-NAME>:<YOUR-VERSION>\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:<YOUR-VERSION>\n \n \n \n"},{title:"Tutorial: Selecting the default databases",frontmatter:{},regularPath:"/next/tutorials/devops/default-database.html",relativePath:"next/tutorials/devops/default-database.md",key:"v-ad8a3fa8",path:"/next/tutorials/devops/default-database.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"6/30/2020, 3:00:04 PM",content:" Tutorial: Selecting the default databases \n Overview \n This document provides a guide to changing an Entando environment by selecting the default databases used.\nSee  External Database  to connect to a database outside of the cluster. \n Prerequisites \n \n An environment to install your Entando applicaiton \n Network access from your Kubernetes cluster to your database \n Tutorial \n If needed you can set the desired component to use a specific DBMS by updating the Helm-generated yaml file (e.g. 'entando.yaml' from  Getting Started  as follows: \n \n open the chosen file and search for  EntandoCompositeApp  custom resource \n identify the component to update in the related list \n update the  spec.dbms  property with the desired value (you can specify different DBMS for different components) \n \n Repeat previous steps for all components you need to change used DBMS on. \n Valid values for  spec.dbms  property are:  none ,  postgresql ,  mysql ,  oracle . \n none  value will result in using an embedded database with in-file persistence strategy. \n Please note that using embedded databases into distributed systems forces to have only 1 replica per pod.\nThis happens because the volume claimed by each replica points to the same files,\nso the first container locking the files will prevent next replicas to obtain access to the DB files.\nNote that this affects also deployments rolling updates \n If you need to update your deployment, there is a known workaround consisting in setting the replicas number to 0, waiting for pod shutdown completion, update the deployment yaml file, then updating again to 1 the replicas value. In this way, the newly created containers will be able to startup correctly and access the embedded database files on the filesystem. \n These considerations lead us to discourage embedded database use into production environments. \n"},{title:"Caching and Clustering",frontmatter:{},regularPath:"/next/tutorials/devops/clustering-caching/caching-and-clustering.html",relativePath:"next/tutorials/devops/clustering-caching/caching-and-clustering.md",key:"v-4c36c0d3",path:"/next/tutorials/devops/clustering-caching/caching-and-clustering.html",headers:[{level:2,title:"Clustering",slug:"clustering"},{level:3,title:"Prerequisites",slug:"prerequisites"},{level:3,title:"Creating a Clustered App Instance",slug:"creating-a-clustered-app-instance"},{level:3,title:"Validating the Clustered Instances",slug:"validating-the-clustered-instances"},{level:3,title:"Caching Validation",slug:"caching-validation"},{level:2,title:"Configuring and Deploying with Redis",slug:"configuring-and-deploying-with-redis"},{level:3,title:"Deploy Redis to Kubernetes",slug:"deploy-redis-to-kubernetes"},{level:3,title:"Configure implementation",slug:"configure-implementation"},{level:2,title:"Appendix A - Creating Separately Deployed App Engine Instances",slug:"appendix-a-creating-separately-deployed-app-engine-instances"}],lastUpdated:"1/7/2021, 2:01:33 PM",content:' Caching and Clustering \n The tutorials below cover the basic steps to setup and validate a clustered instance of the Entando App Engine. \n \n NOTE \n When building your deployment architecture it is important to review your goals, hardware, networking, and application specific setup and to optimize your App Engine deployment for your environment. None of the configurations or deployments below will address every type of application or every type of deployment. The configuration and testing examples below can be used as building blocks to create a deployment architecture that works for your application. \n Clustering \n This tutorial reviews setting up a clustered Entando App Engine using the default Infinispan Library Mode deployment that ships with the quickstart App Engine in the  entando-de-app . The goal of the tutorial is to deploy a clustered instance of the App Engine and verify that we have a high availability and scalable deployment of the application. \n Prerequisites \n \n An existing deployment of an Entando App or the ability to create a new one\n \n If you haven\'t created a deployment yet or don\'t have a yaml file for an Entando deployment follow the quickstart  here . \n \n \n The Entando deployment must use an RDBMS. Clustered instances will not work correctly with in memory databases and a  dbms: none  configuration. \n Creating a Clustered App Instance \n \n Create an Entando deployment via the helm template or edit an existing deployment yaml file. \n Edit the deployment and find the  EntandoApp  in the yaml file (towards the bottom).\n \n If you\'re editing an existing deployment you can use  kubectl edit <deployment>  or you can edit the deployment prior to kicking off the installation. \n \n \n \n - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n \n \n In the  EntandoApp  change the number of replicas to 2 (or more as desired) \n Save the file \n Deploy the application or wait for the application to update if editing an existing deployment \n Run  kubectl get pods -n <your namespace>  to view the pods in your deployment \n You should have two  server-deployment  pods in your namespace with three containers each. See the screenshot below: \n \n \n \n Finally, you can look in the logs of the  server-container  in either pod and you will see logging related to different instance joining the cluster and balancing the data between the instances. See the screenshot for an example. Your actual logs will vary: \n \n \n The tutorials below will take you through validating and testing the clustered and cached instances. \n \n NOTE \n If you are on OpenShift you can use the Scale Up arrows and other settings available in the OpenShift console if you prefer \n Validating the Clustered Instances \n This is an advanced tutorial and is not required or recommended for most deployment scenarios or users. \n This tutorial will walk you through steps to validate that the clustered instances are working in your environment and that you have created a high availability deployment. There are many ways to validate your clustering. \n \n Complete the  creating a clustered instance tutorial  above or have an existing clustered Entando App instance available for testing \n Get the URL for your  entando-de-app  with  kubectl get ingress -n <your namespace> \n Open the URL in a browser of your choice and ensure that the application is working \n Open a new browser window in an incognito or private browsing mode.  do not navigate to the app\n \n The only reason for private mode is to ensure that no data is cached and you\'re receiving a copy of the running application \n \n \n In the next steps you\'ll delete a pod in your cluster and verify that your application is still getting served. Kubernetes will automatically restore the desired number of replicas so you\'ll need to perform the validation test before the new replica is launched. In most environments this will be around one minute but it will vary. \n Delete one of the server deployment pods in your clustered instances with  kubectl delete <pod-name> -n <your namespace> \n \n There are other ways to do this. You could also shell into the server-container and manually kill the running app process with  kill -9 357 . \n If you wanted to test at the hardware level you could manually terminate a node in your cluster (ensuring that the pods are scheduled to different nodes) \n \n \n In your private/incognito browser window open the URL to your  entando-de-app \n See that the application continues to render while the pod you deleted is no longer present \n Wait for Kubernetes to restore your deleted pod \n Check that the application continues to render after the pods are restored \n Caching Validation \n Validating the shared cache can be done in a similar fashion to the clustered instance validation. The high level steps are: \n \n Deploy a clustered instance (see  creating a clustered instance tutorial ) \n Create data using the app builder (pages, page templates, content etc.) using the external route for the application \n Take note in the logs of which instance processed the request \n Terminate that instance \n Fetch the data created and ensure that the recently created data is returned \n \n Another option for validating the shared cache involves creating a custom deployment with two distinct Entando App instances. In this scenario you would not use the  replicas  option in the deployment. This has the benefit of keeping all of the instances running and validating the configuration by creating distinct pods for the Entando App Engine so that each instance can be exposed on endpoints separately. \n The high level steps for this setup are reviewed in  Appendix A \n Configuring and Deploying with Redis \n This tutorial covers deploying an Entando App Engine instance using Redis as a cache for data served by the app engine. For more information on the cache\nconfiguration for the App Engine checkout the  reference documentation \n Deploy Redis to Kubernetes \n \n Create the redis deployment and expose the endpoints \n \n kubectl create deployment redis –-image = redis:6\n \n kubectl expose replicaset.apps/redis-687488bdd4 --port = 6379  --target-port = 6379  -n  < your namespace > \n \n \n Install the Redis CLI for your environment per  https://redis.io/topics/rediscli \n Get the IP for your Redis deployment \n \n kubectl get  service  -n  < your namespace > \n \n \n Validate your deployment \n \n Should respond PONG \n redis-cli -h  10.43 .99.198 -p  6379   ping \n \n Should increment each time \n redis-cli -h  10.43 .99.198 -p  6379  incr mycounter\n Configure implementation \n \n Use git to clone the  entando-de-app  repository \n \n git  clone https://github.com/entando-k8s/entando-de-app\n \n \n Fetch the tags and checkout the release tag and create a branch for your customization \n \n git  fetch --tags\n \n git  checkout tags/v6.3.22 -b  6.3 -redis\n \n \n Open the pom.xml file of the  entando-de-app \n Remove the Infinispan dependencies from the pom \n \n \x3c!-- infinispan --\x3e\n <dependency>\n     <groupId>org.infinispan</groupId>\n     <artifactId>infinispan-core</artifactId>\n     <version>9.4.8.Final</version>\n </dependency>\n <dependency>\n     <groupId>org.infinispan</groupId>\n     <artifactId>infinispan-commons</artifactId>\n     <version>9.4.8.Final</version>\n </dependency>\n \n \n Add the Redis caching plugin to the pom \n \n <dependency>\n    <groupId>org.entando.entando.plugins</groupId>\n    <artifactId>entando-plugin-jpredis</artifactId>\n    <type>war</type>\n</dependency>\n \n \n Save the pom \n Build and push a custom image for the  entando-de-app  following  these steps \n Create or download a deployment file. For example, use the  entando.yaml \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/entando.yaml\n \n \n Update the image in the deployment yaml file to point to your custom  entando-de-app  image with Redis. The line to change is in the  ConfigMap  and is noted below \n \n entando-de-app-wildfly: >-\n    {"version":"6.3.10","executable-type":"jvm","registry":"docker.io","organization":"entando"}\n \n \n Add environment variables to the  EntandoApp  in the deployment yaml file for the Redis address and Redis password for your deployed Redis instance. The variables to create are: \n \n REDIS_ADDRESS\n \n REDIS_PASSWORD\n \n For example, \n \n NOTE \n This example uses a secret for the  REDIS_PASSWORD  which is recommended. You can also hardcode the password in the yaml for testing, however, creating passwords in clear text in your deployment files is not recommended. Create and use a secret for the password as a best practice. \n \n This is a reference example for the EntandoCompositeApp and is not a complete deployment. Utilize this as an example to create your configuration in a complete deployment. \n kind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "quickstart-apps"\n  namespace: test\nentandoStatus:\n  serverStatuses: {}\n  entandoDeploymentPhase: "requested"\nspec:\n  components:\n    - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart1"\n      spec:\n        dbms: none\n        replicas: 2\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: quickstart1.test.dynu.net\n        environmentVariables:\n          - name: REDIS_ADDRESS\n            value: <your redis URI. For example redis://localhost:6379)\n          - name: REDIS_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-redis-secret\n                optional: false\n        ....\n Appendix A - Creating Separately Deployed App Engine Instances \n This appendix provides a high level example of creating a deployment with two distinct Entando App Engine instances. This type of deployment can be used to create pods that can be separately accessed and managed. It is  not recommended  to use this type of deployment for typical development or production environments. Utilize the ability of Kubernetes and the Entando infrastructure to manage your replicas automatically. \n \n Create two different instances of the  EntandoApp  component inside of the  EntandoCompositeApp  in your deployment yaml \n Configure both EntandoApp instances to use the same database and JGroups configuration if using Infinispan. If using Redis configure both instances to point to the same Redis instance \n Deploy the application \n Expose the separately deployed  EntandoApp  instances with distinct endpoints \n Create data in one instance via the App Builder or via API \n Validate that the App Builder returns the same data in the other instance \n \n A partial example of that deployment: \n kind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "quickstart-apps"\n  namespace: test\nentandoStatus:\n  serverStatuses: {}\n  entandoDeploymentPhase: "requested"\nspec:\n  components:\n    - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart1"\n      spec:\n        dbms: none\n        replicas: 1\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: quickstart1.test.dynu.net\n        environmentVariables:\n          - name: PORTDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: PORTDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: PORTDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: SERVDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: SERVDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: SERVDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: JGROUPS_CLUSTER_PASSWORD\n            value: xxxxxxxx\n          - name: OPENSHIFT_KUBE_PING_LABELS\n            value: EntandoResourceKind=EntandoApp\n          - name: KUBERNETES_LABELS\n            value: EntandoResourceKind=EntandoApp\n          - name: POD_IP\n            valueFrom:\n              fieldRef:\n                fieldPath: status.podIP\n    - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart2"\n      spec:\n        dbms: none\n        replicas: 1\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: my.host.name\n        environmentVariables:\n          - name: SPRING_PROFILES_ACTIVE\n            value: "default,swagger"\n          - name: PORTDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: PORTDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: PORTDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: SERVDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: SERVDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: SERVDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: JGROUPS_CLUSTER_PASSWORD\n            value: xxxxxxxx\n          - name: OPENSHIFT_KUBE_PING_LABELS\n            value: EntandoResourceKind=EntandoApp\n          - name: POD_IP\n            valueFrom:\n              fieldRef:\n                fieldPath: status.podIP\n \n '},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/next/tutorials/devops/external-database/",relativePath:"next/tutorials/devops/external-database/README.md",key:"v-663d6404",path:"/next/tutorials/devops/external-database/",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"6/30/2020, 3:00:04 PM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando application is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Connect to an External Keycloak Instance",frontmatter:{},regularPath:"/next/tutorials/devops/external-keycloak/",relativePath:"next/tutorials/devops/external-keycloak/README.md",key:"v-1d7e1652",path:"/next/tutorials/devops/external-keycloak/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Get keycloak information",slug:"_1-get-keycloak-information"},{level:3,title:"2. Generate the secret",slug:"_2-generate-the-secret"},{level:3,title:"3. Upload the secret",slug:"_3-upload-the-secret"},{level:3,title:"4. Deploy the Entando6 application",slug:"_4-deploy-the-entando6-application"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"6/30/2020, 3:00:04 PM",content:' Connect to an External Keycloak Instance \n Purpose \n This tutorial enables the Entando administrator to leverage an existing\nKeycloak instance. \n Requirements \n \n \n A Keycloak instance \n \n \n A realm named "entando" on that instance \n \n \n An admin user for the "entando" realm \n Steps \n 1. Get keycloak information \n Retrieve the relevant information from the Keycloak instance you want to\nuse. \n Specifically you will need: \n \n \n The username of the Keycloak admin that has admin rights to the\n"entando" realm, e.g entando-keycloak-admin \n \n \n The Keycloak admin password, e.g. password123 \n \n \n The base url for the Keycloak server, including the auth value, e.g.\n https://my-keycloak-instance.com/auth \n 2. Generate the secret \n You now need to generate a secret with name  keycloak-admin-secret \nusing the information retrieved from step 1. The Entando administrator\nwill automatically detect this secret by name, and use it to log onto\nthe provided Keycloak server. \n Here is an example of the secret you will need to construct: \n ---\napiVersion: v1\nstringData:\n    username: <the username of the Keycloak admin user for the "entando" realm>\n    password: <the password of this Keycloak admin user>\n    url: <the base url of the Keycloak service, typically ending with the path /auth>\nkind: Secret\nmetadata\n    name: keycloak-admin-secret\n    namespace: <your-app-namespace>\ntype: Opaque\n \n \n Note \n To encode your values, in bash, you can do\n echo <your-value> | base64 \n 3. Upload the secret \n Next upload the secret to the namespace where you want to deploy your\nEntando 6 instance. \n oc create -f my-secret.yaml -n <my-app-namespace>\n 4. Deploy the Entando6 application \n Now you are ready to deploy your Entando 6 application and the\nadministrator will reuse the  keycloak-admin-secret  secret to populate\nthe environment correctly. \n Conclusion \n You should now have a working Entando 6 instance using an external\nKeycloak server. \n'},{title:"Entando 6 Azure Kubernetes Installation Instructions",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",relativePath:"next/tutorials/devops/installation/azure-kubernetes-service/azure-install.md",key:"v-3b9d33c6",path:"/next/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Deploy NGINX Ingress Controller",slug:"deploy-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress Install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:2,title:"Appendix A - Example values.yaml file for Helm Quickstart",slug:"appendix-a-example-values-yaml-file-for-helm-quickstart"},{level:2,title:"Appendix B - Troubleshooting",slug:"appendix-b-troubleshooting"}],lastUpdated:"1/4/2021, 8:25:18 AM",content:' Entando 6 Azure Kubernetes Installation Instructions \n Prerequisites \n \n Azure account\n \n \n \n Note: If you\'re using an Azure free account, you may need to upgrade your account first to enable pay-as-you-go billing. The Azure free account default quota includes just 1-4 vCPU which is not sufficient for this tutorial. There may be a delay before the quotas are updated when you upgrade your account. \n \n \n \n \n If you\'re not using Azure Cloud Shell:\n \n Azure command line tool \n Helm2 client \n Overview \n The steps below walk you through installing the Entando platform in an Azure Kubernetes Services (AKS) cluster. Generally the steps are: \n \n Create an AKS cluster with 5 nodes (to allow expansion for microservices) \n Install nginx as an ingress controller in the cluster \n Install Entando \n \n If you\'re already comfortable setting up an AKS cluster and installing nginx then you may be able to skip to  setting up Entando . \n Cluster Setup \n Setup and Connect to the Cluster \n \n Login to Azure ( https://portal.azure.com/ ) \n Select the  Kubernetes services  icon\n \n If not listed click  More services  on the right and search for Kubernetes \n \n \n Click  Add  in upper left corner \n Select  Kubernetes cluster . You\'ll start with the  Basics  tab. \n Select a  Resource group  or create one with the  Create new  link if it you don’t have one, e.g.  resource-group-1 \n Enter a name of your choice in Kubernetes cluster name, e.g.  cluster-1 \n Pick your  Region  if it wasn\'t automatically selected for you. \n In the  Availability zones  dropdown pick  one and only one  availability zone\n \n Generally, you could pick more than one but it will result in a failure in a quickstart environment. If you chose more than one availability zone you will have to provision storage, manage node affinity, and ensure correct network configuration to ensure your application deploys. We recommend only doing this for production clusters. \n \n \n Select   1.18.10  for the  Kubernetes version \n Keep the default  Node size , e.g.  Standard DS2 v2 \n Change the  Node count  to  5 \n Click  Next: Node Pools  to move to the next tab. \n Keep the default values here\n \n If you\'re familiar with AKS your can change as desired based on your objectives/knowledge \n \n \n Click  Next: Authentication \n For  Authentication method  select  System-assigned managed identity \n \n You can pick a  Service principal  instead and Azure will automatically generate one for you. If you use an existing principal it is up to you to configure it and ensure you have the access you need. \n \n \n Click  Next: Networking \n Enter a value for DNS name prefix, e.g.  cluster-1-dns \n Click  Review + Create \n \n Note: There are many other configuration options available for an AKS cluster. Generally, you can change these based on your experience and comfort level with the AKS platform. Entando uses base Kubernetes APIs so as long as you follow the Entando configuration instructions below you can tune your cluster infrastructure to meet your goals \n \n \n Select  Create \n Wait for your cluster to initialize.\n \n This may take a few minutes \n Deploy NGINX Ingress Controller \n \n Navigate to your cluster by clicking  Go to Resource  from the results page or by the top navigation  Home - Kubernetes service  and clicking on your cluster. \n Select  Connect \n Select  Bash \n Run the first two commands (e.g.  az account set...  and  az aks get-credentials...  to connect to your cluster. This should only be needed the first time you run the Azure Cloud Shell.\n \n The Cloud Shell times out after 20 minutes of inactivity. \n The following instructions assume you\'ll use the Azure Cloud Shell but you can also run the commands in a local environment if you have  kubectl \n \n \n Deploy nginx with the commands below. See  nginx instructions  for more details. \n \n kubectl create namespace ingress-basic\n \n helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo add stable https://kubernetes-charts.storage.googleapis.com/\nhelm repo update\n \n helm install nginx-ingress ingress-nginx/ingress-nginx \\\n    --namespace ingress-basic \\\n    --set controller.replicaCount=2 \\\n    --set controller.nodeSelector."beta\\.kubernetes\\.io/os"=linux \\\n  --set defaultBackend.nodeSelector."beta\\.kubernetes\\.io/os"=linux\n \n \n Get the external IP address for your ingress controller. Record the value of EXTERNAL-IP for  nginx-ingress-controller  from the command below. \n \n kubectl get service -n ingress-basic\n Verify the NGINX Ingress Install \n We recommend setting up a test application so you can easily verify the ingress is working in your cluster. See  this page  for those steps. You can use either Azure Cloud Shell or your local  kubectl . \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs: \n \n kubectl create -f dist/crd\n Deploy Your Entando Application \n You can now deploy your application to Azure Kubernetes Service. \n \n Download and unpack the entando-helm-quickstart: \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n See the included README file for more information on subsequent steps. \n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n \n Edit the  values.yaml \n \n Set  supportOpenshift: false \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the EXTERNAL-IP of your ingress controller and add nip.io to the end\n \n For example:  ENTANDO_DEFAULT_ROUTING_SUFFIX: 52.188.177.248.nip.io \n \n \n Configure nginx as the ingress controller and enable file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix A  for an example values.yaml \n \n \n \n Create the Entando namespace: \n \n \n kubectl create namespace entando\n \n \n Run helm to generate the template file: \n \n helm template my-aks-app --namespace=entando ./ > my-aks-app.yaml\n \n \n Deploy Entando via \n \n kubectl create -f my-aks-app.yaml\n \n \n Watch Entando startup. The application will be available when the quickstart-server-deployment pod shows 3/3 in the READY column and RUNNING in the STATUS column. \n \n kubectl get pods -n entando --watch\n \n \n Check for the Entando ingresses using \n \n kubectl describe ingress -n entando\n \n \n Access your app on the url for the ingress of the app builder, e.g.  http://quickstart-entando.EXTERNAL-IP.nip.io/entando-de-app \n Appendix A - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-IP>  with the EXTERNAL-IP address of your nginx controller \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-IP>.nip.io\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n   ENTANDO_INGRESS_CLASS: "nginx"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n Appendix B - Troubleshooting \n If you get an error like:  0/5 nodes are available: 5 node(s) had volume node affinity conflict.  or if your deployment hangs in a situation like this from  kubectl get pods -n entando \n NAME                                                 READY   STATUS      RESTARTS   AGE\nmy-aks-app-operator-644697776f-sxtq2                 1/1     Running     0          13m\nquickstart-composite-app-deployer-2guz0n42pc         1/1     Running     0          13m\nquickstart-deployer-jj4njqk4bg                       1/1     Running     0          10m\nquickstart-eci-deployer-t0xktqsonk                   0/1     Completed   0          11m\nquickstart-eci-k8s-svc-deployment-78f64c8d89-7c578   1/1     Running     0          11m\nquickstart-kc-deployer-16gzv3clsj                    0/1     Completed   0          13m\nquickstart-kc-server-deployment-7c9bc65744-g52nx     1/1     Running     0          13m\nquickstart-server-deployment-55fcfc6b68-szvkl        0/3     Pending     0          10m\n \n Double check your availability zones. By default an Azure cluster will include nodes from multiple zones but it will not provision storage\nfor all of those nodes so you can\'t deploy your application. \n You can confirm this error in the AKS console as well: \n \n In your cluster select  Workloads  in the left nav \n Click on the deployment for your server application. This is  quickstart-server-deployment  by default \n Click on the deployment name inside that application. There will be one \n Click on the tab labeled  Conditions \n If you see an error that says  0/5 nodes are available: 5 node(s) had volume node affinity conflict.  Then you need to reconfigure\nyour cluster to have nodes in one zone or work with your Azure operations team to provision storage to match node affinity. \n \n'},{title:"Installation on Amazon Elastic Kubernetes Service (EKS)",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",relativePath:"next/tutorials/devops/installation/elastic-kubernetes-service/eks-install.md",key:"v-40b42cf4",path:"/next/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Install the NGINX Ingress Controller",slug:"install-the-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress Install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:2,title:"Appendix A - Troubleshooting",slug:"appendix-a-troubleshooting"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"1/4/2021, 8:25:18 AM",content:' Installation on Amazon Elastic Kubernetes Service (EKS) \n Prerequisites \n \n AWS CLI \n AWS account \n kubectl \n A domain or the ability to purchase one. Can use route 53 for this inside AWS if doing it all inline \n helm2 client \n Overview \n The steps below walk you though installing the Entando platform in an EKS cluster. Generally the steps are: \n \n Configure an IAM role to allow kubernetes to manage the cluster \n Create an EKS cluster with 5 nodes (to allow expansion for microservices) \n Install nginx as an ingress controller in the cluster \n Register a domain (if you don\'t already have one) and configure it for wildcard subdomains. \n Install Entando \n \n If you\'re already comfortable setting up an EKS cluster and installing nginx then you may be able to skip to  setting up Entando . \n Cluster Setup \n These steps will use the AWS console to create the cluster. If you’re already familiar with creating an EKS cluster and assigning nodes to it via the AWS cli then you can use the cli process for cluster creation as well. \n Setup and Connect to the Cluster \n \n \n Login to AWS as a non-super admin user \n \n If you don’t have a user besides the super admin it is recommended that you create one. Clusters created using the super admin for your account will have some restrictions that may complicate your installation. \n Your user will need access to EKS and at least the ability to create a cluster. You may need additional policies for Route53 and other services depending on your exact configuration. \n \n \n \n Create an IAM role for the cluster so that AWS can provision assets. See  https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html  for more details. \n \n Select  IAM  from services \n Select  Create role \n Select  AWS Service  box at the top for the type of trusted entity \n Click  EKS  from the main list \n Click  EKS - Cluster  under  Select your use case \n Click  Next:Permissions \n A Policy of  AmazonEKSClusterPolicy  should already be present \n Click  Next: Tags \n (Optional) Add tags if you want \n Click  Next: Review \n Name your role (you’ll need this later), e.g.  my-eks-role \n \n \n \n Refine the role to enable Nodegroup management and to add ELB access so that the cluster can deploy a load balancer for nginx. \n \n Go to  IAM → Roles → your role \n Under permissions click  Attach policies \n Add a policy of  AmazonEKSWorkerNodePolicy \n Add a policy of  AmazonEKS_CNI_Policy \n Add a policy of  AmazonEC2ContainerRegistryReadOnly \n Add a policy of  ElasticLoadBalancingFullAccess \n \n \n \n Go to  Services  and select  Elastic Kubernetes Service \n \n \n Create an EKS Cluster \n \n Add a cluster name (e.g.  cluster-1 ) and click  Create EKS cluster \n Select  1.18  for the Kubernetes version \n For  Cluster Service Role , select the role you created above, e.g.  my-eks-role . If you choose a different role it must have ELB permissions so the cluster can create a load balancer in  Networking  (Step 2). \n Click  Next \n Use the defaults for  Networking  (Step 2) and click  Next \n Use the defaults for  Configure Logging  (Step 3) and click  Next . \n Review your settings and then click  Create . Cluster provisioning usually takes between 10 and 15 minutes. \n See  https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html  for more information on cluster creation. \n \n \n \n Add a node group to the cluster \n \n Go to  Services → Elastic Kubernetes Service → Clusters  → Click on your cluster name. \n Go to the  Compute  tab \n Click  Add Node Group \n Name : give your group a name, e.g.  node-1 \n Node IAM Role : Select the cluster role you created above. If the role doesn\'t appear, verify that you added the extra policies to the role. \n Subnets  - VPC subnets should already be setup and selected. \n Select  Allow remote access to nodes .  Follow the links to create a new SSH key pair if you don\'t already have one. \n Click  Next \n AMI type:  Amazon Linux 2 \n Instance type:  t3.medium \n Click  Next \n Set  Maximum size  to 5. This will be over-resourced for a  Getting Started  experience but will leave capacity for adding microservices to your cluster without modifying the Nodegroup. \n Click  Next \n Review your settings and then click  Create \n \n \n \n Connect  kubectl  to the cluster \n \n Note:  If this is a brand new setup you will need to login using the user you used to create your cluster in the console in the steps above. Make sure the users match.\n \n aws-configure  (and then provide the Access key, etc.) \n \n \n aws eks --region region-code update-kubeconfig --name cluster_name \n More details and troubleshooting  https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html \n Your current context should now be configured for your AWS cluster. Run the command below to check: \n \n $  kubectl config current-context\n \n Your output should look something like this: \n arn:aws:eks:us-east-2:483173223614:cluster/cluster-1\n Install the NGINX Ingress Controller \n \n Add the NGINX controller for ingress. This depends on your role having permissions for ELB.\n \n For basic nginx ingress install run this command \n \n kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.41.2/deploy/static/provider/aws/deploy.yaml\n \n \n See  https://kubernetes.github.io/ingress-nginx/deploy/#aws  as well as  this  for more detailed install steps. \n \n \n Get the ELB external URL for your nginx install\n \n Run:  kubectl get services -n ingress-nginx \n Get the value of the external address (EXTERNAL-IP) for the ingress-nginx-controller: \n \n \n \n NAME                                 TYPE           CLUSTER-IP       EXTERNAL-IP                        \ningress-nginx-controller             LoadBalancer   10.100.102.83    ad234bd11a1ff4dadb44639a6bbf707e-0e0a483d966405ee.elb.us-east-2.amazonaws.com\n Verify the NGINX Ingress Install \n We recommend setting up a test application so you can easily verify the ingress is working in your cluster. See  this page  for those steps. You can use your local  kubectl . \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs:  kubectl create -f dist/crd \n Deploy Your Entando Application \n You can now deploy your application to Amazon EKS. \n \n Download and unpack the  entando-helm-quickstart  release: \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n See the included README file for more information on the following steps. \n \n \n Go to the downloaded directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n \n Edit  values.yaml  in the root directory: \n \n Set  supportOpenshift: false \n Set  singleHostName  to the value of the  EXTERNAL-IP  of your  ingress-nginx-controller :\n \n For example:  singleHostName: ad234bd11a1ff4dadb44639a6bbf707e-0e0a483d966405ee.elb.us-east-2.amazonaws.com \n \n \n Configure nginx as the ingress controller and enable file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix B  for an example values.yaml \n \n \n \n Create the Entando namespace:  kubectl create namespace entando \n \n \n Run helm to generate the template file: \n \n \n helm template my-eks-app --namespace=entando ./ > my-eks-app.yaml\n \n \n Deploy Entando via  kubectl create -f my-eks-app.yaml \n Watch Entando startup  kubectl get pods -n entando --watch \n Check for the Entando ingresses using  kubectl describe ingress -n entando \n Access your app on the url for the ingress of the app builder. This will be the URL of your load balancer followed by  /app-builder  or  /entando-de-app  for the deployed application, e.g.  http://ad234bd11a1ff4dadb44639a6bbf707e-0e0a483d966405ee.elb.us-east-2.amazonaws.com/app-builder \n Appendix A - Troubleshooting \n IAM And Roles \n \n https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html \n https://stackoverflow.com/questions/56863539/getting-error-an-error-occurred-accessdenied-when-calling-the-assumerole-oper \n \n NGINX \n \n https://docs.nginx.com/nginx/deployment-guides/amazon-web-services/ingress-controller-elastic-kubernetes-services/ \n Issue with permissions for NGINX ingress: \n \n  Warning  SyncLoadBalancerFailed   38m                 service-controller  (combined from similar events): Error syncing load balancer: failed to ensure load balancer: error creating\n Appendix B - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-DOMAIN>  with the domain you\'ve configured for your cluster. \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-DOMAIN>\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n   ENTANDO_INGRESS_CLASS: "nginx"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n\n \n '},{title:"Installation on Red Hat OpenShift using the OperatorHub",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.html",relativePath:"next/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.md",key:"v-267fcbe6",path:"/next/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Scenario 1 - Embedded Database",slug:"scenario-1-embedded-database"},{level:2,title:"Scenario 2 - PostgreSQL",slug:"scenario-2-postgresql"},{level:2,title:"Scenario 3 - PostgreSQL plus OpenShift SSL",slug:"scenario-3-postgresql-plus-openshift-ssl"},{level:2,title:"Scenario 4 - PostgreSQL plus self-signed SSL",slug:"scenario-4-postgresql-plus-self-signed-ssl"},{level:2,title:"Scenario 5 - Cluster-scoped operator with wildcard SSL",slug:"scenario-5-cluster-scoped-operator-with-wildcard-ssl"},{level:2,title:"Next Steps",slug:"next-steps"}],lastUpdated:"3/31/2021, 10:45:23 AM",content:" Installation on Red Hat OpenShift using the OperatorHub \n Overview \n The following tutorial shows how to install an Entando application using the Red Hat-certified  Entando Operator  and covers a few common enterprise configurations. If you're working with an OpenShift version prior to 4.6 then you may require the alternative  manual instructions . \n The first scenario listed below is similar to the Entando quickstart style of deployment which can be applied in many environments, including on local developer laptops. The subsequent scenarios build on that initial setup but can be performed directly as desired. Unless otherwise noted, you have the freedom to keep or modify the default options when installing the  Entando Operator  and other resources in the tutorials. \n Prerequisites \n \n A 4.6 (or higher) OpenShift installation\n \n For simplicity the tutorial instructions are for a local Code Ready Containers (CRC) instance but this will require significant dedicated resources, e.g. at least 4 vCPU and 10GB RAM. In some environments you may need to start CRC using  crc start -n 8.8.8.8  in order to install operators. \n \n \n Cluster-admin access to OpenShift for initial installation of the Entando Operator \n Familiarity with the OpenShift console and operation \n Scenario 1 - Embedded Database \n The initial scenario is to deploy the operator and Entando application in a single namespace. We'll start with the smallest application footprint which uses an embedded database. \n \n Locate the  Entando Operator  in the  Operators → OperatorHub  using the Filter feature. \n Click  Install  to view the  Entando Operator  install options. \n Select  A specific namespace on the cluster  for the  Installation mode . \n Choose an empty namespace for  Installed Namespace . You can create one from  Home → Projects  first, if needed, e.g.  entando-one . \n Click  Install  to install the operator into your target namespace. \n The install may take a few minutes to complete after which you can click  View Operator  to see the operator in your namespace, or you can go to  Operators → Installed Operators  at any point and select it from there. \n Now go to  Entando Composite Application  and click  Create instance \n Change the  Dbms Override  to  embedded . This is the lightest and quickest way to test a full Entando application but you'll need to modify the YAML as well in step 10. \n (Optional) If you're working in anything but a single project environment, you'll need to provide an  Ingress Host Name Override  specific to your namespace, e.g.  entando-one.<my-base-openshift-url>.  In CRC you can keep the default  entando.apps-crc.testing  for your first project. \n Switch to the YAML view and remove the following section since it isn't needed with an embedded database. \n \n     - kind: EntandoDatabaseService\n      metadata:\n        name: inline-entando-database-service\n      spec:\n        createDeployment: true\n \n \n (Optional) Feel free to edit the YAML to customize the names of the components deployed by the EntandoCompositeApp, e.g.  inline-entando-database-service \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources. \n Go to  Entando Composite Application → my-entando-composite-app  to check the status of the deploy or its  Events  tab to follow its progress. \n \n See the  Next Steps  below to continue your work with Entando. \n Scenario 2 - PostgreSQL \n For this scenario we'll prepare a more production-like configuration. Here we'll switch from an embedded on-disk database to a dedicated PostgreSQL database. For this scenario we'll start where step 6 ends in the previous scenario. If you already ran Scenario 1 you can either go to that project and remove the Composite App via  Installed Operators → Entando Operator → Entando Composite Application  or prepare a new project using steps 1-5 above. \n Now let's create a new application, this time using PostgreSQL. \n \n Go to  Entando Composite Application  and click  Create instance \n Keep the default  Dbms Override  as  postgresql . You should not remove the EntandoDatabaseService in this case. \n (Optional) Set the  Ingress Host Name Override  as in step 9 above. \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources just as in Scenario 1 but with the addition of a PostgreSQL database deployment. \n \n See the  Next Steps  below to continue your work with Entando. \n Scenario 3 - PostgreSQL plus OpenShift SSL \n For this scenario we'll build on Scenario 2 but enable SSL using OpenShift's internal Certificate Authority. As a starting point, you can either remove the Composite App from the previous scenarios or prepare a new project per steps 1-5 in Scenario 1. \n \n Using your browser, examine and save the SSL certificate for your environment. For example, in Chrome, go to any OpenShift console page, click on  View Site Information  next to the URL (it may be labeled  Not secure  ) then go to  Details -> Copy to File  and save the certificate as a Base-64 encoded X.509 file, e.g.  openshift.cer. \n Go to  Workflows → Secrets → Create  and select  Key/value secret \n Set the  Secret Name , e.g.  entando-ca-cert-secret \n Set the  Key , e.g.  openshift.cer \n Set the  Value  by clicking  Browse...  and loading the file you saved in Step 1. \n Click  Create \n Next go to  Workloads → ConfigMaps  and create a ConfigMap named  entando-operator-config  This is the ConfigMap used by the Operator to configure the deployments. You'll need to supply your own project name for the namespace. \n \n kind: ConfigMap\napiVersion: v1\nmetadata:\n name: entando-operator-config\n namespace: entando-one\ndata:\n entando.ca.secret.name: entando-ca-cert-secret\n entando.use.auto.cert.generation: 'true'\n \n \n Click  Create \n \n Now let's create a new application, just like in Scenario 2 but with the OpenShift SSL in place. \n \n Go to  Entando Composite Application  and click  Create instance \n Keep the default  Dbms Override  as  postgresql . \n (Optional) Set the  Ingress Host Name Override  as in Scenario 1 step 9. \n You don't need to set the  TLS Secret Name Override  since it will be taken from the  entando-operator-config  ConfigMap. \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources. \n \n Once the deployment is complete you can confirm that all routes use https with OpenShift's CA. You will likely still see security warnings in the browser. \n See the  Next Steps  below to continue your work with Entando. \n Scenario 4 - PostgreSQL plus self-signed SSL \n This scenario is similar to Scenario 3 but here we'll use a self-signed certificate rather than using OpenShift's Certificate Authority. As a starting point, you can either remove the Composite App from the previous scenarios or prepare a new project per steps 1-5 in Scenario 1. \n We'll start by creating a self-signed certificate and then preparing the Secrets and ConfigMap to match. There are various ways to create an X.509 self-signed certificate and you can use your own preferred mechanism. \n \n Using  OpenSSL  create a certificate for your application. You'll need to adjust the CN value to match your project. \n \n openssl req -nodes -x509 -newkey rsa:4096 -keyout tls.key -out tls.crt -days 365 -subj \"/CN=entando.apps-crc.testing\"\n \n You should see output similar to this: \n Generating a RSA private key\n.....................................................................++++\n........................................................................................................................................................................................++++\nwriting new private key to 'tls.key'\n-----\n \n Now we can create a TLS Secret using the generated files. \n \n Go to  Workloads → Secrets → Create  and select  From YAML . \n Enter this  YAML , update the namespace to match your project, and click  Create : \n \n kind: Secret\napiVersion: v1\nmetadata:\n  name: entando-tls-secret\n  namespace: entando-one\ndata:\n  tls.key: ''\n  tls.crt: ''\ntype: kubernetes.io/tls\n \n \n Click on  Actions → Edit Secret  and use the  Browse...  buttons to upload the key and cert files. \n \n Now we'll also create the  entando-ca-cert-secret  Secret, similar to what was done in Scenario 3 but now using the self-signed certificate. \n \n Go to  Workflows → Secrets → Create  and select  Key/value secret \n Set the  Secret Name , e.g.  entando-ca-cert-secret \n Set the  Key , e.g.  cert1.crt \n Set the  Value  by clicking  Browse...  and loading the cert file from Step 1, e.g.  tls.crt \n Click  Create \n Next go to  Workloads → ConfigMaps  and create a ConfigMap named  entando-operator-config.  This is the ConfigMap used by the Operator to configure the deployments. You'll need to supply your own project name for the namespace. \n \n kind: ConfigMap\napiVersion: v1\nmetadata:\n name: entando-operator-config\n namespace: entando-one\ndata:\n entando.ca.secret.name: entando-ca-cert-secret\n entando.tls.secret.name: entando-tls-secret\n \n \n Click  Create \n \n Now let's create a new application, just like in Scenario 3 but with the self-signed SSL. \n \n Go to  Entando Composite Application  and click  Create instance \n Keep the default  Dbms Override  as  postgresql . \n (Optional) Set the  Ingress Host Name Override  as in Scenario 1 step 9. \n You don't need to set the  TLS Secret Name Override  since it will be taken from the  entando-operator-config  ConfigMap. \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources. \n \n Once the deployment is complete you can confirm that all routes use https with the self-signed certificate. You will still see security warnings in the browser. \n See the  Next Steps  below to continue your work with Entando. \n Scenario 5 - Cluster-scoped operator with wildcard SSL \n For this scenario we'll install the Entando Operator so the same operator instance can manage applications across namespaces. \n \n Locate the  Entando Operator  in the  Operators → OperatorHub  using the Filter feature. \n Click  Install  to view the  Entando Operator  install options. \n Select  All namespaces on the cluster  for the  Installation mode . \n Keep the default  openshift-operators  for the  Installed Namespace . \n Click  Install  to install the operator into the cluster. \n \n Now, similar to Scenario 4, we'll setup a self-signed certificate but this time as a wildcard certificate and then configure the Secrets and ConfigMap to match. There are various ways to create an X.509 self-signed certificate and you can use your own preferred mechanism. \n \n Using  OpenSSL  create a certificate for your application. You'll need to adjust the CN value to match your environment but make sure to include the leading  *.  for the wildcard designation. \n \n openssl req -nodes -x509 -newkey rsa:4096 -keyout tls.key -out tls.crt -days 365 -subj \"/CN=*.apps-crc.testing\"\n \n You should see output similar to this: \n Generating a RSA private key\n.....................................................................++++\n........................................................................................................................................................................................++++\nwriting new private key to 'tls.key'\n-----\n \n Now we can go to the  openshift-operators  project and create a TLS Secret using the generated files. \n \n Go to  Workloads → Secrets → Create  and select  From YAML . \n Enter this  YAML  and click  Create : \n \n kind: Secret\napiVersion: v1\nmetadata:\n  name: entando-tls-secret\n  namespace: openshift-operators\ndata:\n  tls.key: ''\n  tls.crt: ''\ntype: kubernetes.io/tls\n \n \n Click on  Actions → Edit Secret  and use the  Browse...  buttons to upload the key and cert files. \n \n Now we'll also create the  entando-ca-cert-secret  Secret using the self-signed wildcard certificate. \n \n Go to  Workflows → Secrets → Create  and select  Key/value secret \n Set the  Secret Name , e.g.  entando-ca-cert-secret \n Set the  Key , e.g.  cert1.crt \n Set the  Value  by clicking  Browse...  and loading the cert file from Step 1, e.g.  tls.crt \n Click  Create \n Next go to  Workloads → ConfigMaps  and create a ConfigMap named  entando-operator-config.  This is the ConfigMap used by the Operator to configure the deployments. You'll need to supply the routing suffix for your environment. Don't include a leading  *.  since this is just the suffix. \n \n kind: ConfigMap\napiVersion: v1\nmetadata:\n name: entando-operator-config\n namespace: openshift-operators\ndata:\n entando.ca.secret.name: entando-ca-cert-secret\n entando.tls.secret.name: entando-tls-secret\n entando.default.routing.suffix: apps-crc.testing \n \n \n Click  Create \n You can now proceed to create one or more Entando applications in their own namespaces, e.g. using the steps for Scenario 1 starting from Step 7. You can leave out the  Ingress Host Name Override  since the cluster-scoped operator will provide it for you based on the routing.suffix. \n \n See the  Next Steps  below to continue your work with Entando. \n Next Steps \n Once you've completed any of the scenarios above, you have several options. \n \n Check out  Networking → Routes  to see the URLs for the running services. Common starting points include the  Entando App Builder  (e.g.  http://entando.apps-crc.testing/app-builder/ ) or  Entando application  itself (e.g.  http://entando.apps-crc.testing/entando-de-app/ ). \n This suggested  list of next steps  could also be useful. \n \n"},{title:"Installation on Google Kubernetes Engine (GKE)",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/devops/installation/google-cloud-platform/",relativePath:"next/tutorials/devops/installation/google-cloud-platform/README.md",key:"v-bce12d6a",path:"/next/tutorials/devops/installation/google-cloud-platform/",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Install the NGINX Ingress Controller",slug:"install-the-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:3,title:"Setup and Deploy",slug:"setup-and-deploy"},{level:3,title:"Quickstart with Embedded Databases",slug:"quickstart-with-embedded-databases"},{level:3,title:"External Database",slug:"external-database"},{level:2,title:"Appendix A - Cluster Sizing",slug:"appendix-a-cluster-sizing"},{level:3,title:"Updating the Nodes in Your Cluster",slug:"updating-the-nodes-in-your-cluster"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"1/4/2021, 8:25:18 AM",content:' Installation on Google Kubernetes Engine (GKE) \n Prerequisites \n \n Google Cloud account:  http://cloud.google.com/ \n Install these tools locally if you\'re not using the Google Cloud Shell steps below:\n \n Google Cloud SDK  including gcloud \n kubectl  command line tool \n Cluster Setup \n These steps only need to be completed once per cluster. \n Setup and Connect to the Cluster \n \n Login to your Google Cloud account:  https://cloud.google.com/ \n Go to  Kubernetes Engine → Clusters → Create Cluster \n Enter a name and select a  Location type \n \n The  Location type  settings are up to you. The defaults are fine for an initial test. \n \n \n Select  1.16.15-gke.4901  for the  Master version \n On the left menu select  default-pool \n Under  Size  set the  Number of nodes  entry to 5.  (See  Appendix A  for details.) \n Click  Create \n Wait for the cluster to initialize. This will take a few minutes. There will be a green check mark when complete. \n Click  Connect  for your new cluster. \n Click  Run in Cloud Shell \n \n Alternatively, copy the provided command and execute it in your local environment to connect your local  kubectl  to your GKE cluster. \n \n \n Run  kubectl get namespaces  to verify your connection: \n \n a_user@cs-6000-devshell-vm-c34ef644-5584-4c5d-aa14-6e41af4a5c9a:~$ kubectl get namespaces\nNAME              STATUS   AGE\ndefault           Active   6m11s\nkube-node-lease   Active   6m12s\nkube-public       Active   6m12s\nkube-system       Active   6m13s\n Install the NGINX Ingress Controller \n Entando isn’t compatible out of the box  with the default ingress controller provided in GKE.\nSee here for more if you’re interested in GKE ingress:  https://cloud.google.com/kubernetes-engine/docs/concepts/ingress \n We’re going to install the NGINX ingress controller to manage the ingresses for Entando services\ndeployed by the operator. This will be a simpler and more adaptable configuration for most users and\nenvironments. Users who really need the GKE ingress controller (rare) could integrate it following\nthe instructions provided by GKE and then customize the service definition created by the Entando\noperator. \n These are the minimal instructions to prepare NGINX ingress using the Google Cloud Shell. To install it\nusing your local  kubectl  or to vary other settings please see the more detailed documents here:\n https://cloud.google.com/community/tutorials/nginx-ingress-gke  and  https://kubernetes.github.io/ingress-nginx/deploy/#gce-gke . \n \n Initialize your user as a cluster-admin: \n \n kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin \\\n--user $(gcloud config get-value account)\n \n \n Install the ingress controller pods: \n \n kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml\n \n \n To check if the ingress controller pods have started, run the following command: \n \n    kubectl get pods -n ingress-nginx \\\n     -l app.kubernetes.io/name=ingress-nginx --watch\n \n \n Wait until the ingress-nginx-controller status changes to  Running : \n \n NAME                                        READY   STATUS      RESTARTS   AGE\ningress-nginx-admission-create-27tgt        0/1     Completed   0          65s\ningress-nginx-admission-patch-7wmgl         0/1     Completed   1          65s\ningress-nginx-controller-7656c59dc4-7xgmc   1/1     Running     0          75s\n \n \n Get the external IP address for your ingress controller. Record the value of EXTERNAL-IP for  nginx-ingress-controller  from the command below. \n \n kubectl get service -n ingress-nginx\n Verify the NGINX Ingress install \n We recommend setting up a test application so you can easily verify the ingress is working. \n \n From the  Cloud Shell,  create a simple application by running the following command: \n \n kubectl run hello-app --generator=run-pod/v1 --image=gcr.io/google-samples/hello-app:1.0 --port=8080\n \n \n Expose the  hello-app  Pod as a Service: \n \n kubectl expose pod hello-app\n \n \n Create an  ingress-resource.yaml  file with this content: \n \n apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: ingress-resource\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/ssl-redirect: "false"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /hello\n        backend:\n          serviceName: hello-app\n          servicePort: 8080\n \n \n Now create the Ingress Resource using  kubectl apply -f ingress-resource.yaml \n Verify that the Ingress Resource has been created using  kubectl get ingress ingress-resource .\nIt may take a few minutes for the  Address  to be populated. \n Verify you can access the web application by going to the  EXTERNAL-IP/hello  address, using the\n Address  from the previous nginx-ingress-controller. You should see the following: \n \n Hello, world!\nVersion: 1.0.0\nHostname: hello-app\n \n Note the external IP address of your ingress controller since you’ll need it for the application configuration.\nThe Entando deployment exposes an environment variable to set the ingress controller to be used as part of the deployment. That variable is  ENTANDO_INGRESS_CLASS  and should be set to  nginx  in deployments to GKE (this is documented in the application instructions below as well) \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them: \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs:  kubectl create -f dist/crd \n Deploy Your Entando Application \n You can now deploy your Entando applications to GKE. \n Setup and Deploy \n \n Download and unpack the entando-helm-quickstart: \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n Edit  values.yaml in the root directory:\n \n Set  supportOpenshift: false \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the IP value of your  nginx  controller plus .nip.io\n \n For example:  ENTANDO_DEFAULT_ROUTING_SUFFIX: 35.223.161.214.nip.io \n We’re using  https://nip.io  because we need wildcard dns address resolution however nip.io is not required. If your enterprise has a different internal dns resolution scheme for development instances you can use that or other alternative dns services like xip.io. \n \n \n If not already present, set these values to utilize nginx as the ingress controller and file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix B  for an example values.yaml \n \n \n Create the Entando namespace: \n \n kubectl create namespace entando\n \n \n Update helm dependencies: \n \n helm dependency update\n \n \n Run helm to generate the template file: \n \n helm template my-app --namespace=entando ./ > my-app.yaml\n \n \n Deploy Entando via \n \n kubectl create -f my-app.yaml\n \n \n Watch Entando startup \n \n kubectl get pods -n entando --watch\n \n \n Check for the Entando ingresses using \n \n kubectl describe ingress -n entando\n \n This is a snippet: \n quickstart-entando.34.71.130.61.nip.io\n                                          /entando-de-app     quickstart-server-service:8080 (10.44.2.3:8080)\n                                          /digital-exchange   quickstart-server-service:8083 (10.44.2.3:8083)\n                                          /app-builder/       quickstart-server-service:8081 (10.44.2.3:8081)\n \n \n Access Entando at the app-builder endpoint, e.g.  http://quickstart-entando.34.71.130.61.nip.io/app-builder/ \n Quickstart with Embedded Databases \n The lightest weight and fastest to deploy option for evaluation and getting started uses embedded databases for the application and Keycloak.\nTo deploy quickstart with embedded databases at the top of values.yaml add  dbms: none  under the app section in the file. See Appendix B for an example. \n External Database \n You can also use an external database instance for your application.\nThis is recommended for projects that will be developed for delivery to customers or stakeholders.\nAny dbms that is reachable from the cluster can be used. \n Example: Deploy Postgres to a Namespace on Your Cluster \n These instructions will deploy a postgres instance to a namespace in your kubernetes cluster. \n https://github.com/GoogleCloudPlatform/postgresql-docker/blob/master/9/README.md#run-a-postgresql-server-kubernetes \n \n Note: If deployed this way the address you use for the database in the helm template must be a full address rather than an IP address alone. Use the database IP plus nip.io for a dev instances \n \n Once deployed you can use the  external database instructions  to\nconnect your Entando application to your instance., \n Connect CloudSQL to GKE \n \n This link describes creating a PG instances using the GCP Cloud SQL\n \n https://cloud.google.com/sql/docs/postgres/create-instance \n \n \n Connecting from GKE to Cloud SQL\n \n https://cloud.google.com/sql/docs/postgres/connect-kubernetes-engine \n Appendix A - Cluster Sizing \n In the cluster setup instructions you set the number of nodes in your cluster to 5. This setting\nassumes the default node type with a single VCPU per instance and 3.8 GB of RAM. The kubernetes\nsystem and nginx will request approximately 1 CPU in total. The Entando application will deploy\non the remaining 4. This configuration is suitable for a development team but may need to be\nexpanded as microservices are added to the architecture. \n If you’re running other applications (like a postgres instance) in your cluster you may need\nmore nodes. \n Updating the Nodes in Your Cluster \n \n Select Kubernetes Engine from the left nav in GCP \n Select Clusters \n Hit the Edit button (pencil on the right) \n Scroll to bottom \n Click the link labeled default-pool \n Edit button at the top \n Change the nodes to the number you\'d like to include \n Save \n Wait until updated on clusters page (green checkmark on cluster) \n Appendix B - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-NGINX-IP>  with the ip address where your  nginx \ninstance is exposed on your cluster. \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-NGINX-IP>.nip.io\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n   ENTANDO_INGRESS_CLASS: "nginx"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n\n \n '},{title:"Installation on OpenShift",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/devops/installation/open-shift/openshift-install.html",relativePath:"next/tutorials/devops/installation/open-shift/openshift-install.md",key:"v-a514f074",path:"/next/tutorials/devops/installation/open-shift/openshift-install.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Local Installation",slug:"local-installation"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:3,title:"Get your Cluster Default Ingress",slug:"get-your-cluster-default-ingress"},{level:3,title:"Setup and Deploy",slug:"setup-and-deploy"},{level:2,title:"Appendix A - Troubleshooting and Common Errors",slug:"appendix-a-troubleshooting-and-common-errors"},{level:3,title:"Permission Errors",slug:"permission-errors"},{level:3,title:"Forbidden Error installing Entando Custom Resource Definitions in Minishift or CRC",slug:"forbidden-error-installing-entando-custom-resource-definitions-in-minishift-or-crc"},{level:3,title:"Application is not available when accessing app builder",slug:"application-is-not-available-when-accessing-app-builder"},{level:3,title:"Network Issues",slug:"network-issues"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"3/31/2021, 10:45:23 AM",content:' Installation on OpenShift \n Overview \n This tutorial shows how to manually install Entando into OpenShift 3.11 or 4.x. If you\'re working with OpenShift 4.6+ then you also have the option of using the Red Hat-certified Entando Operator which should be available in your OperatorHub thanks to the Red Hat Marketplace. See  this tutorial  for instructions specific to the  Entando Operator. \n Prerequisites \n \n An OpenShift installation (3.11 or 4.x) \n oc  command line tool \n A helm 3 client \n Local Installation \n If you want to run OpenShift in your local development environment you can run Minishift (OpenShift 3.11) or Code Ready Containers (OpenShift 4). Use the local development version that matches the cluster where you intend to deploy your application. \n For Minishift:  https://docs.okd.io/3.11/minishift/getting-started/installing.html \n For CRC:  https://developers.redhat.com/products/codeready-containers/download \n Once you\'ve completed the installation above capture the local IP address of your development instance using  minishift ip  or  crc ip . You\'ll need it when configuring your Entando application. \n Login to your OpenShift environment from the command line with  oc login  using the URL and credentials for your cluster. \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . This is the only step in this guide that requires cluster level access. If you are running on Minishift or CRC make sure you are connected using the administrator login provided when you started your local instance. \n \n Download the Custom Resource Definitions (CRDs) and unpack them: \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs: \n \n oc create -f dist/crd\n Get your Cluster Default Ingress \n If you\'re deploying on a managed cluster get the default hostname from your cluster administrator. Entando uses wildcard addressing to connect different parts of your Entando application and the default route for applications exposed on your cluster is needed. You\'ll set this value in step 3 below. \n Setup and Deploy \n \n Download and unpack the entando-helm-quickstart release you want to use from here:\n https://github.com/entando-k8s/entando-helm-quickstart/releases \n \n \n See the included README file for more information on the following steps. \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n Edit  values.yaml in the root directory:\n \n Set  supportOpenshift: true \n If you\'re deploying to a managed cluster:\n \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the default URL of applications deployed in your OpenShift cluster. If you\'re unsure of this value, please check with your cluster administrator for this URL. \n Entando will create applications using that default URL and relies on wildcard DNS resolution. \n \n \n If you\'re using Minishift or CRC:\n \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the value from  minishift ip  or  crc ip  plus  nip.io . For example,  ENTANDO_DEFAULT_ROUTING_SUFFIX: 192.168.64.10.nip.io \n \n \n See  Appendix B  for an example values.yaml \n \n \n Create the Entando namespace: \n \n oc new-project entando\n \n \n Update helm dependencies: \n \n helm dependency update\n \n \n Run helm to generate the template file: \n \n helm template my-app --namespace=entando ./ > my-app.yaml\n \n \n If you\'re using Helm 2 instead of Helm 3, then replace  helm template my-app  with  helm template --name=my-app \n \n \n Deploy Entando via \n \n oc create -f my-app.yaml\n \n \n If you see this error  no matches for kind "Deployment" in version "extensions/v1beta1" , then you\'ll need to edit my-app.yaml and set  apiVersion: "apps/v1"  for the Deployment. \n \n \n Watch Entando startup \n \n oc get pods -n entando --watch\n \n \n This step is complete when the  quickstart-server  pod shows 3/3 running. For example, \n \n quickstart-server-deployment-6c89fb49f7-gpmqc   3/3   Running   0     72s\n \n \n The full pod name will differ but by default will start with  quickstart-server-deployment . \n \n \n Check for the Entando ingresses using  oc describe ingress -n entando . This is a snippet: \n \n Name:             quickstart-ingress\nNamespace:        entando\nAddress:          \nDefault backend:  default-http-backend:80 (<none>)\nRules:\n  Host                                 Path  Backends\n  ----                                 ----  --------\n  quickstart-entando.192.168.64.10.nip.io  \n                                       /entando-de-app     quickstart-server-service:8080 (<none>)\n                                       /digital-exchange   quickstart-server-service:8083 (<none>)\n                                       /app-builder/       quickstart-server-service:8081 (<none>)\n \n The host path in the configuration above plus  /app-builder/  (trailing slash is important) will allow you to log into your environment. For example,\n http://quickstart-entando.192.168.64.10.nip.io/app-builder/ \n Appendix A - Troubleshooting and Common Errors \n Permission Errors \n If you get OpenShift permission errors deploying your Entando application into your OpenShift namespace make sure your user has the  escalate  and  bind  verbs on Roles in the namespace you\'re deploying to. Ultimately you need this command to  oc auth can-i escalate role  to return  yes . That access is only required in the namespace where you are deploying your Entando application. No cluster level access is required. \n Check with your cluster administrator if you need help assigning these roles. Generally this requires the creation of a role with those permissions, preferably a ClusterRole, and then depending on how administrators manage security your Entando installer needs to be given that role in the target namespace. So let\'s assume the clusterRole we create is  entando-installer  and the user\'s name is john, on OpenShift creating the rolebinding would be:\n oc policy add-role-to-user entando-installer john -n <your-namespace> \n Before installing, we suggest running  oc auth can-i escalate role  with your given user in the targeted namespace. If it says "yes" you should be able to install. \n Forbidden Error installing Entando Custom Resource Definitions in Minishift or CRC \n If you get an error like the one below installing the CRDs in your local instance you need to login using the administrator role. \n /opt/ocInstallLocal$ oc create -f dist/crd/\nError from server (Forbidden): error when creating "dist/crd/EntandoAppCRD.yaml": customresourcedefinitions.apiextensions.k8s.io is forbidden: User "developer" cannot create resource "customresourcedefinitions" in API group "apiextensions.k8s.io" at the cluster scope\n \n The administrator credentials are printed when you started your local cluster in a message like this one: \n To access the cluster, first set up your environment by following \'crc oc-env\' instructions\nINFO Then you can access it by running \'oc login -u developer -p developer https://api.crc.testing:6443\'\nINFO To login as an admin, username is \'kubeadmin\' and password is xxxx-xxxx-xxxx-xxxx\n Application is not available when accessing app builder \n If you get the message "Application is not available" when accessing the app-builder make sure to include a trailing slash in the URL. For example,\nhttp://quickstart-entando.192.168.64.10.nip.io/app-builder/ \n Network Issues \n If you see errors when images are being retrieved (resulting in errors like ErrImagePull or ImagePullBackOff), you may want to start crc using  crc start -n "8.8.8.8  or configure the nameserver using  crc config set nameserver 8.8.8.8  before running  crc start . This will allow the cluster to perform DNS lookups via Google\'s public DNS server. \n If you\'re on Windows, you should also check out the notes  here  since Minishift and CRC rely on Windows Hyper-V by default. This can result in network issues when the host computer is restarted. \n Appendix B - Example values.yaml file for Helm Quickstart \n The example below includes configuration for deployment on a locally installed instance: \n app:\n  name: quickstart\n  dbms: none\n#externalDatabase:\n host: some.db.host\n port: 32432\n databaseName: sampledb\n username:\n password:\noperator:\n  supportOpenshift: true\n  env:\n    ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n    #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n    #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n    ENTANDO_DEFAULT_ROUTING_SUFFIX: 192.168.64.10.nip.io\n    ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n    ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n    ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n    ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n    ENTANDO_K8S_OPERATOR_FORCE_DB_PASSWORD_RESET: "true"\n  tls:\n    caCrt:\n    tlsCrt:\n    tlsKey:\ndeployPDA: false\n \n '},{title:"Use Blueprint Generated Plugin and Micro Frontends Without a Bundle",frontmatter:{redirectFrom:"/next/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.html"},regularPath:"/next/tutorials/ecr/deploy-components-without-bundle.html",relativePath:"next/tutorials/ecr/deploy-components-without-bundle.md",key:"v-307f57a0",path:"/next/tutorials/ecr/deploy-components-without-bundle.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Steps",slug:"steps"},{level:2,title:"1. Generate a docker image for your microservice",slug:"_1-generate-a-docker-image-for-your-microservice"},{level:2,title:"2. Publish the Docker image to Docker registry (DockerHub or equivalent)",slug:"_2-publish-the-docker-image-to-docker-registry-dockerhub-or-equivalent"},{level:2,title:"3. Deploy the plugin into your Entando cluster",slug:"_3-deploy-the-plugin-into-your-entando-cluster"},{level:2,title:"4. Wait for your plugin to be in Running state and link the plugin with the app using an EntandoAppPluginLink custom resource",slug:"_4-wait-for-your-plugin-to-be-in-running-state-and-link-the-plugin-with-the-app-using-an-entandoapppluginlink-custom-resource"},{level:2,title:"5. Upload the micro frontends to your Entando App",slug:"_5-upload-the-micro-frontends-to-your-entando-app"},{level:2,title:"6. Use the microfrontend and microservice",slug:"_6-use-the-microfrontend-and-microservice"}],lastUpdated:"12/8/2020, 4:56:11 PM",content:' Use Blueprint Generated Plugin and Micro Frontends Without a Bundle \n Overview \n In this tutorial you will learn how to use the plugin and microfrontend generated using the Entando Blueprint in a running cluster without the need to include the components in a bundle. \n If you haven\'t already generated a plugin and micro frontends with the Component Generator go here first  Generate a Plugin \n Prerequisites \n \n \n An Entando Plugin built with the Entando Component Generator and populated with micro frontends \n \n \n Node and NPM are installed on your machine (use LTS version) \n \n \n Docker is installed on your machine and you are able to upload images to docker-hub or an image repository of your choice \n \n \n An installed instance of the Entando platform running Kubernetes. See  Getting Started \n Steps \n 1. Generate a docker image for your microservice \n JHipster uses the JIB Maven plugin to generate a docker image for your\nmicroservice. \n The name of the output image generated with JIB will be composed by: \n \n The organization you chose during the setup wizard (by default that\'s set to  entando ) \n The name of the application \n Version  0.0.1-SNAPSHOT \n \n You can build the docker image with this command \n ./mvnw -Pprod clean package jib:dockerBuild\n \n If for example during setup wizard you chose a custom organization  myorg  and the set the application name to  jhipster  the resulting docker image is going to be  myorg/jhipster:0.0.1-SNAPSHOT \n \n Note \n The output image name can be changed in the  pom.xml  file by configuring\nthe  plugins.plugin.jib-maven-plugin.configuration.to.image  tag \n \n  <plugin>\n   <groupId>com.google.cloud.tools</groupId>\n   <artifactId>jib-maven-plugin</artifactId>\n   <configuration>\n     \x3c!-- ... --\x3e\n     <to>\n       <image>\x3c!-- use a custom value here --\x3e</image>\n     </to>\n     \x3c!-- ... --\x3e\n   </configuration>\n </plugin>\n \n \n Note \n Output image name can also be set by customizing the  ./mvnw  command using the  -Djib.to.image \nparameter. For example, if you want to build an image with organization  myneworg , name  myapp  and version  latest  you can do \n \n  ./mvnw -Pprod clean package jib:dockerBuild -Djib.to.image=myneworg/myapp:latest\n \n \n Warning \n If you change the target image of the docker build, remember to update\nthe plugin metadata in the bundle accordingly. \n 2. Publish the Docker image to Docker registry (DockerHub or equivalent) \n Let’s now publish the docker image for the microservice to make it\navailable later during bundle installation in the cluster. \n docker push <name-of-the-image:tag>\n 3. Deploy the plugin into your Entando cluster \n You can now deploy the plugin custom resource generated by the Entando Blueprint in the  bundle/plugins  folder. \n \n Warning \n As stated in step 1, if you changed the target image of your docker build, the plugin custom resource\nin the  bundle/plugins  folder needs to be updated to point to the correct image \n \n From the JHipster project directory: \n cd bundle/plugins\n\nkubectl create -f <plugin-file.yaml> -n entando\n 4. Wait for your plugin to be in  Running  state and link the plugin with the app using an  EntandoAppPluginLink  custom resource \n Once the plugin server deployment is up and running, you can create an  EntandoAppPluginLink custom resource \nto make the plugin API available from the EntandoApp domain. \n Here an example of a EntandoAppPluginLink custom resource. Some assumptions with this custom resource: \n \n The EntandoPlugin generated with the blueprint is  my-demo-plugin \n The EntandoApp exposing the  my-demo-plugin  APIs is  quickstart . This is the app name in an environment built using the Getting Started instructions. \n Both are deployed on the  entando  namespace. \n The link itself is named  quickstart-to-my-demo-plugin-link \n The name of the link yaml is  my-link.yaml \n \n \n Warning \n Remember to change the fields to match your setup. \n \n apiVersion: entando.org/v1\nkind: EntandoAppPluginLink\nmetadata:\n  name: quickstart-to-my-demo-plugin-link\n  namespace: entando\nspec:\n  entandoAppName: quickstart\n  entandoAppNamespace: entando\n  entandoPluginName: my-demo-plugin\n  entandoPluginNamespace: entando\n \n Now add this link to your environment \n kubectl create -f my-link.yaml -n entando\n \n A new link deployer will start and will work behind the scenes to add your plugin  ingressPath  (this is part of the\nplugin  spec ) to the EntandoApp ingress. \n 5. Upload the micro frontends to your Entando App \n Now that the plugin and the app are linked together, you can proceed to generate the Micro Frontend from the App Builder\nand upload the static resources like  js  and  css  files. \n \n From AppBuilder go to  Configuration -> File Browser  and create a new folder inside the  public  folder and make the name of the folder the same as the name of the bundle (the value is in the  code  field available in the  /bundle/descriptor.yaml  file of the blueprint project) or using a custom name, e.g.  demo-widget \n \n \n Warning \n If you choose to use a custom folder, remember to update the references in the customUI of the widget later \n \n \n Upload all the resources available in the  /bundle/resources  folder\nof the blueprint project into the folder you created above in the App Builder file browser. \n \n \n Warning \n You can decide to recreate the folder structure to be the same as the one in  /bundle/resources  or not, but you need to update the\nreferences in the customUI / configUI of the widget later if you choose a different folder structure. \n \n \n \n Create the widget. In the App Builder go to  Components → Micro frontends & Widgets . \n \n \n Select  Add \n \n \n Set whatever title you want \n \n \n For the customUI copy the one created in one of the widgets you generated from the blueprint.\nAs an example, the customUI for the  detailWidget  of the conference entity is available in\n /bundle/ui/widgets/conference/detailsWidget/conference-details-widget.ftl \n \n \n \n Warning \n Remember to update all the references in the customUI to use the custom folder structure you defined \n \n \n Update the service url to match the location where you deployed the ingress for your microservice if you used a path different than the default. For example, \n \n Update the service-url value with the relative path of your service if you\'re deploying a bundle\n\t\tEx. <car-table service-url="/newBp/api"  />\n\tOr use the full path if you\'re deploying the BE and FE individually\n\t\tEx. <car-table service-url="http://newbp-plugin-entando.192.168.64.7.nip.io/newBp/api"/>\n \n \n Note \n Your Entando application includes a keycloak_auth fragment that will inject the token\nand connection to Keycloak that your microfrontends need to invoke protected APIs. You can see this token at  Components → UX Fragments  in the\nApp Builder and search for keycloak_auth. \n \n \n If you\'re creating a new page from scratch or your page is missing the Keycloak fragment you can add it with this freemarker snippet \n \n <@wp.fragment code="keycloak_auth" escapeXml=false />\n 6. Use the microfrontend and microservice \n You can now use your micro frontends and your microservice in your Entando App. \n'},{title:"Install Bundles from a Private Git Repository",frontmatter:{0:"r",1:"e",2:"d",3:"i",4:"r",5:"e",6:"c",7:"t",8:"F",9:"r",10:"o",11:"m",12:":",13:"/",14:"n",15:"e",16:"x",17:"t",18:"/",19:"d",20:"o",21:"c",22:"s",23:"/",24:"e",25:"c",26:"r",27:"/",28:"e",29:"c",30:"r",31:"-",32:"s",33:"e",34:"t",35:"u",36:"p",37:"-",38:"p",39:"r",40:"i",41:"v",42:"a",43:"t",44:"e",45:"-",46:"g",47:"i",48:"t",49:".",50:"h",51:"t",52:"m",53:"l"},regularPath:"/next/tutorials/ecr/ecr-private-git-repo.html",relativePath:"next/tutorials/ecr/ecr-private-git-repo.md",key:"v-71b59a20",path:"/next/tutorials/ecr/ecr-private-git-repo.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Using SSH keys with Git",slug:"using-ssh-keys-with-git"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"1/12/2021, 11:31:10 AM",content:' Install Bundles from a Private Git Repository \n Overview \n The standard deployment of the Entando Component Repository assumes that bundles are checked out from public Git repositories. Public repositories do not require user authentication in order to access content inside the Git repository. \n A customer may however choose to limit repository access to specific Git user accounts. This document will\ndescribe the steps that can be followed to allow the ECR to log onto the Git server when pulling content from a\nGit repository. \n For more background information, please consult the folowing documentation: \n \n Entando custom resource reference \n Entando Component Repository overview \n Using SSH keys with Git \n Entando supports SSH keys to connect to Git repositories. Following the SSH approach, a developer that\nconnects to Git would typically generate a public/private keypair. The developer would then register the public\nkey with the Git server, whilst storing the private key securely in the local filesystem. When the Git command line\nutility executes an operation that requires an authenticated user, it will automatically look for the private\nkey locally and match it with the public key provided by the server. If the two match up, then the operation is allowed to complete. \n Entando currently allows a Kubernetes Secret containing a Git SSH private key to be mounted in the container that hosts the Entando Component Manager service. This container is deployed with the EntandoApp and can therefore be configured\nfrom the EntandoApp custom resource. The best approach to prepare such a secret is by generating the keypair on\nyour local machine using a Docker image, and creating a Secret from the directory the keypair was generated in. \n Tutorial \n This is the recommended flow on Linux: \n \n \n Navigate to a folder in your operating system that you would like to create the Secret from \n \n \n Generate the SSH keypair from the known SSH client docker image: \n \n \n Run the Docker container in interactive mode, mounting the default user ssh directory to a local directory \n docker run -it -v $PWD/entando_ssh:/root/.ssh kroniak/ssh-client /bin/bash \n \n \n \n On the shell of the resulting container, generate your own keypair \n ssh-keygen\n \n Select all the default options, e.g. no passphrase, etc. \n \n \n Add the fingerprint to the known_hosts file by attempting to connect to your git server: \n ssh git@github.com\n \n When prompted to add it to the known hosts, type \'yes\'. The command can be expected to fail and that is OK. \n \n \n Run  exit \n \n \n \n \n Create the Secret. You are now back in your local operating system\'s shell. You will notice that a new directory has been created due\nto the previous mount that was setup in the Docker command. You may need to give yourself access to this folder before\nyou can create a Secret with the content of this folder: \n \n \n Change the permissions on the folder: \n sudo chmod ag+r entando_ssh -R\n \n \n \n Create a secret from the directory: \n kubectl create secret generic my-git-secret --from-file=entando_ssh -n <<your-namespace>>\n \n \n \n Confirm that the secret exists and has at least two keys: known_hosts, and id_rsa. Without these two keys in the\nSecret, Entando cannot log into Git. \n kubectl get secret my-git-secret -n <<your-namespace>> -o yaml\n \n \n \n \n \n Link the resulting private key to the account of a user that has access to the Git repositories in question. Ideally\nthis should be a dedicated service account user with restricted read only access to the repositories in question. For Github\naccounts, you can follow the  official Github instructions. \nWheen you are prompted for the content of the public key, please use the one generated in the previously created\nentando_ssh directory:\n entando_ssh/id_rsa.pub \n \n \n Now modify the EntandoApp resource you are deploying to mount the previously created Secret in the\n spec.ecrGitSshSecretName  property: \n \n \n       kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart"\n      spec:\n        dbms: none\n        replicas: 1\n        ecrGitSshSecretName: my-git-secret\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: ampie.apps.serv.run\n        environmentVariables:\n          - name: SPRING_PROFILES_ACTIVE\n            value: "default,swagger"\n \n '},{title:"Install Bundle Plugins from a Private Image Repository",frontmatter:{},regularPath:"/next/tutorials/ecr/ecr-private-images.html",relativePath:"next/tutorials/ecr/ecr-private-images.md",key:"v-c591f200",path:"/next/tutorials/ecr/ecr-private-images.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"},{level:2,title:"Troubleshooting",slug:"troubleshooting"}],lastUpdated:"12/11/2020, 5:09:30 PM",content:" Install Bundle Plugins from a Private Image Repository \n Overview \n The standard deployment of the Entando Component Repository assumes that plugin images are pulled from public repositories. Public repositores do not require user authentication in order to pull an image. The following tutorial will show you how to add secrets to your Kubernetes environment so you can successfully pull images from private repositories. \n Prerequisites \n \n A running Entando application \n A bundle containing a microservice plugin based on an image from a private repository. You can set this up by  creating a microservice bundle  and making the corresponding Docker Hub repository private. \n Tutorial \n The first step demontrates how to create a secret for Docker Hub but please see the  corresponding Kubernetes documentation  for other options. Once you have the created the secret you can either apply it to a deployed Entando application or add it to the Helm template for a new deployment. \n 1. Create the secret \nSupply the following parameters: \n \n the name of the new secret, e.g.  my-docker-secret . \n the URL to your registry server. For Docker Hub this is currently  https://index.docker.io/v1/ \n your Docker Hub username, password, and email. \n the Entando namespace, e.g.  entando  for a quickstart environment. \n \n kubectl create secret docker-registry  < your-secret-name >  --docker-server = < your-registry-server >  --docker-username = < your-name >  --docker-password = < your-pword >  --docker-email = < your-email >  -n entando\n \n 2a. Update a deployed Entando application \n If you're updating a deployed Entando application(for example a quickstart environment), you can add the new secret to the  entando-plugin  account. You'll need to supply your own namespace. \n kubectl edit serviceaccount entando-plugin -n entando\n \n Add the secret to the serviceaccount. You can either add a new section if it's the first secret or add another secret to the list. \n apiVersion :  v1\n imagePullSecrets :  \n   -   name :  your - secret - name\n kind :  ServiceAccount\n metadata :  \n   name :  entando - plugin\n \n If you describe the serviceaccount, it should list the secret. \n kubectl describe serviceaccount entando-plugin -n entando\n \n Output: \n Name :                 entando - plugin\n Namespace :            entando\n Image pull secrets :   your - secret - name\n \n If  (not found)  is listed next to the secret name, then you may have added the secret to the wrong namespace. \n 2b. Deploy a new Entando application \n If you're setting up a new Entando deployment by using an Entando Helm template (e.g. from the entando-helm-quickstart project), you can add the secret to the  values.yaml  file under the property  operator.imagePullSecrets . This is just a list containing the names of Docker secrets in the operator's namespace. \n <snip > \n operator :  \n   imagePullSecrets :  \n     -  your - secret - name\n<snip > \n \n You can now generate the deployment yaml and deploy it to Kubernetes as usual. \n 3. Install the Entando Bundle \n You can now install the Entando Bundle from the  Entando App Builder  →  Entando Component Repository . The microservice plugin should now be able to successfully pull the image. \n Troubleshooting \n This is the kind of error you'll see from  kubectl get pods  if a plugin is based on an image from a private repository and if there are any issues with the image URL or credentials, including a missing or incorrect secret. \n NAME                                                            READY   STATUS         \nMYUSERNAME-MYPLUGIN-0-0-2-server-deployment-657688c5x8tfb        1 /2     ErrImagePull \n \n "},{title:"Export and Publish a Bundle",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/ecr/export-bundle-from-application.html",relativePath:"next/tutorials/ecr/export-bundle-from-application.md",key:"v-e9447f00",path:"/next/tutorials/ecr/export-bundle-from-application.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:3,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Export an Entando Bundle",slug:"export-an-entando-bundle"},{level:3,title:"Setup the Keycloak client",slug:"setup-the-keycloak-client"},{level:3,title:"Create env.json",slug:"create-env-json"},{level:3,title:"Run the Bundler",slug:"run-the-bundler"}],lastUpdated:"1/29/2021, 9:58:37 AM",content:' Export and Publish a Bundle \n Overview \n Use the Entando bundler command to export a bundle of Entando components from an existing Entando application. An Entando bundle can be used to do the initial install of Entando components into an Entando application, migrate Entando components from one environment to another (e.g. Dev to QA), to provide a template for building a new Entando application, or as the skeleton of an Entando solution. The output of this command is the same bundle directory structure created by an Entando project including a bundle descriptor file. \n Prerequisites \n \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. git, entando-bundler). \n \n ent check-env develop \n \n \n You\'ll also need a running Entando application. \n You\'ll need admin access to Keycloak or admin access to Kubernetes to set it up. \n \n The tutorial assumes you\'re using an Entando quickstart application. You may need to adjust the specific URLs, credentials, namespaces, etc. for a custom application. \n Export an Entando Bundle \n Setup the Keycloak client \n You\'ll need to setup a Keycloak client with the appropriate permissions for the bundler to access all of the necessary Entando APIs. \n \n Find the secret for the Keycloak admin account. If you already have the admin credentials, then you can skip to step 3. \n \n kubectl get secrets -n entando \n \n In a quickstart application, the secret is named  quickstart-kc-admin-secret \n \n Determine the admin password using the secret name. \n \n kubectl get secret quickstart-kc-admin-secret -n entando -o go-template = "{{println}}Username: {{.data.username | base64decode}}{{println}}Password: {{.data.password | base64decode}}{{println}}{{println}}" \n \n Example output: \n Username: entando_keycloak_admin\nPassword: 1pTZev82Ee\n \n \n Login to Keycloak using the admin credentials. The URL will be something like   http://<YOUR-DOMAIN-OR-IP>/auth . You can use this command to verify the URL. \n \n kubectl describe ingress/quickstart-kc-ingress\n \n \n Go to  Clients  →  Create \n Enter a  Client ID  of your choice, e.g.  entando-bundler , and click  Save . \n The  Settings  tab should be shown. Edit the following values: \n \n \n Access Type:  confidential \n Service Accounts Enabled:  On \n Valid Redirect URLs:  * \n Web Origins:  * \n \n \n Click  Save \n Go to the  Service Account Roles  tab \n Select  Client Roles  →  quickstart-server \n Select  Available Roles  →  superuser . \n Click  Add Selected  to add  superuser  to the  Assigned Roles . This change will be saved automatically. \n Go to the  Credentials  tab and copy the  Secret  shown there. You\'ll need this in the next section. \n Create env.json \n \n Create a directory where you\'ll run the bundler and change to that directory. \n \n mkdir  testBundle ;   cd  testBundle\n \n \n Create an  env.json  file with the environment URLs and client credentials. The  clientId  and  clientSecret  are from steps 5 and 12 above. \n \n { \n    "coreBaseApi" :   "http://<YOUR-DOMAIN-OR-IP>/entando-de-app" , \n    "k8ssvcApi" :   "http://<YOUR-DOMAIN-OR-IP>/k8s" , \n    "clientId" :   "<YOUR-CLIENT-ID>" , \n    "clientSecret" :   "<YOUR-CLIENT-SECRET>" \n } \n Run the Bundler \n \n Create a child directory to hold the bundler output. Using the name  bundle  allows you to easily use the  ent prj  command with this bundle. \n \n mkdir  bundle\n \n \n Run the bundler command with your preferred settings. \n \n ent bundler from-env --location bundle --code my-test-bundle --description “My Test Bundle”\n \n The bundler will inspect the application using the Entando APIs, collect information about the individual components, construct the appropriate descriptor files, and finally assemble the top-level descriptor file. \n $ ls bundle\nassets      contentModels  contents         fragments  labels     pageModels  resources\ncategories  contentTypes   descriptor.yaml  groups     languages  pages       widgets\n \n At this point you have a full Entando project structure. You can inspect the output to edit the exported components or you could  deploy it to another Entando application . \n'},{title:"Build and Publish a Project Bundle",frontmatter:{sidebarDepth:2,redirectFrom:["/next/tutorials/backend-developers/build-and-deploy.html","/next/tutorials/ecr/tutorials/from-blueprint-to-de.html"]},regularPath:"/next/tutorials/ecr/publish-project-bundle.html",relativePath:"next/tutorials/ecr/publish-project-bundle.md",key:"v-48046660",path:"/next/tutorials/ecr/publish-project-bundle.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"CLI Steps",slug:"cli-steps"},{level:2,title:"Manual Steps",slug:"manual-steps"},{level:3,title:"Build Docker Image for Microservices",slug:"build-docker-image-for-microservices"},{level:3,title:"Build your bundle and publish to git",slug:"build-your-bundle-and-publish-to-git"},{level:2,title:"Install the bundle into an application",slug:"install-the-bundle-into-an-application"}],lastUpdated:"2/26/2021, 10:01:49 AM",content:' Build and Publish a Project Bundle \n Overview \n This tutorial shows you how to take an existing Entando project directory and deploy it to the Entando Component Repository. This involves building a Docker image from your microservice, creating your Entando bundle, checking your Bundle artifacts into git, and deploying the Entando bundle into Kubernetes. \n The Entando CLI automates many of the tasks involved in deploying an Entando bundle but you can also choose to perform the tasks manually. \n Prerequisites \n \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. Java, npm, git). \n \n ent check-env develop \n \n \n You will also need your git credentials, a git repository, and an Entando instance. \n You will also need an Entando project directory, either  developed by hand  or  generated by the Entando Component Generator . \n CLI Steps \n The following steps make use of the Entando  ent prj  command and its publication system (pbs) convenience methods. See the  Manual Steps  section below for a more detailed description of the underlying tasks. \n \n Build the project using the  ent prj  command. This saves you from having to build each part of the project individually. If you are using a project directory with just a bundle child directory (e.g. for a bundle exported from an environment or with hand-built components) then you should skip this step since there\'s nothing to build. \n \n ent prj build\n \n TIP \n The first run can take longer due to node downloads for any MFE widgets. For later runs you can use  ent prj fe-build  or  ent prj be-build  to independently build just the frontend or backend components. \n \n \n Initialize the bundle directory \n \n ent prj pbs-init\n \n \n Publish the build artifacts to github and Docker Hub. \n \n ent prj pbs-publish\n \n \n Create a Kubernetes custom resource and apply it to your Entando instance. You can modify the target namespace parameter ( -n ) if you changed it from the default. \n \n ent prj generate-cr  |  ent kubectl apply -n entando -f -\n \n \n Jump to the section below to finish installing your bundle:  Install the bundle into your application \n Manual Steps \n Build Docker Image for Microservices \n \n Build the project from the project directory \n \n ./mvnw -Pprod clean package jib:dockerBuild\n \n \n Note \n By default the organization used to generate the docker image is  entando , but you can provide a custom value during project initialization, as well as by changing the  pom.xml  file or by providing the  -Djib.to.image=<org>/<name>:<version>  to the  jib:dockerBuild  command. \n \n \n Note \n Output image name is generated using the organization value defined during project initialization. You can override the provided values by altering the  pom.xml  file or by customizing the  -Djib.to.image  parameter used in the  ./mvnw  command \n \n \n Warning \n If you manually override the target image of the docker build, remember to update the plugin metadata in the bundle accordingly in the bundle steps. \n \n \n View your image and tag \n \n docker images\n \n Output: \n REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nmyusername/example-app   0.0.1-SNAPSHOT      4ec7f05b2b27        33 seconds ago      213MB\n \n \n Publish the Docker image to Docker repository (Docker Hub or equivalent). You may need to first login via  docker login . \n \n docker push  < name-of-the-image:tag > \n \n For example:  docker push myusername/example-app:0.0.1-SNAPSHOT \n \n Note \n The first time your run this command it will have to push all of the layers. Subsequent runs will be much faster \n \n Output: \n  docker push myusername/example-app:0.0.1-SNAPSHOT\nThe push refers to repository [docker.io/myusername/example-app]\n545361404af4: Pushed\n...\nf1b5933fe4b5: Pushed\n0.0.1-SNAPSHOT: digest: sha256:804b3b91b83094c45020b4748b344f7199e3a0b027f4f6f54109cbb3b8a1f867 size: 2626\n Build your bundle and publish to git \n \n Populate the bundle with the generated micro frontends using  ./buildBundle.sh  or  npm run populate-bundle . \n \n ./buildBundle.sh\n \n \n Important \nThe bundle population with the micro frontends requires some time to be processed. You should be able to follow the progress of the operation on the console. \n \n \n \n The output of your bundle will be in the top level  bundle  directory in your microservice \n \n \n Commit your bundle files to git, separate from the top-level project files. \n \n \n echo  bundle  >>  .gitignore\n cd  bundle/\n git  init\n git   add   . \n git  commit -m  "Init Git repository" \n \n \n \n Create a new git repository and name it  my-bundle  (or a name of your choice). \n \n \n Add your remote repository as origin and push the bundle. \n \n \n git  remote  add  origin https://your/remote/repository.git\n git  push -u origin master\n \n \n Publish a git tag using the following commands. \n \n git tag -a "v0.0.1" -m "My first tag"\ngit push --tags\n \n \n Install the  entando-bundler \n \n npm   install  -g @entando/entando-bundler@6.3.0\n \n \n Generate a custom resource for your bundle. You should provide your own bundle name, namespace, and repository URL. \n \n entando-bundler from-git --name = < bundle-name >  --namespace = entando --repository = < your-repository-url >  --dry-run  >  example-bundle.yaml\n \n \n Make your bundle available in Kubernetes \n \n kubectl apply -f example-bundle.yaml -n entando\n Install the bundle into an application \n \n \n Log into the  App Builder \n \n \n Select  Component Repository  in the upper right \n \n \n Find your bundle and select  Install \n \n \n At this point the Entando platform will download and install the Docker image for your microservice and install the micro frontends into the Entando application. You can add those micro frontend widgets to the page(s) of your choice. \n You can use an Entando provided page or follow  this tutorial  to create your own page and/or page template. Please note that an application based on the Entando blueprint expects a user to be authenticated so you\'ll need to include the  keycloak_auth  UX fragment in your page template. \n'},{title:"Build and Publish a Simple Bundle",frontmatter:{sidebarDepth:2,redirectFrom:"/next/tutorials/ecr/tutorials/create-ecr-bundle-from-git.html"},regularPath:"/next/tutorials/ecr/publish-simple-bundle.html",relativePath:"next/tutorials/ecr/publish-simple-bundle.md",key:"v-eb2ee8e0",path:"/next/tutorials/ecr/publish-simple-bundle.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Create the project structure",slug:"create-the-project-structure"},{level:2,title:"Add a simple widget",slug:"add-a-simple-widget"},{level:2,title:"Create the bundle descriptor",slug:"create-the-bundle-descriptor"},{level:2,title:"Publish the bundle",slug:"publish-the-bundle"},{level:3,title:"CLI steps",slug:"cli-steps"},{level:3,title:"Manual steps",slug:"manual-steps"},{level:2,title:"Install the bundle into an application",slug:"install-the-bundle-into-an-application"}],lastUpdated:"12/9/2020, 3:18:45 PM",content:' Build and Publish a Simple Bundle \n Overview \n This tutorial shows you how to create a simple Entando bundle and deploy it into the Entando Component Repository. This involves manually defining a bundle with a single widget, checking your bundle artifacts into git, apply the Entando bundle custom resource to Kubernetes, and then installing the bundle into your application. \n Prerequisites \n \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. Java, npm, git). \n \n ent check-env develop \n \n \n You will also need your git credentials, an available git repository, and an Entando instance. \n \n Some of the following steps can be simplified by using the  ent prj  command and its publication system (pbs) convenience methods. The manual steps are also provided in those cases. \n Create the project structure \n First create a parent project directory along with a child bundle directory. In a project generated by the Entando Component Generator the microservice and micro frontend source files also live under the parent directory. \n mkdir  -p example-bundle/bundle ;   cd  example-bundle/bundle \n Add a simple widget \n Create a widget directory and descriptor file: \n mkdir  widgets\n touch  widgets/example-widget.yaml\n \n Populate the  example-widget.yaml  with a simple definition. Make sure to retain the correct YAML indentation. \n code :  example - widget\n titles : \n    en :  Example Widget\n    it :  Widget d\'esempio\n group :  free\n customUi :  <h2 > Hi from Example Widget</h2 > \n Create the bundle descriptor \n The  descriptor.yaml  is the main file processed by the Entando Component Repository and describes all of the components in the bundle. The name of the bundle descriptor must be  descriptor.yaml . \n touch  descriptor.yaml\n \n Populate the descriptor with the following YAML definition: \n code :  example - bundle\n description :  This is an example of an Entando bundle\n components : \n   widgets : \n     -  widgets/example - widget.yaml\n \n The component descriptor file name and location (e.g.  widgets/example-widget.yaml ) are arbitrary since the bundle descriptor explicitly points to the file. The typical convention is to group components by type, for example with all widgets in one directory, all page templates in another, etc. \n Publish the bundle \n You can publish a bundle using the CLI or you can perform the steps by hand. \n CLI steps \n \n Change to the project directory, if needed \n \n cd  example-bundle\n \n \n Initialize the Entando project and accept the defaults. \n \n ent prj init\n \n \n Initialize the publication system. You\'ll need the git repository URL and your credentials here. \n \n ent prj pbs-init\n \n \n Publish the bundle to git. By convention your first version will be  v0.0.1  but this is up to you. \n \n ent prj pbs-publish\n \n On subsequent iterations you can run just this command again to quickly push a new version of your bundle to git. \n \n You can now create the custom resource for your bundle and apply it to Kubernetes in one step. You should modify the target namespace parameter ( -n ) if you changed it from the default. \n \n ent prj generate-cr  |  ent kubectl apply -n entando -f -\n \n The  generate-cr  command uses the git repository URL and project name from earlier steps to create the custom resource. \n \n Jump to the section below to finish installing your bundle:  Install the bundle into an application \n Manual steps \n \n Change to the bundle directory, if needed \n \n cd  example-bundle/bundle\n \n \n Run the following commands to initialize git and commit the files. \n \n git  init\n git   add   . \n git  commit -m  "Init Git repository" \n \n \n Add your remote repository as origin and push the bundle. \n \n git  remote  add  origin https://your/remote/repository.git\n git  push -u origin master\n \n \n Publish a git tag using the following commands. \n \n git  tag -a  "v0.0.1"  -m  "My first tag" \n git  push --tags\n \n \n Now that you\'ve published your bundle to git you can create the Kubernetes custom resource for it. \n \n Install the bundler if you haven\'t previously done so. \n npm   install  -g  @entando/entando-bundler@6.3.0\n \n Next generate the custom resource for your bundle. Run the  entando-bundler from-git  command and provide your remote git repository URL via the  --repository  option and the correct namespace via  --namespace . You can also provide a thumbnail for your bundle with  --thumbnail-file  or  --thumbnail-url . \n entando-bundler from-git --name = example-bundle --namespace = entandp --repository = https://your/remote/repository.git --dry-run  >  example-bundle.yaml\n \n Next you can apply this definition to Kubernetes. You may need to first transfer the file to your VM, e.g using  multipass transfer . \n kubectl -n entando apply -f example-bundle.yaml\n \n You can confirm the presence of your custom resource via  kubectl get EntandoDeBundle -n entando \n Install the bundle into an application \n Now you can go to the  App Builder  →  Component Repository  and install your bundle. You should see your bundle in the list and when you click  Install  you can select your preferred version if the bundle contains more than one. \n At this point the Entando platform will download and install the components contained in the bundle. Once complete you should see the  Install  button change to give you an option to  Uninstall  that specific version. You can also navigate to  Components  →  Micro Frontends & Widgets  and find your custom widget under the  User  section. \n'},{title:"Microfrontends",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/micro-frontends/",relativePath:"next/tutorials/micro-frontends/README.md",key:"v-93c5c52a",path:"/next/tutorials/micro-frontends/",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Tutorials",slug:"tutorials"}],lastUpdated:"8/11/2020, 3:30:09 PM",content:" Microfrontends \n Introduction \n \n The idea behind Micro Frontends is to think about a website or web app as  a composition of features  which are owned by  independent teams . Each team has a  distinct area of business  or  mission  it cares about and specialises in. A team is  cross functional  and develops its features  end-to-end , from database to user interface. \n —  Michael Geers,  micro-frontends.org \n \n Think of micro frontends as the implementation of a microservices architecture applied to the full web application that extends all the way to the frontend. \n Entando implements micro frontends based on  Web Components , a set of technologies that allow developers to create reusable custom elements supported by all major internet browsers. \n Web Components can work with vanilla JavaScript as well as with the most popular web frameworks (e.g., React, Angular, and Vue). \n Entando's microservice and micro frontend architecture allows developers to work with their favorite technology stack, and makes it easier for companies to integrate disparate applications. \n Tutorials \n \n \n Create a React Micro Frontend \n \n \n Create an Angular Micro Frontend \n \n \n Add an App Builder configuration screen to a\nwidget \n \n \n Display widget configuration \n \n \n The Entando Blueprint generated widgets \n \n \n Communicate Between Micro Frontends \n \n \n Widget authentication with Keycloak \n \n \n"},{title:"Create an Angular Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/micro-frontends/angular.html",relativePath:"next/tutorials/micro-frontends/angular.md",key:"v-bc42847c",path:"/next/tutorials/micro-frontends/angular.html",headers:[{level:2,title:"Create Angular App",slug:"create-angular-app"},{level:3,title:"Convert to Custom Element",slug:"convert-to-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widget",slug:"add-widget"},{level:3,title:"See It in Action",slug:"see-it-in-action"}],lastUpdated:"9/30/2020, 11:30:23 AM",content:" Create an Angular Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n \n \n Tested Versions \n node v13.8.0 → We suggest using  nvm  to handle node installations. \n Create Angular App \n Install Angular CLI. \n npm   install  -g @angular/cli\n \n Generate a new angular application. \n ng new angular-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-widget\n \n ng serve\n \n This is the expected output: \n angular-widget\n├── e2e\n│   └── src\n│       ├── app.e2e-spec.ts\n│       └── app.po.ts\n│\n├── node_modules\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   └── app.module.ts\n│   │\n│   ├── assets\n│   │   └── .gitkeep\n│   │\n│   ├── environment\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   │\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   └── test.ts\n│\n├── .editorconfig\n├── .gitignore\n├── angular.json\n├── browserlist\n├── karma.conf.js\n├── package.json\n├── README.md\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.spec.json\n└── tslint.json\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n WARNING \n Install the Angular elements package using  ng add , not with  npm install  as it runs additional steps behind the scenes like adding the  document-register-element  polyfill. \n \n TIP \n Angular elements are Angular components packaged as custom elements (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way. \n \n Open  angular-widget/src/app/app.module.ts . \n \n Here's what the initial file looks like: \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule  }   from   '@angular/core' ; \n\n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  bootstrap :   [ AppComponent ] \n } ) \n export   class   AppModule   {   } \n \n Replace the entire file with: \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-widget' ,  el ) ; \n   } \n } \n \n \n In the initial file,  AppModule  is bootstrapped directly during application launch. \n In the updated file, we booststrap our custom element using the  ngDoBootstrap()  method . \n \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Test Micro Frontend \n Now, let's check our custom element to see if it's working. \n Open  angular-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-widget /> . \n <! doctype   html > \n < html   lang = \" en \" > \n < head > \n   < meta   charset = \" utf-8 \" > \n   < title > AngularWidget </ title > \n   < base   href = \" / \" > \n   < meta   name = \" viewport \"   content = \" width=device-width, initial-scale=1 \" > \n   < link   rel = \" icon \"   type = \" image/x-icon \"   href = \" favicon.ico \" > \n </ head > \n < body > \n   < angular-widget   /> \n </ body > \n </ html > \n \n Congratulations! \n You’re now running  Angular  in a micro frontend. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate an  angular-widget/dist  directory. \n If we assume browser support for  ES6 (ECMAScript 2015) , we can focus on the following JavaScript files to publish our app: \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Generated Build Files \n --outputHashing=none  generates files without hashes so we can deploy new versions of the micro frontend without having to reconfigure our widget in Entando to point to the newly built files. \n \n If you want to use file names with content hashes to avoid potential caching issues in your browser, you can update the  Custom UI  field of your widget after building new versions of your micro frontend. Widget configuration is covered in the next section. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Administration  at the lower left hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  angular-widget \n \n \n Click  Save . \n \n \n Click  angular-widget . \n \n \n Click 'Upload Files`. \n \n \n Upload the following files from  angular-widget/dist/angular-widget : \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Add Widget \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n Click  Add  at the lower right. \n \n \n \n Enter the following: \n \n \n Code: angular_widget  → note: dashes are not allowed \n Title: Angular Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/runtime-es2015.js \" > </ script > \n\n < angular-widget   /> \n \n \n Click  Save . \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n See It in Action \n Let's see the Angular micro frontend in action on our page. \n Add Page \n Note \n If you've already configured your home page: \n \n   Next to the  Home  folder, under  Actions , click  Configure . \n   Skip to the  Add Widget  section. \n \n \n Let's add our widget to the  Home  page. \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n Add Widget \n \n \n In the Search field in right-hand sidebar, enter  Angular Widget . \n \n \n Drag and drop  Angular Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n Congratulations! \n You now have an Angular micro frontend running in Entando. \n \n"},{title:"Authentication",frontmatter:{},regularPath:"/next/tutorials/micro-frontends/authentication.html",relativePath:"next/tutorials/micro-frontends/authentication.md",key:"v-30559540",path:"/next/tutorials/micro-frontends/authentication.html",lastUpdated:"8/11/2020, 3:30:09 PM",content:" Authentication \n Keycloak is used for authentication. \n To set up keycloak server, please refer to Keycloak\n documentation . \n As all MFE widgets use the same Keycloak instance, it should be\ninitialized on a container of all widgets. \n Using Details widget generated using Entando JHipster blueprint as an\nexample, let’s get familiar with authentication implementation. \n As mentioned before, widget auth implementation assumes that Keycloak is\ninitialized outside of the widget. In Details example, it is done in\nindex.html where Keycloak server’s keycloak.js is used. \n <head>\n    <script src=\"keycloak.js\"><\/script>\n    <script>\n        var keycloak = new Keycloak();\n        keycloak\n          .init({ onLoad: 'check-sso' })\n          .success(onInit);\n    <\/script>\n</head>\n \n \n Note \n keycloak.js is provided by your Keycloak server at\n <SERVER_URL:PORT>/auth/js/keycloak.js \n \n Keycloak is initialized by passing Keycloak server path, realm and\nclient ID and calling  init({/* options */})  function. \n const keycloak = Keycloak({\n  url: 'http://localhost:9080/auth',\n  realm: 'jhipster',\n  clientId: 'jhipster-entando-react-client',\n});\n\nkeycloak\n  .init({ onLoad: 'check-sso' })\n  .success(onInit);\n \n Depending on Keycloak version you are using,  init()  function can\nreturn a Promise (newer versions support  promiseType: 'native' \noption). \n keycloak\n  .init({ onLoad: 'check-sso', promiseType: 'native' })\n  .then(authenticated => {\n    alert(authenticated ? 'Authenticated' : 'Not authenticated');\n  })\n  .catch(() => {\n    alert('Failed to initialize');\n  });\n \n All the Keycloak events are made custom events - this way widgets could\nreact to them if a need arises. \n function createKcDispatcher(payload) {\n  return () => window.dispatchEvent(new CustomEvent('keycloak', { detail: payload }));\n}\n\nkeycloak.onReady = createKcDispatcher({ eventType: 'onReady' });\nkeycloak.onAuthSuccess = createKcDispatcher({ eventType: 'onAuthSuccess' });\nkeycloak.onAuthError = createKcDispatcher({ eventType: 'onAuthError' });\nkeycloak.onAuthRefreshSuccess = createKcDispatcher({ eventType: 'onAuthRefreshSuccess' });\nkeycloak.onAuthRefreshError = createKcDispatcher({ eventType: 'onAuthRefreshError' });\nkeycloak.onAuthLogout = createKcDispatcher({ eventType: 'onAuthLogout' });\nkeycloak.onTokenExpired = createKcDispatcher({ eventType: 'onTokenExpired' });\nconst onInit = createKcDispatcher({ eventType: 'onInit' });\n \n Keycloak object is then stored into  window.entando  object for widgets\nto have access to. \n window.entando = {\n  ...(window.entando || {}),\n  keycloak,\n};\n \n On the widget side inside the custom element creation logic Keycloak\nobject is accessed and passed into the component via Keycloak context \n const getKeycloakInstance = () =>\n  (window &&\n    window.entando &&\n    window.entando.keycloak &&\n    { ...window.entando.keycloak, initialized: true }\n  ) || { initialized: false };\n\n\n// ...\n\nconstructor(...args) {\n  // ...\n  this.keycloak = getKeycloakInstance();\n}\n\nconnectedCallback() {\n  // ...\n  ReactDOM.render(\n    <KeycloakContext.Provider value={this.keycloak}>\n      <ConferenceDetailsContainer />\n    </KeycloakContext.Provider>,\n    this.mountPoint\n  );\n}\n \n And on the component side you can show different content depending on\nthe authentication status \n At  auth/KeycloakViews.js \n export const AuthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return authenticated ? children : null;\n};\n\nexport const UnauthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return !authenticated ? children : null;\n};\n \n At  components/ConferenceDetailsContainer.js \n render() {\n  const { conference, loading } = this.state;\n  const { t, keycloak } = this.props;\n\n  return (\n    <ThemeProvider theme={this.theme}>\n      <UnauthenticatedView keycloak={keycloak}>\n        {t('common.notAuthenticated')}\n      </UnauthenticatedView>\n      <AuthenticatedView keycloak={keycloak}>\n        {loading && t('common.loading')}\n        {!loading && <ConferenceDetails conference={conference} />}\n      </AuthenticatedView>\n    </ThemeProvider>\n  );\n}\n \n \n Note \n Keycloak object is accessible via props because of  withKeycloak  HOC:\n export default withKeycloak(ConferenceDetailsContainer); \n \n"},{title:"Communicate Between Micro Frontends",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/micro-frontends/communication.html",relativePath:"next/tutorials/micro-frontends/communication.md",key:"v-77fa3f1a",path:"/next/tutorials/micro-frontends/communication.html",headers:[{level:2,title:"Publisher",slug:"publisher"},{level:3,title:"Create Custom Event",slug:"create-custom-event"},{level:3,title:"Update React App to Dispatch Event",slug:"update-react-app-to-dispatch-event"},{level:3,title:"Test Event Dispatcher",slug:"test-event-dispatcher"},{level:2,title:"Subscriber",slug:"subscriber"},{level:3,title:"Add Event Listener",slug:"add-event-listener"},{level:3,title:"Display Custom Event",slug:"display-custom-event"},{level:3,title:"Test Event Listener",slug:"test-event-listener"},{level:2,title:"Add Widgets to App Builder",slug:"add-widgets-to-app-builder"},{level:3,title:"Create Environment File",slug:"create-environment-file"},{level:3,title:"Run npm build",slug:"run-npm-build"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widgets",slug:"add-widgets"},{level:3,title:"View on a Page",slug:"view-on-a-page"},{level:2,title:"Angular to React",slug:"angular-to-react"},{level:3,title:"Create Angular Publisher",slug:"create-angular-publisher"},{level:3,title:"Add to App Builder",slug:"add-to-app-builder"}],lastUpdated:"11/20/2020, 11:39:57 AM",content:" Communicate Between Micro Frontends \n Recommended Learning \n \n Tutorial:  Create a React Micro Frontend \n Tutorial:  Create an Angular Micro Frontend \n \n \n Entando supports communication between micro frontends using  Custom Events , an established web standard. In this tutorial, we'll build: \n \n A React micro frontend that publishes an event \n A React micro frontend that listens to an event \n An Angular micro frontend that publishes an event to a React micro frontend \n Publisher \n Create a simple app to publish an event. \n npx create-react-app publisher-widget --use-npm\n \n Start the app. \n cd  publisher-widget\n \n npm  start\n Create Custom Event \n Next, add event firing logic. \n Add a new file  publisher-widget/src/PublisherWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   PublisherWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . onGreet   =   name   =>   this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App onGreet = { this . onGreet }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'publisher-widget' ,  PublisherWidgetElement ) ; \n\n export   default  PublisherWidgetElement ; \n \n \n In the  CustomEvent  constructor,  detail  is the specific name to use in the event payload, as per the  DOM specification . \n Import Custom Element \n Update  publisher-widget/src/index.js . \n import   './index.css' ; \n import   './PublisherWidgetElement' ; \n Test Custom Element \n Update  publisher-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < publisher-widget   /> \n    ...\n   </ body > \n Update React App to Dispatch Event \n Update  publisher-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n class   App   extends   React . Component   { \n   constructor ( props )   { \n     super ( props ) ; \n     this . state  =   {  name :   '' } ; \n   } \n\n   handleNameChange ( value )   { \n     this . setState ( prevState   =>   ( { \n       ... prevState , \n      name :  value , \n     } ) ) ; \n   } \n\n   render ( )   { \n     const   {  name  }   =   this . state ; \n     const   {  onGreet  }   =   this . props ; \n     return   ( \n       < div > \n         < h1 > Send a greeting < / h1 > \n         < label htmlFor = \"name\" > Name < / label > \n         < input id = \"name\"  onChange = { e   =>   this . handleNameChange ( e . target . value ) }  value = { name }   / > \n         < button onClick = { ( )   =>   onGreet ( name ) } > Say hello ! < / button > \n       < / div > \n     ) ; \n   } \n } \n\n export   default  App ; \n Test Event Dispatcher \n In the JavaScript console of your browser, enter: \n window . addEventListener ( 'greeting' ,   ( evt )   =>  console . log ( 'Hello' ,  evt . detail . name ) ) \n \n Write something in the text field. Click the \"Say hello!\" button and take a look at the JS console. It will show the event message. \n Congratulations! \n You’ve now published a custom event. \n Subscriber \n Next, let’s create the subscriber. \n npx create-react-app subscriber-widget --use-npm\n \n Start the app. \n cd  subscriber-widget\n \n npm  start\n Add Event Listener \n Add a new file  subscriber-widget/src/SubscriberWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   SubscriberWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . name  =   null ; \n     this . subscribeToWidgetEvent ( EVENTS . greeting ,   ( evt )   =>   this . onGreeting ( evt . detail . name ) ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   subscribeToWidgetEvent ( eventType ,  eventHandler )   { \n    window . addEventListener ( eventType ,  eventHandler ) ; \n   } \n\n   onGreeting ( name )   { \n     this . name  =  name ; \n     this . render ( ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App name = { this . name }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'subscriber-widget' ,  SubscriberWidgetElement ) ; \n\n export   default  SubscriberWidgetElement ; \n Import Custom Element \n Update  subscriber-widget/src/index.js . \n import   './index.css' ; \n import   './SubscriberWidgetElement' ; \n Test Micro Frontend \n Update  subscriber-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < subscriber-widget > \n    ...\n   </ body > \n Display Custom Event \n Update  subscriber-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n function   App ( {  name  } )   { \n   return  name  ?   ( < h2 > Just got a greeting  from   { name } < / h2 > ) \n     :   ( < h2 > Waiting  for  a greeting ... < / h2 > ) ; \n } \n\n export   default  App ; \n Test Event Listener \n In the JavaScript console of your browser, enter: \n const  widgetEvent  =   new   CustomEvent ( 'greeting' ,   { \n  detail :   { \n    name :   'Pippo' \n   } , \n } ) ; \nwindow . dispatchEvent ( widgetEvent ) ; \n \n The custom event should now display in the  subscriber-widget . \n Congratulations! \n You’ve now created a micro frontend that listens to custom events. \n Add Widgets to App Builder \n Now let's add the publisher and subscriber micro frontends in Entando. \n \n Note: These are the same steps as the  Create a React Micro Frontend  tutorial. \n Create Environment File \n Publisher Widget \n \n \n Create an  .env  file in the project root for the  publisher-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/publisher-widget\n \n Notes \n \n Replace  quickstart-entando.192.168.64.34.nip.io  with the ingress you use to access Entando from your local browser. \n /entando-de-app/cmsresources/  is your Resource URL. \n publisher-widget  is the public folder we'll create to host the publisher micro frontend. \n Subscriber Widget \n \n \n Create an  .env  file in the project root for the  subscriber-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n \n Use  subscriber-widget  for the name of the public folder we'll create to host the subscriber micro frontend. \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/subscriber-widget\n Run npm build \n Publisher Widget \n \n \n Open a command line, and navigate to the project root of the  publisher-widget . \n \n \n Run build. \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n Subscriber Widget \n \n Repeat steps 1-3 for the  subscriber-widget . \n Create Public Folder \n Publisher Widget \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Go to  Configuration  →   File Browser   →  public \n \n \n Click  Create Folder . \n \n \n Enter  publisher-widget . \n \n \n Click  Save . \n \n \n Click  public  →  publisher-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n publisher-widget/static/css \n publisher-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n publisher-widget/static/css/main.css \n publisher-widget/static/js/main.js \n publisher-widget/static/js/runtime.js \n publisher-widget/static/js/vendor.js \n Subscriber Widget \n \n Repeat steps 1-8 for the  subscriber-widget . \n Add Widgets \n Publisher Widget \n \n \n Go to  Entando App Builder  in your browser. \n \n \n Go to  Components  →  Micro Frontends & Widgets  at the top nav. \n \n \n Click  Add . \n \n \n Enter the following: \n \n \n \n Code: publisher_widget  → note: dashes are not allowed \n Title: Publisher Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> publisher-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/main.js \" > </ script > \n < publisher-widget   /> \n \n \n Click  Save . \n Subscriber Widget \n Repeat steps 1-5 for the subscriber widget. \n \n Code: subscriber_widget  → note: dashes are not allowed \n Title: Subscriber Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> subscriber-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/main.js \" > </ script > \n < subscriber-widget   /> \n View on a Page \n You can setup the widgets on an existing page (such as the Home page) or create your own page using the tutorial  here . The following steps assume you'll use the Home page. \n \n \n Go to  Pages  →  Management \n \n \n For the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n Click  Edit . \n \n \n In the  Settings  section, select a Page Template with more than one frame, e.g.  1-column : \n \n \n \n Page Template: 1 Column \n \n \n \n Click  Save and Configure . \n \n \n In the  WIDGETS  sidebar on the right: \n \n \n \n Drag  Publisher Widget  and  Subscriber Widget  into  Frame 1  and  Frame 2 . \n \n \n \n Click  Publish . \n \n \n To view the home page, scroll to the top of the page, and click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n Congratulations! \n You can now communicate between micro frontends with  Custom Events . \n Angular to React \n We can also communicate between micro frontends using different JavaScript frameworks. \n In this next example, we’ll create an Angular micro frontend to publish an event, and we'll use the React micro frontend we created in the previous section to receive the event. \n Create Angular Publisher \n ng new angular-publisher-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-publisher-widget\n \n ng serve\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n Replace the contents of  angular-publisher-widget/src/app/app.module.ts . \n \n In this file, we bootstrap the custom element using the  ngDoBootstrap  method. \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n import   {  ReactiveFormsModule  }   from   '@angular/forms' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule , \n    ReactiveFormsModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-publisher-widget' ,  el ) ; \n   } \n } \n Create Custom Event \n Replace the contents of  angular-publisher-widget/src/app/app.component.ts . \n \n Here, we're adding code to dispatch the custom event. \n \n import   {  Component  }   from   '@angular/core' ; \n import   {  FormControl ,  FormGroup  }   from   '@angular/forms' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n@ Component ( { \n  selector :   'app-root' , \n  templateUrl :   './app.component.html' , \n  styleUrls :   [ './app.component.css' ] \n } ) \n export   class   AppComponent   { \n  greetingForm  =   new   FormGroup ( { \n    name :   new   FormControl ( '' ) , \n   } ) ; \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   onSubmit ( )   { \n     const  name  =   this . greetingForm . get ( 'name' ) . value ; \n     this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n } \n Add HTML Form \n Replace the contents of  angular-publisher-widget/src/app/app.component.html . \n \n In the app component html, we're adding a simple form to call our component class  app.component.ts . \n \n < h1 > Send a greeting </ h1 > \n < form   [formGroup] = \" greetingForm \"   (ngSubmit) = \" onSubmit() \" > \n   < label > \n    Name\n     < input   type = \" text \"   formControlName = \" name \" > \n   </ label > \n   < button   type = \" submit \" > Say hello! </ button > \n </ form > \n View Micro Frontend \n Open  angular-publisher-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-publisher-widget /> . \n < body > \n   < angular-publisher-widget   /> \n </ body > \n \n You can check to see if your micro frontend is working in your browser (e.g., localhost:4200) \n Add to App Builder \n Now we're ready to host our micro frontend in Entando. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate a  dist  directory. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Configuration  →   File Browser   →  public . \n \n \n Create a folder named  angular-publisher-widget . \n \n \n Click  Upload Files . \n \n \n From your generated  dist  folder, upload: \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n Add Widget \n \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n \n \n Click  Add  at the lower right. \n \n \n Enter the following: \n \n \n \n Code: angular_publisher_widget  → note: dashes are not allowed \n Title: Angular Publisher Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-publisher-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-publisher-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-publisher-widget/runtime-es2015.js \" > </ script > \n\n < angular-publisher-widget   /> \n \n \n Click  Save . \n View on Homepage \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n In the Search field in right-hand sidebar, enter  Angular Publisher Widget . \n \n \n Drag and drop  Angular Publisher Widget  into the  Sample Frame  in the main body of the page. \n \n \n \n Replace  Publisher Widget . \n \n \n \n Click  Publish . \n \n \n In the top navigation, on the right, click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n \n Note: If you don't see an input field, refresh the page. \n \n Congratulations! \n You've now created an Angular micro frontend that can communicate with a React micro frontend. \n \n"},{title:"Tutorial: Blueprint generated widgets' overview",frontmatter:{},regularPath:"/next/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",relativePath:"next/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/README.md",key:"v-a95b2144",path:"/next/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",headers:[{level:2,title:"Common parts",slug:"common-parts"},{level:3,title:"Authentication",slug:"authentication"},{level:3,title:"Custom events",slug:"custom-events"},{level:3,title:"Tests and mocks",slug:"tests-and-mocks"},{level:3,title:"PropTypes",slug:"proptypes"},{level:3,title:"Fetching data",slug:"fetching-data"},{level:2,title:"Form widget",slug:"form-widget"}],lastUpdated:"7/31/2020, 11:25:02 AM",content:' Tutorial: Blueprint generated widgets\' overview \n When you  create an entity using Entando blueprint , it generates a few\npremade widgets. In this section we will review them. \n We will be using  Conference  as an entity name for the examples below. \n Common parts \n Each widget contains a README file that should help you with the setup. \n All generated widgets are web components created using Custom Elements\nAPI. \n Each widget is displayed using the custom element tag - e.g., inside the\nDetails widget folder  conference/detailsWidget/public/index.html  you\ncan find\n conference-details id="1" override-edit-handler hide-edit-button /> .\nThis element  <conference-details />  is defined in the component entry\npoint at\n conference/detailsWidget/src/custom-elements/ConferenceDetailsElement.js . \n \n Note \n custom element names ( conference-details ) require a dash in them to\nbe used, e.g., (kebab-case) - they can not be single words. \n \n For more information about web components, custom elements and micro\nfrontends, please refer to "Create a react micro frontend widget"\nsection. \n Authentication \n If widget requires authentication, component is wrapped in\n KeycloakContext.Provider  and Keycloak object is fetched from\n window.entando.keycloak  variable. Entando is using Keycloak as our\nauthentication provider, but you can add any providers you like. \n ReactDOM.render(\n  <KeycloakContext.Provider value={this.keycloak}>\n    <StylesProvider jss={this.jss}>\n      <ThemeProvider theme={this.muiTheme}>{FormContainer}</ThemeProvider>\n    </StylesProvider>\n  </KeycloakContext.Provider>,\n  this.mountPoint\n);\n \n For more information about authentication implementation, please refer\nto the "Authentication" section. \n Custom events \n All widgets rely on custom events for communication which is why custom\nevent creation and removal is in each widget, as well as event listener\ncreation. Note that when an event listener is created, it should be when\nthe element is no longer needed. It should be created in the custom\nelement’s  disconnectedCallback()  function. \n To add more events to listen to the widgets, add the event types to\n INPUT_EVENT_TYPES  object at\n detailsWidget/src/custom-elements/widgetEventTypes.js  which will add\nit to the listener list (or remove the event by removing the element). \n For more information about custom events and widget communication,\nplease refer to the section on "Widget communication". \n Tests and mocks \n Each widget has tests written for it. Entando uses\n react-testing-library , but developers are free to upgrade and use any\ntool. Tests are kept at  detailsWidget/src/components/  and mocks for\nthem are at  detailsWidget/src/components/ . \n PropTypes \n PropTypes for data used across several components are shared - you can\nsee and modify them at  detailsWidget/src/components/ . This way you can\navoid repeating same propTypes in each component and just import shared\nones \n import React from \'react\';\nimport conferenceType from \'components/__types__/conference\';\n\nconst ConferenceDetails = props => {\n  // ...\n};\n\nConferenceDetails.propTypes = {\n  conference: conferenceType,\n  t: PropTypes.func.isRequired,\n};\n\nexport default ConferenceDetails;\n Fetching data \n For data fetching from widgets use Fetch API. You can find functions for\nfetching data at  detailsWidget/src/api  in different files for\ndifferent contexts. \n Form widget \n For displaying forms within a widget use\n Formik  which helps with form state\nmanagement. For data validation use\n Yup . \n'},{title:"Create a React Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/micro-frontends/react.html",relativePath:"next/tutorials/micro-frontends/react.md",key:"v-72d8dd08",path:"/next/tutorials/micro-frontends/react.html",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:3,title:"Wrap with Custom Element",slug:"wrap-with-custom-element"},{level:3,title:"Import Custom Element",slug:"import-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Get Resource URL",slug:"get-resource-url"},{level:2,title:"Build It",slug:"build-it"},{level:3,title:"npm build",slug:"npm-build"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Update Custom UI Field",slug:"update-custom-ui-field"},{level:3,title:"View in Homepage",slug:"view-in-homepage"}],lastUpdated:"1/13/2021, 4:46:36 PM",content:" Create a React Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n Use the Entando CLI to verify you have the command line prerequisites in place for this tutorial (e.g. npm). \n Create React App \n We'll use  Create React App  to create a simple app in seconds. \n npx create-react-app my-widget --use-npm\n \n This is the expected output: \n my-widget\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Start the app. \n cd  my-widget\n npm  start\n Wrap with Custom Element \n Add a new file  src/WidgetElement.js  with the custom element that will wrap the entire React app. \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n class   WidgetElement   extends   HTMLElement   { \n     connectedCallback ( )   { \n         this . mountPoint  =  document . createElement ( 'div' ) ; \n         this . appendChild ( this . mountPoint ) ; \n        ReactDOM . render ( < App  / > ,   this . mountPoint ) ; \n     } \n } \n\ncustomElements . define ( 'my-widget' ,  WidgetElement ) ; \n\n export   default  WidgetElement ; \n \n TIP \n connectedCallback  is a lifecycle hook that  runs each time the element is added to the DOM. \n \n The React  root  node is programatically generated in the  connectedCallback  method when our custom element is added to the DOM. \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Import Custom Element \n Open  src/index.js . Here's what the initial file looks like: \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import   './index.css' ; \n import  App  from   './App' ; \n import   *   as  serviceWorker  from   './serviceWorker' ; \n\nReactDOM . render ( < App  / > ,  document . getElementById ( 'root' ) ) ; \n\n // If you want your app to work offline and load faster, you can change \n // unregister() to register() below. Note this comes with some pitfalls. \n // Learn more about service workers: https://bit.ly/CRA-PWA \nserviceWorker . unregister ( ) ; \n \n Replace the entire file with these two lines. \n import   './index.css' ; \n import   './WidgetElement' ; \n Test Micro Frontend \n \n \n Open  public/index.html . \n \n \n Replace  <div id=\"root\"></div>  with the custom element  <my-widget /> . \n \n \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < my-widget   /> \n    ...\n   </ body > \n \n Congratulations! \n You’re now running  React  in a containerized micro frontend. \n Get Resource URL \n Let's add our micro frontend to Entando by adding our JavaScript and CSS files to the  public  folder. \n TIP \n Entando makes files publicly available through the  public  folder. \n Add Widget \n Initially, we'll add a widget to get the resource URL for the  public  folder. Later on, we'll use the same widget to add our micro frontend to Entando. \n \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n \n \n Click  Add  at the lower right. \n \n \n \n \n Enter the following: \n \n \n Code: my_widget  → note: dashes are not allowed \n Title: My Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < @wp . resourceURL  /> \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n \n \n Click  Save . \n Add Page \n Next, let's add our widget to a page so we can view the  Resource URL . \n If you're getting started with a new install of Entando, let's add our widget to the  Home  page: \n \n \n For Experienced Entando users: \n Add a new page → Add your widget to the page \n \n \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n \n \n In the Search field in right-hand sidebar, enter  My Widget . \n \n \n Drag and drop  My Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n This will take you to a blank home page with your widget. \n \n \n Copy the  Resource URL . For example, this is the URL in a quickstart environment set up via the Getting Started guide: \n \n /entando-de-app/cmsresources/\n Build It \n Now that we have the Resource URL where we'll host our  Create React App , we're ready to build. \n \n \n Create an  .env.production  file in the project root of your  Create React App . \n \n \n Add the  PUBLIC_URL  where we'll be hosting our files. \n \n \n PUBLIC_URL=/entando-de-app/cmsresources/my-widget\n \n Notes \n \n /entando-de-app/cmsresources/  is the Resource URL for your Entando application \n /my-widget  is the public folder we'll create to host our files \n npm build \n \n \n Open a command line, and navigate to the project root of your  Create React App . \n \n \n Run the command: \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n \n \n \n Generated Build Files \n We rename the JavaScript and CSS files so we can deploy new versions of the micro frontend without having to update the  Custom UI  field of our widget to reference the new files. \n \n If you want to use the original  file names with the content hashes to avoid potential caching issues in your browser , update the  Custom UI  field of your widget when deploying new versions of your micro frontend. The  Custom UI  settings will be covered in the next section. \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Administration  at the lower left hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  my-widget . \n \n \n Click  Save . \n \n \n Click  public  →  my-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n my-widget/static/css \n my-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n my-widget/static/css/main.css \n my-widget/static/js/main.js \n my-widget/static/js/runtime.js \n my-widget/static/js/vendor.js \n \n Note: You can drag and drop the files in your browser. \n \n Upload the  React  logo. \n \n \n my-widget/static/media/logo.5d5d9eef.svg  → You don't need to rename this file. \n Update Custom UI Field \n \n \n Go to  Components  →  Micro frontends & Widgets . \n \n \n Under the  My Widgets  category → next to  My Widget  → under  Action  → select  Edit . \n \n \n Update  Custom UI  field: \n \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> my-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/main.js \" > </ script > \n < my-widget   /> \n \n \n Click  Save . \n View in Homepage \n Let's see the React micro frontend in action on our page. \n \n \n In the  Entando App Builder  dashboard, click  Go to Homepage  at the upper right. \n \n \n Go to the page that you created, and click refresh. \n \n \n \n Congratulations! \n You now have a React micro frontend running in Entando. \n \n"},{title:"Add a Configuration Screen in App Builder",frontmatter:{redirectFrom:["/next/tutorials/micro-frontends/widget-configuration/display-widget-config-data.md","/next/tutorials/micro-frontends/micro-frontends/create-config-screen-for-appbuilder-widget.md"]},regularPath:"/next/tutorials/micro-frontends/widget-configuration.html",relativePath:"next/tutorials/micro-frontends/widget-configuration.md",key:"v-65aba380",path:"/next/tutorials/micro-frontends/widget-configuration.html",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:2,title:"Add Input Field",slug:"add-input-field"},{level:2,title:"Custom Element",slug:"custom-element"},{level:2,title:"Configuration Screen",slug:"configuration-screen"},{level:2,title:"Add Attribute",slug:"add-attribute"},{level:2,title:"Display Input",slug:"display-input"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Update Widget in App Builder",slug:"update-widget-in-app-builder"}],lastUpdated:"1/29/2021, 10:47:17 AM",content:' Add a Configuration Screen in App Builder \n Entando 6 widgets can be customized through an App Builder configuration screen that is itself a micro frontend. It can be developed and tested in isolation without a running Entando instance. \n Create React App \n Let’s start with the boilerplate provided by  Create React\nApp , probably the most popular one. \n npx create-react-app my-widget-config --use-npm \n my-widget-config\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Then, type  cd my-widget-config  and  npm start  to start the app. \n Add Input Field \n Let’s start with a simple form: only an input with a label. So, let’s\nedit  App.js \n import React from \'react\';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \'\'};\n  }\n\n  handleNameChange(value) {\n    this.setState(prevState => ({\n      ...prevState,\n      name: value,\n    }));\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div>\n        <h1>Sample Entando 6 Widget Configuration</h1>\n        <label htmlFor="name">Name</label>\n        <input id="name" onChange={e => this.handleNameChange(e.target.value)} value={name} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n You are free to use your favorite form handling library e.g.,\n Formik ,\n redux-form  (that requirese redux) or others. \n In regards to styling, since this is going to be an App Builder screen,\nwe strongly suggest using  PatternFly\nv3  ( patternfly  and  patternfly-react \npackages) to keep UX coherence. \n Custom Element \n Now, let’s add the web component that will wrap the entire React app.\nLet’s name it  WidgetElement \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nclass WidgetElement extends HTMLElement {\n  constructor() {\n    super();\n    this.reactRootRef = React.createRef();\n    this.mountPoint = null;\n  }\n\n  get config() {\n    return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n  }\n\n  set config(value) {\n    return this.reactRootRef.current.setState(value);\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget-config\', WidgetElement);\n\nexport default WidgetElement;\n \n Its responsibility is rendering the react app and syncing the react app\nstate in a  config  property, that  must  be named that way. The key to\nApp Builder communication is that it works in three steps: \n \n \n App Builder reads  config  property when the widget config screen is\nrendered \n \n \n config  property is mutated when a user configures the widget \n \n \n When a user saves the config, App Builder retrieves it (again, from\nthe  config  property) and persists it through Entando APIs \n \n \n This means the widget developer can focus on the configuration screens\nwithout having to call Entando APIs to read or write configuration. \n One more JS file to update:  index.js . Starting from this \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport \'./index.css\';\nimport App from \'./App\';\nimport * as serviceWorker from \'./serviceWorker\';\n\nReactDOM.render(<App />, document.getElementById(\'root\'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n You only have to import  WidgetElement  plus the css, if needed.\nSomething like \n import \'./index.css\';\nimport \'./WidgetElement\';\n \n We assume we don’t need a service worker for the widget, so we can\ndelete serviceWorker.js. \n To ensure our web component is working we have to edit\n public/index.html . Remove  <div id="root"></div>  from the  body  (we\nprogrammatically generated the react root in the  connectedCallback \nmethod of  WidgetElement ) and add our new web component tag\n <my-widget /> . \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget-config />\n  </body>\n</html>\n \n \n Note \n the web component tag name ( my-widget-config  in this tutorial)\n must  match the first parameter of the  customElements.define \nmethod. \n \n The page should auto reload and... congrats, you’re running an Entando 6\nwidget in isolation. \n Configuration Screen \n Next, we’ll build our widget before embedding it into the Entando 6\ninstance. From the react project root, type \n npm run build \n and a  build/static  directory will be generated. For convenience in this tutorial, rename the generated files: \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n Next load these files into Entando under  public/my-widget-config/static  using  Administration  →  File Browser . \n Now go to  Components  →  Micro frontends & Widgets  and find the original widget we\'re creating the configuration screen for. Edit the widget and update the\n configUI  field. \n {\n  "customElement": "my-widget-config",\n  "resources": [\n    "my-widget-config/static/js/runtime.js",\n    "my-widget-config/static/js/vendor.js",\n    "my-widget-config/static/js/main.js"\n  ]\n}\n \n \n Note \n \n \n It is possible to keep the original names in order to avoid\npotential caching issues, but then you will have to update the\n Config UI  field in the App Builder widget screen each time a new\nversion of the widget is deployed. \n \n \n configUI  is a JSON object, so pay attention to save a\nwell-formed one (the integrated JSON editor will help you) \n \n \n value for  customElement  must match the name of custom tag in\n index.html  and the one passed as parameter to\n customElements.define  in  WidgetElement \n \n \n \n You can now add a page in App Builder, drag the widget into the page template slot and you’ll see the configuration screen we just built. \n Display Widget Configuration \n So, we already created a React micro frontend widget and configuration\nscreen to customize a  name  field. \n In this tutorial we will display that field in our micro frontend\nwidget. \n Add Attribute \n Edit  WidgetElement  to add attribute handling to the custom element,\nand re-render our app when an attribute changes. Now, the  name \nattribute is being read from the custom element and passed as a prop to\nthe react root component ( App ). \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nconst ATTRIBUTES = {\n  name: \'name\',\n};\n\nclass WidgetElement extends HTMLElement {\n\n  static get observedAttributes() {\n    return Object.values(ATTRIBUTES);\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!Object.values(ATTRIBUTES).includes(name)) {\n      throw new Error(`Untracked changed attribute: ${name}`);\n    }\n    if (this.mountPoint && newValue !== oldValue) {\n      this.render();\n    }\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  render() {\n    const name = this.getAttribute(ATTRIBUTES.name);\n    ReactDOM.render(<App name={name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget\', WidgetElement);\n\nexport default WidgetElement;\n \n \n Note \n attributeChangedCallback  is also a custom elements lifecycle hook\nmethod. \n Display Input \n Edit the  App  component now, to make it display the  name  prop. \n import React from \'react\';\nimport \'./App.css\';\n\nfunction App({name}) {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <p>\n          Hello, {name}!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n \n Now, to ensure our custom element is working we can edit\n public/index.html  and set a value for the  name  attribute of the\ncustom element. \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget name="Marco"/>\n  </body>\n</html>\n \n After page reload, you should be able to display a simple "Hello,\nMarco!" message. \n Build It \n From the react project root, type: \n npm run build \n and the  build/static  directory will be regenerated. Again, for convenience, rename the files and then update them in Entando under  public/my-widget/static  using  Administration  →  File Browser : \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n a file like  css/main.d1b05096.chunk.js  to  css/main.css \n(stylesheet) \n \n \n \n Note \n you could keep the original names in order to avoid potential caching\nissues, but then you will have to update the  Custom UI  field in the\nApp Builder widget screen every time a new version of the widget is\ndeployed. \n \n If the application server you’re running does not have hot deploy\nenabled, restart it. \n Update Widget in App Builder \n Open the  Entando App Builder , go to  Components  →  Micro frontends & Widgets , find the widget  My Widget  and click to edit it. \n Update the  Custom UI  field from: \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/main.js"><\/script>\n<my-widget />\n \n to \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/main.js"><\/script>\n<@wp.currentWidget param="config" configParam="name" var="configName" />\n<my-widget name="${configName}" />\n \n We basically added a JSTL tag to extract a field (under  configParam )\nfrom the config field of the current widget and put it in a  configName \nvariable, that we pass to the custom element. \n Save the widget and reload the page that contains the widget. You should see\n Hello, Marco!  as expected. \n'},{frontmatter:{layout:"OpenShiftLayout"},regularPath:"/openshift.html",relativePath:"openshift.md",key:"v-087c5f39",path:"/openshift.html",lastUpdated:"10/7/2020, 10:07:38 AM",content:""},{frontmatter:{},regularPath:"/tutorials/",relativePath:"tutorials/README.md",key:"v-ff78147a",path:"/tutorials/",lastUpdated:"1/27/2021, 11:20:41 AM",content:" Redirecting to the current Tutorials...\n \n"},{title:"Entando Standard Demo Application",frontmatter:{sidebarDepth:2},regularPath:"/next/tutorials/samples/install-standard-demo.html",relativePath:"next/tutorials/samples/install-standard-demo.md",key:"v-6c251162",path:"/next/tutorials/samples/install-standard-demo.html",headers:[{level:2,title:"Application Details",slug:"application-details"},{level:3,title:"Micro Frontends (MFE)",slug:"micro-frontends-mfe"},{level:3,title:"Configuration Micro Frontends",slug:"configuration-micro-frontends"},{level:3,title:"Microservices",slug:"microservices"},{level:3,title:"Static Widgets",slug:"static-widgets"},{level:3,title:"Static CMS Content",slug:"static-cms-content"},{level:2,title:"Installation",slug:"installation"},{level:3,title:"Installation in OpenShift",slug:"installation-in-openshift"},{level:3,title:"Installation in Public Cloud (AKS, EKS, GKE)",slug:"installation-in-public-cloud-aks-eks-gke"},{level:3,title:"Installation in Local Environment",slug:"installation-in-local-environment"},{level:2,title:"Source Code",slug:"source-code"}],lastUpdated:"12/11/2020, 11:21:31 PM",content:' Entando Standard Demo Application \n Application Details Micro Frontends (MFE) Configuration Micro Frontends Microservices Static Widgets Static CMS Content Installation Installation in OpenShift Installation in Public Cloud (AKS, EKS, GKE) Installation in Local Environment Source Code \n Application Details \n The Entando Standard Demo application demonstrates a number of the major features in the Entando platform including: \n \n Keycloak integration for role based access controls \n Micro frontends implemented using React and Angular and co-existing on the same dashboard page \n Micro front communication techniques \n Microservices run via Spring Boot \n Entando Content Management \n Micro Frontends (MFE) \n The application includes six custom micro frontends which are described below. \n 1. Seeds Card \n \n \n The Seeds Card MFE is a React micro frontend that is visible on the My Dashboard page. The MFE makes an API call to the banking microservice to fetch a numeric result depending on the configured card type. The value displayed will change as the configuration is changed. \n The MFE is authorization-aware and will pass the bearer token to the microservice for authorization and authentication. If you render the dashboard page and you aren\'t authenticated the widget shows an error message. \n This widget emits events that are consumed by the Seedscard Transaction Table widget \n 2. Seeds Card NG \n \n \n The Seeds Card NG MFE is an Angular widget that is identical to the Seeds Card widget above except for the choice of front end technology. \n This MFE communicates with Seedscard Transaction Table widget which is implemented in React. \n 3. Manage Users \n Authorized View\n \n Not Authorized View\n \n \n The Manage Users MFE makes an API call to Entando Identity Management to fetch user information. The MFE is visible under the dropdown under the username when the user is logged into the app. \n By default the users provisioned in the application do not include the authorization required to manage users in Entando Identity Management. This is used to demonstrate role based access control for an MFE using Keycloak. To enable the Manage Users widget login to Keycloak and assign the  view-users  and  manage-users  roles from the realm-management client to the desired user. \n 4. Seedscard Transaction Table \n \n \n This MFE is a React micro frontend that consumes events from the Card MFEs detailed above. \n The Transaction Table widget makes an API call to the banking microservice to fetch transaction data for the logged in user. \n 5. Signup \n \n \n The Sign Up MFE is a form widget that makes an API call to the customer microservice to create a new user. The Signup MFE is visible on the sign up page and can be accessed from any page when a user is not authenticated. \n 6. Alert Icons \n \n \n The Alert Icon MFE displays an icon on the dashboard page and includes a configuration MFE to allow the user to select the appropriate icon and datatype to display. \n The Alert Icon MFE makes an API call to the banking microservice to fetch data in the default deployment. \n Configuration Micro Frontends \n Many of the MFEs detailed above include configuration screens visible in the App Builder when the MFE is placed on a page. In the App Builder navigate to  Components -> Micro frontends & Widgets  to see the configured MFEs. To see the rendered config screen place the MFEs above on a new page. \n Microservices \n The application includes two microservices (service paths:  /banking  and  /customer ) to support the data visible in the MFEs detailed above. Both microservices demonstrate the automated deployment and linking of a microservice to an Entando application via the Entando operator. \n The data for the microservices is created using Liquibase and demonstrates using the operator and Liquibase + Spring Boot to automatically provision data into an environment. The demo data is available in the source code for the microservices on GitHub. \n Static Widgets \n The application uses static HTML, FreeMarker, and JavaScript widgets to display content including headers, footers, images and other content in the application. To view the static widgets log into the App builder and select  Components -> Micro frontends & Widgets \n Static CMS Content \n The application makes extensive use of the Entando CMS. This includes the creation of content templates, content types, and content. If you want to learn more about the Entando CMS in the application log into the App Builder and select  Content -> Templates ,  Content -> Management , or  Content -> Types  as good starting points to view the content and static assets. \n Installation \n Installation in OpenShift \n \n Prepare OpenShift \n \n Create a namespace \n oc new-project entando\n \n Deploy the Entando custom resources \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n oc create -f dist/crd/\n \n \n Deploy the sample application \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando-samples/standard-demo/v6.3.0/deployment/sd-demo-openshift.yaml\n \n Get the base URL of your OpenShift instance (if running in CRC or minishift this will be the IP of your local cluster). If you are using an IP based public URL add  .nip.io  to the end. In the command below replace  <YOUR_CLUSTER_URL>  with the value of the ingress for your cluster. \n sed  -i  "s/apps.rd.entando.org/<YOUR_CLUSTER_URL>/"  sd-demo-openshift.yaml\n \n oc create -f sd-demo-openshift.yaml\n \n \n Watch the application start \n \n watch  oc get pods -n entando\n \n Watch the installation until the cluster is ready for use, indicated by a pod named quickstart-server-* with 3/3 in the READY column and RUNNING in the STATUS column. Use CTRL-C to stop watching the deployment \n \n Get the ingress path to your application \n \n oc get ingress -n entando\n \n Copy the value that starts with  quickstart-entando  under hosts. Then in your browser open the app-builder by appending  /app-builder/  (trailing slash is important) and the end user application at  /entando-de-app . \n For example: \n quickstart-entando. < YOUR_IP_HERE > .nip.io/entando-de-app/\nquickstart-entando. < YOUR_IP_HERE > .nip.io/app-builder/\n Installation in Public Cloud (AKS, EKS, GKE) \n Follow the cluster setup instructions for your public cloud instance for  Azure AKS ,  Amazon EKS  or  Google GKE . Then follow the deployment instructions below instead of deploying the default Entando application. \n \n Prepare Kubernetes \n \n Create a namespace \n kubectl create namespace entando\n \n Deploy the Entando custom resources \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n kubectl create -f dist/crd/\n \n \n Deploy the sample application \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando-samples/standard-demo/v6.3.0/deployment/sd-demo-cloud.yaml\n \n In the command below replace  <YOUR_NGINX_INGRESS_IP>  with the value of the IP you retrieved for nginx in setting up your public cloud cluster. \n sed  -i  "s/apps.rd.entando.org/<YOUR_NGINX_INGRESS_IP>.nip.io/"  sd-demo-cloud.yaml\n \n kubectl create -f sd-demo-cloud.yaml\n \n \n Watch the application start \n \n watch  kubectl get pods -n entando\n \n Watch the installation until the cluster is ready for use, indicated by a pod named quickstart-server-* with 3/3 in the READY column and RUNNING in the STATUS column. Use CTRL-C to stop watching the deployment \n \n Get the ingress path to your application \n \n kubectl get ingress -n entando\n \n Copy the value that starts with  quickstart-entando  under hosts. Then in your browser open the app-builder by appending  /app-builder/  (trailing slash is important) and the end user application at  /entando-de-app . \n For example: \n quickstart-entando. < YOUR_IP_HERE > .nip.io/entando-de-app/\nquickstart-entando. < YOUR_IP_HERE > .nip.io/app-builder/\n Installation in Local Environment \n The instructions below include setting up a local Kubernetes instance using multipass and K3s. \n \n Install Kubernetes\nInstall  Multipass \n \n Launch VM \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n Open Ubuntu shell \n multipass shell ubuntu-lts\n \n Install k3s \n curl  -sfL https://get.k3s.io  |   sh  -\n \n \n Prepare Kubernetes \n \n Create a namespace \n sudo  kubectl create namespace entando\n \n Deploy the Entando custom resources \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n sudo  kubectl create -f dist/crd/\n \n \n Deploy the sample application \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando-samples/standard-demo/v6.3.0/deployment/sd-demo-kubernetes.yaml\n \n ROUTING_SUFFIX = $( hostname  -I  |   awk   \'{print  $1 }\' ) .nip.io\n sed  -i  "s/apps.rd.entando.org/ $ROUTING_SUFFIX /"  sd-demo-kubernetes.yaml\n \n sudo  kubectl create -f sd-demo-kubernetes.yaml\n \n \n Watch the application start \n \n sudo   watch  kubectl get pods -n entando\n \n Watch the installation until the cluster is ready for use, indicated by a pod named quickstart-server-* with 3/3 in the READY column and RUNNING in the STATUS column. Use CTRL-C to stop watching the deployment \n \n Get the ingress path to your application \n \n sudo  kubectl get ingress -n entando\n \n Copy the value that starts with  quickstart-entando  under hosts. Then in your browser open the app-builder by appending  /app-builder/  (trailing slash is important) and the end user application at  /entando-de-app . \n For example: \n quickstart-entando. < YOUR_IP_HERE > .nip.io/entando-de-app/\nquickstart-entando. < YOUR_IP_HERE > .nip.io/app-builder/\n Source Code \n The source the Entando sample application is open source and can be found with our other open source examples and tutorials on GitHub at: \n https://github.com/entando-samples/standard-demo \n'},{title:"Overview",frontmatter:{},regularPath:"/v6.1/docs/concepts/",relativePath:"v6.1/docs/concepts/README.md",key:"v-43768dc5",path:"/v6.1/docs/concepts/",headers:[{level:2,title:"Entando App Engine",slug:"entando-app-engine"},{level:2,title:"Entando App Builder",slug:"entando-app-builder"},{level:2,title:"Entando Component Generator",slug:"entando-component-generator"},{level:2,title:"Entando Component Repository",slug:"entando-component-repository"},{level:2,title:"Entando Identity Management",slug:"entando-identity-management"},{level:2,title:"Entando WCMS",slug:"entando-wcms"},{level:2,title:"Entando Cluster Citizens",slug:"entando-cluster-citizens"},{level:3,title:"Architecture diagram",slug:"architecture-diagram"},{level:3,title:"Members of the cluster",slug:"members-of-the-cluster"},{level:2,title:"Entando Ingresses",slug:"entando-ingresses"},{level:3,title:"What is an ingress",slug:"what-is-an-ingress"},{level:3,title:"How ingresses are used in an Entando Cluster",slug:"how-ingresses-are-used-in-an-entando-cluster"},{level:3,title:"Default Ingress HTTP Routes",slug:"default-ingress-http-routes"},{level:3,title:"Exposing plugins in the EntandoApp domain",slug:"exposing-plugins-in-the-entandoapp-domain"},{level:3,title:"How to check ingresses in my cluster",slug:"how-to-check-ingresses-in-my-cluster"},{level:3,title:"Learn more",slug:"learn-more"}],lastUpdated:"7/9/2020, 7:26:26 AM",content:' Overview \n A portal, website, web app, or mobile app built with Entando is called an Entando application.\nAn Entando application is an assembly of out of the box and/or custom built components running on the\nEntando Platform. Components can be widgets, micro frontends, microservices, page templates,\nWCMS content or WCMS content types. \n Entando App Engine \n The Entando App Engine is the heart of the Entando Platform by providing the primary out-of-the-box services for\ndeveloping applications. Key features: \n \n Expose the APIs the Entando App Builder uses to provide the page and content management interface for your application. \n Handle the work of assembling micro frontends and microservices and combining them on specific pages as defined by the Entando App Builder. \n Provide the data access layer to persist the page and application design. \n Manage the cluster infrastructure. \n \n See also:  APIs tutorial \n Entando App Builder \n The Entando App Builder is the feature-rich management interface used to design and build pages for Entando applications. \n See also:  Widget Tutorial \n Entando Component Generator \n The Entando Component Generator is Entando\'s implementation of  JHipster  that allows users to\nquickly and efficiently generate the skeleton of an Entando Component. The Entando Component Generator provides advanced\ndata modeling capabilities including object relational mapping and automatic generation of micro frontends and microservices.\nThe generated skeleton serves as a starting point to help a development team swiftly meet the needs of the business. \n See also:  Entando JHipster Blueprint \n Entando Component Repository \n The Entando Component Repository (ECR) is used to store and retrieve shareable components so they can be used in multiple\nEntando applications across the enterprise. \n See also:  ECR Overview \n Entando Identity Management \n Entando Identity Management is the  Keycloak -based token-based authentication mechanism used by the\nEntando platform. It provides the ability to add Single Sign On capabilities across multiple domains and to connect service\nproviders with identity providers. \n See also:  Entando Authentication \n Entando WCMS \n The Entando Web Content Management System (WCMS) is a lightweight content and digital asset management system with support\nfor headless operation. It allows management of widgets and html fragments so they can be placed within an Entando application. \n See also:  Content Types  or  Content Templates \n Entando Cluster Citizens \n The purpose of this guide is to give an overview of the members of an Entando cluster and their role. \n Architecture diagram \n Let’s start with a picture of an Entando6 cluster and how the various\nmembers interact with each other. \n Members of the cluster \n An Entando 6 cluster is composed of various citizens which interact with\neach other. Most of these citizens have a Custom Resource Definition\nfile associated with them and are deployable on Kubernetes using the\nEntando operator and controllers. \n Entando app \n An Entando app is composed of three parts: \n \n \n App Builder : the replacement for the Admin Console and entry\npoint to customize and build an Entando application, as well as\nproviding a method to interact with the Entando Component\nRepository. \n \n \n Entando core : the backend APIs providing access to Entando\nservices. \n \n \n Entando component manager : the service providing the Entando\nComponent Repository functionality, e.g. listing the available\nbundles, install/uninstall a bundle, etc. Check the  dedicated\nsection  for more details \n \n \n The interaction between these three components (and the rest of the\nEntando cluster) use the authorization/authentication features provided\nby Keycloak. \n Entando Component Manager \n As briefly introduced before, the Entando component manager is able to\nlist the EntandoDeBundles accessible from the EntandoApp and provide the\ninstall/uninstall services to install a bundle on an Entando App. All of\nthese services are made possible by the communication with the Entando\nKubernetes service, the only service of the entando ecosystem (other\nthan the operator itself) able to interact with the cluster and some of\nthe Entando custom resources. \n Entando Kubernetes Service \n The Entando Kubernetes Service is part of the Entando cluster\ninfrastructure custom resource, and provides an access point to some of\nthe custom resources defined by Entando, in particular: \n \n \n Entando applications \n \n \n Entando plugins \n \n \n Entando links \n \n \n Entando Component Repository bundles \n \n \n Some of the main services provided by the Entando Kubernetes Service\nare: \n \n \n Provide a list of the available EntandoDeBundles to the\ncomponent-manager \n \n \n Deploy a plugin during the installation of a bundle or discovery of\nan already available plugin and expose that to an app \n \n \n Create a link between an EntandoApp and an EntandoPlugin to expose\nthe plugin’s APIs to the EntandoApp and the micro frontends (MFEs) \n Entando Component Repository bundles \n An EntandoDeBundle - or Component Repository bundle - is a package with\na set of Entando components and resources. The Entando component manager\nis able to read these kind of packages and install the components to\nextend the functionalities of an EntandoApp. For more details on the\nEntandoDeBundle and the Entando Component Repository, check the\n component repository overview \ndocumentation \n Entando plugin \n An Entando plugin is a microservice that exposes APIs reusable by one or\nmore Entando apps. Usually the plugin services are exposed to the\nEntando developer and the end users via micro frontends. Check the\n micro frontends  tutorials for more details. You can\nquickly generate an Entando plugin using the  Entando JHipster Blueprint . The generated project\nwill be ready to work in an Entando environment providing the\nintegration with Keycloak, generating a set of default micro frontends\nand exposing the plugin’s logic via an EntandoDeBundle (check the\nreferences for details). \n Keycloak \n Keycloak in Entando 6 is responsible for authorization and\nauthentication All the members of an Entando 6 cluster interact with\nkeycloak to verify user/service authorization to perform any specific\ntask. Check out the references below for more details on keycloak. \n Entando Ingresses \n What is an ingress \n An Ingress is a Kubernetes resource which purpose is to expose HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. \n How ingresses are used in an Entando Cluster \n When deploying an Entando Cluster, ingresses are generated for the resources that requires to be exposed to the outside world. The process of creating an ingress, setup the correct routes and the certificates is done by the via the Entando Operator and the entando custom resource controllers. \n Keycloak ingress \n An dedicated ingress is created for keycloak to expose the authentication and authorization functionalities. Having a dedicated ingress is required to guarantee that both token issuing and token validation work correctly, even when the services using the keycloak instance are on different namespaces. \n Cluster infrastructure ingress \n Another ingress is created for the cluster infrastructure services in order to expose the api endpoint to interact with the cluster correctly \n Entando App ingress \n Another ingress is automatically created to expose App builder, App engine and the Entando component manager, a service part of the ECR.\nThe three containers are served under the same domain, and this is beneficial as they are able to interact without cross-origin issues. \n The Entando App ingress is also used when linking an Entando Plugin with and Entando App, operation that usually happens when a bundle containing an Entando Plugin is installed via the ECR in an Entando App. Check out the dedicated section for details. \n Entando Plugin ingress \n Also Entando Plugins are automatically exposed via an ingress when deployed in an Entando Cluster. \n Default Ingress HTTP Routes \n In this table you can see what are the default routes that are exposed for each ingress\n \n \n \n \n \n \n \n Ingress \n Ingress Http route \n Application \n \n \n \n \n Keycloak ingress \n /auth \n Keycloak \n \n \n Entando cluster infrastructure ingress \n /k8s \n Entando K8S service \n \n \n Entando App ingress \n /entando-de-app \n App engine \n \n \n /app-builder/ \n App builder \n \n \n /digital-exchange \n Entando component manager \n \n \n /<plugin-ingressPath> \n Entando plugin linked to the app \n \n \n Entando plugin ingress \n /<plugin-ingressPath> \n Entando plugin \n \n \n \n Note : The Entando plugin  ingressPath  variable is defined in the Entando Plugin custom resource under the  spec  element. The plugin ingress path is also used to expose the plugin under the Entando App domain \n Exposing plugins in the EntandoApp domain \n The process of exposing an Entando Plugin under the same domain (ingress) of the Entando App is made possible from the creation of an  EntandoAppPluginLink  custom resource and the corresponding controller. \n Once the link between the Entando App and the Entando Plugin is created, the controller reads the specification of such link and automatically creates the HTTP routes in the Entando App so that the plugin is exposed on the same domain as the App builder, App engine and Component manager. \n This allows the Microfrontend developers that need to access the plugin to not worry about CORS policy or knowing what is the full path where the plugin is exposed. The plugin is referencable using relative urls. \n How to check ingresses in my cluster \n Using the Openshift dashboard \n On the Openshift dashboard, Ingresses are not exposed directly as pods and deployments. The dashbaord provides direct access to the Ingress Routes (or simply routes) under the  Applications > Routes  menu. \n \n To see the ingress resources, you need to access them from the  Resources > Other resources  menu. From the dropdown you should select the  Ingress  resource and therefore you should be able to see the ingress available on that specific project/namespace \n Using kubectl from the command line \n From the command line, getting the ingress is very easy. Once you know the namespace(s) where your Entando Cluster is deployed, you simply need to use the \n kubect get ingresses.extensions -n <namespace>\n \n Here an example of the result in a test namespace \n > kubectl get ingresses.extensions -n local\n\nNAME               CLASS    HOSTS                               ADDRESS     PORTS   AGE\nqst-eci-ingress   <none>   qst-eci-local.192.168.1.9.nip.io   127.0.0.1   80      2d1h\nqst-ingress       <none>   qst-local.192.168.1.9.nip.io       127.0.0.1   80      2d1h\nqst-kc-ingress    <none>   qst-kc-local.192.168.1.9.nip.io    127.0.0.1   80      2d1h\n \n To get more details about a specific ingress, you can use the  get  command specifing the ingress name you want to check and the  yaml  output format \n > kubectl get ingresses.extensions -n local qst-ingress -o yaml\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  creationTimestamp: "2020-05-13T15:27:08Z"\n  generation: 1\n  labels:\n    EntandoApp: qst\n  managedFields:\n  - apiVersion: extensions/v1beta1\n    fieldsType: FieldsV1\n    fieldsV1:\n      f:status:\n        f:loadBalancer:\n          f:ingress: {}\n    manager: nginx-ingress-controller\n    operation: Update\n    time: "2020-05-13T15:27:08Z"\n  name: qst-ingress\n  namespace: local\n  ownerReferences:\n  - apiVersion: entando.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: EntandoApp\n    name: qst\n    uid: aa7053e1-fd8b-419f-bdee-df3018c013fa\n  resourceVersion: "16802097"\n  selfLink: /apis/extensions/v1beta1/namespaces/local/ingresses/qst-ingress\n  uid: e9b6f027-369a-4b84-b4b1-736a6e49f180\nspec:\n  rules:\n  - host: qst-local.192.168.1.9.nip.io\n    http:\n      paths:\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8080\n        path: /entando-de-app\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8083\n        path: /digital-exchange\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8081\n        path: /app-builder/\n        pathType: ImplementationSpecific\nstatus:\n  loadBalancer:\n    ingress:\n    - ip: 127.0.0.1\n Learn more \n For more details about ingress concept in Kubernetes please refer to the official documentation: \n \n Kubernetes Ingress documentation \n Openshift Routes documentation \n \n'},{title:"PDA Architecture",frontmatter:{},regularPath:"/v6.1/docs/concepts/pda-architecture.html",relativePath:"v6.1/docs/concepts/pda-architecture.md",key:"v-7a0c5c26",path:"/v6.1/docs/concepts/pda-architecture.html",headers:[{level:2,title:"PDA MFEs",slug:"pda-mfes"},{level:2,title:"PDA API",slug:"pda-api"},{level:2,title:"Sidecar",slug:"sidecar"},{level:2,title:"PDA Core",slug:"pda-core"},{level:2,title:"PAM Impl",slug:"pam-impl"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" PDA Architecture \n The objective of this document is to provide an explanation for the components\nthat compose the Process Driven Applications plugin (PDA) architecture from a\ndeployment perspective as well as how they interact with each other. \n The image below shows the components in high level: \n PDA MFEs \n The PDA Micro Frontends run on the browser and they render the UI custom\ncomponents the user interacts with. These components are written in React and\nthey fetch data from the PDA API, passing the Keycloak token for authentication.\nThe MFEs also make calls to the Entando Core API in order to retrieve the\nsettings required for the configuration UI. These components will be available\non Entando App Builder after the PDA plugin bundle is installed and the user\ncan create pages with them. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n PDA API \n The Spring Boot application that communicates with the engine and make its data\navailable in a Rest API. It interacts with Keycloak to validate the token and\nwith the sidecar to retrieve the connections/sensitive data, depending on how it\nwas deployed. The application shouldn't call specific engine classes directly,\ninstead it always calls the abstractions defined in PDA Core library. The engine\nimplementation to use is decided at runtime based on the connection details\nprovided. It is important to note that the PDA API application is stateless,\nsince it doesn't have a database. All data available on the API is retrieved\nfrom the BPM engine. After bundle installation, it will be deployed as a\nmicroservice in the Kubernetes infrastructure and an Ingress will be created to\nmake the API available to the MFEs, as described by the Entando Plugin custom\nresource. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin \n Sidecar \n The sidecar is another application (docker container) deployed in the same Pod\nas the PDA API. It exposes services to manage connection details, which will be\nstored as secrets in Kubernetes. The PDA API communicates with the sidecar to\nmanage BPM engine connection details. \n The source code for this component:\n https://github.com/entando/entando-plugin-sidecar \n PDA Core \n This is the library that defines the interfaces and abstractions that should be\nimplemented to interact with specific BPM engines. This way it is possible to\nhave multiple engine implementations at the same time. \n The source code for this component:\n https://github.com/entando/pda-core-engine \n PAM Impl \n The Red Hat PAM implementation for the PDA Core library. If the connection maps\nto a PAM engine, these are the classes that are going to be executed when the\nPDA API requests for engine operations. This implementation communicates with\nthe Kie Server, which executes the defined process operations. \n The source code for this component:\n https://github.com/entando/pda-redhatpam-engine \n"},{title:"Entando's Custom Resources for Kubernetes",frontmatter:{},regularPath:"/v6.1/docs/concepts/custom-resources.html",relativePath:"v6.1/docs/concepts/custom-resources.md",key:"v-68d2c0e6",path:"/v6.1/docs/concepts/custom-resources.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"The Core Entando Custom Resources",slug:"the-core-entando-custom-resources"},{level:2,title:"EntandoKeycloakServer",slug:"entandokeycloakserver"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Example",slug:"example"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties"},{level:2,title:"EntandoClusterInfrastructure",slug:"entandoclusterinfrastructure"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-2"},{level:2,title:"EntandoApp",slug:"entandoapp"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-3"},{level:2,title:"EntandoPlugin",slug:"entandoplugin"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-4"},{level:2,title:"EntandoAppPluginLink",slug:"entandoapppluginlink"},{level:3,title:"Overview",slug:"overview-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-5"},{level:2,title:"EntandoDatabaseService",slug:"entandodatabaseservice"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-6"},{level:2,title:"EntandoCompositeApp",slug:"entandocompositeapp"},{level:3,title:"Overview",slug:"overview-7"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-7"}],lastUpdated:"8/3/2020, 10:53:51 AM",content:' Entando\'s Custom Resources for Kubernetes \n Objective \n This document provides an overview of the Entando Kubernetes Custom Resources and their semantics in Entando 6. \n Prerequisites \n \n Basic knowledge of Kubernetes and how to deploy Docker images to it \n Basic knowledge of Helm and how Helm Charts use YAML templates for parameterized deployments to Kubernetes \n Overview \n Amongst the many features it offers, Kubernetes also comes with a REST API that for dozens of different resources types.\nGenerally these API off full Create/Retrieve/Update/Delete (CRUD) access to each of the resource types. We\ntypically format these resources in YAML or JSON and use commandline tools such as\n kubectl  or  oc  to manage them. Each of these resources has a clearly defined structure\nthat is well documented in the  Kubernetes API  .\nKubernetes  also allows clients to subscribe to events generated as these resources get updated. These subscriptions\nare called \'watches\' and allow clients to be notified whenever the state of a resource changes. Kubernetes also\nenforces very strong role based access control (RBAC) support on all resources, with permissions down to the level\nof granularity of operation (Create/Retrieve/Update/Delete/Watch) per resource. \n The basic architecture for Kubernetes worked so well for the developers of Kubernetes that they decided to also make it\navailable to third  party developers. Kubernetes now offers a mechanism to allow 3rd parties to provide its own custom\nresource types that still leverage the CRUD support, event subscriptions and RBAC provided by Kubernetes out of the box.\nThis mechanism is referred to as Custom Resources. \n Custom Resources are very commonly used with Kubernetes Operators. Operators are Docker images that have been\ndeployed to Kubernetes Deployments. The generally observe a set of custom resources and perform some operations against\nthe Kubernetes API to reflect the state changes in the Custom Resource. We can say that the Custom Resources are associated\nwith specific semantics in how they are translated to \n One can introduce a new Custom Resource into Kubernetes by registering a Custom Resource Definition (CRD). This is really\njust another yaml or json resource that defines the structure of the Custom Resource to be installed using the OpenAPI\nJSON Schema format. When talking about Custom Resources, it is very important to distinguish between Custom Resource\nDefinitions and Custom Resources. CRD\'s are static type definitions provided by an Operator\nprovider such as Entando. For those familiar with programming languages, CRD\'s are like class definitions, whereas\nCustom Resources are actual instances of that class. \n Entando introduces two groups of Custom Resources. On the one hand, there are the core Entando Custom Resources required\nfor a basic installation of Entando in a Kubernetes cluster. These Custom Resources directly result in other\nKubernetes resources being deployed in the cluster. On the other hand, there are the Custom Resources specific\nto the Entando Component Repository that serve primarily as metadata for other Entando components. \n The Core Entando Custom Resources \n The Entando Operator observes all the Core Entando Custom Resources in one or more namespaces. This means that if a Core\nEntando Custom Resource is created, updated or deleted, the Entando Operator will trigger a new run-to-completion Pod\nthat will translate that state change into a state change in the actual Kubernetes Cluster. Often, this will\nresult in the Deployment of one or more Docker images, but also one or more Services and sometimes and Ingress\ntoo. We refer to the Docker Images that implement these run-to-completion Pods as Entando Kubernetes Controllers. \n The Entando Operator itself is also implemented as a Docker Image. You can have a closer look at how it works in the\n entando-k8s-controller-coordinator  project on Github.\nApart from the normal Maven, Java and Docker files one would expect, you will also notice the\n entando-k8s-controller-coordinator Helm Chart .\nThis Helm Chart is basically the entrypoint for installations of Entando 6 on Kubernetes. More detailed instructions\non how to install the Entando 6 Operator are available in our\n installation instructions \n EntandoKeycloakServer \n The EntandoKeycloakServer Custom Resource is used to deploy and configure a Red Hat Keycloak Server instance on the\ncluster. After deploying this Keycloak instance, the Entando Operator will create a Kubernetes Secret that provides\nthe necessary information for subsequent deployment operations to access the Keycloak instance as the Admin user. This\nallows the rest of the Entando Kubernetes Controllers to create a Keycloak OIDC client for every HTTP service that\ngets deployed. If you already have a Keycloak instance that you would use, you can skip this custom resource entirely\nand simply create the `keycloak-admin-secret\' in the operator\'s namespace as specified in\n this tutorial \n Overview \n \n Entando Cluster Citizen:  Keycloak \n Custom Resource Definition:  EntandoKeycloakServer \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-keycloak-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-keycloak \n Github Repo:  entando/entando-keycloak \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoKeycloakServer"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-keycloak"\n  namespace: "keycloak-namespace"\nspec:\n  dbms: "postgresql"\n  imageName: "entando/entando-keycloak"\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  parameters: \n    KEYCLOAK_WELCOME_THEME: my-custom-theme\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof a previously  configured  EntandoDatabaseService ,\nthe Keycloak image will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor Keycloak to use. If left empty, or given value of \'none\', Keycloak will be deployed using its own internal\nH2 database. \n spec.imageName  is used to provide a customized image. By default, the operator will use the  entando/entando-keycloak \ndiscussed above. When using the default image, please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of this image will be calculated.\nWhen you need to customize the theme or add extensions to Keycloak, you can create your own custom image and provide\nthe value in this property. In this custom image, make sure you use the default image ( entando/entando-keycloak )\nas a base image. You can then add your customizations and build your own image. Please use a fully qualified\nDocker image name here. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for Keycloak. Please ensure that this is\naccessible using the default routing suffix of your Entando Operator Deployment, or a DNS name previously\nregistered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n keycloak-admin-secret  being replaced by a Secret connecting you to this newly created Keycloak instance.\nTheoretically one could use multiple Keycloak instances in a cluster, in which case this property should be false. \n spec.parameters  is a Map of environment variables to pass to the Keycloak Docker image. For example, this could\nbe used to select a specific theme for Keycloak to use using the variable KEYCLOAK_WELCOME_THEME. These parameters\nare applied to the container\'s environment variables after all variables have been calculated. It can therefore\nalso be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Keycloak Server \n EntandoClusterInfrastructure \n The EntandoClusterInfrastructure custom resource can be used to create the shared services that Entando requires in a cluster.\nAt the time of the writing of this document, there is really only one service, which is the Entando K8S Service, but this\nmay change in future. Deployments resulting from this custom resources are configured to use the default Keycloak\nServer specified in the  keycloak-admin-secret  using the  entando  realm. An Ingress will also be created as part of this\ndeployment. At this point, there is no way to customize the image in question. \n Overview \n \n Entando Cluster Citizen:  Entando Kubernetes Service \n Custom Resource Definition:  EntandoClusterInfrastructure \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-cluster-infrastructure-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-k8s-service \n Github Repo:  entando-k8s/entando-k8s-service \n \n \n Possible Database Images: none \n Example \n ---\nkind: "EntandoClusterInfrastructure"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-eci"\n  namespace: "eci-namespace"\nspec:\n  keycloakSecretToUse: some-keycloak-secret\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  parameters: \n    KEYCLOAK_WELCOME_THEME: my-custom-theme\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando K8S Service. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n entando-cluster-infrastructure-secret  being replaced by a Secret connecting you to this newly created\nEntando K8S Service.  Theoretically one could use multiple Entando K8S Services in a cluster, in which\ncase this property should be false for new Entando K8S Services that should not override the default Secret. \n spec.parameters  is a Map of environment variables to pass to the Entando K8S Service Docker image. For example, this could\nbe used to override the ENTANDO_NAMESPACES_TO_OBSERVE variable that configures the set of Kubernetes namespaces\nthis service should read EntandoDeBundles from. Also note that all of the\n Spring variables in entando-k8s-service project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando K8S Service \n EntandoApp \n An EntandoApp is a Deployment of a Docker image that hosts an Entando and Java based web application. Entando offers two\nstandard images that can be used, but generally we expect our customers to provide their own images here. An EntandoApp\nDeployment packages three images into a single Pod: the Entando App Image in question, AppBuilder and Component Manager. \n Overview \n \n Custom Resource Definition:  EntandoApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-controller \n Github Repo:  entando/entando-k8s-app-controller \n \n \n Deployment Details - Entando App:\n \n Docker image:  entando/entando-de-app-wildfly   or    entando/entando-de-app-eap \n Github Repo:  entando-k8s/entando-de-app \n Entando Cluster Citizen:  Entando App \n \n \n Deployment Details - AppBuilder:\n \n Docker image:  entando/app-builder \n Github Repo:  entando/app-builder \n \n \n Deployment Details - ComponentManager:\n \n Docker image:  entando/entando-component-manager \n Github Repo:  entando-k8s/entando-component-manager \n Entando Cluster Citizen:  Component Manager \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-app"\n  namespace: "my-namespace"\nspec:\n  standardServerImage: wildfly\n  customServerImage: your-org/your-image:4.3.2\n  dbms: "postgresql"\n  ingressPath: my-app\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  parameters: \n    ENTANDO_VAR1: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.standardServerImage  can be either wildfly  or  eap . This instructs the Entando Operator to use one of the\ntwo standard Entando App images.\n \n For  wildfly  it will deploy the  entando/entando-de-app-wildfly  image \n For  eap  it will deploy the  entando/entando-de-app-eap  image\nThis property and the  spec.customServerImage  are  assumed to be mutually exclusive. Only provide a value to\none of the two. Please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of these images will be calculated. \n \n \n spec.customServerImage  can be used to deploy the Docker image containing your own custom Entando App. Please\nfollow the instructions on how to  build your own image . \nThis property and the  spec.standardServerImage  are  assumed to be mutually exclusive. Only provide a\nvalue to one of the two. \n spec.dbms  is used to select the database management of choice. If left empty, a default value of  postgresql \nis assumed. The value  none  is not supported. If this value matches up to the  spec.dbms  property\nof a previously configured  EntandoDatabaseService ,\nthe Entando App will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the EntandoApp to use. \n spec.ingressPath  specifies the web context of the Entando App to be deployed. This is required to create a single\npath entry in the Ingress that is used to expose the Entando App. The default behaviour of Wildfly and\nJBoss EAP is to use the name of the WAR file that is deployed, but it is possible to override this in the EntandoApp\nproject itself using a  jboss-web.xml  file .\nIn the absence of the  jboss-web/xml  file, the web context  would be the the\nMaven artifactId of the Entando Opp project. It is also possible to modify this by changing the  <finalName>  element\nin the Maven  pom.xml \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure containining the Entando Component Repository for this App to use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando App. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. Keep in mind that EntandoPlugins linked to this app will\nalso be made available on this host. \n spec.parameters  is a Map of environment variables to pass to the EntandoApp Docker image. For example, this could\nbe used to provide connection details for custom datasources or message queues as discussed in the\n custom datasources tutorial . Also note that all of the\n Spring variables in an Entando project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to each of the three containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando App \n EntandoPlugin \n An Entando Plugin is a microservice that can be made available to one or more EntandoApps in the cluster. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin . The\nDeployment resulting from an EntandoPlugin is also a multi-container Pod deployment, and will include both the\nplugin Docker image specified and the EntandoPluginSidecar Docker Image \n Overview \n \n Custom Resource Definition:  EntandoPlugin \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-plugin-controller \n Github Repo:  entando/entando-k8s-plugin-controller \n \n \n Deployment Details - plugin:\n \n Docker image: as provided by user \n Entando Cluster Citizen:  Plugin \n \n \n Deployment Details - EntandoPluginSidecar:\n \n Docker image:  entando/entando-plugin-sidecar \n Github Repo:  entando/entando-plugin-sidecar \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoPlugin"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-plugin"\n  namespace: "my-namespace"\nspec:\n  image: your-org/your-image:4.3.2\n  securityLevel: lenient\n  ingressPath: /my-plugin\n  healthCheckPath: /actuator/health\n  dbms: "postgresql"\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  roles:\n    - code: admin\n      name: Administrators\n    - code: user\n      name: Users\n  permissions: \n    - clientId: some-keycloak-client \n      role: some-admin\n    - clientId: another-keycloak-client \n      role: another-admin\n  parameters: \n    ENTANDO_VAR1: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.image  is the Docker image you can provide for the plugin you want to deploy. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin \nCurrently only Docker images hosting Spring Boot applications are supported. It is therefore of  utmost\nimportance to start off with our blueprint and ensure that the resulting Spring Boot application respects\nthe Spring variables to be set from the Entando Operator. \n spec.dbms  is used to select the database management of choice. If left empty, or if the value is  none , it\nis assumed that the plugin in question does not required a database. If this value matches up to\nthe  spec.dbms  property  of a previously  configured\n EntandoDatabaseService ,\nthe Entando Plugin will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the Entando Plugin to use. \n spec.ingressPath  specifies the web context where the Entando Plugin will be made available when linked to EntandoApps.\nPlease ensure this is in sync with the  server.servlet.context-path  property set on your Spring Boot application. \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure this Plugin will use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando Plugin. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. This hostname will not be used from your Widgets that you\nhave implemented for this plugin as these widgets will use the hostname of the EntandoApp they are being used from.\nThis hostname is useful for embedded web user interfaces used only on this plugin, such as admin user interfaces\nor diagnostic user interface. \n spec.roles  specifies the set of roles that this plugin expects. At deployment time, the Entando Operator ensures\nthat each of these roles are created on Keycloak for the Keycloak client representing this EntandoPlugin. It is\nup to the Plugin provider to ensure that Spring Security has been set up to enforce the access rules implied\nby the individual roles. Each role has a unique  code  and a more human readable   name  as property. \n spec.permissions  specifies the set of permissions this plugin requires on other services with known Keycloak Clients.\nAt deployment time, the Entando Operator will use the service account user of this EntandoPlugin\'s Keycloak Client\nand create the necessary role bindings on the specified client id of the service to be used.\nEach permission specifies the  clientId  in Keycloak of the target service, and the  role  that this EntandoPlugin\nshould be bound to in that Keycloak client. \n spec.parameters  is a Map of environment variables to pass to the EntandoPlugin Docker image.\nIt is entirely up to the plugin provider to determine the semantics of each variable. We strongly suggest for\nplugin provider  to use  the standard Spring Property Resolver syntax for Spring variables, as this would allow\nany of these variables to be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited\nSpring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to both containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando Plugin \n EntandoAppPluginLink \n The EntandoAppPluginLink custom resource is created when an AppBuilder user links an EntandoPlugin to the current\nEntandoApp, or deploys an EntandoPlugin for use in the current EntandoApp. The Entando Operator processes the resulting\nEntandoAppPluginLink and creates a path for the Plugin on the Ingress that exposes the EntandoApp in question. This path\nis determined by the  spec.ingressPath  property on the EntandoPlugin custom resource itself. If the EntandoPlugin\nresides in a namespace other than the namespace of the EntandoApp, the EntandoOperator creates a Kubernetes\nService in the namespace of the EntandoApp that simply delegates to the Service in the namespace of the EntandoPlugin. \n Overview \n \n Custom Resource Definition:  EntandoAppPluginLink \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-plugin-link-controller \n Github Repo:  entando/entando-k8s-app-plugin-link-controller \n Example \n ---\nkind: "EntandoAppPluginLink"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-link"\n  namespace: "my-namespace"\nspec:\n  entandoAppName: my-app\n  entandoAppNamespace: my-namespace\n  entandoPluginName: my-app\n  entandoPluginNamespace: my-namespace\n Explanation of properties \n \n spec.entandoAppName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.name \n spec.entandoAppNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.namespace \n spec.entandoPluginName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.name \n spec.entandoPluginNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.namespace \n EntandoDatabaseService \n By default, the Entando Operator deploys one of either the MySQL or PostgreSQL database Docker images for every custom\nresource that requires a database. Many customers may however have existing infrastructure for their databases which\nthey may want to leverage. The EntandoDatabaseService custom resource allows customers to deploy a Service that points\nto an external database. When deploying one of the Entando custom resources that require a database, the Entando\nOperator will look for EntandoDatabases in the same namespace, and if it finds one with the same  spec.dbms  setting\nas the database required by the custom resource , it will create a dedicated schema/username/password combination\nfor the custom resource and point the deployment emanating from custom resource to this external database. \n \n Custom Resource Definition:  EntandoDatabaseService \n Example \n ---\nkind: "EntandoDatabaseService"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-database-service"\n  namespace: "my-namespace"\nspec:\n  dbms: "osracle"\n  host: 10.0.12.41\n  port: 1521\n  databaseName: mydb \n  tablespace: \n  secretName: some-secret\n  jdbcParameters:\n    maxStatements: 300 \n    loginTimeout: 180\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof the Entando custom resource that will use it. Valid values are  oracle ,  postgresql  and  mysql . \n spec.host  can either be a valid IPv4 address, or a hostname. Where an IP address is provided, the Entando Operator\nwill create a Kubernetes Service with an associated EndPoints resource to allow for routing to this address. Where\na hostname is provided, the Entando Operator will simply create a Kubernetes Service of type  cname \n spec.port  is the port that the external database service is running on. This value is optional in which case we will\nuse the default port for the DBMS vendor in question \n spec.databaseName  is the name of the database that the Entando Operator should be creating schemas in. This property\nis only for use with PostgreSQL and Oracle, as MySQL doesn\'t distinguish between schemas and databases. \n spec.tablespace  is only required for Oracle so that Schemas can be created in different tablespaces. \n spec.secretName  should be the name ( Secret.metadata.name ) of a Kubernetes Secret in the same namespace that has\na  username  key and a  password  key that will provide the Entando Operator with the necessary access and permissions\nto create Schemas and users on the database in question. \n spec.jdbcParameters  is a map of name/value pairs that will be appended to the JDBC connection string to allow for\nfurther customization of the actual connection to the database. \n EntandoCompositeApp \n The EntandoCompositeApp custom resource can be used to package a collection of Entando Core Custom Resources in a\nsingle YAML file for sequential deployment. Keep in mind that one can already use standard YAML syntax to package\na set of Kubernetes resources in a single file, separating each resource with a triple dash ( --- ). The purpose\nof this custom resource is therefor specifically to ensure that the deployment of the previous \'component\' has\ncompleted, and that  the resulting Pod is up and running before commencing deploying on the \'component\'. \n The primary use case of this custom resource is to package a full Entando App and all its supporting service and\nplugins for easy installation as is often required for demos and POCs. Creating this kind of dependency for typical\nproduction deployments is not advised, as it will inevitably result in a violation of pipeline isolation. The\nmore commonly recommended approach is for your Entando Apps and Plugins to be fully deployable in isolation. Use this\ncustom resource with care. \n Overview \n \n Custom Resource Definition:  EntandoCompositeApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-composite-app-controller \n Github Repo:  entando/entando-k8s-composite-app-controller \n Example \n ---\nkind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-composite-app"\n  namespace: "my-namespace"\nspec:\n  components:\n    - kind: "EntandoKeycloakServer"\n         metadata:\n           name: "my-kc"\n         spec:\n           dbms: postgresql\n           isDefault: true\n           replicas: 1\n       - kind: "EntandoClusterInfrastructure"\n         metadata:\n           name: "my-eci"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           isDefault: true\n       - kind: "EntandoApp"\n         metadata:\n           name: "my-app"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           standardServerImage: wildfly\n           ingressPath: /entando-de-app\n       - kind: "EntandoPlugin"\n         metadata:\n           name: "my-pda"\n         spec:\n           image: "docker.io/entando/entando-process-driven-plugin:latest"\n           replicas: 1\n           dbms: "mysql"\n Explanation of properties \n \n spec.components  specifies the list of Entando Core Custom Resources to be deployed  in sequence . Please note\nthat only the Entando Custom Resources discussed in this section can be used in this list. Custom resources\nrelated to the Entando Component Repository never result in actual deployments on the Kubernetes cluster and\ntherefore do not need to be specified in any sequence. You can use the normal triple dash YAML notation to\ninclude them in the same YAML file \n \n'},{title:"Entando Platform",frontmatter:{sidebarDepth:0},regularPath:"/v6.1/docs/",relativePath:"v6.1/docs/README.md",key:"v-6696675c",path:"/v6.1/docs/",headers:[{level:2,title:"Entando Architecture",slug:"entando-architecture"},{level:2,title:"Why Kubernetes?",slug:"why-kubernetes"}],lastUpdated:"6/29/2020, 11:12:12 AM",content:" Entando Platform \n Entando is a  micro frontend platform for Kubernetes  that helps enterprises innovate faster with parallel development teams that have end-to-end autonomy across the entire stack. \n With native support for Javascript app development, a micro frontend and microservices architecture, deployment of apps in containers that can be individually scaled up and down, and automated management of containers with Kubernetes, we simplify the move for enterprises looking to modernize across on-prem and cloud infrastructures. \n Entando Architecture \n \n The Entando platform includes the following major elements: \n \n Entando App Engine : assemble micro frontends & microservices and compose them on a page. \n Entando App Builder : the user interface to build and design applications. \n Entando Component Generator : provide advanced data modeling capabilities and automatically generate the corresponding microservices and micro frontends. \n Entando Component Repository : a shared, internal repository to encourage code reuse across the enterprise. \n Entando Identity Management : token-based authentication across multiple domains and connect service providers with identity providers. \n Entando WCMS : a web content management system that supports headless CMS. \n (optional)  Entando Business Automation Bundle : workflow and task automation including out of the box integration with Red Hat Process Automation Manager (PAM). \n Why Kubernetes? \n Instead of you doing the work to ensure your apps and services stay up and running, Kubernetes does the work for you. For each app or service, you can set resource limits, the number of pods you want backing each service, upgrade strategy, and auto-scaling. Kubernetes actively manages your cluster to match your defined resource utilization and ensures your site doesn't go down. \n How Google Runs Containers in Production \n Each week, Google deploys over 2 billion containers in production to run all of its services like Gmail, YouTube, and Search. Kubernetes is Google's open source solution to automate the management of containers at scale. \n \n Over 50% of Fortune 500 companies use Kubernetes with product offerings from Amazon Elastic Kubernetes Service (EKS), Google Cloud Platform (GKE), IBM (Red Hat) OpenShift, Microsoft Azure (AKS), and VMWare Pivotal (PKS). \n"},{title:"Get Started with Entando in 3 Easy Steps",frontmatter:{sidebarDepth:2},regularPath:"/v6.1/docs/getting-started/",relativePath:"v6.1/docs/getting-started/README.md",key:"v-65cd12ed",path:"/v6.1/docs/getting-started/",headers:[{level:2,title:"Install Kubernetes",slug:"install-kubernetes"},{level:3,title:"Enable Hypervisor",slug:"enable-hypervisor"},{level:3,title:"Launch Ubuntu VM",slug:"launch-ubuntu-vm"},{level:3,title:"Run Kubernetes",slug:"run-kubernetes"},{level:2,title:"Prepare Kubernetes Environment",slug:"prepare-kubernetes-environment"},{level:3,title:"Add Custom Resources",slug:"add-custom-resources"},{level:3,title:"Create Namespace",slug:"create-namespace"},{level:3,title:"Download Helm Chart",slug:"download-helm-chart"},{level:3,title:"Configure Access to Your Cluster",slug:"configure-access-to-your-cluster"},{level:2,title:"Deploy Entando",slug:"deploy-entando"}],lastUpdated:"6/29/2020, 11:12:12 AM",content:" Get Started with Entando in 3 Easy Steps \n New to Kubernetes, hypervisors, and Helm charts? \n This in-depth guide takes a learn-as-you-go approach, and will give you a working knowledge of Kubernetes as you get Entando up and running in a local environment. \n \n Install Kubernetes \n Prepare Kubernetes Environment \n Deploy Entando \n \n Note: For advanced or long-time Entando users, check out our  Quick Reference  install guide with just the steps. \n Install Kubernetes \n Since Entando is designed to run on Kubernetes, let's get started by installing our own instance of Kubernetes locally. \n We've tested a variety of Kubernetes implementations including Minikube, Minishift, CodeReady Containers, K3s, and Microk8s to find the best combination of low cpu/memory usage, fast startup times, and minimal configuration so we can get started quickly. After downloading the necessary files, we'll have our own instance of Kubernetes up and running in < 60 seconds. \n What's Needed to Run Kubernetes \n Kubernetes is a container orchestrator designed to manage a server cluster. It requires at least one master node running a Linux OS. We'll be using Multipass to create a lightweight Ubuntu VM in seconds that runs on a bare metal hypervisor for speed and performance. \n Enable Hypervisor \n TIP \n Hypervisors allow you to create and run virtual machines. Virtualization software that run on top of your operating system like VirtualBox or VMWare Workstation are Type 2 hypervisors. Type 1 hypervisors run on bare metal. \n \n Let's install a bare metal hypervisor for optimal performance. \n Mac:  Install  hyperkit . \n brew  install  hyperkit\n \n Windows:   Install Hyper-V \n \n What if my machine doesn't support hyperkit or Hyper-V? \n Use a Type 2 hypervisor that runs on top of your operating system: \n \n Install Virtual Box:\n Mac \n Windows \n Launch Ubuntu VM \n TIP \n Multipass is a tool developed by the publishers of Ubuntu to create lightweight Ubuntu VMs in seconds. \n \n \n \n Install  Multipass \n \n \n Launch VM \n \n \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n \n Open a shell \n \n multipass shell ubuntu-lts\n Run Kubernetes \n TIP \n K3s is a certified Kubernetes distribution designed for production workloads in resource-constrained environments. \n It's packaged as a single <40MB binary that reduces the dependencies and steps needed to install, run and auto-update a production Kubernetes cluster. \n \n \n Install  k3s \n \n curl  -sfL https://get.k3s.io  |   sh  -\n \n \n Check for  Ready   STATUS . \n \n sudo  kubectl get node\n \n \n What's running out of the box? \n sudo  kubectl get pods -A\n \n \n \n Congratulations! \n You now have a local instance of Kubernetes up and running. \n Prepare Kubernetes Environment \n To install Entando, we'll add  Custom Resources , create a  Namespace , download a  Helm  chart, and configure external access to our cluster. \n Add Custom Resources \n TIP \n Standard resources in Kubernetes include things like  Pods , which are a group of one or more containers,  Services , the way to call or access your pods, and  Ingresses , for managing external access to your cluster. \n Custom resources let you store and retrieve structured data.  Combining a custom resource with a custom controller allows you to define a desired state to automate the running of your applications or services in a Kubernetes cluster. \n \n Examples of custom resources in Entando are: \n \n Entando App Engine \n Entando Identity Management System \n \n From your Ubuntu shell: \n \n Download custom resource definitions. \n \n wget  -c https://dev.entando.org/assets/yaml/custom-resources.tar.gz -O -  |   tar  -xz\n \n \n Create custom resources \n \n sudo  kubectl create -f custom-resources\n Create Namespace \n TIP \n Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual clusters are called namespaces. \n You can use namespaces to allocate resources and set cpu/memory limits for individual projects or teams. They can also encapsulate projects from one another. \n \n sudo  kubectl create namespace entando\n Download Helm Chart \n TIP \n Helm is a package manager for Kubernetes that helps you define, install, and upgrade Kubernetes applications. \n \n curl  -L -C - -O https://dev.entando.org/assets/yaml/entando.yaml\n Configure Access to Your Cluster \n TIP \n Entando sets up  Ingresses  in Kubernetes to access services from outside your server cluster. We'll use this to access Entando from a local browser. \n \n To set up external access to your cluster, you'll need to replace the value of  ENTANDO_DEFAULT_ROUTING_SUFFIX  with your Ubuntu IP. You can look up your Ubuntu IP, and edit the YAML file manaully, but running the below commands will automatically update the IP address for you. \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n Deploy Entando \n Deploying the Helm chart will deploy all of the Kubernetes resources required for Entando to run. \n sudo  kubectl create -f entando.yaml\n \n sudo  kubectl get pods -n entando --watch\n \n \n What does a successful startup look like? \n \n First, you'll see the Entando operator:  ContainerCreating  >  Running \n Next, the Entando composite app deployer:  Pending  >  ContainerCreating  >  Running \n Then, Keycloak:  kc-deployer  >  kc-db-deployment \n \n Jobs / Deployments \n \n Jobs, like  kc-db-preparation-job  run once, and are  Completed :  0/1 \n Database deployments, like  kc-db-deployment , should end up as  Running :  1/1 \n The Keycloak server deployment  kc-server-deployment , should end up as  Running :  1/1 \n The  quickstart-server-deployment  should end up as  3/3 \n \n Lifecycle Events \n \n Each line represents an event:  Pending ,  ContainerCreating ,  Running  or  Completed \n Restarts should ideally be  0 ; otherwise, there was a problem with your cluster, and Kubernetes is trying to self-heal \n \n ubuntu@test-vm : ~ $   sudo  kubectl get pods -n entando --watch \n NAME                                   READY   STATUS              RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg   0/1     ContainerCreating   0          3s\nquickstart-operator-8556c9c6f8-9ghwg   0/1     Running             0          49s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     ContainerCreating   0          0s\nquickstart-composite-app-deployer-picaju7bf0   1/1     Running             0          20s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     ContainerCreating   0          0s\nquickstart-operator-8556c9c6f8-9ghwg           1/1     Running             0          88s\nquickstart-kc-deployer-mx7ms3sc2l              1/1     Running             0          19s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          0s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     ContainerCreating   0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Running             0          77s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    1/1     Running             0          87s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          13s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     PodInitializing     0          15s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Completed           0          17s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     ContainerCreating   0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Running             0          3m\nquickstart-kc-server-deployment-66484d596d-qr78q   1/1     Running             0          4m36s\nquickstart-kc-deployer-mx7ms3sc2l                  0/1     Completed           0          6m50s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     ContainerCreating   0          0s\nquickstart-eci-deployer-kx9nhop22g                 1/1     Running             0          5s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     ContainerCreating   0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Running             0          97s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running             0          2m7s\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed           0          2m15s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     ContainerCreating   0          1s\nquickstart-deployer-os19rw3eto                       1/1     Running             0          6s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          0s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     ContainerCreating   0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Running             0          7s\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running             0          19s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          4s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          5s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          8s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          9s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          6m42s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m20s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m22s\nquickstart-db-preparation-job-5a55b267-6             0/1     PodInitializing     0          7m23s\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed           0          7m25s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          0s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     ContainerCreating   0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     Running             0          2m35s\nquickstart-server-deployment-5597597575-gtptz        1/3     Running             0          2m37s\nquickstart-server-deployment-5597597575-gtptz        2/3     Running             0          2m38s\nquickstart-server-deployment-5597597575-gtptz        3/3     Running             0          3m5s\nquickstart-deployer-os19rw3eto                       0/1     Completed           0          11m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed           0          20m\n \n \n \n Press  Ctrl-C  to exit the watch command once everything is up and running. \n \n What pods come out of the box? \n sudo  kubectl get pods -n entando\n \n NAME                                                 READY   STATUS      RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg                 1/1     Running     0          132m\nquickstart-kc-db-deployment-c57f75d7f-wxmqr          1/1     Running     0          130m\nquickstart-kc-db-preparation-job-1d6ab9b6-7          0/1     Completed   0          129m\nquickstart-kc-server-deployment-66484d596d-qr78q     1/1     Running     0          128m\nquickstart-kc-deployer-mx7ms3sc2l                    0/1     Completed   0          130m\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running     0          123m\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed   0          124m\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running     0          121m\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed   0          121m\nquickstart-server-deployment-5597597575-gtptz        3/3     Running     0          113m\nquickstart-deployer-os19rw3eto                       0/1     Completed   0          121m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed   0          131m\n Log in to Entando \n Now that we've installed Entando, let's log in to  Entando App Builder . \n TIP \n Ingress exposes HTTP routes from outside the cluster to services within the cluster. \n \n Get the URL to access Entando from your local browser. \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n \n Example URL: \n \n quickstart-entando.192.168.64.33.nip.io/app-builder/\n \n \n \n \n Username: admin \n Password: adminadmin \n \n After login, change your password to activate your account. \n \n Note: If the login process hangs for more than 5 seconds, refresh the browser. \n \n \n The App Builder is where we'll compose our micro frontends alongside CMS pages and content. \n Congratulations! \n We now have Entando up and running on Kubernetes in our local environment. \n \n \n For Developers: Learn how Ingresses work behind the scenes. \n\n``` bash\nsudo kubectl describe ingress -n entando\n```\n\n``` shell-session\nName:             quickstart-kc-ingress\nNamespace:        entando\nAddress:          192.168.64.33\nDefault backend:  default-http-backend:80 ( )\nRules:\n  Host                                        Path  Backends\n  ----                                        ----  --------\n  quickstart-kc-entando.192.168.64.33.nip.io\n                                              /auth   quickstart-kc-server-service:8080 (10.42.0.14:8080)\n```\n\nThe Ingress provides the `Host` and `Path` to access our `Services`.\n\n#### Identity Management\n\n1. Find the URL to the Keycloak server.\n\n``` shell-session\n  Host                                        Path  Backends\n  ----                                        ----  --------\n  quickstart-kc-entando.192.168.64.33.nip.io\n                                              /auth   quickstart-kc-server-service:8080 (10.42.0.14:8080)\n```\n\n- Example URL:\n\n``` bash\nhttp://quickstart-kc-entando.192.168.64.33.nip.io/auth/\n```\n\nNote: Replace the first part of the URL with the value of your `Host`\n\n2. Get the Kubernetes `Secret` for the login and password.\n\n``` bash\nsudo kubectl get secrets -n entando\n```\n\nWe're interested in the `keycloak-admin-secret`:\n\n``` shell-session\nNAME                                                 TYPE                                  DATA   AGE\nquickstart-kc-db-admin-secret                        Opaque                                2      78m\nquickstart-kc-db-secret                              Opaque                                2      76m\nquickstart-kc-admin-secret                           Opaque                                2      76m\nquickstart-kc-realm                                  Opaque                                1      76m\nkeycloak-admin-secret                                Opaque                                3      70m\n```\n\n3. Decode the secret.\n\n``` bash\nsudo kubectl get secret keycloak-admin-secret -n entando -o jsonpath=\\\n'{\"\\n Username: \"}{.data.username | base64decode}{\"\\n Password: \"}{.data.password | base64decode}{\"\\n\"}'\n\"{{println}}Username: {{.data.username | base64decode}}{{println}}Password: {{.data.password | base64decode}}{{println}}{{println}}\"\n```\n\n- Example Username and Password:\n\n``` shell-session\nUsername: entando_keycloak_admin\nPassword: MZ8bY4phMd\n```\n\n4. In your Keycloak browser, click `Administration Console`\n\nEnter the Username and Password from your shell.\n\n#### Entando App Builder\n\n``` bash\nsudo kubectl describe ingress -n entando\n```\n\n``` shell-session\nName:             quickstart-ingress\nNamespace:        entando\nAddress:          192.168.64.33\nDefault backend:  default-http-backend:80 ( )\nRules:\n  Host                                     Path  Backends\n  ----                                     ----  --------\n  quickstart-entando.192.168.64.33.nip.io\n                                           /entando-de-app     quickstart-server-service:8080 (10.42.0.22:8080)\n                                           /digital-exchange   quickstart-server-service:8083 (10.42.0.22:8083)\n                                           /app-builder/       quickstart-server-service:8081 (10.42.0.22:8081)\n                                           /pda                quickstart-pda-server-service:8081 (10.42.0.28:8081)\n```\n\n- Example URL:\n\n``` bash\nhttp://quickstart-entando.192.168.64.33.nip.io/app-builder/\n```\n\n \n\n--- --\x3e\n"},{title:"Quick Reference",frontmatter:{},regularPath:"/v6.1/docs/getting-started/quick-reference.html",relativePath:"v6.1/docs/getting-started/quick-reference.md",key:"v-9e5cc7e8",path:"/v6.1/docs/getting-started/quick-reference.html",headers:[{level:2,title:"Quick Reference",slug:"quick-reference"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Quick Reference \n Just the steps, for advanced users. \n \n Install  Multipass \n Launch VM \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n Open Ubuntu shell \n multipass shell ubuntu-lts\n \n Install k3s \n curl  -sfL https://get.k3s.io  |   sh  -\n \n Check for node ready \n sudo  kubectl get node\n \n Download custom resource definitions \n curl  -L -C - https://dev.entando.org/assets/yaml/custom-resources.tar.gz  |   tar  -xz\n \n Create custom resources \n sudo  kubectl create -f custom-resources\n \n Create namespace \n sudo  kubectl create namespace entando\n \n Download Helm chart \n curl  -L -C - -O https://dev.entando.org/assets/yaml/entando.yaml\n \n Configure external access to your cluster with your VM IP \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n \n Deploy Entando \n sudo  kubectl create -f entando.yaml\n \n Check for quickstart-composite-app-deployer  Completed \n sudo  kubectl get pods -n entando --watch\n \n Get URL to access Entando App Builder from your browser \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n "},{title:"Add a New Datasource in EAP Server",frontmatter:{},regularPath:"/v6.1/docs/reference/add_datasource_to_eap_image.html",relativePath:"v6.1/docs/reference/add_datasource_to_eap_image.md",key:"v-3469f1cc",path:"/v6.1/docs/reference/add_datasource_to_eap_image.html",headers:[{level:2,title:"Other resources",slug:"other-resources"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Add a New Datasource in EAP Server \n With EAP should be enough to add a set of parameters the EntandoApp\ncustom resource. \n \n \n Set the standardServerImage to eap \n \n \n Add a  parameters  object \n \n \n \n Parameters environment variables reference \n \n \n \n \n \n \n \n Env variable \n Value \n Example with PortDB \n \n \n \n \n DATASOURCES \n "PORTDB,SERVDB, <YOUR-DS-PREFIX>" \n \n \n \n <YOUR-DS-PREFIX>_NONXA \n Defines the datasource as a non-XA datasource. Defaults to  false \n PORTDB_NONXA="true" \n \n \n <YOUR-DS-PREFIX>_JTA \n Defines Java Transaction API (JTA) option for the non-XA datasource. The XA datasources are already JTA capable by default Defaults to  true \n PORTDB_JTA="false" \n \n \n <YOUR-DS-PREFIX>_URL \n Defines connection URL for the datasource. \n PORTDB_URL="jdbc:derby:/entando-data/databases/entandoPort;create=true" \n \n \n <YOUR-DS-PREFIX>_JNDI \n Defines the JNDI name for the datasource. This setting is useful if you want to override the default generated JNDI name \n PORTDB_JNDI="java:jboss/datasources/entandoPortDataSource" \n \n \n <YOUR-DS-PREFIX>_DRIVER \n Defines Java database driver for the datasource \n PORTDB_DRIVER="derby" \n \n \n <YOUR-DS-PREFIX>_USERNAME \n Defines the username for the datasource \n PORTDB_USERNAME="agile" \n \n \n <YOUR-DS-PREFIX>_PASSWORD \n Defines the password for the datasource \n PORTDB_PASSWORD="agile" \n \n \n <YOUR-DS-PREFIX>_SERVICE_HOST \n Defines the database server’s host name or IP address to be used in the datasource’s connection-url property. \n PORTDB_SERVICE_HOST="dummy" \n \n \n <YOUR-DS-PREFIX>_SERVICE_PORT \n Defines the database server’s port for the datasource. \n PORTDB_SERVICE_PORT="1527" \n \n \n \n \n Note \n For more details on other standard variables check the  EAP\ndocumentation \n \n Here a potential example \n apiVersion: entando.org/v1\nkind: "EntandoApp"\nmetadata:\n  annotations: {}\n  labels: {}\n  name: "quickstart"\nspec:\n  dbms: #tbd\n  replicas: 1\n  standardServerImage: eap\n  ingressPath: /entando-de-app\n  parameters:\n    DATASOURCES: "PORTDB,SERVDB,MYDATASOURCE"\n    MYDATASOURCE_NONXA: "true"\n    MYDATASOURCE_JTA: "false"\n    ...\n Other resources \n \n EAP Official Documentation: Runtime\nArtifacts/Datasources \n \n'},{title:"The Entando Core APIs",frontmatter:{},regularPath:"/v6.1/docs/reference/core-swagger.html",relativePath:"v6.1/docs/reference/core-swagger.md",key:"v-2fb94430",path:"/v6.1/docs/reference/core-swagger.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Setup",slug:"setup"},{level:2,title:"Overview",slug:"overview"},{level:3,title:"API structure",slug:"api-structure"},{level:3,title:"Models",slug:"models"},{level:2,title:"Tutorial:",slug:"tutorial"}],lastUpdated:"8/6/2020, 4:27:56 AM",content:" The Entando Core APIs \n Prerequisites \n \n \n Java 8 \n \n \n maven \n Setup \n \n \n Clone the Entando sample app if you don’t already have it. \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n Start the app for local execution and enable the swagger profile by\npassing  -Dspring.profiles.active=swagger  to the jetty command. Set\nthe value of  -Djetty.port  to something available on your machine\ne.g. 8081. \n mvn clean package jetty:run-war -Pjetty-local -Pderby -Dspring.profiles.active=swagger -Djetty.port=8085 -Dorg.slf4j.simpleLogger.log.org.eclipse.jetty.annotations.AnnotationParser=error \n \n \n \n Note: If you don't have docker installed or running add  -DskipDocker=true  to the command above \n \n \n \n Wait for the app to start. \n \n \n Once started, navigate to the swagger ui in a browser. \n \n \n \n http://localhost:[your port]/entando-de-app/api/swagger-ui.html\n Overview \n The Entando core exposes REST APIs for every action that can be taken in\nthe App Builder and Admin Console environments. For example, you can use\nthese apis to create pages, create page models or to add widgets to\npages. The APIs can be used to support automation, testing, or\nintegrations with external systems. \n API structure \n All of the APIs share a common top level structure. Each response will\ncontain a top level entry for  errors ,  metadata , and  payload . \n The  errors  will always contain code and a message string indicating an\nerror condition in the request. The  metadata  section is used for\npaging, sorting, filtering and data that is distinct from the body. The\nbody of each response is included in the  payload  section of the\nresponse and varies according to each API. \n Models \n All of the model classes returned by the Entando core are annotated so\nthat the model definition is included in the swagger documentation. At\nthe bottom of the swagger page all of the model classes returned by the\nAPI endpoints can be found. \n Tutorial: \n \n \n Stop the Entando instance if it is running. \n \n \n In the project open  src/main/conf/systemParams.properties . \n \n \n Change the value of this property to reflect the port you are using\nto run the app. \n \n \n applicationBaseURL \n \n \n For example if running on 8085 you would have\n applicationBaseURL=http://localhost:8085/${entando.engine.web.context}/ \n \n \n \n \n Login to the admin console at\n http://localhost:8085/entando-de-app/do/login . \n \n \n Once logged in go to Integration -→ API Management -→ Consumers. \n \n \n Select the kebab button on the row labeled swagger. \n \n \n On that screen enable the button for  client_credentials . \n \n \n On that screen enter  swagger  as the value for the secret. \n \n \n Hit save \n \n \n Return to swagger  your\nport /entando-de-app/api/swagger-ui.html \n \n \n Hit authorize \n \n \n Enter \n \n \n User: admin \n \n \n PW: adminadmin \n \n \n client: swagger \n \n \n client_secret: swagger \n \n \n \n \n Use the  Try it out  button on the APIs \n \n \n Scroll to  widget-controller \n \n \n Select the blue GET row \n \n \n Select  Try it out \n \n \n Look at the results in the window \n \n \n \n \n"},{title:"Entando Deployment Structure",frontmatter:{},regularPath:"/v6.1/docs/reference/deployment-structure.html",relativePath:"v6.1/docs/reference/deployment-structure.md",key:"v-d6de65ec",path:"/v6.1/docs/reference/deployment-structure.html",headers:[{level:2,title:"entando-operator",slug:"entando-operator"},{level:2,title:"database init containers",slug:"database-init-containers"},{level:2,title:"entando-de-app",slug:"entando-de-app"},{level:2,title:"app-builder",slug:"app-builder"},{level:2,title:"component-manager",slug:"component-manager"},{level:2,title:"entando-k8s-service",slug:"entando-k8s-service"},{level:2,title:"keycloak",slug:"keycloak"},{level:2,title:"Other Key Repositories",slug:"other-key-repositories"},{level:3,title:"entando-core",slug:"entando-core"},{level:3,title:"entando-cms",slug:"entando-cms"},{level:3,title:"entando-components",slug:"entando-components"},{level:3,title:"Entando Kubernetes Controllers",slug:"entando-kubernetes-controllers"}],lastUpdated:"12/15/2020, 3:24:13 PM",content:" Entando Deployment Structure \n This page provides a high level overview of the key Entando GitHub repositories along with a brief description\nof how those repositories are realized in a running Entando deployment. The descriptions provided here are meant\nas a guide for identifying opportunities to dig deeper into the architecture and how things are structured\nrather than a panacea for understanding the architecture. \n entando-operator \n The Entando operator coordinates the installation and configuration of all of the components of an Entando\nCluster. The operator can be installed once per Entando Cluster and used to coordinate the plugin lifecycle for\nmultiple Entando applications across many namespaces. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-controller-coordinator/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-controller-coordinator \n Customization \n It is unlikely that the operator will be customized as part of an Entando implementation. It is not built to\nbe extended inside the codebase. The most common pattern will be to use the existing custom resources that the\noperator knows how to deploy to extend the Entando platform. \n database init containers \n During installation an Entando application needs to create several databases and also to initialize those\ndatabases with information when deploying from a backup in your images. At initialization the  entando-k8s-dbjob \nwill be run 5 times in total. Once for keycloak, twice for the entando application (port and serv dbs), once to\npopulate the Entando application database, and once to create the Component Repository database. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-dbjob \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-dbjob \n \n The screenshot below highlights the init containers for the Entando application schema creation, db\ninitialization, and component repository database. \n \n Many managed kubernetes instances like OpenShift won’t show init containers in their dashboards. So if you’re\ntroubleshooting you may need to look deeper. When fetching logs for an init container using kubectl you must\npass the container name as an argument to the call. For example, \n     kubectl logs <pod> -c <container> -n <namespace>        \n    kubectl logs quickstart-kc-db-preparation-job-ddbdbddb-a  -c quickstart-kc-db-schema-creation-job -n sprint1-rc\n Customization \n It is unlikely that the init containers will be customized as part of an Entando project. The init containers\nwill automatically restore a backup included in your application so that you can create custom images that\ninclude your application setup.\nSee  Backing Up and Restoring Your Environment . \n entando-de-app \n The  entando-de-app  is a J2EE application and is an instance of the  entando-core  (see a description of the\n entando-core  repo below). Reviewing the dependencies of this application in the pom.xml will reveal the\ndependencies on the  entando-core ,  entando-engine , and  admin-console  which encompass the core\nfunctionality in versions of Entando prior to Entando 6. In a quickstart deployment the  entando-de-app  is deployed as part of the  entando-composite-app  multi\ncontainer pod. \n \n GitHub:  https://github.com/entando-k8s/entando-de-app/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-de-app-eap , https://hub.docker.com/repository/docker/entando/entando-de-app-wildfly \n Customization \n The  entando-de-app  is very likely to be customized as part of an Entando implementation. This image can be\ncustomized with new APIs, legacy Entando plugins, new database tables, or other extensions to the  entando-core .\nIt is highly recommended that most extensions to the platform in Entando 6 occur in microservices. However, legacy\nintegrations, extensions to the CMS, and migrations from earlier Entando versions may require changes to the  entando-de-app . \n app-builder \n The  app-builder  is the front end of the  entando-de-app . It communicates with the  entando-de-app  via  REST\nAPIs . The  app-builder  is a React JS application and is served via node in the default\ndeployment. In a quickstart deployment the  app-builder  container is deployed in the  entando-composite-app \nmultiple container pod. The  app-builder  also communicates with the Component Manager via REST API to fetch\ninformation about Entando Bundles deployed to the Entando Component Repository (ECR). \n \n GitHub:  https://github.com/entando/app-builder/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/app-builder/ \n Customization \n The  app-builder  is built to be customized and will be customized as part of many Entando implementations.\nThe  app-builder  can be customized at runtime via micro frontends\n widget configuration . The  app-builder  can also be\ncustomized via the integration of custom modules that are added at\n build time . \n component-manager \n The  component-manager  provides the link between the entando-de-app (or your custom core instance) and the\nEntando Component Repository (ECR). The  component-manager  queries the entando-k8s service to fetch available\nbundles that have been deployed as custom resources inside of an Entando cluster.\nThe  component-manager  also manages the relationships between an Entando application and the\ninstalled plugins. This can be seen in the plugin link custom resources in Kubernetes. \n \n GitHub:  https://github.com/entando-k8s/entando-component-manager/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-component-manager/ \n Customization \n It is unlikely that the  component-manager  will be customized as part of an Entando implementation. \n entando-k8s-service \n The  entando-k8s-service  acts as an abstraction layer to fetch data from kubernetes APIs. The primary\nfunctionality is in discovering and making available for installation Entando plugins. The\n entando-k8s-service  is invoked by the  component-manager . \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-service/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-service/ \n Customization \n It is very unlikely that the  entando-k8s-service  will be customized as part of an Entando implementation. \n keycloak \n The  entando-keycloak  project is an extension of the base Keycloak images. The extension provides the default\nthemes for Entando, a customized realm and clients, and adds the Oracle ojdbc jars for connection to Oracle\ndatabases. \n \n GitHub:  https://github.com/entando/entando-keycloak/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-keycloak/ \n Customization \n The keycloak image will often be customized as part of an Entando implementation. Common extensions will\ninclude changing the theme, adding default connections, adding default social logins, adding default clients,\nor other changes. \n Other Key Repositories \n entando-core \n The entando-core project is a J2EE application that exposes APIs for the Entando CMS, includes the legacy\nadmin console, and includes the portal-ui project that performs the server side composition for pages\nrendered via an Entando application. Note that only the composition is performed server side.\nJavascript code is rendered on the client. The entando-core is realized via an instance that includes the\nWAR files generated from a core build as dependencies. In a default deployment this is the  entando-de-app . \n \n GitHub:  https://github.com/entando/entando-core/ \n DockerHub: None (deployed to maven central) \n Customization \n For users familiar with versions prior to Entando 6 there will be cases where the  entando-core  is customized.\nIn most cases these customizations will be delivered via WAR overlay in the instance project.\nUsing WAR overlay is a functional approach for users already  familiar with the process but it is highly\nrecommended to extend the platform using microservices for new projects. \n entando-cms \n The  entando-cms  project is the  app-builder  (React JS) side of the Entando WCMS. It is bundled into the\n app-builder  at build time and will be included in the default deployment of the  app-builder  in almost all cases. \n \n GitHub:  https://github.com/entando/entando-cms/ \n DockerHub: None (deployed to npm) \n Customization \n In some cases the  entando-cms  may be customized if new custom features are added to CMS specific\nfunctionality. However, most cases will use the more general  app-builder  extension points noted above.\nThe  entando-cms  does not expose any dedicated extension interfaces outside of those already provided by the\n app-builder . \n entando-components \n The entando-components project is a collection of legacy plugins for Entando 5 and earlier. These plugins are deployed as WAR dependencies in an entando-core instance. \n \n GitHub:  https://github.com/entando/entando-components/ \n DockerHub: None (deployed to maven central) \n Entando Kubernetes Controllers \n There are a number of controllers that are available to the Entando operator to manage installations and\ncomponents in an Entando Cluster. Those controllers are small and lightweight images that are executed as\nrun to completion pods to manage the installation flow for different parts of the infrastructure. The\ncontrollers are implemented using Quarkus. For more information on the controllers, the Entando custom\nresources, and configuring your Entando deployment see also:\n Custom Resources . \n GitHub: \n \n https://github.com/entando-k8s/entando-k8s-composite-app-controller/ \n https://github.com/entando-k8s/entando-k8s-plugin-controller/ \n https://github.com/entando-k8s/entando-k8s-cluster-infrastructure-controller/ \n https://github.com/entando-k8s/entando-k8s-app-controller/ \n https://github.com/entando-k8s/entando-k8s-app-plugin-link-controller/ \n \n DockerHub: \n \n https://hub.docker.com/repository/docker/entando/entando-k8s-composite-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-plugin-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-cluster-infrastructure-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-plugin-link-controller/ \n Customization \n It is unlikely that the controllers will be customized as part of an Entando implementation. \n"},{title:"Accessing Entando APIs",frontmatter:{sidebarDepth:0},regularPath:"/v6.1/docs/reference/entando-apis.html",relativePath:"v6.1/docs/reference/entando-apis.md",key:"v-5787385a",path:"/v6.1/docs/reference/entando-apis.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Setup",slug:"setup"},{level:2,title:"Overview",slug:"overview"},{level:3,title:"API structure",slug:"api-structure"},{level:3,title:"Models",slug:"models"},{level:2,title:"Tutorial:",slug:"tutorial"}],lastUpdated:"8/6/2020, 4:27:56 AM",content:" Accessing Entando APIs \n Prerequisites \n \n \n Java 8 \n \n \n maven \n Setup \n \n \n Clone the Entando sample app if you don’t already have it. \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n Start the app for local execution and enable the swagger profile by\npassing  -Dspring.profiles.active=swagger  to the jetty command. Set\nthe value of  -Djetty.port  to something available on your machine\ne.g. 8081. \n mvn clean package jetty:run-war -Pjetty-local -Pderby -Dspring.profiles.active=swagger -Djetty.port=8085 -Dorg.slf4j.simpleLogger.log.org.eclipse.jetty.annotations.AnnotationParser=error \n \n \n \n Note: If you don't have docker installed or running add  -DskipDocker=true  to the command above \n \n \n \n Wait for the app to start. \n \n \n Once started, navigate to the swagger ui in a browser. \n \n \n \n http://localhost:[your port]/entando-de-app/api/swagger-ui.html\n Overview \n The Entando core exposes REST APIs for every action that can be taken in\nthe App Builder and Admin Console environments. For example, you can use\nthese apis to create pages, create page models or to add widgets to\npages. The APIs can be used to support automation, testing, or\nintegrations with external systems. \n API structure \n All of the APIs share a common top level structure. Each response will\ncontain a top level entry for  errors ,  metadata , and  payload . \n The  errors  will always contain code and a message string indicating an\nerror condition in the request. The  metadata  section is used for\npaging, sorting, filtering and data that is distinct from the body. The\nbody of each response is included in the  payload  section of the\nresponse and varies according to each API. \n Models \n All of the model classes returned by the Entando core are annotated so\nthat the model definition is included in the swagger documentation. At\nthe bottom of the swagger page all of the model classes returned by the\nAPI endpoints can be found. \n Tutorial: \n \n \n Stop the Entando instance if it is running. \n \n \n In the project open  src/main/conf/systemParams.properties . \n \n \n Change the value of this property to reflect the port you are using\nto run the app. \n \n \n applicationBaseURL \n \n \n For example if running on 8085 you would have\n applicationBaseURL=http://localhost:8085/${entando.engine.web.context}/ \n \n \n \n \n Login to the admin console at\n http://localhost:8085/entando-de-app/do/login . \n \n \n Once logged in go to Integration -→ API Management -→ Consumers. \n \n \n Select the kebab button on the row labeled swagger. \n \n \n On that screen enable the button for  client_credentials . \n \n \n On that screen enter  swagger  as the value for the secret. \n \n \n Hit save \n \n \n Return to swagger  your\nport /entando-de-app/api/swagger-ui.html \n \n \n Hit authorize \n \n \n Enter \n \n \n User: admin \n \n \n PW: adminadmin \n \n \n client: swagger \n \n \n client_secret: swagger \n \n \n \n \n Use the  Try it out  button on the APIs \n \n \n Scroll to  widget-controller \n \n \n Select the blue GET row \n \n \n Select  Try it out \n \n \n Look at the results in the window \n \n \n \n \n"},{title:"jACMS Aps Core Tag Library",frontmatter:{},regularPath:"/v6.1/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",relativePath:"v6.1/docs/reference/freemarker-tags/freemarker-JACMS-tags.md",key:"v-3c0fba7f",path:"/v6.1/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",headers:[{level:2,title:"Tag content",slug:"tag-content"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contenttag"},{level:3,title:"Description",slug:"description"},{level:3,title:"Attributes",slug:"attributes"},{level:2,title:"Tag contentInfo",slug:"tag-contentinfo"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentInfoTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentinfotag"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:2,title:"Tag contentList",slug:"tag-contentlist"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentListTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentlisttag"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:2,title:"Tag contentListFilter",slug:"tag-contentlistfilter"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistfiltertag"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Attributes",slug:"attributes-4"},{level:2,title:"Tag contentListUserFilterOption",slug:"tag-contentlistuserfilteroption"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag=",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistuserfilteroptiontag"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Attributes",slug:"attributes-5"},{level:2,title:"Tag searcher",slug:"tag-searcher"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.SearcherTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-searchertag"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Attributes",slug:"attributes-6"},{level:2,title:"Tag rowContentList",slug:"tag-rowcontentlist"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-rowcontentlisttag"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"}],lastUpdated:"11/3/2020, 4:20:16 AM",content:' jACMS Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: jacmsaps \n \n \n URI: /jacms-aps-core \n Tag  content \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentTag \n Description \n Displays the content given its ID. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content to display. It can accept "expression language". \n \n \n modelId \n false \n Id of the model to use to display the content. The model ID can be either specified explicitly (the model must match the content to serve) or the type name ("list" or "default"); in the latter case the model specified in the configuration will be used. The model must adhere to the content being returned. "Expression language" is accepted. \n \n publishExtraTitle \n false \n Toggles the insertion of the values of the titles in the Request Context. The title values are extracted from the attribute marked with the role "jacms:title". Admitted values are (true, false), default \'false\'. \n \n \n var \n false \n Inserts the rendered content in a variable of the page context with the name provided. \n \n \n attributeValuesByRoleVar \n false \n Inserts the map of the attribute values indexed by the attribute role, in a variable of the page context with the name provided. \n Tag  contentInfo \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentInfoTag \n Description \n Return information of a specified content. The content can will be extracted by id from widget parameters or from request parameter. The tag extract any specific parameter (by "param" attribute) or entire ContentAuthorizationInfo object (setting "var" attribute and anything on "param" attribute). \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content \n \n \n param \n false \n Admitted values for "param" attribute are: \'contentId\' (returns the code of content id), \'mainGroup\' (returns the code of owner group), \'authToEdit\' (returns true if the current user can edit the content, else false). \n \n \n var \n false \n Inserts the required parameter (or the entire authorization info object) in a variable of the page context with the name provided. \n Tag  contentList \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentListTag \n Description \n Loads a list of contents IDs by applying the filters (if any). Only the IDs of the contents accessible in the portal can be loaded. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the search result. \n \n \n contentType \n false \n Sets the code of the content types to search. The name must match the configured one, respecting capital letters and spaces. \n \n \n category \n false \n Identifier string of the category of the content to search. \n \n \n cacheable \n false \n Toggles the system caching usage when retrieving the list. Admitted values (true, false), default "true". \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n userFilterOptionsVar \n false \n Name of the variable in the page context that holds the user filter options \n Tag  contentListFilter \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag \n Description \n "ContentListTag" sub-tag, it creates a filter to restrict the result of the content search. Please note that the filters will be applied in the same order they are declared and the result of the search will reflect this fact. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n String used to filter and sort the contents. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "created" allows sorting by date of creation of content - "modified" allows sorting by date of modification of content. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata \n \n \n value \n false \n The filtering value. \n \n \n start \n false \n Filters the contents by attribute type or by the field specified with the key (respect the following matches): Text field -→ start Text Text attribute type -→ start Text Numeric attribute type -→ start Numeric date attribute type -→ start data If the data filter is used: - today, oggi or odierna will select all the contents with a date greater or equal to the system date - using date with the pattern "dd/MM/yyyy" will select all the contents with a date greater or equal to the one inserted. \n \n \n end \n false \n Similar the the "start" attribute but with the opposite behavior. \n \n \n order \n false \n Specifies the sorting behavior of the IDs found: "ASC"ending or "DESC"ending. By default no ordering is performed. \n \n \n likeOption \n false \n Toggles the \'like\' functionality. Admitted values: (true, false). Default: false. The option is available for metadata and on Text Content attributes. \n Tag  contentListUserFilterOption \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag = \n Description \n "ContentListTag" sub-tag, it creates a custom user filter to restrict the result of the content search by front-end user. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n The key of the filter. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "fulltext" allows filter by full-text search<br /> - "category" allows filter by a system category. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata. \n Tag  searcher \n Tag Class  com.agiletec.plugins.jacms.aps.tags.SearcherTag \n Description \n Generates a list of content IDs, restricting them to the key word contained in the "search" parameter of the http request. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n yes \n Name of the variable, stored in the page context, containing the list of content IDs. \n Tag  rowContentList \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag \n Description \n Publish a list of contents. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the contents (list of properties of key "contentId" and "modelId"). \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n \n'},{title:"Release Notes Entando 6.1.0",frontmatter:{},regularPath:"/v6.1/docs/releases/",relativePath:"v6.1/docs/releases/README.md",key:"v-4678a3b6",path:"/v6.1/docs/releases/",headers:[{level:2,title:"Highlights",slug:"highlights"},{level:3,title:"Helm Based Getting Started",slug:"helm-based-getting-started"},{level:3,title:"Micro Frontend Configuration in App Builder",slug:"micro-frontend-configuration-in-app-builder"},{level:3,title:"New Process Driven Applications Micro Frontends",slug:"new-process-driven-applications-micro-frontends"},{level:3,title:"Entando Blueprint Bundle Generation",slug:"entando-blueprint-bundle-generation"},{level:3,title:"Entando Blueprint Local Development Updates",slug:"entando-blueprint-local-development-updates"},{level:3,title:"CMS Enhancements in the App Builder",slug:"cms-enhancements-in-the-app-builder"},{level:3,title:"New and Updated CMS REST APIs",slug:"new-and-updated-cms-rest-apis"},{level:3,title:"Operator and Kubernetes Infrastructure Updates",slug:"operator-and-kubernetes-infrastructure-updates"},{level:3,title:"Added the Ability to Integrated Google Analytics in Progressive Web App",slug:"added-the-ability-to-integrated-google-analytics-in-progressive-web-app"},{level:2,title:"Tech Preview",slug:"tech-preview"},{level:2,title:"Released Image Versions",slug:"released-image-versions"},{level:2,title:"Known Issues",slug:"known-issues"},{level:3,title:"Key Open Issues",slug:"key-open-issues"},{level:2,title:"Previous Releases",slug:"previous-releases"}],lastUpdated:"7/9/2020, 7:26:26 AM",content:" Release Notes Entando 6.1.0 \n Highlights \n Helm Based Getting Started \n With the release of 6.1 Entando is using a Helm 2 client to assist in\nthe generation and installation of the full suite of Entando 6\ncapability. The new getting started simplifies the process of installing\nEntando 6 and automatically generates everything needed to install a\nfull Entando instance in your Kuberentes environment. Check out the helm\nbased getting started here:  Getting Started \n Micro Frontend Configuration in App Builder \n The App Builder now gives developers the ability to create a micro\nfrontend to render configuration to the App Builder user when you add a\nwidget to a page. The configuration is stored in the Entando application\ndatabase and can be referenced by the runtime micro frontend via custom\ntags or an API call. Tutorials and more details in documentation:\n Widget Configuration \n New Process Driven Applications Micro Frontends \n With the release of Entando 6.1 we are introducing an all new set of\nmicro frontends for Process Driven Applications (PDAs). The release\nincludes eight micro frontends (smart task inbox, task details, notes,\nattachments, form generation, summary card, and over time dashboard)\nthat integrate with your underlying process automation engine. The\nrelease also includes a default integration with Red Hat PAM. More on\nthe new PDA functionality in 6.1.0:\n PDA Architecture \n Entando Blueprint Bundle Generation \n The Entando Blueprint now includes scripts and functionality to assist\ndevelopers in automatically generating a bundle for the ECR. The scripts\nbuild micro frontends and generate the Kubernetes custom resource\ndefinitions needed to deploy components created using the blueprint to\nthe ECR. \n Entando Blueprint Local Development Updates \n With Entando 6.1 developers can now launch their blueprint generated\napplications without any changes. In prior versions developers were\nrequired to update CORs settings, add Options call support to security\nconfiguration, and to create environmental configuration to run their\nEntando Blueprint generated applications:  Blueprint \n CMS Enhancements in the App Builder \n With Entando 6.1 the Entando CMS has been enhanced to include image\nediting and cropping, additional attribute types, updated layouts and\nuser interaction, an updated editor for hypertext content, and new asset\nsearch. The App Builder CMS also now includes the widgets that will\nallow a user to configure and render their content via the app builder\npage configuration screen. See documentation on the Entando 6.1 CMS here:\n CMS Content Types \n New and Updated CMS REST APIs \n Entando 6.1 includes updates to the REST APIs exposed by the Entando\nCMS. In particular, updated support for advanced filtering and updates\nto APIs for image and document storage. Checkout the Entando Swagger\ndefinition for more details:  Reference \n Operator and Kubernetes Infrastructure Updates \n The infrastructure in Entando 6.1 includes significant changes to the\ndeployment workflow internal to the Entando infrastructure. Many of the\njobs performed by the operator have been updated to short lived run to\ncompletion pods to minimize resource utilization and to speed up overall\ndeployment time. \n Added the Ability to Integrated Google Analytics in Progressive Web App \n The Entando Progressive Web App shell now provides support for including\na Google Analytics token to track page and content views in the\napplication. These changes are available as part of a manual upgrade to\na 5.x version of the PWA. \n Tech Preview \n The release of Entando 6.1 also includes a new command line tool to\nsupport all of the operations needed to interact with the Entando\nplatform. Checkout the tech preview version of the tool and its usage\nhere  https://github.com/entando/entando-cli \n Released Image Versions \n app-builder:  Image Version: 6.0.99\nentando-component-manager:  Image Version: 6.0.27\nentando-de-app:  Image Version: 6.0.45\nentando-de-app-eap:  Image Version: 6.0.45\nentando-de-app-wildfly:  Image Version: 6.0.45\nentando-k8s-app-controller:  Image Version: 6.0.33\nentando-k8s-app-plugin-link-controller:  Image Version: 6.0.9\nentando-k8s-cluster-infrastructure-controller:  Image Version: 6.0.27\nentando-k8s-composite-app-controller:  Image Version: 6.0.22\nentando-k8s-controller-coordinator:  Image Version: 6.0.66\nentando-k8s-dbjob:  Image Version: 6.0.32\nentando-k8s-keycloak-controller:  Image Version: 6.0.33\nentando-k8s-plugin-controller:  Image Version: 6.0.19\nentando-k8s-service:  Image Version: 6.0.17\nentando-keycloak:  Image Version: 6.0.11\nentando-plugin-sidecar:  Image Version: 6.0.2\nentando/entando-pam-app-wildfly:  Image Version:  6.1.0\nentando/entando-process-driven-plugin:  Image Version: 6.1.0\n Known Issues \n This section includes key known open items against the components\nreleased in Entando 6.1 that can impact user experience. The list is not\ncomprehensive. Check with your customer or professional services\nrepresentative for a full list or for questions. \n Key Open Issues \n \n \n In the App Builder some composite list content types do not render\nor persist correctly ( Tracking ENG - 383, ENG-385, and ENG-363) \n \n \n An available workaround is to use the legacy admin console to\ninteract with composite list content types and other content types\nnot yet supported \n \n \n Page preview in the app builder when deployed on the default EAP and\nWildfly images doesn’t render correctly (Tracking ENG-338) \n \n \n The page settings link on the page configuration screen doesn’t\npersist correctly As a workaround use the page settings under Page\nTree → Select Page → Edit \n \n \n Editing an image that has been uploaded via the app builder can\nresult in errors (ENG-382) As a workaround use the image editing\ncapability in the legacy admin console \n \n \n Direct Jira Link for Full Up to Date List of Open Items on 6.1\n https://jira.entando.org/issues/?filter=10904 \n Previous Releases \n Documentation for prior versions.\n \n   \n \n \n"},{title:"Tutorials Overview",frontmatter:{},regularPath:"/v6.1/tutorials/",relativePath:"v6.1/tutorials/README.md",key:"v-5c03f9d0",path:"/v6.1/tutorials/",headers:[{level:2,title:"How to Use This Guide",slug:"how-to-use-this-guide"},{level:2,title:"Frontend Developers",slug:"frontend-developers"},{level:2,title:"Backend Developers",slug:"backend-developers"},{level:2,title:"DevOps",slug:"devops"}],lastUpdated:"6/29/2020, 11:12:12 AM",content:" Tutorials Overview \n Entando simplifies the development of modern apps: \n \n Built using modern JavaScript frameworks \n Backed by microservices deployed in containers, and \n Orchestrated by Kubernetes for fully automated DevOps lifecycles \n \n \n Entando supports full stack micro frontend and microservice architectures for codebases that are easier to undestand, maintain, and debug across large, distributed teams, and comes with a private component repository that makes it easy for teams to share and reuse components. \n How to Use This Guide \n Use the categories on the left to find step-by-step tutorials for common tasks. Or check out our learning paths for a more structured approach. \n Frontend Developers \n \n \n \n Basics \n Intermediate \n Advanced \n \n \n \n \n Create a React Micro Frontend \n Connect to a Microservice \n Generate Micro Frontends and Microservices Based on a Database Entity \n \n \n Create an Angular Micro Frontend \n Publish and Listen to Events \n Deploy Your Micro Frontend to a Shared, Private Repository \n \n \n Add Your Micro Frontend to a Page \n Add a Configuration Screen \n Backend Developers \n \n \n \n Basics \n Intermediate \n Advanced \n \n \n \n \n Deploy a Microservice to Your Kubernetes Instance \n Generate a Microservice Application From a Database Entity \n Use JDL Studio to Create a Complex Database Entity (Coming Soon) \n \n \n Call a Microservice From a Micro Frontend \n Set Up a Persistent Volume for Storage \n DevOps \n \n \n \n Basics \n Intermediate \n Advanced \n \n \n \n \n Set Up Entando on a Local Kubernetes Instance \n Setting Up Your Entando Component Repository \n Automate Integration Testing With a CI/CD Pipeline   (Coming Soon) \n \n \n \n Backing Up and Restoring Your Entando Environment \n \n \n \n \n"},{title:"Aps Core Tag Library",frontmatter:{},regularPath:"/v6.1/docs/reference/freemarker-tags/freemarker-core-tags.html",relativePath:"v6.1/docs/reference/freemarker-tags/freemarker-core-tags.md",key:"v-c8257a16",path:"/v6.1/docs/reference/freemarker-tags/freemarker-core-tags.html",headers:[{level:2,title:"Tag action",slug:"tag-action"},{level:3,title:"Description",slug:"description"},{level:3,title:"Example",slug:"example"},{level:3,title:"Attributes",slug:"attributes"},{level:3,title:"Tag class",slug:"tag-class"},{level:2,title:"Tag categories",slug:"tag-categories"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:3,title:"Tag class",slug:"tag-class-2"},{level:2,title:"Tag checkHeadInfoOuputter",slug:"tag-checkheadinfoouputter"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:3,title:"Tag class",slug:"tag-class-3"},{level:2,title:"Tag cssURL",slug:"tag-cssurl"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Attributes",slug:"attributes-4"},{level:3,title:"Tag class",slug:"tag-class-4"},{level:2,title:"Tag currentPage",slug:"tag-currentpage"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Attributes",slug:"attributes-5"},{level:3,title:"Tag class",slug:"tag-class-5"},{level:2,title:"Tag currentWidget",slug:"tag-currentwidget"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Attributes",slug:"attributes-6"},{level:3,title:"Tag class",slug:"tag-class-6"},{level:2,title:"Tag fragment",slug:"tag-fragment"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"},{level:3,title:"Tag class",slug:"tag-class-7"},{level:2,title:"Tag freemarkerTemplateParameter",slug:"tag-freemarkertemplateparameter"},{level:3,title:"Description",slug:"description-8"},{level:3,title:"Attributes",slug:"attributes-8"},{level:3,title:"Tag class",slug:"tag-class-8"},{level:2,title:"Tag headInfo",slug:"tag-headinfo"},{level:3,title:"Description",slug:"description-9"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Attributes",slug:"attributes-9"},{level:3,title:"Tag class",slug:"tag-class-9"},{level:2,title:"Tag i18n",slug:"tag-i18n"},{level:3,title:"Description",slug:"description-10"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Attributes",slug:"attributes-10"},{level:3,title:"Tag class",slug:"tag-class-10"},{level:2,title:"Tag ifauthorized",slug:"tag-ifauthorized"},{level:3,title:"Description",slug:"description-11"},{level:3,title:"Example",slug:"example-8"},{level:3,title:"Attributes",slug:"attributes-11"},{level:3,title:"Tag class",slug:"tag-class-11"},{level:2,title:"Tag imgURL",slug:"tag-imgurl"},{level:3,title:"Description",slug:"description-12"},{level:3,title:"Example",slug:"example-9"},{level:3,title:"Attributes",slug:"attributes-12"},{level:3,title:"Tag class",slug:"tag-class-12"},{level:2,title:"Tag info",slug:"tag-info"},{level:3,title:"Description",slug:"description-13"},{level:3,title:"Example",slug:"example-10"},{level:3,title:"Attributes",slug:"attributes-13"},{level:3,title:"Tag class",slug:"tag-class-13"},{level:2,title:"Tag internalServlet",slug:"tag-internalservlet"},{level:3,title:"Description",slug:"description-14"},{level:3,title:"Example",slug:"example-11"},{level:3,title:"Attributes",slug:"attributes-14"},{level:3,title:"Tag class",slug:"tag-class-14"},{level:2,title:"Tag nav",slug:"tag-nav"},{level:3,title:"Description",slug:"description-15"},{level:3,title:"Example",slug:"example-12"},{level:3,title:"Attributes",slug:"attributes-15"},{level:3,title:"Tag class",slug:"tag-class-15"},{level:2,title:"Tag outputHeadInfo",slug:"tag-outputheadinfo"},{level:3,title:"Description",slug:"description-16"},{level:3,title:"Attributes",slug:"attributes-16"},{level:3,title:"Tag class",slug:"tag-class-16"},{level:2,title:"Tag pageInfo",slug:"tag-pageinfo"},{level:3,title:"Description",slug:"description-17"},{level:3,title:"Attributes",slug:"attributes-17"},{level:3,title:"Tag class",slug:"tag-class-17"},{level:2,title:"Tag pager",slug:"tag-pager"},{level:3,title:"Description",slug:"description-18"},{level:3,title:"Example",slug:"example-13"},{level:3,title:"Attributes",slug:"attributes-18"},{level:3,title:"Tag class",slug:"tag-class-18"},{level:2,title:"Tag parameter",slug:"tag-parameter"},{level:2,title:"Tag pager",slug:"tag-pager-2"},{level:3,title:"Description",slug:"description-19"},{level:3,title:"Example",slug:"example-14"},{level:3,title:"Attributes",slug:"attributes-19"},{level:3,title:"Tag class",slug:"tag-class-19"},{level:2,title:"Tag printHeadInfo",slug:"tag-printheadinfo"},{level:3,title:"Description",slug:"description-20"},{level:3,title:"Attributes",slug:"attributes-20"},{level:3,title:"Tag class",slug:"tag-class-20"},{level:2,title:"Tag resourceURL",slug:"tag-resourceurl"},{level:3,title:"Description",slug:"description-21"},{level:3,title:"Example",slug:"example-15"},{level:3,title:"Attributes",slug:"attributes-21"},{level:3,title:"Tag class",slug:"tag-class-21"},{level:2,title:"Tag show",slug:"tag-show"},{level:3,title:"Description",slug:"description-22"},{level:3,title:"Example",slug:"example-16"},{level:3,title:"Attributes",slug:"attributes-22"},{level:3,title:"Tag class",slug:"tag-class-22"},{level:2,title:"Tag url",slug:"tag-url"},{level:3,title:"Description",slug:"description-23"},{level:3,title:"Example",slug:"example-17"},{level:3,title:"Attributes",slug:"attributes-23"},{level:3,title:"Tag class",slug:"tag-class-23"},{level:2,title:"Tag pageWithWidget",slug:"tag-pagewithwidget"},{level:3,title:"Description",slug:"description-24"},{level:3,title:"Example",slug:"example-18"},{level:3,title:"Attributes",slug:"attributes-24"},{level:3,title:"Tag class",slug:"tag-class-24"},{level:2,title:"Tag currentUserProfileAttribute",slug:"tag-currentuserprofileattribute"},{level:3,title:"Description",slug:"description-25"},{level:3,title:"Attributes",slug:"attributes-25"},{level:3,title:"Tag class",slug:"tag-class-25"},{level:2,title:"Tag userProfileAttribute",slug:"tag-userprofileattribute"},{level:3,title:"Description",slug:"description-26"},{level:3,title:"Attributes",slug:"attributes-26"},{level:3,title:"Tag class",slug:"tag-class-26"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: wp \n \n \n URI: /aps-core \n Tag  action \n Description \n Build the URL to call a jsp or a functionality of a servlet defined\nwithin the system. This tag can use the ParameterTag sub-tag to add url\nparameters. \n Example \n (<@wp.action path="/do/my.action" var="myaction" />)  or\n (<@wp.action path="/JSP/my.jsp" var="my.jsp"/>) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n path \n no \n The relative path of jsp or servlet to invoke, relative to the context of web-application \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n Tag class \n com.agiletec.aps.tags.ActionURLTag \n Tag  categories \n Description \n Return the list of the system categories on SelectItem objects. \n Example \n <@wp.categories var="systemCategories" titleStyle="prettyFull" root="$\\{userFilterOptionVar.userFilterCategoryCode}" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n titleStyle \n no \n The style of the single select item. Currently it can be \'default\' (single title node), \'full\' (title with all parents) or \'prettyFull\' (title with all parents in form of \'..\'). The default when none is given is \'default\'. \n \n \n fullTitleSeparator \n no \n The separator beetwen the titles when \'titleStyle\' is \'full\' or \'prettyFull\'. \n \n \n var \n no \n Name of the page-scoped variable where to place the list of categories. \n \n \n root \n no \n The root of the categories to show. The default is the system root categories \n Tag class \n com.agiletec.aps.tags.CategoriesTag \n Tag  checkHeadInfoOuputter \n Description \n This sub-tag verifies the availability of the information to display.\nThis sub-tag can be used only in a page model, in conjunction with\n\'outputHeadInfo\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to analyse. \n Tag class \n com.agiletec.aps.tags.CheckHeadInfoOutputterTag \n Tag  cssURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the css files. \n Example \n <@wp.cssURL />href="<@wp.cssURL />myportal.css" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n Tag class \n com.agiletec.aps.tags.CssURLTag \n Tag  currentPage \n Description \n Returns the requested information held by the current page bean. \n Example \n <@wp.currentPage param="code" var="currentViewCode" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n false \n The wanted parameter: actually can be either "title", "owner" (group), "code", "hasChild" or "childOf" (with attribute "targetPage"). The default when none is given is "title". \n \n \n langCode \n no \n Code of the language to use for the page information being returned. \n \n \n var \n no \n Name of the page context variable where the information are placed. Please note that the in this case the special characters will not be escaped. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n no \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.CurrentPageTag \n Tag  currentWidget \n Description \n Returns information about the widget where the tag resides. To obtain\ninformation about a widget placed in a frame other than the current, use\nthe "frame" attribute. \n Example \n <@wp.currentWidget param="config" configParam="name" var="configName" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n yes \n The requested parameter. It can assume one of the following values: - "code" returns the code of the associated widget type (empty if none associated) - "title" returns the name of the associated widget type (empty if none associated) - "config" returns the value of the configuration parameter declared in the "configParam" attribute. The default is "title". \n \n \n configParam \n no \n Name of the configuration parameter request. This attribute is mandatory when the attribute "param" is set to "config". \n \n \n var \n no \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n frame \n false \n Id of the frame hosting the widget with the desired information. \n \n \n escapeXml \n no \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n com.agiletec.aps.tags.CurrentWidgetTag \n Tag  fragment \n Description \n Print a gui fragment by the given code. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n code \n true \n The code of the fragment to return. \n \n \n var \n false \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n escapeXml \n false \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n org.entando.entando.aps.tags.GuiFragmentTag \n Tag  freemarkerTemplateParameter \n Description \n Add a parameter into the Freemarker’s TemplateModel Map. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Name of the variable where the requested information is pushed. \n \n \n valueName \n true \n Name of the variable of the page context where extract the information. \n \n \n removeOnEndTag \n false \n Whether to remove the parameter on end of Tag. Possible entries (true, false). Default value: false. \n Tag class \n org.entando.entando.aps.tags.FreemarkerTemplateParameterTag \n Tag  headInfo \n Description \n Declares the information to insert in the header of the HTML page. The\ninformation can be passed as an attribute or, in an indirect manner,\nthrough a variable of the page context. It is mandatory to specify the\ntype of the information. \n Example \n <@wp.headInfo type="JS" info="entando-misc-bootstrap/bootstrap.min.js" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Declaration of the information type. Currently only "CSS" is currently supported. \n \n \n info \n no \n Information to declare. This is an alternative of the "var" attribute. \n \n \n var \n no \n Name of the variable holding the information to declare. This attribute is the alternative of the "info" one. This variable can be used for those types of information that cannot be held by an attribute. \n Tag class \n com.agiletec.aps.tags.HeadInfoTag \n Tag  i18n \n Description \n Return the string associated to the given key in the specified language.\nThis string is either returned (and rendered) or can be optionally\nplaced in a page context variable. This tag can use the ParameterTag\nsub-tag to add label parameters. \n Example \n <@wp.i18n key="COPYRIGHT" escapeXml="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the label to return. \n \n \n lang \n no \n Code of the language requested for the lable. \n \n \n var \n no \n Name of the variable (page scope) where to store the wanted information. In this case the special characters will not be escaped. \n \n \n escapeXml \n no \n Toggles the escape of the special characters of the returned label. Admitted values (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.I18nTag \n Tag  ifauthorized \n Description \n Toggles the visibility of the elements contained in its body, depending\non user permissions. \n Example \n <@wp.ifauthorized permission="enterBackend"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n permission \n no \n The code of the permission required. \n \n \n groupName \n no \n The name of the group membership required. \n \n \n var \n no \n The name of the (boolean) page context parameter where the result of the authorization check is placed. \n Tag class \n com.agiletec.aps.tags.CheckPermissionTag \n Tag  imgURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the images to\ndisplay as static content outside the cms. \n Example \n <@wp.imgURL />entando-logo.png" alt="Entando - Access. Build. Connect." /> \n Attributes \n Tag class \n com.agiletec.aps.tags.ImgURLTag \n Tag  info \n Description \n Returns the information of the desired system parameter. \n Example \n <@wp.info key="systemParam" paramName="applicationBaseURL" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the desired system parameter, admitted values are: "startLang" returns the code of start language of web browsing "defaultLang" returns the code of default language "currentLang" returns the code of current language "langs" returns the list of the languages defined in the system "systemParam" returns the value of the system param specified in the "paramName" attribute. \n \n \n var \n no \n Name of the variable where to store the retrieved information (page scope). In this case the special characters will not be escaped. \n \n \n paramName \n no \n Name of the wanted system parameter; it is mandatory if the "key" attribute is "systemParam", otherwise it is ignored. \n \n \n escapeXml \n no \n Toggles the escape of the special characters in the information returned. Admitted values are (true,false), the former being the default value. \n Tag class \n com.agiletec.aps.tags.InfoTag \n Tag  internalServlet \n Description \n Tag for the "Internal Servlet" functionality. Publishes a function\nserved by an internal Servlet; the servlet is invoked from a path\nspecified in the attribute "actionPath" or by the widget parameter\nsharing the same name. This tag can be used only in a widgets. \n Example \n <@wp.internalServlet actionPath="/ExtStr2/do/jpuserreg/UserReg/initRegistration" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n actionPath \n false \n The init action path. \n \n \n staticAction \n false \n Whether to execute only the given action path. Possible entries (true, false). Default value: false. \n Tag class \n com.agiletec.aps.tags.InternalServletTag \n Tag  nav \n Description \n Generates through successive iterations the so called "navigation" list.\nFor every target/page being iterated (inserted in the page context) are\nmade available the page code, the title (in the current language) and\nthe link. Is it also possible to check whether the target page is empty\n-that is, with no configured positions- or not. \n Example \n <@wp.nav var="page"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n spec \n no \n Declares the set of the pages to generate. \n \n \n var \n yes \n Name of the page context variable where the data of target being iterated are made available. \n Tag class \n com.agiletec.aps.tags.NavigatorTag \n Tag  outputHeadInfo \n Description \n Iterates over various information in HTML header displaying them; this\ntag works in conjunction with other specific sub-tags. Please note that\nthe body can contain only a sub-tag, or information, at once. This tag\nmust be used only in a page model. E.g (<@wp.outputHeadInfo\ntype="CSS">) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to return, in accordance with the sub-tag to use. \n Tag class \n com.agiletec.aps.tags.HeadInfoOutputterTag \n Tag  pageInfo \n Description \n Returns the information of the specified page. This tag can use the\nsub-tag "ParameterTag" to add url parameters if the info attribute is\nset to \'url\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n pageCode \n true \n The code of the page. \n \n \n info \n false \n Code of required page parameter. Possible entries: "code" (default value) , "title", "owner" (group), "url", "hasChild" or "childOf" (with attribute "targetPage"). \n \n \n langCode \n false \n Code of the language to use for the returned information. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. In this case, the system will not escape the special characters in the value entered in pageContext. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n false \n Whether to escape HTML. Possible entries (true, false). Default value: true. \n Tag class \n com.agiletec.aps.tags.PageInfoTag \n Tag  pager \n Description \n List pager. \n Example \n <@wp.pager listName="result" objectName="groupContent" max="10" pagerIdFromFrame="true" advanced="true" offset="5"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n max \n no \n The maximum value for each object group. \n \n \n listName \n yes \n Name of the list as found in the request. \n \n \n objectName \n yes \n Name of the object currently iterated. The following methods are exposed:  getMax, getPrevItem, getNextItem, getCurrItem, getSize, getBegin, getEnd, getMaxItem, getPagerId. \n \n \n pagerId \n no \n Sets the ID of the pager itself, it has to be used when two or more pagers exist in the same page. This attributes overrides "pagerIdFromFrame". \n \n \n pagerIdFromFrame \n no \n Sets the ID of the pager (mandatory when two or more pagers share the same page) based upon the frame where the tag is placed. Admitted values are (true, false), the latter being the default. Please note that the "pagerId" attribute takes precedence over this one. \n \n \n advanced \n no \n Toggles the pager in advanced mode. Admitted values are (true, false). the advanced mode of the tag is used when the list to iterate over is huge. \n \n \n offset \n no \n This attribute is considered only when the pager is in advanced mode. This is the numeric value of the single step increment (or decrement) when iterating over the list \n Tag class \n com.agiletec.aps.tags.PagerTag \n Tag  parameter \n Tag  pager \n Description \n This tag can be used to parameterise other tags. The parameter value can\nbe added through the \'value\' attribute or the body tag. When you declare\nthe param tag, the value can be defined in either a value attribute or\nas text between the start and the ending of the tag. \n Example \n <@wp.parameter name="resourceName"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n name \n true \n The name of the parameter. \n \n \n value \n false \n The value of the parameter. \n Tag class \n com.agiletec.aps.tags.ParameterTag \n Tag  printHeadInfo \n Description \n Returns the information to display. This sub-tag must be used only in a\npage model, in conjunction with \'outputHeadInfo\'. \n Attributes \n Tag class \n com.agiletec.aps.tags.HeadInfoPrinterTag \n Tag  resourceURL \n Description \n Returns URL of the resources. \n Example \n <@wp.resourceURL />static/js/entando-misc-html5-essentials/html5shiv.js"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n root \n no \n Declares the resource root. If not otherwise specified, the value of SystemConstants.PAR_RESOURCES_ROOT_URL is used. \n \n \n folder \n no \n Declares a specific directory for the desired resources. Unless specified, the value "" (empty string) is used in the generation of the URL. \n Tag class \n com.agiletec.aps.tags.ResourceURLTag \n Tag  show \n Description \n Defines the position of inclusion of a widget. This tag can be used only\nin a page model. \n Example \n <@wp.show frame="0" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n frame \n yes \n The positional number of the frame, starting from 0. \n Tag class \n com.agiletec.aps.tags.WidgetTag \n Tag  url \n Description \n Generates the complete URL of a portal page. The URL returned is either\nreturned (and rendered) or placed in the given variable. To insert\nparameters in the query string the sub-tag "ParameterTag" is provided. \n Example \n <@wp.url paramRepeat="true" > \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n page \n no \n Code of the destination page. The default is the current page. \n \n \n lang \n no \n Code of the language to use in the destination page. \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n \n \n paramRepeat \n no \n Repeats in the URL all the parameters of the actual request. \n \n \n excludeParameters \n no \n Sets the list of parameter names (comma separated) to exclude from repeating. By default, this attribute excludes only the password parameter of the login form. Used only when paramRepeat="true". \n Tag class \n com.agiletec.aps.tags.URLTag \n Tag  pageWithWidget \n Description \n Search and return the page (or the list of pages) with the given widget\ntype. When "filterParamName" and "filterParamValue" attributes are\npresent, the returned list will be filtered by a specific widget\nconfiguration. \n Example \n <@wp.pageWithWidget widgetTypeCode="userprofile_editCurrentUser" var="userprofileEditingPageVar" listResult="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Attribute_description: \n \n \n widgetTypeCode \n true \n The code of the widget to search \n \n \n filterParamName \n false \n Optional widget config param name \n \n \n filterParamValue \n false \n Optional widget config param value \n \n \n listResult \n false \n Optional, dafault false. When true the result is a list of pages, when false the returned page is the first occurence \n Tag class \n com.agiletec.aps.tags.PageWithWidgetTag \n Tag  currentUserProfileAttribute \n Description \n Current User Profile tag. Return a attribute value of the current user\nprofile. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.CurrentUserProfileAttributeTag \n Tag  userProfileAttribute \n Description \n User Profile tag. Return a attribute value from the profile givea an\nusername. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n username \n true \n the username \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.UserProfileAttributeTag \n'},{title:"Objective",frontmatter:{},regularPath:"/v6.1/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",relativePath:"v6.1/tutorials/backend-developers/generate-microservices-and-micro-frontends.md",key:"v-81215fb4",path:"/v6.1/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Setup for Blueprint Dev mode",slug:"setup-for-blueprint-dev-mode"},{level:2,title:"Start keycloak using docker-compose",slug:"start-keycloak-using-docker-compose"},{level:3,title:"Notes:",slug:"notes"},{level:2,title:"Start the microservice",slug:"start-the-microservice"},{level:3,title:"Notes:",slug:"notes-2"},{level:2,title:"Start the table widget",slug:"start-the-table-widget"},{level:2,title:"Start the form widget",slug:"start-the-form-widget"},{level:3,title:"Form widget notes:",slug:"form-widget-notes"},{level:2,title:"Start the details widget",slug:"start-the-details-widget"},{level:3,title:"Widget Details notes:",slug:"widget-details-notes"},{level:2,title:"Notes",slug:"notes-3"},{level:3,title:"Change keycloak dev settings",slug:"change-keycloak-dev-settings"},{level:3,title:"The service-url Variable",slug:"the-service-url-variable"},{level:3,title:"User is not authenticated message",slug:"user-is-not-authenticated-message"},{level:2,title:"Open the project in an IDE",slug:"open-the-project-in-an-ide"}],lastUpdated:"7/7/2020, 9:57:56 AM",content:' Objective \n The objective of this lab is to briefly introduce the Entando JHipster Blueprint and to provide an introduction to using the blueprint to generate a microservice and micro-frontends for deployment into an Entando application. \n Prerequisites \n \n \n Java 1.8 \n \n \n Maven 3.0.5+ \n \n \n npm 6+ \n \n \n git \n \n \n Docker \n \n \n node 10+ (or LTS) \n Setup for Blueprint Dev mode \n \n \n Install JHipster  npm install -g generator-jhipster@6.9.1 \n \n \n Clone the entando blueprint project to a location of your choice \n \n \n git clone https://github.com/entando/entando-blueprint\ncd entando-blueprint\ngit checkout -b v6.1.1\n \n \n \n Run this command from within entando-blueprint:  npm link \n \n \n Create a new empty directory in a location of your choice outside of existing projects. Don’t create this inside the entando-blueprint project (as example create the folder:  /entando/hello-world ) \n \n \n This will be the directory where you create your plugin. \n \n \n It is important that the commands below are run in the directory you are creating. \n \n \n \n \n On a command line change into the directory that you just created and run  npm link generator-jhipster-entando \n \n \n Create a plugin using the blueprint. Run the following command  jhipster --blueprints entando \n \n \n Select the following options (if nothing is specified in this list you can choose any available option) \n \n \n Microservice application \n \n \n Name of application: training (Or whatever you want) \n \n \n Port: 8081 \n \n \n Default package: com.entando (or whatever you want) \n \n \n SQL \n \n \n MySQL or Postgres \n \n \n H2 with disk based persistence \n \n \n Yes, with the Caffeine implementation \n \n \n 2nd level cache: Yes \n \n \n Maven \n \n \n Do not select any other technologies \n \n \n Accept the provided suggestion for the bundle name \n \n \n i18n: Yes \n \n \n Pick a default language \n \n \n Pick other languages you want \n \n \n Don’t add any other testing frameworks \n \n \n No other generators from the marketplace \n \n \n \n \n Adding an Entity and Creating the Micro-Frontends. In your new project run the following command  jhipster entity Conference \n \n \n Select Yes for “Do you want to add a field to your entity” \n \n \n For the name of the field use: conferenceName \n \n \n Select String for type \n \n \n Select No for validation rules \n \n \n Select Yes for “Do you want to add a field to your entity” \n \n \n For the name of the field use: location \n \n \n Select String for type \n \n \n Select No for validation rules \n \n \n Select No for adding relationships \n \n \n Select No for Do you want to use separate service class for your\nbusiness logic? \n \n \n You can choose any option you want here \n \n \n \n \n Repeat the steps above for other entities that you want to add. Also, review the content and documentation around the JHipster Design Language (JDL)  https://start.jhipster.tech/jdl-studio/ \n Start keycloak using docker-compose \n \n \n Startup the Keycloak server: \n docker-compose -f src/main/docker/keycloak.yml up\n Notes: \n if you have to install docker compose you can follow this guide:\n https://docs.docker.com/compose/install/ \n Start the microservice \n \n \n Start the generated Microservice executing the command: \n ./mvnw\n Notes: \n If you want to reset the widget data (as example if you deleted all rows from the table widget) if during the generation of the microservice you selected "H2 with disk-based persistence" you can delete the target folder, restart the microservice and the data will be regenerated. \n Start the table widget \n Now you can start your generated table widget: \n \n \n Go to the table widget folder in your project: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n After the login process you’ll be redirected to the widget page and you can see the table widget with some generated data. \n Start the form widget \n Now you can start your generated form widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the form widget folder in your project: \n cd ui/widgets/<your-entity-name>/formWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Form widget notes: \n If you want to load other data you have to change the index.html file in the folder: \n cd ui/widgets/<your-entity-name>/formWidget/public\n \n and change the id attribute in this line: \n <my-entity-form service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Start the details widget \n You can also start your generated details widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the details widget folder in your project: \n cd ui/widgets/<your-entity-name>/detailsWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Widget Details notes: \n If you want to load other data you have to change the index.html file in the public folder: \n cd ui/widgets/<your-entity-name>/detailsWidget/public\n \n and change the "id" attribute in this line: \n <my-entity-details service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Notes \n Change keycloak dev settings \n If you want to change your keycloak settings to use another keycloak installation (not the docker compose pre configured one) or if you want to change the service-url of your widget you can change the parameters set in the .env.local file that was generated by the entando-blueprint in the root folder of your react widgets: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n then edit the file  .env.local \n By default this variables are set to: \n REACT_APP_SERVICE_URL=http://localhost:8081/services/<your-application-name>/api\nREACT_APP_KEYCLOAK_URL=http://localhost:9080/auth\nREACT_APP_KEYCLOAK_REALM=jhipster\nREACT_APP_KEYCLOAK_CLIENT_ID=web_app\n The service-url Variable \n The  service-url  variable is the api Microservice API URL. \n User is not authenticated message \n When you run the widgets if you see the message:  User is not authenticated . This means that probably your keycloak application is not running so please check if the docker-compose command is still in execution. \n Open the project in an IDE \n This section just walks through the anatomy of the project and the micro frontends.\nYou can skip this or review later as desired. The top level project is a normal Spring Boot application.\nYou can look through the code and configuration in src/main/java to get a view of the server side.\nThe micro frontends are in the ui folder. Each entity gets an MFE for details, table, and form. \n'},{title:"Content Templates",frontmatter:{},regularPath:"/v6.1/tutorials/cms/content-models-tutorial.html",relativePath:"v6.1/tutorials/cms/content-models-tutorial.md",key:"v-55cdae2c",path:"/v6.1/tutorials/cms/content-models-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to define a Content Templates",slug:"how-to-define-a-content-templates"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Content Templates \n Objective \n This document provides a description of Content Templates and how they\nare defined and used. \n Overview \n The purpose of Content Templates is to define how the information,\nenclosed in the Content, displayed to the end user, after the content is\npublished within the pages. Simplifying the concept, Content Templates\nprovide styling and layout for the Contents Types; consequently they\nallow to show the same content in different ways. \n The Content Templates can be managed using the App Builder’s user\ninterface, in which the Web CMS has been integrated. The interface: \n \n \n displays the list of the content models already existing, for each\nContent Types to which they refer. \n \n \n provides the tools to create a new content model; the model is\nwritten using the Velocity language. \n How to define a Content Templates \n Creating a Content Template is fairly simple. From the App Builder\napplication \n \n Select the CMS section and click on Content Templates subsection \n \n \n \n Click on the Add  Content Model button  to create a new Content\nTemplate and to add it to the list. \n \n \n \n \n Access the Add Content Template page, where you can \n \n \n Choose the Content Type in the dropdown list. \n \n \n Edit the Code. It is the unique identifier of the content model.\nYou can insert up to 10 numbers. It’s mandatory. \n \n \n Edit the Name. It is the name or description of the content\nmodel. \n \n \n Edit the HTML model based on Velocity language \n \n \n Define the CSS style sheet file (this is an optional parameter) \n \n \n Press the Save button \n \n \n \n \n \n"},{title:"Hello World Widget in the App builder",frontmatter:{},regularPath:"/v6.1/tutorials/cms/app-builder/hello-world.html",relativePath:"v6.1/tutorials/cms/app-builder/hello-world.md",key:"v-81742dfa",path:"/v6.1/tutorials/cms/app-builder/hello-world.html",headers:[{level:2,title:"Basic Widget Tutorial",slug:"basic-widget-tutorial"},{level:2,title:"Simple Fragment tutorial",slug:"simple-fragment-tutorial"},{level:2,title:"Freemarker Basics in Entando",slug:"freemarker-basics-in-entando"},{level:2,title:"Useful Links",slug:"useful-links"}],lastUpdated:"7/9/2020, 6:19:25 AM",content:' Hello World Widget in the App builder \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Basic Widget Tutorial \n For this example you will use the Entando App Builder to build and\nassign your widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. \n \n \n In the App Builder menu, at the top, Go To: UX Patterns -→ Widgets \n \n \n Select NEW \n \n \n The Custom UI Field is a freemarker template where you can put raw\nhtml and include freemarker logic, \n \n \n It allows you to import javascript, css, or any normal HTML \n \n \n Example, put <h2>Hello World</h2> into your widget, give it\na name and save it \n \n \n \n \n Go To: Page Designer -→ Page Settings \n \n \n In the Home Page dropdown select Home / Service and select SAVE \n \n \n Now place the widget on the page \n \n \n Go To: Page Designer -→ Page Tree \n \n \n On the row that says "Service", on the far right side, select the\nKebab button and select CONFIGURE \n \n \n Find the widget created in step 5 on the right hand side \n \n \n Drag and drop the widget onto the open frame of the page \n \n \n Select PUBLISH at the bottom of the screen \n \n \n Then select GO TO HOME PAGE in the upper right \n \n \n You should see "Hello World" on the page \n Simple Fragment tutorial \n A fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic html,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …​  tag. \n Starting from the simple widget tutorial above: \n \n \n In the app builder Go To: UX Patterns -→ Fragments \n \n \n Enter the code for the fragment as  test \n \n \n In the  Gui Code  enter  <h2>This is a fragment</h2> \n \n \n Next place the fragment on a page \n \n \n Go To: Ux Patterns -→ Page Models \n \n \n On the row for  service , select EDIT \n \n \n Use the fragment tag to place the fragment on the page\n <@wp.fragment code="test"/> \n \n \n SAVE the page model \n \n \n Go To: homepage (assuming you’ve set the service page to the\nhomepage) \n \n \n Note that the fragment is printed including the HTML tags. By\ndefault html embedded via a fragment tag is escaped so you get it\nrendered exactly as you enter it. You’ll need to un-escape it to get\nit to render correctly. \n \n \n Go back to your page model (UX Patterns -→ Page Models) select\nSERVICE and EDIT \n \n \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n Go back to the homepage \n \n \n See correctly rendered fragment \n Freemarker Basics in Entando \n The freemarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > …​ \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof freemarker. \n Useful Links \n https://freemarker.apache.org \n'},{title:"Content Types",frontmatter:{},regularPath:"/v6.1/tutorials/cms/content-types-tutorial.html",relativePath:"v6.1/tutorials/cms/content-types-tutorial.md",key:"v-1f495540",path:"/v6.1/tutorials/cms/content-types-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to create a Content Type",slug:"how-to-create-a-content-type"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Content Types \n Objective \n This document provides an overview of the Content Types, as well as how\nthey are created and represented. \n Overview \n The Content Type is a construct used to represent or to model a Content.\nIt is characterized by a set of Attribute Types[1] , each of which\ndefines the value of their properties, called attributes. A Content is\nan instance or specialization of the Content Type. \n How to create a Content Type \n Creating Contents Types is fairly simple. The Content Types are managed\nthrough the Web CMS, its user interface is made available in the App\nBuilder application. \n \n From App Builder, select the CMS section and click on Content Types\nsubsection. \n \n \n \n Click on the Add  Content Type button  to create a new Content\nType and to add it to the list. \n \n \n \n \n You be asked to provide \n \n \n Code . The code is the unique identifier of the content type,\nthat must be 3 uppercase letters, (e.g. CNN). It’s mandatory. \n \n \n Name.  The name must be max 50 characters uppercase and\nlowercase letters, including numbers and special characters,\n(e.g. Conference_News). It’s mandatory. \n \n \n \n \n \n \n \n Select the  Save  button, then you’ll see \n \n \n Content Type Information : \n \n \n Code . The value is pre-filled. \n \n \n Name . The name is pre-filled. \n \n \n \n \n Metadata \n \n \n Page for on-the-fly publishing \n \n \n Default content model \n \n \n Default content model for lists \n \n \n \n \n \n \n “Default content model” and “Default content model for lists” are used\nrespectively to show the detailed view of the Content and its\nrepresentation as an element in a list, will be created later, during\nthe creation and the content. \n \n Attributes \n \n In the Attributes section, select the  Type  from the drop-down list.\nThe list contains all the available attributes types that define which\nproperties/attributes will characterize the Content. \n \n The Add button will start the configuration of the single attribute\ntype. Even every attribute type has its own configuration. \n For example, to configure the  Text  Attribute Type, choose Text from\nthe Types drop-down menu and then press the blue Add button. \n \n \n \n You should specify the following fields \n \n \n Type:  the value is the pre-filled. It represents the selected\nattribute type \n \n \n Code : Title. You should insert the name of the attribute. (You\ncan insert max 10 characters uppercase and lowercase letters,\nnumbers, and special characters _ ). (e.g. title) \n \n \n Name : Title. You should insert the description of the attribute.\n(You can insert max 50 characters uppercase and lowercase letters,\nincluding numbers and special characters). (e.g. Title). \n \n \n You should declare if the attribute is  mandatory ,\n searchable , and  to be used as a filter in the list. \n \n \n The  Roles  section it is possible to assign the  jacms:title\nAttribute Role  to this attribute; in this way other plugins or\nservices will know that within the CNG entity this attribute is a\ntitle, whatever the key is; however, for sake of clarity, the Code\nof the attribute is Title. \n \n \n The remaining fields related to  Sections  and  Validation -\nOGNL  sections are not mandatories, you can leave empty. \n \n \n Press the  Continue  button. The Text attribute type requires no\nadditional configuration step. \n \n \n You can add other Attributes Types. \n \n \n Press the Save button. The Content type will be saved and displayed\nin the table list \n \n \n [1] Consult the “List of Content Types” document for more details. \n"},{title:"Contents",frontmatter:{},regularPath:"/v6.1/tutorials/cms/contents-tutorial.html",relativePath:"v6.1/tutorials/cms/contents-tutorial.md",key:"v-5815c43c",path:"/v6.1/tutorials/cms/contents-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to create a Content",slug:"how-to-create-a-content"},{level:2,title:"!image",slug:"image-extracted-media-media-content4-png"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Contents \n Objective \n This document provides an overview of Contents and how to create them in\norder to be displayed in your application’s pages. \n Overview \n The App Builder application provides the interface to manage Contents to\nthe final user, using the WEB CMS integrated with the App Builder. \n How to create a Content \n To manage Contents through the Web CMS \n \n Select the CMS section and click on the Content subsection; all\ncontents already existing are displayed in a table list. \n \n \n To create an additional Content and add it to the list \n \n Select the  Add Content  button. A drop-down list will let you\nchoose which Content Type the content will be based on. \n \n \n You will be asked to provide the information in distinct sections \n \n \n Info \n \n \n Content Type . The information is pre-filled, it is the\ncontent type on which the content is based. \n \n \n Description . It’s the content ‘s name or description. It is\nmandatory. \n \n \n \n \n Groups \n \n \n Owner Group.  A drop-down list will let you choose the\navailable users group that can administrate /manage the content.\nIt is mandatory. \n \n \n Join Group.  A drop-down list will let you choose the\navailable users group to share the content with. They can’t\nadministrate it. It is not mandatory. \n \n \n Categories.  You can select the categories to join the\ncontents to provide a classification schema of them. It is not\nmandatory. \n \n \n Content Attributes.  You must fill out the attributes fields\ndefined by the content types on which the content is based. It\nis mandatory. \n \n \n \n \n \n At least the additional content is added and displayed in the list by\nselecting \n \n \n Save  button. The content will be saved in a draft version. \n \n \n Save and Approve  button. The content will be saved, approved and\npublished. \n  \n You can list the contents by filtering with \n \n \n All . All created contents are displayed (Draft, To Approve and\nApproved/Published) \n \n \n Draft.  All created contents and saved by only clicking on the\n Save  or  Save and Continue  button. The content is not\napproved and consequently it is not ready to be published. \n \n \n To Approve.  All created contents, moved in  Ready  status,\nthen saved by clicking on the Save or  Save and Continue  button.\nThe content is ready for review but has not yet been approved and\nconsequently it has not been published. \n \n \n Approved . All created contents that have been saved and approved\nby clicking on the  Save and Approve  button. It has been\npublished. \n \n \n \n In the table list, contents are listed with several parameters: Name,\nCreated by, Last Edited, Type, Created Date, Owner Group, Join Group,\nStatus, Restrictions, Code, Actions. They can be shown, by setting them\nin the Columns filter. \n \n For every content in the list, you have access to a set of actions\nthrough the  Actions  kebab button, from which you can: \n \n \n Edit, update the information data related to the content \n \n \n Delete, remove the content \n \n \n Publish, making the content visible \n \n \n Clone, replicate the content \n \n \n Unpublish, making the content invisible \n \n \n \n The contents list can be saved in your file system by clicking the\nDownload button and selecting CSV or XLS format. \n \n"},{title:"Digital Assets",frontmatter:{},regularPath:"/v6.1/tutorials/cms/digital-assets-tutorial.html",relativePath:"v6.1/tutorials/cms/digital-assets-tutorial.md",key:"v-026f84c4",path:"/v6.1/tutorials/cms/digital-assets-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to create a Digital Asset",slug:"how-to-create-a-digital-asset"},{level:2,title:"Editing Assets",slug:"editing-assets"},{level:3,title:"Cropping Images",slug:"cropping-images"},{level:2,title:"Embedding an Asset in a Page",slug:"embedding-an-asset-in-a-page"},{level:2,title:"Including an Asset in a Content",slug:"including-an-asset-in-a-content"},{level:2,title:"Configuring Allowed File Extensions for Upload",slug:"configuring-allowed-file-extensions-for-upload"}],lastUpdated:"6/27/2020, 10:35:02 PM",content:" Digital Assets \n Objective \n This document provides an overview of the Digital Assets and\nfunctionalities needed to manage images and documents. \n Overview \n The WEB CMS includes capabilities that let you manage contents and\ndigital assets. Digital Assets are images, documents, and other media\nfiles supported in specific format. \n Default Supported Document Formats:  The Entando CMS can be\nconfigured to allow you to load or exclude any type of file extension\nfrom being loaded to your site. For the app builder you should also include the MIME type of the asset you want to allow. The default set of extensions are: \n pdf,xls,doc,ppt,txt,rtf,sxw,sxc,odt,ods,odp,tar,gz,zip,rar,flv,swf,avi,wmv,ogg,mp3,wav,ogm,mov,iso,nrg,docx,docm,xlsx,xlsm,xlsb,pptx,pptm,ppsx,ppsm,sldx,sldm. \n Default Supported Image Formats : jpg, jpeg, png, svg,svg+xml \n How to create a Digital Asset \n To manage the Digital Assets through the Web CMS integrated with App\nBuilder application \n \n Select the CMS section and click on the Digital Assets subsection \n \n \n Add a new image or a new document file \n \n Press the  Drag and Drop or Browse your computer  button and\nchoose, from your file system, images and documents files that you\nwould like to upload \n \n \n \n From the  Add file  modal window, you must choose one the\navailable Groups and then the  Upload  button. If categories have\nbeen defined and displayed , you can join the file with the\ncategories you want. \n \n \n \n \n The image file that you just uploaded is displayed in the list; a\nstatistical overview of the number of the uploaded resources (images\nand documents) is provided. The App Builder’s interface allows the\nusers to choose grid and list view; most of the time, users prefer\nto use list view when they are searching with specific requirements,\nwhile they love grid view for exploring. For every resource, image,\nor document, the list shows the following information: \n \n \n Preview \n \n \n Name \n \n \n Type \n \n \n Uploaded By \n \n \n Uploaded At \n \n \n Group \n \n \n Categories \n \n \n Actions \n \n \n \n \n Furthermore, the interface lets you perform all management actions, as: \n \n \n Edit:  update the information data related to every single\nresource (image and document) \n \n \n Duplicate:  copy identically the resource from the original \n \n \n Download:  transfer the resource in your local machine \n \n \n Delete:  remove the resource \n \n \n \n You can list the contents by filtering with: \n \n \n All : All added files are displayed, images and documents both. \n \n \n Images : All added images are displayed \n \n \n Attachments : All added documents are displayed.\nThe Attachments name will be updated to the Documents name; the same for the Files label. \n Editing Assets \n Once you have a digital asset in place, you have several editing and viewing options. Click the asset's  More Actions  button and select  Edit  to update the asset's name/description, categories, and the file represented. \n Cropping Images \n You can crop images newly uploaded via Digital Assets. You can either crop the image dynamically or by using pre-configured crop ratios. \n To set pre-configured crop ratios: \n \n Select Apps > CMS > Content Settings. \n Under “Settings Image Crop Dimensions,” click  Add . \n Enter a crop ratio, using numeric values separated by a colon. See the screenshot below for an example. \n Click  Save . \n \n To dynamically crop an image: \n \n Edit the asset by opening  Actions  menu > Edit.\n \n Buttons representing your pre-defined crop ratios are below the image. Clicking any of those buttons changes the selected crop area based on the chosen ratio. \n You can create multiple crops of a single image as part of the upload process. The right side of the screen displays the list of crops created during the current session. \n \n \n \n \n \n Use your mouse or the buttons below the image to move or change the crop area, then click  Save  to crop the selected area. Repeat the process as many times as needed.\n \n Click  Close  to return to the Digital Assets screen. \n Embedding an Asset in a Page \n The uploaded asset can be embedded in a page by using  <@wp.resourceUrl path/to/asset . The path can be found in the CMS Configuration > File Browser page. \n \n Example usage:\n <img src=\"<@wp.resourceUrl cms/images/butterfly_d0_d3.jpg\" \n Including an Asset in a Content \n The asset can be included in a content of a type that has an  Attach  or  Image  attribute. \n \n Create a content type with an image attribute.\n \n Create a content based on the created  type.\n \n Under the  Content Attributes  section at the bottom of the page, click the  Add  button beside the image attribute. It will then open a modal that allows you to select an asset by clicking the  Use  action.\n Configuring Allowed File Extensions for Upload \n The types of files that can be uploaded to an Entando applicaiton are controlled by\nconfiguration in the server side of the app builder. If you're using the quickstart this will be the\n entando-de-app . \n There are two properties that control these settings and they are set in  src/main/conf/systemParams.properties  and are a comma delimitted list of values. The property keys are \n \n jacms.imageResource.allowedExtensions= \n jacms.attachResource.allowedExtensions= \n \n If you are configuring the upload for both the App Builder and the legacy Admin Console you should include\nboth the MIME type of the asset and the file extension. The APIs that support resources will check MIME type of the uploaded asset. \n An example configuration for images. \n \n jacms.imageResource.allowedExtensions=jpg,jpeg,png,svg,svg+xml \n \n Where  svg+xml  is the MIME type for an svg image. \n The  systemParams.properties  file is bundled into the WAR and the image for the application so you will need to create and deploy image to reflect changes for these properties in your application. \n"},{title:"Hello World for a Widget Using the App builder",frontmatter:{},regularPath:"/v6.1/tutorials/cms/custom-html-widgets.html",relativePath:"v6.1/tutorials/cms/custom-html-widgets.md",key:"v-126467b2",path:"/v6.1/tutorials/cms/custom-html-widgets.html",headers:[{level:2,title:"Basic Widget Tutorial",slug:"basic-widget-tutorial"},{level:2,title:"Simple Fragment tutorial",slug:"simple-fragment-tutorial"},{level:2,title:"Freemarker Basics in Entando",slug:"freemarker-basics-in-entando"},{level:2,title:"Useful Links",slug:"useful-links"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Hello World for a Widget Using the App builder \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Basic Widget Tutorial \n For this example you will use the Entando App Builder to build and\nassign your widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. \n \n \n In the App Builder menu, at the top, Go To: UX Patterns -→ Widgets \n \n \n Select NEW \n \n \n The Custom UI Field is a freemarker template where you can put raw\nhtml and include freemarker logic, \n \n \n It allows you to import javascript, css, or any normal HTML \n \n \n Example, put <h2>Hello World</h2> into your widget, give it\na name and save it \n \n \n \n \n Go To: Page Designer -→ Page Settings \n \n \n In the Home Page dropdown select Home / Service and select SAVE \n \n \n Now place the widget on the page \n \n \n Go To: Page Designer -→ Page Tree \n \n \n On the row that says "Service", on the far right side, select the\nKebab button and select CONFIGURE \n \n \n Find the widget created in step 5 on the right hand side \n \n \n Drag and drop the widget onto the open frame of the page \n \n \n Select PUBLISH at the bottom of the screen \n \n \n Then select GO TO HOME PAGE in the upper right \n \n \n You should see "Hello World" on the page \n Simple Fragment tutorial \n A fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic html,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …​  tag. \n Starting from the simple widget tutorial above: \n \n \n In the app builder Go To: UX Patterns -→ Fragments \n \n \n Enter the code for the fragment as  test \n \n \n In the  Gui Code  enter  <h2>This is a fragment</h2> \n \n \n Next place the fragment on a page \n \n \n Go To: Ux Patterns -→ Page Models \n \n \n On the row for  service , select EDIT \n \n \n Use the fragment tag to place the fragment on the page\n <@wp.fragment code="test"/> \n \n \n SAVE the page model \n \n \n Go To: homepage (assuming you’ve set the service page to the\nhomepage) \n \n \n Note that the fragment is printed including the HTML tags. By\ndefault html embedded via a fragment tag is escaped so you get it\nrendered exactly as you enter it. You’ll need to un-escape it to get\nit to render correctly. \n \n \n Go back to your page model (UX Patterns -→ Page Models) select\nSERVICE and EDIT \n \n \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n Go back to the homepage \n \n \n See correctly rendered fragment \n Freemarker Basics in Entando \n The freemarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > …​ \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof freemarker. \n Useful Links \n https://freemarker.apache.org \n'},{title:"List of Attribute Types",frontmatter:{},regularPath:"/v6.1/tutorials/cms/list-of-Content-attributes.html",relativePath:"v6.1/tutorials/cms/list-of-Content-attributes.md",key:"v-1d83e0c0",path:"/v6.1/tutorials/cms/list-of-Content-attributes.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Simple Attribute Types",slug:"simple-attribute-types"},{level:2,title:"Composed attribute types",slug:"composed-attribute-types"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" List of Attribute Types \n Objective \n This document provides a list and an overview of all available attribute\ntypes. \n Overview \n Attributes can be seen as the smallest elements that compose a Content\nType. In other words, a Content Type is just a collection of different\nattributes. Attributes are responsible for carrying the actual\ninformation inside a Content in Entando and could be of different types.\nIn this chapter, we will review and describe the different attribute\ntypes. \n Firstly, we can distinguish simple attribute types from composite\nattribute types. In the first case, the attribute type carries a single\npiece of information (for example, an image), while the latter is an\naggregation of simple attribute types (for example, a set of images). \n Simple Attribute Types \n Attach \n This represents the information carried by a file, which is attached to\nthe content. \n It consists of an URL corresponding to the desired file present in the\nsystem’s resources, and a text which can either indicate the description\nor the name of the file. \n This attribute type is rendered as a button named “Add”. By pushing that\nbutton, the user is prompted to select a desired file present in the\nsystem’s Digital Assets Attachments list. \n Boolean \n This attribute type represents a boolean value which can either be true\nor false. This attribute type is rendered as two radio buttons labeled\n“Yes” and “No”. \n Checkbox \n This attribute type behaves in the same way as a Boolean does – it is\nactually an alternative to the Boolean attribute type - but it is\nrendered with a checkbox labeled “Yes” or “No”. \n Date \n This attribute type represents a date, tracking time within a content;\nit is often used to filter contents appearing in lists by publication\ndate, etc. \n It is rendered as a datepicker. \n Timestamp \n This attribute type is specialized for the Date attribute, allowing you\nto also specify the hour, minute and second. \n It is rendered as a datepicker for the date, and a select for hours,\nminutes and seconds. \n Enumerator \n The enumerator attribute type represents textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements which are mandatory and declares the set of available\nchoices; \n \n \n Separator, which is optional and declares the character to use to\nseparate the arguments of the enumerator. By default the comma “,”\nis used. \n \n \n ExtractorBean: this parameter represents the name of the Spring bean\nto use to process the values of the enumerator. The name must\nexactly match the id of the bean as defined in the Spring\nconfiguration file. \n \n \n It is rendered as a select list. \n Enumerator Map \n The enumerator map attribute type represent textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements in the form of a separated list of key=value pairs, (i.e.\nkey1=value1,key2=value2) \n \n \n Separator, which is optional and declares the character to use to\nseparate the key, values pairs. By default the comma is used. \n \n \n It is rendered as a select list which shows the available values. \n Hypertext \n This attribute type holds HTML tagged text; it retains a single value\nfor all languages. \n Even if this attribute type could support all HTML tags, we strongly\nrecommend using only tags which provide meaning and avoid those which\ndecorate or add graphics. \n Hypertext attributes are rendered as a text area in the content edit\npage; if the CKEditor is active, the user has access to a set of\nadditional functionalities from a dedicated editor’s toolbar. Such as\ntable insertion and table manipulation, special characters insertion,\nstring formatting, links creation. \n Image \n This attribute type binds an image resource to the content. \n The image is always taken from the Digital Assets images list. The user\nwill need to specify the description accompanying the image. \n Usually attributes of type Image are not indexed and are not used to\nfilter contents. \n It is rendered as a button named “Add” that, when pushed, allows the\nuser to select an image from the Digital Assets images list. Once\nselected the user is presented with a preview, as a thumbnail, of the\nimage and has the possibility to define some parameters: \n \n \n Text which is mandatory and by default takes the name of the\nselected image \n \n \n legend (optional) \n \n \n alt (optional) \n \n \n description (optional) \n \n \n title (optional) \n \n \n Link \n This attribute type represents an hypertext link; it is normally used to\ninclude a link in your content: it is possible to define up to three\ndifferent types of links: \n \n \n external links: a link pointing to a location external to the Entando\nportal \n \n \n link to page: a link which points to a page of the portal \n \n \n link to a content: a link to another content \n \n \n It is rendered as a button named “Add” that when pushed opens up a modal\nwindow from which the user can select the link type. \n Longtext \n This attribute type represents a simple unformatted text; it supports\nseveral languages and is normally used for small descriptions, when a\nshort string won’t suffice. \n It supports minimum length , maximal length and regular expressions as\noptional parameters. \n It is rendered as a textarea. \n Monotext \n Monotext represents the information in textual form, but supports only a\nlanguage; it is used for all \n those fields which do not require localization. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n Number \n This attribute type holds an integer number; it retains a single value\nfor all languages. \n Supports the optional parameters: From, To, and Equal to. \n It is rendered as a textfield. \n Text \n This attribute type holds a string; it retains a single value for all\nlanguages. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n ThreeState \n Conceptually similar to the Boolean attribute, this attribute type\nallows a third status “Both” to be present. \n It is rendered as a radio button with “Yes”, “No”, “Both” options. \n Composed attribute types \n All the attributes types of the previous chapter can only retain a\nsingle type of information, but sometimes it is desirable to aggregate\ndifferent types of attributes into one attribute: this is where composed\nattributes are used. \n From a functional point of view, it would be perfectly legal to build a\ncontent type specifying all the attributes back to back: the content\nwould be formally complete, but from a logical point of view the\nattributes would appear mutually unrelated and, worse, the relationship\nbetween them would not be explicit. \n Entando offers three types of composed attributes: List, Monolist,\nComposite. \n List \n This Attribute Type represents a set of independent and homogeneous\nelementary Attribute types, each associated with one of the languages\ndefined in the system. \n An immediate consequence is that this kind of list can handle only\nmono-language basic attributes. \n It is rendered with a button named “Add” that if pushed presents the\nuser a prompt to select or define the single elements which compose the\nlist. \n Monolist \n This attribute type is a list that is common to all the system\nlanguages; this kind of list handles multi-language and mono-language\nattributes. \n It is rendered with a button named “Add” that, if pushed, presents the\nuser with a prompt to select or define the single elements that compose\nthe monolist. \n Composite \n This attribute type is an aggregate of different, non-homogeneous,\nsimple attributes types. The aggregation of different types is treated\nas a single unit. \n It is rendered as a combination of the elementary attribute types, where\neach attribute type presents the proper rendering. \n"},{title:"Publish A Content",frontmatter:{},regularPath:"/v6.1/tutorials/cms/publish-a-content-tutorial.html",relativePath:"v6.1/tutorials/cms/publish-a-content-tutorial.md",key:"v-2982c900",path:"/v6.1/tutorials/cms/publish-a-content-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to publish a Content",slug:"how-to-publish-a-content"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Publish A Content \n Objective \n This document provides an overview of how to publish a Content in your\napplication page. \n Overview \n The App Builder application provides the capabilities to publish\ncontents in your application page to the final user. \n How to publish a Content \n To publish a Content, through the App Builder application, in your page \n \n Create a new page[1] clicking  Add  button in Page Tree subsection\ninside the Page Designer section. Before pressing the Add button,\nselect the hierarchical placement of the page, selecting an already\npresent page, or you will be asked for that afterwards. \n \n \n A page must have a title, a code, a placement in the page tree, an owner\ngroup, a join group and a page model. When you create a new page, you\nmust to \n \n \n Provide a title and a code in the Info section. \n \n \n Provide, selecting them from the dropdown menus, an Owner Group and\na Join Group in the Page Groups section, \n \n \n Select a Page Template from the available templates. \n \n \n \n \n Click the green “ Save and Configure ” button. This brings you to\nthe configuration section, which lists all the frames defined in the\npage model you associated with that page. \n \n \n \n Add widgets, available in the right pane, to the page, by dragging\nand dropping them in the desired frame. Regarding the content, you\ncan drag and drop in an available frame, the WEB CMS Widget\n“ Publish a Content ”. A Widget setting page will be shown. \n \n \n \n \n In the Search field, you can type the name of the content that you\nwould like to publish and then hit the plus  (+)  button. Remember\nthat in order to publish the content on your page, it must be saved\nand approved. \n \n \n Choose the suitable content template from the Content Template\ndrop-down list \n \n \n Press the blue  Save  button. \n \n \n \n \n Click on the  Preview  button in Configuration Page to show its\npreview with the published content. \n \n \n \n Finally, click on the  Publish  button to publish the page and\nshow your Content \n \n \n [1] More details about pages and page models will be provide in a\ndedicated document. \n"},{title:"Adding a new API to the core app",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/add-rest-api.html",relativePath:"v6.1/tutorials/customize-the-platform/add-rest-api.md",key:"v-4ed657b8",path:"/v6.1/tutorials/customize-the-platform/add-rest-api.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Adding a new API to the core app \n Prerequisites \n \n \n Java 8 \n \n \n maven \n Overview \n This guide will take you through adding a new REST API to the Entando\ncore app. In some cases it is better to add new APIs to the core rather\nthan creating a new microservice. Some example cases where adding new\nAPIs to the core is recommended are: \n \n \n When extending or adding functionality to the WCMS \n \n \n When you have a simple use case requiring persistence that is\nspecific to only the application you’re working within \n \n \n When exposing configurations that are needed by the portal-ui during\npage rendering \n \n \n For small changes that don’t warrant a full stand-alone microservice \n \n \n You can build widgets and micro frontends that take advantage of these\nAPIs in the same way that your micro-frontends can invoke APIs exposed\nby other services. \n Tutorial \n Creating a controller and services \n \n \n Create a new java package in the project using your favorite IDE at\nthe path  org.entando.training . \n \n \n Under that package add packages for  controllers  and  services . \n \n \n Create a class called  DemoController.java  from the\ntraining package into the controllers package. \n \n This is a normal Spring rest controller and it will be\ndiscovered by annotations. \n \n \n \n Copy  DemoService.java  from the\ntraining package into the services package. \n \n This is a normal Spring service that will be autowired into the\ncontroller. The data in this service is hardcoded but this is\nwhere you can wire in external services or other parts of the\nEntando architecture to fetch the data. \n \n \n \n Copy  commonConfig.xml  to\n src/main/resources/spring/aps/managers . \n \n \n The goal is to enable package scanning for annotation driven\nspring services. This includes the package scan for your package\ndefined above. If you want to scan another package, then you\nneed to add another path to this file. This is the only spring\nXML you will need to change if you want to build annotation\ndriven beans in Entando. \n \n \n See also web.xml for deeper details. \n \n \n \n \n Review the code and annotations in the controller to understand how\nthe APIs are protected and integrated. \n \n \n @RestAccessControl  is a custom Entando annotation that can be used\nto restrict APIs by role. \n \n The rest of the annotations are normal Spring annotations. \n \n \n \n Restart your app using jetty. \n \n \n if you get an error add the entries below to\n src/main/conf/systemParams.properties  This is temporary \nParameters for Argon2 algorithm encryption\nalgo.argon2.type=ARGON2i\nalgo.argon2.hash.length=32\nalgo.argon2.salt.length=16\nalgo.argon2.iterations=4\nalgo.argon2.memory=65536\nalgo.argon2.parallelism=4\nalgo.default.key=changeit\n \n \n \n \n \n Go to Swagger \n \n \n Find the demo-controller and try your new endpoints out using\nswagger \n \n \n"},{title:"Add a New Datasource in EAP Server",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/add_datasource_to_eap_image.html",relativePath:"v6.1/tutorials/customize-the-platform/add_datasource_to_eap_image.md",key:"v-974b2b74",path:"/v6.1/tutorials/customize-the-platform/add_datasource_to_eap_image.html",headers:[{level:2,title:"Other resources",slug:"other-resources"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Add a New Datasource in EAP Server \n With EAP should be enough to add a set of parameters the EntandoApp\ncustom resource. \n \n \n Set the standardServerImage to eap \n \n \n Add a  parameters  object \n \n \n \n Parameters environment variables reference \n \n \n \n \n \n \n \n Env variable \n Value \n Example with PortDB \n \n \n \n \n DATASOURCES \n "PORTDB,SERVDB, <YOUR-DS-PREFIX>" \n \n \n \n <YOUR-DS-PREFIX>_NONXA \n Defines the datasource as a non-XA datasource. Defaults to  false \n PORTDB_NONXA="true" \n \n \n <YOUR-DS-PREFIX>_JTA \n Defines Java Transaction API (JTA) option for the non-XA datasource. The XA datasources are already JTA capable by default Defaults to  true \n PORTDB_JTA="false" \n \n \n <YOUR-DS-PREFIX>_URL \n Defines connection URL for the datasource. \n PORTDB_URL="jdbc:derby:/entando-data/databases/entandoPort;create=true" \n \n \n <YOUR-DS-PREFIX>_JNDI \n Defines the JNDI name for the datasource. This setting is useful if you want to override the default generated JNDI name \n PORTDB_JNDI="java:jboss/datasources/entandoPortDataSource" \n \n \n <YOUR-DS-PREFIX>_DRIVER \n Defines Java database driver for the datasource \n PORTDB_DRIVER="derby" \n \n \n <YOUR-DS-PREFIX>_USERNAME \n Defines the username for the datasource \n PORTDB_USERNAME="agile" \n \n \n <YOUR-DS-PREFIX>_PASSWORD \n Defines the password for the datasource \n PORTDB_PASSWORD="agile" \n \n \n <YOUR-DS-PREFIX>_SERVICE_HOST \n Defines the database server’s host name or IP address to be used in the datasource’s connection-url property. \n PORTDB_SERVICE_HOST="dummy" \n \n \n <YOUR-DS-PREFIX>_SERVICE_PORT \n Defines the database server’s port for the datasource. \n PORTDB_SERVICE_PORT="1527" \n \n \n \n \n Note \n For more details on other standard variables check the  EAP\ndocumentation \n \n Here a potential example \n apiVersion: entando.org/v1\nkind: "EntandoApp"\nmetadata:\n  annotations: {}\n  labels: {}\n  name: "quickstart"\nspec:\n  dbms: #tbd\n  replicas: 1\n  standardServerImage: eap\n  ingressPath: /entando-de-app\n  parameters:\n    DATASOURCES: "PORTDB,SERVDB,MYDATASOURCE"\n    MYDATASOURCE_NONXA: "true"\n    MYDATASOURCE_JTA: "false"\n    ...\n Other resources \n \n EAP Official Documentation: Runtime\nArtifacts/Datasources \n \n'},{title:"Hello World for a Widget Using the App builder",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/app-builder/hello-world.html",relativePath:"v6.1/tutorials/customize-the-platform/app-builder/hello-world.md",key:"v-8794784e",path:"/v6.1/tutorials/customize-the-platform/app-builder/hello-world.html",headers:[{level:2,title:"Basic Widget Tutorial",slug:"basic-widget-tutorial"},{level:2,title:"Simple Fragment tutorial",slug:"simple-fragment-tutorial"},{level:2,title:"Freemarker Basics in Entando",slug:"freemarker-basics-in-entando"},{level:2,title:"Useful Links",slug:"useful-links"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Hello World for a Widget Using the App builder \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Basic Widget Tutorial \n For this example you will use the Entando App Builder to build and\nassign your widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. \n \n \n In the App Builder menu, at the top, Go To: UX Patterns -→ Widgets \n \n \n Select NEW \n \n \n The Custom UI Field is a freemarker template where you can put raw\nhtml and include freemarker logic, \n \n \n It allows you to import javascript, css, or any normal HTML \n \n \n Example, put <h2>Hello World</h2> into your widget, give it\na name and save it \n \n \n \n \n Go To: Page Designer -→ Page Settings \n \n \n In the Home Page dropdown select Home / Service and select SAVE \n \n \n Now place the widget on the page \n \n \n Go To: Page Designer -→ Page Tree \n \n \n On the row that says "Service", on the far right side, select the\nKebab button and select CONFIGURE \n \n \n Find the widget created in step 5 on the right hand side \n \n \n Drag and drop the widget onto the open frame of the page \n \n \n Select PUBLISH at the bottom of the screen \n \n \n Then select GO TO HOME PAGE in the upper right \n \n \n You should see "Hello World" on the page \n Simple Fragment tutorial \n A fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic html,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …​  tag. \n Starting from the simple widget tutorial above: \n \n \n In the app builder Go To: UX Patterns -→ Fragments \n \n \n Enter the code for the fragment as  test \n \n \n In the  Gui Code  enter  <h2>This is a fragment</h2> \n \n \n Next place the fragment on a page \n \n \n Go To: Ux Patterns -→ Page Models \n \n \n On the row for  service , select EDIT \n \n \n Use the fragment tag to place the fragment on the page\n <@wp.fragment code="test"/> \n \n \n SAVE the page model \n \n \n Go To: homepage (assuming you’ve set the service page to the\nhomepage) \n \n \n Note that the fragment is printed including the HTML tags. By\ndefault html embedded via a fragment tag is escaped so you get it\nrendered exactly as you enter it. You’ll need to un-escape it to get\nit to render correctly. \n \n \n Go back to your page model (UX Patterns -→ Page Models) select\nSERVICE and EDIT \n \n \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n Go back to the homepage \n \n \n See correctly rendered fragment \n Freemarker Basics in Entando \n The freemarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > …​ \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof freemarker. \n Useful Links \n https://freemarker.apache.org \n'},{title:"Building a Docker Image and Deploying a Pre-Packaged App",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/app-engine/building-prepackaged-image.html",relativePath:"v6.1/tutorials/customize-the-platform/app-engine/building-prepackaged-image.md",key:"v-1f32e193",path:"/v6.1/tutorials/customize-the-platform/app-engine/building-prepackaged-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"9/22/2020, 4:28:19 PM",content:' Building a Docker Image and Deploying a Pre-Packaged App \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will show you how you can use an Entando application that\nyou have built as a launching point for creating new applications. \n In this lab you’ll take a demo application previously built, install the\nbackups in a blank application, build an image from the updated app, and\ndeploy it as a new application. \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Take the provide zip file and unzip it in a location of your choice. \n \n \n This zip contains all of the assets, content, and metadata\nneeded to launch an Entando application. We are going to package\nthem the assets and DB an image and \n \n \n Entando will automatically instantiate and populate the app from\nthe most recent backup \n \n \n \n \n Move the resources and protected folders from the zip file into your\n entando-de-app  in  src/main/webapp  replacing any content that is\nalready there \n \n \n Build a docker image from the app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n Note that the "derby" option here is only for the initialization\nphase of the DB when deploying. It isn’t the final database\nchoice \n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO_NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO_NAME>:latest\n \n \n \n Now we need to generate a new application for deployment to\nKubernetes using the helm chart \n \n \n If you have an output from helm from before you can re-use it\nand just apply the changes to the config map. \n \n \n Or you can re-run helm and change the output \n \n \n \n \n Re-run the helm command for your environment (check with your\ninstructor if you don’t know what this is) \n \n \n Open the output yaml file from the helm command in the text editor\nof your choice \n \n For example:  vi training-alpha.yaml \n \n \n \n In that file look for the  ConfigMap \n \n \n The config map defines all of the images that are available as\npart of the deployment. They aren’t all used concurrently. \n \n \n You can also view this config map in kubernetes/OpenShift \n \n \n \n \n Now you need to update the deployment to use your customized Wildfly\nimage. Find  entando-de-app-wildfly  in the config map \n \n Note that we are changing the de-app but you could create a\ncustom version of any of the included images \n \n \n \n Change the version to match the version you used for your image \n \n \n Change the "organization" to the name of your main image repository\norganization and if you aren’t using docker.io (DockerHub) then\nchange the registry as well. \n \n \n Save the file \n \n \n Follow the deployment steps you went through when you originally\ndeployed your Entando application to your Kubernetes instance \n \n \n Once deployed go to the app builder in your app \n \n \n Click Go To Homepage \n \n \n'},{title:"Tutorial: Extending the App Builder",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/app-builder/tutorial-extending-app-builder.html",relativePath:"v6.1/tutorials/customize-the-platform/app-builder/tutorial-extending-app-builder.md",key:"v-2992138f",path:"/v6.1/tutorials/customize-the-platform/app-builder/tutorial-extending-app-builder.html",headers:[{level:2,title:"Creating a Basic Application",slug:"creating-a-basic-application"},{level:2,title:"Understanding the Stand Alone Environment",slug:"understanding-the-stand-alone-environment"},{level:2,title:"Customizing the Menu",slug:"customizing-the-menu"},{level:2,title:"Customizing the menu labels",slug:"customizing-the-menu-labels"},{level:2,title:"Customizing the Routes",slug:"customizing-the-routes"},{level:2,title:"state",slug:"state"},{level:2,title:"Customizing the Reducers",slug:"customizing-the-reducers"},{level:2,title:"userList",slug:"userlist"},{level:3,title:"connecting to the store",slug:"connecting-to-the-store"},{level:2,title:"Page Models",slug:"page-models"},{level:3,title:"Connecting to the Store",slug:"connecting-to-the-store-2"},{level:2,title:"Adding the API Calls",slug:"adding-the-api-calls"},{level:2,title:"Creating the Thunk",slug:"creating-the-thunk"},{level:2,title:"changing the mapDispatchToProps in the containers",slug:"changing-the-mapdispatchtoprops-in-the-containers"},{level:2,title:"Updating the List components",slug:"updating-the-list-components"},{level:2,title:"clear the default value of the reducer",slug:"clear-the-default-value-of-the-reducer"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Tutorial: Extending the App Builder \n Apps for the Entando App Builder are developed as standalone\napplications which can be run using  npm start  in standalone mode. \n Each application should be deployed in npm using the  @entando \nnamespace and will export into their dist folder several items used by\nthe App Builder when integrating it into the full application. \n Creating a Basic Application \n To create a basic application, use the  entando\nfpg  running the\n npx @entando/fpg ab-app <appName>  command. \n the  appName  should only contain alphanumeric characters and\nunderscores, and should begin with a letter. \n This will create inside the working directory, a boilerplate app-builder\napp in a directory named  <appName>  argument. \n i.e. \n using the command  npm @entando/fpg ab-app testing  inside your home\ndirectory, a directory named  testing  will be created containing the\napp. \n All dependencies will already be installed allowing you to  cd  inside\nthe project directory and run  npm start  to start the app running. \n Understanding the Stand Alone Environment \n Each app for the App Builder, can run in both a stand alone mode and an\nintegrated mode. Using  npm start  will use standalone mode. \n In this environment you’ll be looking at the user interface of the app\ninside a default page. This page, which includes a default menu, will\nnot be exported and therefore can be customized. \n To better understand which elements and components are being exported to\nApp Builder, it is best to understand the anatomy of the app. \n Exports \n Each app will have a  babel.js  export file similar to: \n      import  menu  from   'ui/common/LinkMenu' ; \n     import   {  cms  as  state  }   from   'state/rootReducer' ; \n     import   {  routes ,  routesDir  }   from   'ui/App' ; \n     import  en  from   'locales/en' ; \n     import  it  from   'locales/it' ; \n\n     const  testing  =   { \n      id :   'testing' , \n      menu , \n      state , \n      routes , \n      routesDir , \n      locales :   { \n        en , \n        it , \n       } , \n     } ; \n\n     export   default  testing ; \n id: is the app id. \n This parameter is used by App Builder to differentiate all integrated\napps. \n menu: is a React component containing all the menu elements. \n These elements are used inside the standalone environment and inside the\nintegrated environment as a second level menu. The boilerplate app\ncontains a basic menu. \n      import  React  from   'react' ; \n     import   {  LinkMenuItem  }   from   '@entando/menu' ; \n     import   {  FormattedMessage  }   from   'react-intl' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-SECTION_ID\" \n          label = { < FormattedMessage id = \"testing.menu.SECTION_NAME\"  defaultMessage = \"SECTION_NAME\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n\n     export   default  LinkMenu ; \n Customizing the Menu \n For this exercise, we will create two links inside the menu. The first\nwill link to a page listing all the users inside the entando instance.\nThe second will list all the existing page models inside the Entando\ninstance. \n For this example we’re using existing APIs from the Entando core just\nfor simplicity, you can instead call any API or data source. \n In your app project, open  src/ui/common/LinkMenu.js  and update the\nconst to the code below. \n      const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"testing.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"testing.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n \n it is important that both the  <LinkMenuItem>  id property and the\n`<FormattedMessage>`properties inside label have the correct values\nassigned, i.e.: \n the LinkMenuItem id will be  menu-userList  while the FormattedMessage\nid will be  testing.menu.userList  and the defaultMessage will be\n User List . \n locales \n The locales files are objects that contain all of the i18n locales of\nthe app. \n By default the boilerplate contains both the english and italian i18n\nfiles. \n In your app project in  src/locales/en.js  and  src/locales/it.js  you\ncan see your labels. \n      export   default   { \n      locale :   'en' , \n      messages :   { \n         'testing.title' :   '' , \n         'testing.label.errors' :   '' , \n         'testing.label.cancel' :   '' , \n         'testing.chooseAnOption' :   '' , \n         'testing.tip' :   '' , \n         'testing.new' :   '' , \n         'testing.save' :   '' , \n         'testing.saveAndApprove' :   '' , \n         'testing.unpublish' :   '' , \n         'testing.setContentAs' :   '' , \n         'testing.cancel' :   '' , \n         'testing.saveAndContinue' :   '' , \n         'testing.stickySave.status' :   '' , \n         'testing.stickySave.lastAutoSave' :   '' , \n       } , \n     } ; \n \n While running in standalone mode the boilerplate does not offer a way\nfor the user pick a locale, but both will be loaded inside app-builder\nand will be consumed as intended by it, using the correct one based on\nthe user-picked language. \n It is of course possible to change the standalone app to give the user\nthe option to choose the locale in here as well, but this is not\nsomething will be covering in this tutorial. \n Customizing the menu labels \n To customize the existing menu labels, we’ll add the new label ids\ninside both the english and Italian locale files: \n \n Note \n If you named your app something besides  testing  you’ll need to fix\nthese tags to match the name of your app. \n \n      ... \n    messages :   { \n         ... \n         'testing.menu.userList' :   'List of Users' , \n         'testing.menu.pageModelList' :   'Page Models' , \n         ... \n     } , \n     ... \n \n The key in the messages object matches the id of the\n`<FormattedMessage>`component we placed inside the menu, while its\nvalue is the actual string that will be displayed depending on the\ncurrently active language. \n Routes and RoutesDir \n Both of these elements are imported from  src/ui/App.js . The first one\nis a collection of actual  <Route>  components, and the second one is an\nobject containing each route data, i.e.: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n     ] ; \n \n The constant  ROUTE_TESTING  is imported from  src/app-init/routes.js \n Customizing the Routes \n Next we will create the two routes for the two links we have created by\ncreating first the two constants needed. \n In your IDE open  src/app-init/routes.js \n      export   const   ROUTE_TESTING   =   '/testing' ; \n     export   const   ROUTE_USER_LIST   =   '/testing/user-list' ; \n     export   const   ROUTE_PAGE_MODELS   =   '/testing/page-models' ; \n \n \n Note \n Change the value of  testing  to what you selected for the name of\nyour App extension. \n \n The value of each constant will be the path of the route. It is\nimportant that each route is a subroute of the id of the app itself,\notherwise this may cause name collision when running inside the\nintegrated environment of app-builder. \n Both routes are next imported inside  App.js : \n Update the imports with your new ROUTE tags. \n      import   { \n       ROUTE_TESTING , \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n \n and then add to the  routesDir  constant: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n       { \n        path :   ROUTE_USER_LIST , \n         render :   ( )   =>   < > user list < / > , \n       } , \n       { \n        path :   ROUTE_PAGE_MODELS , \n         render :   ( )   =>   < > page models < / > , \n       } , \n     ] ; \n \n Next, import the routes constants inside  LinkMenu.js  and change\naccordingly the  to  property of the  <LinkMenuItem>  component: \n      ... \n     import   { \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"tatata.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = { ROUTE_USER_LIST } \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"tatata.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = { ROUTE_PAGE_MODELS } \n         / > \n       < / > \n     ) ; \n     ... \n \n Next clicks on the links in the menu will change the routes and display\nthe content defined in the  App.js  file. \n state \n The state in src/babel.js is the combined reducer of the app, the\nrootReducer.js contains the combined reducer of the app and exports it,\nbut also contains the entire reducer of the app when running in\nstandalone mode. \n      export   const  testing  =   combineReducers ( { \n       // implement here your app specific reducers \n     } ) ; \n\n     export   default   combineReducers ( { \n      apps :   combineReducers ( {  testing  } ) , \n      api , \n      currentUser , \n      form , \n      loading , \n      locale , \n      messages , \n      modal , \n      pagination , \n     } ) ; \n \n The app specific reducers are stored inside the  apps  object, this is\ndone to avoid possible name collisions with any reducer stored inside\napp-builder when running the app in integrated mode. \n Customizing the Reducers \n Next we will be creating the two reducers for the user list and page\nmodels. They will be created inside two new directories\n src/state/apps/testing/userList/  and\n src/state/apps/testing/pageModels . The  types.js  files will contain\nthe two action types that we’ll need. \n userList/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_USERS = 'apps/testing/add-users';\n \n pageModels/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_PAGE_MODELS = 'apps/testing/page-models/add-page-models';\n \n The value of both constants contain the whole namespace\n apps/testing/REDUCER  this is done to avoid any possible name collision\nwhen running the app in integrated mode. \n Next create both actions files: \n userList/actions.js \n      import   { \n       ADD_USERS , \n     }   from   'state/apps/testing/userList/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addUsers   =   users   =>   ( { \n      type :   ADD_USERS , \n      payload :  users , \n     } ) ; \n \n pageModels/actions.js \n      import   { \n       ADD_PAGE_MODELS , \n     }   from   'state/apps/testing/pageModels/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addPageModels   =   pageModels   =>   ( { \n      type :   ADD_PAGE_MODELS , \n      payload :  pageModels , \n     } ) ; \n \n then the selectors: \n userList/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getUserList   =   state   =>  state . apps . testing . userList ; \n     export   const  getList  =   createSelector ( getUserList ,   userList   =>  userList . list ) ; \n \n pageModels/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getPageModels   =   state   =>  state . apps . testing . pageModels ; \n     export   const  getList  =   createSelector ( getPageModels ,   pageModels   =>  pageModels . list ) ; \n \n And finally the reducers. The default state is going to contain some\nsample data for us to display. \n userList/reducer.js \n      import   {   ADD_USERS   }   from   'state/apps/testing/userList/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'active' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'admin' , \n            email :   'admin@entando.com' , \n           } , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'disabled' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'User Name' , \n            email :   'user1@entando.com' , \n           } , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_USERS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n pageModels/reducer.js \n      import   {   ADD_PAGE_MODELS   }   from   'state/apps/testing/pageModels/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          code :   'home' , \n          descr :   'Home Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n         { \n          code :   'service' , \n          descr :   'Service Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_PAGE_MODELS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n Last, we can add the two reducers just created to the\n src/state/rootReducer.js \n      ... \n     import  userList  from   'state/apps/testing/userList/reducer' ; \n     import  pageModels  from   'state/apps/testing/pageModels/reducer' ; \n\n     export   const  testing  =   combineReducers ( { \n      pageModels , \n      userList , \n     } ) ; \n     ... \n \n we will now be able to see with the  reduxDevTools  in our browser. To\nview this state in your reduxDevTools go to: \n State -→ apps -→ testing -→ pageModels  and\n State -→ apps -→ testing -→ userList \n Creating the UI Components \n At this point, both routes created should be rendering a simple string.\nWe will next create the actual component that will be rendered inside\nthe page. \n userList \n Inside  src/ui/userList/  create the  List  component. Create the\n userList  directory and  List.js  file in that directory. \n      import  React  from   'react' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( )   =>   { \n       const  data  =   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n       ] ; \n\n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n               < tr > \n                 < td > username < / td > \n                 < td > registration < / td > \n               < / tr > \n             < / thead > \n             < tbody > \n               { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Next, change the route inside  src/ui/App.js . Add the import below and\nupdate the component to reference the List component created in the\nprior step. \n      ... \n     import  List  from   'ui/userList/List' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  List , \n       } , \n     ... \n \n The table will now display correctly when clicking on the menu item. \n connecting to the store \n Next let’s connect the component to the store to get the data from the\nreducer. \n The first step is creating the  ListContainer.js  next to the  List \ncomponent file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/userList/selectors' ; \n\n     import  List  from   'ui/userList/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The List\nfile should now look like this: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Make sure that you remove the predefined  data  const since the data\nwill now be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js .\nUpdate the import to the container and update the component in\n ROUTE_USER_LIST  to the new ListContainer. \n      ... \n     import  ListContainer  from   'ui/userList/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  ListContainer , \n       } , \n     ... \n \n Go back to your app. We will now see the data inside the table\nreflecting the content of the storage. \n Page Models \n inside  src/ui/pageModels/  we are going to create the  List  component \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n\n     export   default  List ; \n \n Next change the route inside  src/ui/App.js \n      ... \n     import  ListPageModels  from   'ui/pageModels/List' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  ListPageModels , \n       } , \n     ... \n \n The table will now be displayed correctly when clicking on the menu\nitem. \n Connecting to the Store \n Next, connect the component to the store to get the data from the\nreducer. \n The very first thing we’ll do is create the  ListContainer.js  next to\nthe  List  component file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/pageModels/selectors' ; \n\n     import  List  from   'ui/pageModels/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The whole\nList component will have this content: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . code } < / td > \n           < td > { row . descr } < / td > \n         < / tr > \n       ) ) ; \n\n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > code < / td > \n               < td > descr < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n     export   default  List ; \n \n Next make sure that you remove the predefined  data  const since the\ndata will be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js \n      ... \n     import  PageModelsListContainer  from   'ui/pageModels/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  PageModelsListContainer , \n       } , \n     ... \n \n You will now see the data inside the table reflecting the content of the\nstorage. \n Connecting the app to an Entando core instance \n By default the app is using mocks and not connecting to any Entando core\ninstance. \n Because the app is making use of  @entando/apimanager  we can easily\nchange this by setting up two  .env  variables inside the  .env  file in\nthe project root: \n     REACT_APP_DOMAIN=http://localhost:8080/entando-app\n    REACT_APP_USE_MOCKS=false\n \n The  REACT_APP_DOMAIN  must pointing towards the domain and container\nwhere the Entando instance is running and  must not  contain trailing\nslashes. \n Once this is done to make the change happen we will have to stop the app\nusing  ctrl + c  and re run it with  npm start . \n Now the toast stating  This application is using mocks  won’t be popping\nup anymore. \n You can make sure that the configuration is correct by looking at the\nnetwork section in the browser dev tools. By default the app\nautomatically makes an admin login against a plain Entando instance to\nauthenticate the user and to be able to consume any protected api. \n This is not an ideal scenario and it is meant to be used only for\ndebugging purposes for many reasons: \n \n \n the username and password should never be hardcoded in your app \n \n \n if authentication is required the user should be the one performing\nthe login action \n \n \n the plain default passwords in use won’t be useful against a proper\nproduction instance of Entando \n Adding the API Calls \n We are now going to add api calls for both users and page models to\nretrieve the data live instead of relying on our store’s default state. \n Inside  src/api  create the  users.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   ( \n       makeRequest ( \n         { \n          uri :   ` /api/users ${ params } ` , \n          method :   METHODS . GET , \n          mockResponse :   { } , \n          useAuthentication :   true , \n         } , \n        page , \n       ) \n     ) ; \n \n and then create the  pageModels.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   makeRequest ( { \n      uri :   ` /api/pageModels ${ params } ` , \n      method :   METHODS . GET , \n      mockResponse :   { } , \n      useAuthentication :   true , \n     } ,  page ) ; \n Creating the Thunk \n In order to use the api call we next create a thunk action, which is a\nredux action with side effects, like an API call. \n inside the  src/state/apps/testing/userList/actions.js  file we are\ngoing to add the new action: \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getUsers , \n     }   from   'api/users' ; \n     ... \n\n     // thunks \n\n     export   const  fetchUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getUsers ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( json )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addUsers ( json . payload ) ) ; \n             }   else   { \n               dispatch ( addErrors ( json . errors . map ( err   =>  err . message ) ) ) ; \n             } \n             resolve ( ) ; \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Next do the same inside  src/state/apps/testing/pageModels/actions.js : \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getPageModels , \n     }   from   'api/pageModels' ; \n     ... \n\n     // thunks \n\n     export   const  fetchPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getPageModels ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( data )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addPageModels ( data . payload ) ) ; \n               resolve ( ) ; \n             }   else   { \n               dispatch ( addErrors ( data . errors . map ( err   =>  err . message ) ) ) ; \n               resolve ( ) ; \n             } \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Now with two exports, it is safe to remove the\n eslint-disable-next-line  comment on line 5 of both files. \n changing the mapDispatchToProps in the containers \n Next, in order to pass the newly created thunk to both List components,\nwe’ll update the containers accordingly, as: \n src/ui/userList/ListContainer.js \n      ... \n     import   {  fetchUsers  }   from   'state/apps/testing/userList/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchUsers ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n \n src/ui/pageModels/ListContainer.js \n      ... \n     import   {  fetchPageModels  }   from   'state/apps/testing/pageModels/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchPageModels ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n Updating the List components \n Both List components were simple components with only a  render  method,\ntherefore could be declared as simple constants. \n Next we will fetch data during the  componentDidMount  life cycle event\nwhich will require we turn the constant into a class on top of changing\nthe PropTypes to add the new fetch method passed down to the component. \n src/ui/userList/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . username } < / td > \n             < td > { row . registration } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > username < / td > \n                   < td > registration < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n \n src/ui/pageModels/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . code } < / td > \n             < td > { row . descr } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > code < / td > \n                   < td > descr < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n clear the default value of the reducer \n Now we should be fetching data from the server, therefore we can safely\nmake the list key in the  defaultState  object an empty array: \n src/state/apps/testing/userList/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n \n src/state/apps/testing/pageModels/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n adding additional dependencies \n It may be necessary to set additional dependencies for your project. If\nthe need arises, it is important to remember a few rules: \n Only actual dependencies that are not already included in  app-builder \ncan be added as pure dependencies. Every other dependency must either be\na  devDependency  or  peerDependency . \n If you are not careful you may end up with duplicated dependencies that\n will  result in errors manifesting themselves when running the app\ninside App Builder. \n running the app in integrated mode within App Builder \n After running  npm install  in the App Builder, the user can run the\n npm run app-install <appId>  command to install the app. \n This command will trigger a download of the app from npm and the\ninstallation of its component within App Builder. After the installation\nprocess is complete, it will be possible to either  npm start  or\n npm build  App Builder. \n To install a dev app, like the one developed in this tutorial which have\nnot been previously published on npm, you will need to use additional\nflags and will have to run a few additional commands. \n Before running the Install command  make sure that you have\nuninstalled all existing peer and dev dependencies to avoid collision\nwith app builder. To do so, from the app builder app directory\n( testing , in this tutorial) just run in the correct order the\nfollowing commands: \n npm run babel \n npm i --only=production \n The first will create the dist directory that will be needed by App\nBuilder while the second one will uninstall anything but production\ndependencies. \n Next, from the App Builder directory, run the install command with these\nadditional flags: \n \n \n -d  specify the relative path where the app is installed. When\nusing this flag the appId should be the normalized app name, without\nthe  @entando/  prefix. \n \n \n -p  specify the package name if it is different from the appId \n \n \n to use flags you will have to use the double dash in the command: \n npm run app-install —  cms -d ../testing -p @entando/testing \n the value in the  -p  flag should always match the actual name of the\napp that is going to be installed inside App Builder . You can check\nyour app name inside the  package.json  file of your app. \n If you experience problems after running the build command delete the\n node_modules  directory before running the second command. \n"},{title:"Building a Docker Image for the Entando Core",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/app-engine/build-core-image.html",relativePath:"v6.1/tutorials/customize-the-platform/app-engine/build-core-image.md",key:"v-e9938dda",path:"/v6.1/tutorials/customize-the-platform/app-engine/build-core-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"7/10/2020, 5:59:23 AM",content:" Building a Docker Image for the Entando Core \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will take you through the basic steps to create a docker\nimage from an Entando core application. A more detailed guide with\nadditional commands and configuration can be found here: \n https://github.com/entando-k8s/entando-de-app \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Build a docker image from the core app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n"},{title:"The Entando Core APIs",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/app-engine/core-swagger.html",relativePath:"v6.1/tutorials/customize-the-platform/app-engine/core-swagger.md",key:"v-a91812da",path:"/v6.1/tutorials/customize-the-platform/app-engine/core-swagger.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Setup",slug:"setup"},{level:2,title:"Overview",slug:"overview"},{level:3,title:"API structure",slug:"api-structure"},{level:3,title:"Models",slug:"models"},{level:2,title:"Tutorial:",slug:"tutorial"}],lastUpdated:"8/6/2020, 4:27:56 AM",content:" The Entando Core APIs \n Prerequisites \n \n \n Java 8 \n \n \n maven \n Setup \n \n \n Clone the Entando sample app if you don’t already have it. \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n Start the app for local execution and enable the swagger profile by\npassing  -Dspring.profiles.active=swagger  to the jetty command. Set\nthe value of  -Djetty.port  to something available on your machine\ne.g. 8081. \n mvn clean package jetty:run-war -Pjetty-local -Pderby -Dspring.profiles.active=swagger -Djetty.port=8085 -Dorg.slf4j.simpleLogger.log.org.eclipse.jetty.annotations.AnnotationParser=error \n \n \n \n Note: If you don't have docker installed or running add  -DskipDocker=true  to the command above \n \n \n \n Wait for the app to start. \n \n \n Once started, navigate to the swagger ui in a browser. \n \n \n \n http://localhost:[your port]/entando-de-app/api/swagger-ui.html\n Overview \n The Entando core exposes REST APIs for every action that can be taken in\nthe App Builder and Admin Console environments. For example, you can use\nthese apis to create pages, create page models or to add widgets to\npages. The APIs can be used to support automation, testing, or\nintegrations with external systems. \n API structure \n All of the APIs share a common top level structure. Each response will\ncontain a top level entry for  errors ,  metadata , and  payload . \n The  errors  will always contain code and a message string indicating an\nerror condition in the request. The  metadata  section is used for\npaging, sorting, filtering and data that is distinct from the body. The\nbody of each response is included in the  payload  section of the\nresponse and varies according to each API. \n Models \n All of the model classes returned by the Entando core are annotated so\nthat the model definition is included in the swagger documentation. At\nthe bottom of the swagger page all of the model classes returned by the\nAPI endpoints can be found. \n Tutorial: \n \n \n Stop the Entando instance if it is running. \n \n \n In the project open  src/main/conf/systemParams.properties . \n \n \n Change the value of this property to reflect the port you are using\nto run the app. \n \n \n applicationBaseURL \n \n \n For example if running on 8085 you would have\n applicationBaseURL=http://localhost:8085/${entando.engine.web.context}/ \n \n \n \n \n Login to the admin console at\n http://localhost:8085/entando-de-app/do/login . \n \n \n Once logged in go to Integration -→ API Management -→ Consumers. \n \n \n Select the kebab button on the row labeled swagger. \n \n \n On that screen enable the button for  client_credentials . \n \n \n On that screen enter  swagger  as the value for the secret. \n \n \n Hit save \n \n \n Return to swagger  your\nport /entando-de-app/api/swagger-ui.html \n \n \n Hit authorize \n \n \n Enter \n \n \n User: admin \n \n \n PW: adminadmin \n \n \n client: swagger \n \n \n client_secret: swagger \n \n \n \n \n Use the  Try it out  button on the APIs \n \n \n Scroll to  widget-controller \n \n \n Select the blue GET row \n \n \n Select  Try it out \n \n \n Look at the results in the window \n \n \n \n \n"},{title:"Tutorial: Invoking Entando Core APIs",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/app-engine/tutorials/invoking-api.html",relativePath:"v6.1/tutorials/customize-the-platform/app-engine/tutorials/invoking-api.md",key:"v-23af9480",path:"/v6.1/tutorials/customize-the-platform/app-engine/tutorials/invoking-api.html",headers:[{level:2,title:"General Overview",slug:"general-overview"},{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Set up a Postman environment",slug:"_1-set-up-a-postman-environment"},{level:3,title:"2. Get an access token",slug:"_2-get-an-access-token"},{level:3,title:"2. Prepare a generic API request",slug:"_2-prepare-a-generic-api-request"},{level:2,title:"QE ready APIs",slug:"qe-ready-apis"},{level:2,title:"Notes on QE requests collections structure",slug:"notes-on-qe-requests-collections-structure"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: Invoking Entando Core APIs \n General Overview \n Entando supports Swagger and it is accessible, if activated, from its\nweb interface from the base application URL at /api/swagger-ui.html. A\ncomplete list of all available core APIs can be obtained from Swagger. \n Core APIs can be invoked directly from Swagger or from any other\nsuitable tool, i.e., curl or Postman are two common ones. Postman has\nbeen extensively used in API testing and automated API testing because\nof the possibilities it offers and it is the suggested tool. \n All Entando core APIs are accessible from the base URL, for example:\nlocalhost:8080/entando-de-app/api. For example, the Page Controller will\nbe available under /pages from the Base URL (i.e.\nlocalhost:8080/entando-de-app/api/pages), or the Page Model Controller\nwill available under /pageModels (i.e.\nlocalhost:8080/entando-de-app/api/pageModels) and so on. \n Before being able to perform any API request, we will first need to\nobtain an  authorization token , that is achieved with a specific POST\nrequest sent to the oauth/token endpoint, after successful\nauthentication, an access token is returned which grants access to all\nAPI endpoints and actions for which the authenticated user has defined\nprivileges. \n (Refer to User Management Roles for details) \n The best way to proceed in case of extensive testing with APIs with\nPostman, is to set up an environment and define a variable that will\nkeep the access token saved from the POST request to /oauth/token. \n Purpose \n Set up an environment ready to invoke Entando core APIs \n Requirements \n To complete this tutorial you will need: \n \n \n Postman \n \n \n A running Entando 6 instance \n Steps \n 1. Set up a Postman environment \n Create a new Postman environment and define the following variables: \n access_token: (no value)\nrefresh_token: (no value)\nurl: URL of your application (i.e. http://localhost:8080/entando-de-app)\n \n Be careful with the URL variable and make sure you do not have a\ntrailing slash. \n Set Postman to use this environment. \n 2. Get an access token \n Getting an access token is a prerequisite to be able to invoke any API.\nThe following is the required activity. \n \n \n create a Postman collection, name it for example "Access Token" \n \n \n create a new POST request with the following parameters: \n \n \n \n URL field\n{{url}}/api/oauth/token\n \n Note that we are calling the "url" environmental variable for\nconvenience. \n Autorization section\n   Type: Basic Auth\n   Username: (a valid Entando consumer must be defined in Entando) (Refer to appropriate documentation on how to do that) (i.e. appbuilder)\n   Password: (password of the defined consumer) (i.e. appbuilder_secret)\n\nHeaders section\n    Content-Type: application/x-www-form-urlencoded\n\nBody section\nSelect from the radio button the option: x-www-form-urlencoded\n    username: (valid Entando user (i.e. admin))\n    password: (password of the valid user)\n    grant_type: password\n \n The tests section is convenient as we can then set any new API request\nin such a way to make use of that access token. The first line of code\ndefines a variable called "data", which hosts the JSON parsed\nresponseBody from the POST request just sent to /oauth/token; The second\nline sets the environment variable "access_token" to the value returned\nby the POST request. \n Tests section\n    var data = JSON.parse(responseBody);\n    postman.setEnvironmentVariable("access_token", data.access_token);\n \n Launch the POST request to test it, and if successful, you should get a\nresponse like this: \n {\n    "access_token": "b96096493a40b1a7364bd54a6ffb609b",\n    "token_type": "bearer",\n    "refresh_token": "79ff84062b5dc13663961a833b0788f9",\n    "expires_in": 3599\n}\n \n also if you open in edit the Postman environment, you should see that\nthe access_token and the refresh_token variables values have been\nupdated. \n 2. Prepare a generic API request \n Create a new request with the following parameters: \n Authorization section: Inherit auth from parent\n\nHeaders section:\n create the key Authorization with Value: Bearer{{access_token}}\n create the key Content-Type with Value: application/json\n \n Select the appropriate method (GET, DELETE, POST etc.) for your request\nand fill up the URL with appropriate values i.e.\n(localhost:8080/entando-de-app/api/pages) then add to the Body section,\nif needed, the appropriate payload in JSON format, remember to select\nraw and JSON (application/json). \n QE ready APIs \n QE has developed a set of collection requests to automate API testing,\nexamples of that are available on github at\n https://github.com/entando/entando-QE/tree/master/postman_API . \n To use them ,first git clone the project and use the built in Postman\nimporting features. \n Import first the Postman Environment file which can be found under the\nenvironment folder. When imported, from Postman, open in edit that\nenvironment and change the "url" variable to the appropriate value for\nyour specific installation, i.e  http://localhost:8080/entando-de-app/ \nand save it. \n Import from Postman the collections you would like to use and they will\nbecome available in the Postman collections Panel ready to be run. \n Notes on QE requests collections structure \n Each collection is so designed to test a particular use case i.e.\n"Delete an existent page", "Delete a page which has children" etc. \n By design each QE Postman collection is: \n \n \n indipendent (does not require other collections) \n \n \n general (does not make any assumption on the specific Entando\napplication) \n \n \n can be run automatically, with newman, please refer to\n https://github.com/entando/entando-QE  for details \n \n \n Following those requirements, each collection will need to "prepare" the\nenvironment for the actual test. That is achieved by using specific\nrequests, called "helpers", and their only purpose is to create/delete\nall the needed objects. \n Another class of helpers is used to check the persistence of the actions\nperformed by the APIs, i.e. check that after a DELETE, something really\nhas been deleted. \n The request that implements the use case, we can call it main request,\ndoes not contain the word "HELPER" in its name, and it is the only one\ninside a given collection. \n Because collections are designed primarily to run automatically, we have\ndone extensive use of collection variables, so variables like the API\nURL, object names, object codes or payloads are usually defined as a\ncollection variable and can be accessed by all requests inside the\ncollection. \n Conclusion \n This guide let you start invoking Entando 6 APIs \n'},{title:"Tutorial: how to configure custom datasources and connections for Entando Apps on EAP and Wildfly",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.html",relativePath:"v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.md",key:"v-be7b3b00",path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a Docker project for your own base image to Entando's standard base image(s)",slug:"_1-create-a-docker-project-for-your-own-base-image-to-entando-s-standard-base-image-s"},{level:3,title:"2. Customize the standalone.xml/standalone-openshift.xml file using environment variables.",slug:"_2-customize-the-standalone-xml-standalone-openshift-xml-file-using-environment-variables"},{level:3,title:"3. Build your own Docker base image",slug:"_3-build-your-own-docker-base-image"},{level:3,title:"4. Modify your Entando App project to use the new Docker base image",slug:"_4-modify-your-entando-app-project-to-use-the-new-docker-base-image"},{level:3,title:"5. Build and push your custom Docker image",slug:"_5-build-and-push-your-custom-docker-image"},{level:3,title:"6. Deploy your EntandoApp with the correct environment variables",slug:"_6-deploy-your-entandoapp-with-the-correct-environment-variables"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: how to configure custom datasources and connections for Entando Apps on EAP and Wildfly \n Purpose \n This tutorial explains how to customize our EAP and Wildfly base Docker images, and then configure the EntandoApp\ncustom resource to use these customizations \n Requirements \n \n \n The Entando Operator is running in the target names \n \n \n Keycloak and the Entando Cluster Infrastructure have been deployed \n \n \n The required external databases and other services are up and running. \n \n \n Your own custom project as described in  the tutorial \n Steps \n 1. Create a Docker project for your own base image to Entando\'s standard base image(s) \n Create a project, ideally in Git repository, and put the following files in the folder \n 1.1. The standalone.xml/standalone-openshift.xml file of choice \n It is essential for your custom Docker image to use a file from one of the official Entando Docker base images. \n If you intend to use provide your own EAP based image, please use this\n standalone-openshift.xml \nfile. \n If you intend to use provide your own Wildfly based image, please use this\n standalone.xml \nfile. \n Please note that if you create your own base image with a different version of EAP or Wildfly, using these files\nmay have unintended consequences. \n 1.2. Any modules that may be required for your datasource or other connection resource \n If the resource you need to connect to requires some custom classes, such as JDBC drivers, please add these as \na module to Wildfly/EAP. As an example, you can look at our\n Derby database module \nthat Entando uses for embedded databases. Please ensure that the path of the folder containing the jar files reflects\nthe fully qualified name of the module in the module.xml file. \n 1.3 Dockerfile \n In your Dockerfile, please be sure to extend the correct base image, and add the correct configuration file to\nthe correct location in the target image. \n For EAP, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=185:0 ./standalone-openshift.xml /opt/eap/standalone/configuration\n \n For Wildfly, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=1001:0 ./standalone.xml /wildfly/standalone/configuration\n \n Please take note of the user ownership in these different Dockerfiles. This is quite important as Openshift will\nexpect the user/group ownership to be respected. \n 2. Customize the standalone.xml/standalone-openshift.xml file using environment variables. \n You can now modify your Wildfly/EAP configuration to meet your requirements. Where the configuration could differ\nfrom one environment to a next, we strongly advise using environment variable expressions ( ${env.VAR_NAME} ). The most likely change\nthat would be required in this file is the addition of a datasource. Here is an example of how to add a datasource\nto the datasources subsystem. All the environment variables starting with \'YOURDB\' can be specified from the Docker\ncontainer. \n    ...\n    <subsystem xmlns="urn:jboss:domain:datasources:5.0">\n      <datasources>\n        <datasource jndi-name="${env.YOURDB_JNDI}" enabled="true" use-java-context="true" pool-name="yourDbDataSource" use-ccm="true">\n          <connection-url>${env.YOURDB_URL}</connection-url>\n          <driver>${env.YOURDB_DRIVER}</driver>\n          <security>\n            <user-name>${env.YOURDB_USERNAME}</user-name>\n            <password>${env.YOURDB_PASSWORD}</password>\n          </security>\n        </datasource>\n \n Please take extra care not to remove any lines from these files. This is of particular importance in the case of the\nEAP image as, on startup, scripts in the official EAP look for certain placeholders in this file and populates them\nfrom other environment variables. \n 3. Build your own Docker base image \n You can now build your Docker base image. It is highly recommended that you consider using a dedicated CI/CD build\ntool such as Jenkins X to build the base image and maintain traceability between your source code and the resulting\nDocker image. One possible build command could look like this: \n docker build . -t your-docker-registry.com/your-org/your-base-image:1.0.0 \n 4. Modify your Entando App project to use the new Docker base image \n You can now modify your Entando App project that you have forked as described in the\n relevant tutorial . You would require two changes to the pom.xml file\nof the sample project. \n \n Firstly, you would need to change the variable  server.base.image  to reflect the fully\nqualified URI of your Docker image for EAP and/or Wildfly. For example, if you decided to extend the Wildfly image,\ngo to the Maven profile with the id  wildfly  and change the   server.base.image  to look like this: \n \n <server.base.image>your-docker-registry.com/your-org/your-base-image:1.0.0</server.base.image> \n \n Then you need to change the  <from>  element in the Fabric8 Maven Docker Plugin to reflect this variable.\nNavigate to the first  <image>  element in the pom.xml file. You have found the correct one\nif it contains the following xml: \n \n <from>entando/${server.base.image}:${entando.version}</from> \n Delete the  entando/  prefix and the  :${entando.version}  suffix: \n <from>${server.base.image}</from> \n Please note that, should you still require support for both Wildfly and EAP in your Maven pom, you may need to\nrepeat this exercise for both the  eap  and  wildfly  profiles. \n 5. Build and push your custom Docker image \n Before building your Docker image, it would be a good idea to change the name of the image you want to build. Navigate\nto the previously modified  <image>  element in the Fabric8 Maven Docker Plugin.You can change the  <name>  element\nto reflect your preferred name, e.g. \n <name>your-docker-registry.com/your-org/your-entando-app:1.0.0</name> \n Run: \n mvn clean package -Pwildfly -Pderby \n A new Docker image should now be available named  your-docker-registry.com/your-org/your-entando-app:1.0.0 \n Log into the Docker registry in question and then push the image: \n docker push your-docker-registry.com/your-org/your-entando-app:1.0.0 \n You are now ready to deploy this image. \n 6. Deploy your EntandoApp with the correct environment variables \n The final step is to configure your EntandoApp deployment with the correct environment variables. As is the case with\nall the Entando Custom Resources that result in actual deployments, the property  spec.parameters  will be translated\ninto environment variables on each of the Containers in the Deployment\'s Pod. For an EntandoApp named \'my-app\',\nthe new state of the EntandoApp would could be placed in a file named  my-app.yaml  that would look something like this: \n       kind: "EntandoApp"\n      metadata:\n        name: "my-app"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        customServerImage: your-docker-registry.com/your-org/your-entando-app:1.0.0\n        ingressPath: /your-entando-app\n        parameters:\n          YOURDB_JNDI: java/your-ds\n          YOURDB_URL: jdbc:postgresql://somehost.com:5432/mydb\n          YOURDB_DRIVER: postgresql\n          YOURDB_USERNAME: my_user\n          YOURDB_PASSWORD: mypassword\n      entandoStatus:\n        entandoDeploymentPhase: requested\n\n \n Notice how this Custom Resource specifies a  parameter  for each environment variable that was referenced from the\n standalone.xml  file referenced earlier. \n To apply the changes to your deployment, change the  entandoStatus.entandoDeploymentPhase  property to requested and\napply the file: \n kubectl apply -f my-app.yaml\n \n '},{title:"Change Default Datasources and Connections",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/",relativePath:"v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/README.md",key:"v-39cda378",path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a Docker project for your own base image to Entando's standard base image(s)",slug:"_1-create-a-docker-project-for-your-own-base-image-to-entando-s-standard-base-image-s"},{level:3,title:"2. Customize the standalone.xml/standalone-openshift.xml file using environment variables.",slug:"_2-customize-the-standalone-xml-standalone-openshift-xml-file-using-environment-variables"},{level:3,title:"3. Build your own Docker base image",slug:"_3-build-your-own-docker-base-image"},{level:3,title:"4. Modify your Entando App project to use the new Docker base image",slug:"_4-modify-your-entando-app-project-to-use-the-new-docker-base-image"},{level:3,title:"5. Build and push your custom Docker image",slug:"_5-build-and-push-your-custom-docker-image"},{level:3,title:"6. Deploy your EntandoApp with the correct environment variables",slug:"_6-deploy-your-entandoapp-with-the-correct-environment-variables"}],lastUpdated:"6/27/2020, 10:35:02 PM",content:' Change Default Datasources and Connections \n Purpose \n This tutorial explains how to customize our EAP and Wildfly base Docker images, and then configure the EntandoApp\ncustom resource to use these customizations \n Requirements \n \n \n The Entando Operator is running in the target names \n \n \n Keycloak and the Entando Cluster Infrastructure have been deployed \n \n \n The required external databases and other services are up and running. \n \n \n Your own custom project as described in  the tutorial \n Steps \n 1. Create a Docker project for your own base image to Entando\'s standard base image(s) \n Create a project, ideally in Git repository, and put the following files in the folder \n 1.1. The standalone.xml/standalone-openshift.xml file of choice \n It is essential for your custom Docker image to use a file from one of the official Entando Docker base images. \n If you intend to use provide your own EAP based image, please use this\n standalone-openshift.xml \nfile. \n If you intend to use provide your own Wildfly based image, please use this\n standalone.xml \nfile. \n Please note that if you create your own base image with a different version of EAP or Wildfly, using these files\nmay have unintended consequences. \n 1.2. Any modules that may be required for your datasource or other connection resource \n If the resource you need to connect to requires some custom classes, such as JDBC drivers, please add these as \na module to Wildfly/EAP. As an example, you can look at our\n Derby database module \nthat Entando uses for embedded databases. Please ensure that the path of the folder containing the jar files reflects\nthe fully qualified name of the module in the module.xml file. \n 1.3 Dockerfile \n In your Dockerfile, please be sure to extend the correct base image, and add the correct configuration file to\nthe correct location in the target image. \n For EAP, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=185:0 ./standalone-openshift.xml /opt/eap/standalone/configuration\n \n For Wildfly, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=1001:0 ./standalone.xml /wildfly/standalone/configuration\n \n Please take note of the user ownership in these different Dockerfiles. This is quite important as Openshift will\nexpect the user/group ownership to be respected. \n 2. Customize the standalone.xml/standalone-openshift.xml file using environment variables. \n You can now modify your Wildfly/EAP configuration to meet your requirements. Where the configuration could differ\nfrom one environment to a next, we strongly advise using environment variable expressions ( ${env.VAR_NAME} ). The most likely change\nthat would be required in this file is the addition of a datasource. Here is an example of how to add a datasource\nto the datasources subsystem. All the environment variables starting with \'YOURDB\' can be specified from the Docker\ncontainer. \n    ...\n    <subsystem xmlns="urn:jboss:domain:datasources:5.0">\n      <datasources>\n        <datasource jndi-name="${env.YOURDB_JNDI}" enabled="true" use-java-context="true" pool-name="yourDbDataSource" use-ccm="true">\n          <connection-url>${env.YOURDB_URL}</connection-url>\n          <driver>${env.YOURDB_DRIVER}</driver>\n          <security>\n            <user-name>${env.YOURDB_USERNAME}</user-name>\n            <password>${env.YOURDB_PASSWORD}</password>\n          </security>\n        </datasource>\n \n Please take extra care not to remove any lines from these files. This is of particular importance in the case of the\nEAP image as, on startup, scripts in the official EAP look for certain placeholders in this file and populates them\nfrom other environment variables. \n 3. Build your own Docker base image \n You can now build your Docker base image. It is highly recommended that you consider using a dedicated CI/CD build\ntool such as Jenkins X to build the base image and maintain traceability between your source code and the resulting\nDocker image. One possible build command could look like this: \n docker build . -t your-docker-registry.com/your-org/your-base-image:1.0.0 \n 4. Modify your Entando App project to use the new Docker base image \n You can now modify your Entando App project that you have forked as described in the\n relevant tutorial . You would require two changes to the pom.xml file\nof the sample project. \n \n Firstly, you would need to change the variable  server.base.image  to reflect the fully\nqualified URI of your Docker image for EAP and/or Wildfly. For example, if you decided to extend the Wildfly image,\ngo to the Maven profile with the id  wildfly  and change the   server.base.image  to look like this: \n \n <server.base.image>your-docker-registry.com/your-org/your-base-image:1.0.0</server.base.image> \n \n Then you need to change the  <from>  element in the Fabric8 Maven Docker Plugin to reflect this variable.\nNavigate to the first  <image>  element in the pom.xml file. You have found the correct one\nif it contains the following xml: \n \n <from>entando/${server.base.image}:${entando.version}</from> \n Delete the  entando/  prefix and the  :${entando.version}  suffix: \n <from>${server.base.image}</from> \n Please note that, should you still require support for both Wildfly and EAP in your Maven pom, you may need to\nrepeat this exercise for both the  eap  and  wildfly  profiles. \n 5. Build and push your custom Docker image \n Before building your Docker image, it would be a good idea to change the name of the image you want to build. Navigate\nto the previously modified  <image>  element in the Fabric8 Maven Docker Plugin.You can change the  <name>  element\nto reflect your preferred name, e.g. \n <name>your-docker-registry.com/your-org/your-entando-app:1.0.0</name> \n Run: \n mvn clean package -Pwildfly -Pderby \n A new Docker image should now be available named  your-docker-registry.com/your-org/your-entando-app:1.0.0 \n Log into the Docker registry in question and then push the image: \n docker push your-docker-registry.com/your-org/your-entando-app:1.0.0 \n You are now ready to deploy this image. \n 6. Deploy your EntandoApp with the correct environment variables \n The final step is to configure your EntandoApp deployment with the correct environment variables. As is the case with\nall the Entando Custom Resources that result in actual deployments, the property  spec.parameters  will be translated\ninto environment variables on each of the Containers in the Deployment\'s Pod. For an EntandoApp named \'my-app\',\nthe new state of the EntandoApp would could be placed in a file named  my-app.yaml  that would look something like this: \n       kind: "EntandoApp"\n      metadata:\n        name: "my-app"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        customServerImage: your-docker-registry.com/your-org/your-entando-app:1.0.0\n        ingressPath: /your-entando-app\n        parameters:\n          YOURDB_JNDI: java/your-ds\n          YOURDB_URL: jdbc:postgresql://somehost.com:5432/mydb\n          YOURDB_DRIVER: postgresql\n          YOURDB_USERNAME: my_user\n          YOURDB_PASSWORD: mypassword\n      entandoStatus:\n        entandoDeploymentPhase: requested\n\n \n Notice how this Custom Resource specifies a  parameter  for each environment variable that was referenced from the\n standalone.xml  file referenced earlier. \n To apply the changes to your deployment, change the  entandoStatus.entandoDeploymentPhase  property to requested and\napply the file: \n kubectl apply -f my-app.yaml\n \n '},{title:"Tutorial: How to connect Entando 6 to an external Keycloak instance",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.html",relativePath:"v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.md",key:"v-5009a1de",path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Get keycloak information",slug:"_1-get-keycloak-information"},{level:3,title:"2. Generate the secret",slug:"_2-generate-the-secret"},{level:3,title:"3. Upload the secret",slug:"_3-upload-the-secret"},{level:3,title:"4. Deploy the Entando6 application",slug:"_4-deploy-the-entando6-application"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: How to connect Entando 6 to an external Keycloak instance \n Purpose \n This tutorial enables the Entando administrator to leverage an existing\nKeycloak instance. \n Requirements \n \n \n A Keycloak instance \n \n \n A realm named "entando" on that instance \n \n \n An admin user for the "entando" realm \n Steps \n 1. Get keycloak information \n Retrieve the relevant information from the Keycloak instance you want to\nuse. \n Specifically you will need: \n \n \n The username of the Keycloak admin that has admin rights to the\n"entando" realm, e.g entando-keycloak-admin \n \n \n The Keycloak admin password, e.g. password123 \n \n \n The base url for the Keycloak server, including the auth value, e.g.\n https://my-keycloak-instance.com/auth \n 2. Generate the secret \n You now need to generate a secret with name  keycloak-admin-secret \nusing the information retrieved from step 1. The Entando administrator\nwill automatically detect this secret by name, and use it to log onto\nthe provided Keycloak server. \n Here is an example of the secret you will need to construct: \n ---\napiVersion: v1\nstringData:\n    username: <the username of the Keycloak admin user for the "entando" realm>\n    password: <the password of this Keycloak admin user>\n    url: <the base url of the Keycloak service, typically ending with the path /auth>\nkind: Secret\nmetadata\n    name: keycloak-admin-secret\n    namespace: <your-app-namespace>\ntype: Opaque\n \n \n Note \n To encode your values, in bash, you can do\n echo <your-value> | base64 \n 3. Upload the secret \n Next upload the secret to the namespace where you want to deploy your\nEntando 6 instance. \n oc create -f my-secret.yaml -n <my-app-namespace>\n 4. Deploy the Entando6 application \n Now you are ready to deploy your Entando 6 application and the\nadministrator will reuse the  keycloak-admin-secret  secret to populate\nthe environment correctly. \n Conclusion \n You should now have a working Entando 6 instance using an external\nKeycloak server. \n'},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/connecting-external-db.html",relativePath:"v6.1/tutorials/customize-the-platform/connecting-external-db.md",key:"v-77f92ebc",path:"/v6.1/tutorials/customize-the-platform/connecting-external-db.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando applicaiton is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Manage Entando Databases",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/databases.html",relativePath:"v6.1/tutorials/customize-the-platform/databases.md",key:"v-61a61646",path:"/v6.1/tutorials/customize-the-platform/databases.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Lightweight, low-config Databases with PostgreSQL and MySQL",slug:"lightweight-low-config-databases-with-postgresql-and-mysql"},{level:2,title:"Existing External Databases",slug:"existing-external-databases"},{level:3,title:"Structure",slug:"structure"},{level:3,title:"How it works",slug:"how-it-works"},{level:3,title:"Keeping track of credentials",slug:"keeping-track-of-credentials"},{level:2,title:"Vendor specific notes",slug:"vendor-specific-notes"},{level:3,title:"Oracle",slug:"oracle"},{level:3,title:"Notes",slug:"notes"},{level:3,title:"MySQL",slug:"mysql"},{level:3,title:"Resulting Connection String",slug:"resulting-connection-string-2"},{level:3,title:"Notes",slug:"notes-2"},{level:3,title:"PostgreSQL",slug:"postgresql"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Manage Entando Databases \n Overview \n Entando’s Docker images currently support three different relational\ndatabase management systems: PostgreSQL, MySQL and Oracle. With\nPostgreSQL and MySQL, by default, Entando’s will automatically create a\nKubernetes Deployment hosting the database management systems. However,\nfor Oracle, and also for other scenarios that may require it, Entando\nsupports connectivity to existing external databases. This document\nprovides the user with the necessary information to decide how to manage\nEntando’s databases. \n Lightweight, low-config Databases with PostgreSQL and MySQL \n When deploying Entando Custom Resources that require databases to a new\nNamespace, the default behavior for Entando is to create a Kubernetes\nDeployment. It uses the standard Openshift compliant images: \n \n \n centos/mysql-57-centos7 and \n \n \n centos/postgresql-96-centos7) \n \n \n This is a fairly low-configuration approach, as Entando will create and\ninitialize the databases transparently. Persistent data is stored on any\nPersistent Volume that meets our Persistent Volume Claim requirements.\nWhen an Entando Custom Resource is redeployed, the Persistent Volumes\nremain in tact. Since the subsequent data initialization is idempotent,\nthe supporting Deployments will scale up and behave as expected. \n Generally our services encapsulate the database they use entirely, and\nprovide facilities to import and export the data without needing any\nknowledge of the internal workings of the underlying data store. For\nmost simple Entando Apps the database doesn’t grow too large and is\nfairly easy to manage. This state of affairs allowed us to keep our\ndatabases isolated from each other, thus allowing for isolated\ndeployments without needing complex coordination of database migration\nfor the different deployment pipelines. \n It is worth noting that these database Deployments are not clustered.\nThe customer is therefore strongly advised to provide redundancy and\nclustering in the form of clustered storage. These database deployments\ndo specify a restartPolicy of \'Always\', so in the event of a\nnon-corrupting failure, the database Pod should therefore restart in\nabout 30 seconds. This by no means offers the features of a full\ndatabase cluster, but may suffice for many scenarios. \n However, in more advanced use cases, such as the use of our CMS\nfunctionality, this simplistic approach may not scale. And where there\nis a a centralized database admin team, or where there is a requirement\nto comply to strict organizational governance w.r.t. databases, this\napproach does result in a multitude of databases that may be difficult\nfor the database admin team to manage. \n Existing External Databases \n For this reason, Entando can also be configured to use an existing\ndatabase service provided by the customer. In these scenarios, the\ncustomer is expected to take responbility for the lower level database\noperations such as tablespace creation, permissions and clustering.\nEntando will however still be responsible for creating and populating\nthe tables, indices and foreing keys. Entando will also create all of\nthese in the appropriate table \'container\' for the DBMS in question such\nas a schema (Oracle/PostgreSQL) or a database (MySQL). In order to\nachieve this, Entando installs a dedicated CustomResourceDefinition in\nKubernetes, called an \'EntandoDatabaseService\' \n The idea is for EntandoDatabaseService custom resources to be created in\nthe namespace the EntandoApps and EntandoPlugin that should use them\nwill be created. The EntandoDatabaseService is usually created along\nwith a secret that carries admin credentials to the database in\nquestion. \n Structure \n The EntandoDatabaseService custom resource looks like this: \n  EntandoDatabaseService\nmetadata:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\nspec:\n  dbms: string, one of oracle, postgresql or mysql\n  host: string, either an ip address or hostname where the database service is hosted\n  port: integer, the port on which the database service is hosted\n  databaseName: string, the name of the database, only required for PostgreSQL and Oracle\n  secretName: the name of the Secret in the same namespace carrying admin credentials to the database service\n  tablespace: (Oracle only)  the tablespace to use to create the required schemas in\n  jdbcParameters: a map containing name-value pairs for any additional parameters required for the JDBC driver to connect to the database.\n \n The Secret that will provide the admin credentials, identified by the\nabove  secretName  should look like this: \n Secret:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\n  stringData:\n    username: string, name of an admin user that can create schemas and other users\n    password: string, password of the above user\n How it works \n In order for the EntandoApp and EntandoPlugin deployer to pick up the\ncorrect database service, the EntandoDatabaseService needs to be created\nBEFORE the EntandoApps and EntandoPlugins are created. There can be\nmultiple EntandoDatabaseServices in the namespace, but they need to\npoint to database services of different vendors, i.e. PostgreSQL, Oracle\nand MySQL. Entando currently cannot enforce any validation but if there\nare two EntandoDatabaseServices that have the same DBMS vendor, it will\nsimply pick the first one and continue. Please ensure that only one\nEntandoDatabaseService exists for each DBMS vendor you need to use. \n Once the appropriate EntandoDatabaseServices have been created, any\nEntandoApp or EntandoPlugin that is created will have to specify the\nappropriate DBMS vendor in their  spec.dbms  property. If the\nEntandoOperator detects an EntandoDatabaseService with a matching DBMS\nvendor, it will continue to create the necessary schemas on the specific\ndatabase. If the EntandoOperator does not detect an\nEntandoDatabaseService with a matching DBMS vendor, it will fall back\nonto its default behaviour which is to create a matching Deployment and\nspin up a database service from the same namespace. If the  spec.dbms \nproperty is not specified on an EntandoApp, the EntandoOperator will\ndefault to PostgreSQL. If the  spec.dbms  property is not specified on\nan EntandoPlugin, the EntandoOperator will assume that the EntandoPlugin\nin question does not require a database and hence bypass any database\nand schema creation. \n When the EntandoOperator processes your Entandoapp or EntandoPlugin with\nan appropriate  spec.dbms  specified, it will create a Schema/User pair\nfor each datasource required. A typical EntandoApp deployment requires 3\ndatasources (portdb,servdb and dedb). Plugins generally only require one\ndatasource (plugindb). \n The database schema and user created will have the same name. The name\nis derived from the name of the EntandoPlugin or EntandoApp by replacing\nall characters that are not ANSI-SQL compliant with an underscore. The\ndatasource name is then suffixed to the schema name. When defining the\nname of your app or plugin, please keep in mind that some DBMS vendors\ndo not support long schema names. Future versions of Entando will allow\nyou to override the schema prefix for an app or plugin, but for now this\nis a limitation one has to keep in mind. \n Keeping track of credentials \n The EntandoOperator generates a Kubernetes Secret for each schema/user\ncombination it creates. The name of this secret is the concatenation of\nthe name of the EntandoApp or EntandoPlugin, the datasource qualifier\nand then the suffix "-secret". For instance, for an EntandoApp called\n"my-app" the "portdb" datasource will have a corresponding Kubernetes\nSecret called "my-app-portdb-secret". The EntandoOperator will never\noverwrite or update an existing database secret. We generate a random\nstring for the password which is generally considered the safest\napproach. If you do however wish to change the password in for the\nresulting user, please remember to update the password on the Kubernetes\nSecret too. Such an operation is however error prone and could result in\nsubsequent deployments failing. \n The EntandoOperator’s schema creation logic is idempotent. If it\ntherefore finds that the generated schema/user combination found in the\nassociated Kuberentes Secret already exists, it won’t do anything.\nHowever, it will attempt to log in, and if it fails to log in, it will\nattempt to create the user. If the user already exists, but with a\ndifferent password than the one in the Kubernetes Secret, all subsequent\ndeployment operations will fail. \n Vendor specific notes \n Oracle \n Example \n   EntandoDatabaseService\n    metadata:\n      name:oracle-service\n    spec:\n      dbms: oracle\n      host: 10.0.0.13\n      port: 1521\n      databaseName: ORCLPDB1.localdomain\n      secretName: oracle-secret\n      tablespace: entando_ts\n      jdbcParameters: {}\n  Secret:\n    metadata:\n      name: oracle-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting connection string: \n jdbc:oracle:thin:@//10.0.0.13:1521/ORCLPDB1.localdomain \n Notes \n Oracle has some rather complicated rules in building the correct\nconnection string. Please note that for the sake of portability and\nlightweight image we are limited to the thin driver. The  databaseName \ncould also be an Oracle service as opposed to an Oracle  SID . Please\ncoordinate with your Oracle DB Admin to determine exactly what value to\nuse here. We strongly recommend testing your settings with some code or\na tool that constructs JDBC connection. \n When the EntandoOperator prepares the schemas for your EntandoApp or\nEntandoPlugin, it will create a user for every datasource required, and\nas is standard behaviour for Oracle, that user will have its own schema\nwith the same name. Permissions are set up to ensure that one user\ncannot access tables from another user’s schema. Please note that Oracle\nlimits schema names to 30 characters. If you intend to use Oracle,\nplease keep the name of your apps and plugins short enough. The suffixes\nthat we append to the app or plugin name to ensure the resulting schema\nname is unique are usually shorter than 8 characters, so names of about\n20 characters should be safe. \n You can specify which tablespace Entando should use to create the\nschemas in using the  spec.tablespace  property \n ORA-01704: string literal too long \n Entando requires extended datatypes to be activated in Oracle 12c and\nhigher\n( https://oracle-base.com/articles/12c/extended-data-types-12cR1 ) \n MySQL \n Example \n EntandoDatabaseService\n  metadata:\n    name:mysql-service\n  spec:\n    dbms: mysql\n    host: 10.0.0.13\n    port: 3306\n    databaseName:\n    secretName: mysql-secret\n    jdbcParameters:\n       useSSL: "true"\nSecret:\n  metadata:\n    name: mysql-secret\n  stringData:\n    username: admin\n    password: admin123\n Resulting Connection String \n jdbc:mysql://10.0.0.13:3306 \n Notes \n MySQL doesn’t really support schemas, or more accurately, it doesn’t\ndistinguish between schemas and databases. For this reason, no\ndatabaseName is required. The EntandoOperator will therefore create an\nentirely new database for each datasource your EntandoApp or\nEntandoPlugin requires. It will also create a user with the same name as\nthe database with permission set up to ensure one user cannot access the\ndatabase of another user. Please note that MySQL limits database names\nto 63 characters. Keep this in mind when defining the names of your\nEntandoApps and EntandoPlugins \n PostgreSQL \n Example \n   EntandoDatabaseService\n    metadata:\n      name:postgresql-service\n    spec:\n      dbms: postgresql\n      host: 10.0.0.13\n      port: 5432\n      databaseName: my_db\n      secretName: postgresql-secret\n      jdbcParameters: {}\n\n  Secret:\n    metadata:\n      name: postgresql-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting Connection String \n jdbc:postgresql://10.0.0.13:5432/my_db \n Notes \n PostgreSQL behaves very similar to Oracle when it comes to how it\nassociates a user with its own schema. The current username is used as a\ndefault schema/prefix to resolve tables. As with Oracle, Entando ensures\nthat two users don’t have access to each other’s schemas. \n'},{title:"Tutorial: Invoking Entando Core APIs",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/invoking-api.html",relativePath:"v6.1/tutorials/customize-the-platform/invoking-api.md",key:"v-63176564",path:"/v6.1/tutorials/customize-the-platform/invoking-api.html",headers:[{level:2,title:"General Overview",slug:"general-overview"},{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Set up a Postman environment",slug:"_1-set-up-a-postman-environment"},{level:3,title:"2. Get an access token",slug:"_2-get-an-access-token"},{level:3,title:"2. Prepare a generic API request",slug:"_2-prepare-a-generic-api-request"},{level:2,title:"QE ready APIs",slug:"qe-ready-apis"},{level:2,title:"Notes on QE requests collections structure",slug:"notes-on-qe-requests-collections-structure"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: Invoking Entando Core APIs \n General Overview \n Entando supports Swagger and it is accessible, if activated, from its\nweb interface from the base application URL at /api/swagger-ui.html. A\ncomplete list of all available core APIs can be obtained from Swagger. \n Core APIs can be invoked directly from Swagger or from any other\nsuitable tool, i.e., curl or Postman are two common ones. Postman has\nbeen extensively used in API testing and automated API testing because\nof the possibilities it offers and it is the suggested tool. \n All Entando core APIs are accessible from the base URL, for example:\nlocalhost:8080/entando-de-app/api. For example, the Page Controller will\nbe available under /pages from the Base URL (i.e.\nlocalhost:8080/entando-de-app/api/pages), or the Page Model Controller\nwill available under /pageModels (i.e.\nlocalhost:8080/entando-de-app/api/pageModels) and so on. \n Before being able to perform any API request, we will first need to\nobtain an  authorization token , that is achieved with a specific POST\nrequest sent to the oauth/token endpoint, after successful\nauthentication, an access token is returned which grants access to all\nAPI endpoints and actions for which the authenticated user has defined\nprivileges. \n (Refer to User Management Roles for details) \n The best way to proceed in case of extensive testing with APIs with\nPostman, is to set up an environment and define a variable that will\nkeep the access token saved from the POST request to /oauth/token. \n Purpose \n Set up an environment ready to invoke Entando core APIs \n Requirements \n To complete this tutorial you will need: \n \n \n Postman \n \n \n A running Entando 6 instance \n Steps \n 1. Set up a Postman environment \n Create a new Postman environment and define the following variables: \n access_token: (no value)\nrefresh_token: (no value)\nurl: URL of your application (i.e. http://localhost:8080/entando-de-app)\n \n Be careful with the URL variable and make sure you do not have a\ntrailing slash. \n Set Postman to use this environment. \n 2. Get an access token \n Getting an access token is a prerequisite to be able to invoke any API.\nThe following is the required activity. \n \n \n create a Postman collection, name it for example "Access Token" \n \n \n create a new POST request with the following parameters: \n \n \n \n URL field\n{{url}}/api/oauth/token\n \n Note that we are calling the "url" environmental variable for\nconvenience. \n Autorization section\n   Type: Basic Auth\n   Username: (a valid Entando consumer must be defined in Entando) (Refer to appropriate documentation on how to do that) (i.e. appbuilder)\n   Password: (password of the defined consumer) (i.e. appbuilder_secret)\n\nHeaders section\n    Content-Type: application/x-www-form-urlencoded\n\nBody section\nSelect from the radio button the option: x-www-form-urlencoded\n    username: (valid Entando user (i.e. admin))\n    password: (password of the valid user)\n    grant_type: password\n \n The tests section is convenient as we can then set any new API request\nin such a way to make use of that access token. The first line of code\ndefines a variable called "data", which hosts the JSON parsed\nresponseBody from the POST request just sent to /oauth/token; The second\nline sets the environment variable "access_token" to the value returned\nby the POST request. \n Tests section\n    var data = JSON.parse(responseBody);\n    postman.setEnvironmentVariable("access_token", data.access_token);\n \n Launch the POST request to test it, and if successful, you should get a\nresponse like this: \n {\n    "access_token": "b96096493a40b1a7364bd54a6ffb609b",\n    "token_type": "bearer",\n    "refresh_token": "79ff84062b5dc13663961a833b0788f9",\n    "expires_in": 3599\n}\n \n also if you open in edit the Postman environment, you should see that\nthe access_token and the refresh_token variables values have been\nupdated. \n 2. Prepare a generic API request \n Create a new request with the following parameters: \n Authorization section: Inherit auth from parent\n\nHeaders section:\n create the key Authorization with Value: Bearer{{access_token}}\n create the key Content-Type with Value: application/json\n \n Select the appropriate method (GET, DELETE, POST etc.) for your request\nand fill up the URL with appropriate values i.e.\n(localhost:8080/entando-de-app/api/pages) then add to the Body section,\nif needed, the appropriate payload in JSON format, remember to select\nraw and JSON (application/json). \n QE ready APIs \n QE has developed a set of collection requests to automate API testing,\nexamples of that are available on github at\n https://github.com/entando/entando-QE/tree/master/postman_API . \n To use them ,first git clone the project and use the built in Postman\nimporting features. \n Import first the Postman Environment file which can be found under the\nenvironment folder. When imported, from Postman, open in edit that\nenvironment and change the "url" variable to the appropriate value for\nyour specific installation, i.e  http://localhost:8080/entando-de-app/ \nand save it. \n Import from Postman the collections you would like to use and they will\nbecome available in the Postman collections Panel ready to be run. \n Notes on QE requests collections structure \n Each collection is so designed to test a particular use case i.e.\n"Delete an existent page", "Delete a page which has children" etc. \n By design each QE Postman collection is: \n \n \n indipendent (does not require other collections) \n \n \n general (does not make any assumption on the specific Entando\napplication) \n \n \n can be run automatically, with newman, please refer to\n https://github.com/entando/entando-QE  for details \n \n \n Following those requirements, each collection will need to "prepare" the\nenvironment for the actual test. That is achieved by using specific\nrequests, called "helpers", and their only purpose is to create/delete\nall the needed objects. \n Another class of helpers is used to check the persistence of the actions\nperformed by the APIs, i.e. check that after a DELETE, something really\nhas been deleted. \n The request that implements the use case, we can call it main request,\ndoes not contain the word "HELPER" in its name, and it is the only one\ninside a given collection. \n Because collections are designed primarily to run automatically, we have\ndone extensive use of collection variables, so variables like the API\nURL, object names, object codes or payloads are usually defined as a\ncollection variable and can be accessed by all requests inside the\ncollection. \n Conclusion \n This guide let you start invoking Entando 6 APIs \n'},{title:"Tutorial: Extending the App Builder",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/extend-app-builder.html",relativePath:"v6.1/tutorials/customize-the-platform/extend-app-builder.md",key:"v-069d34da",path:"/v6.1/tutorials/customize-the-platform/extend-app-builder.html",headers:[{level:2,title:"Creating a Basic Application",slug:"creating-a-basic-application"},{level:2,title:"Understanding the Stand Alone Environment",slug:"understanding-the-stand-alone-environment"},{level:2,title:"Customizing the Menu",slug:"customizing-the-menu"},{level:2,title:"Customizing the menu labels",slug:"customizing-the-menu-labels"},{level:2,title:"Customizing the Routes",slug:"customizing-the-routes"},{level:2,title:"state",slug:"state"},{level:2,title:"Customizing the Reducers",slug:"customizing-the-reducers"},{level:2,title:"userList",slug:"userlist"},{level:3,title:"connecting to the store",slug:"connecting-to-the-store"},{level:2,title:"Page Models",slug:"page-models"},{level:3,title:"Connecting to the Store",slug:"connecting-to-the-store-2"},{level:2,title:"Adding the API Calls",slug:"adding-the-api-calls"},{level:2,title:"Creating the Thunk",slug:"creating-the-thunk"},{level:2,title:"changing the mapDispatchToProps in the containers",slug:"changing-the-mapdispatchtoprops-in-the-containers"},{level:2,title:"Updating the List components",slug:"updating-the-list-components"},{level:2,title:"clear the default value of the reducer",slug:"clear-the-default-value-of-the-reducer"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Tutorial: Extending the App Builder \n Apps for the Entando App Builder are developed as standalone\napplications which can be run using  npm start  in standalone mode. \n Each application should be deployed in npm using the  @entando \nnamespace and will export into their dist folder several items used by\nthe App Builder when integrating it into the full application. \n Creating a Basic Application \n To create a basic application, use the  entando\nfpg  running the\n npx @entando/fpg ab-app <appName>  command. \n the  appName  should only contain alphanumeric characters and\nunderscores, and should begin with a letter. \n This will create inside the working directory, a boilerplate app-builder\napp in a directory named  <appName>  argument. \n i.e. \n using the command  npm @entando/fpg ab-app testing  inside your home\ndirectory, a directory named  testing  will be created containing the\napp. \n All dependencies will already be installed allowing you to  cd  inside\nthe project directory and run  npm start  to start the app running. \n Understanding the Stand Alone Environment \n Each app for the App Builder, can run in both a stand alone mode and an\nintegrated mode. Using  npm start  will use standalone mode. \n In this environment you’ll be looking at the user interface of the app\ninside a default page. This page, which includes a default menu, will\nnot be exported and therefore can be customized. \n To better understand which elements and components are being exported to\nApp Builder, it is best to understand the anatomy of the app. \n Exports \n Each app will have a  babel.js  export file similar to: \n      import  menu  from   'ui/common/LinkMenu' ; \n     import   {  cms  as  state  }   from   'state/rootReducer' ; \n     import   {  routes ,  routesDir  }   from   'ui/App' ; \n     import  en  from   'locales/en' ; \n     import  it  from   'locales/it' ; \n\n     const  testing  =   { \n      id :   'testing' , \n      menu , \n      state , \n      routes , \n      routesDir , \n      locales :   { \n        en , \n        it , \n       } , \n     } ; \n\n     export   default  testing ; \n id: is the app id. \n This parameter is used by App Builder to differentiate all integrated\napps. \n menu: is a React component containing all the menu elements. \n These elements are used inside the standalone environment and inside the\nintegrated environment as a second level menu. The boilerplate app\ncontains a basic menu. \n      import  React  from   'react' ; \n     import   {  LinkMenuItem  }   from   '@entando/menu' ; \n     import   {  FormattedMessage  }   from   'react-intl' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-SECTION_ID\" \n          label = { < FormattedMessage id = \"testing.menu.SECTION_NAME\"  defaultMessage = \"SECTION_NAME\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n\n     export   default  LinkMenu ; \n Customizing the Menu \n For this exercise, we will create two links inside the menu. The first\nwill link to a page listing all the users inside the entando instance.\nThe second will list all the existing page models inside the Entando\ninstance. \n For this example we’re using existing APIs from the Entando core just\nfor simplicity, you can instead call any API or data source. \n In your app project, open  src/ui/common/LinkMenu.js  and update the\nconst to the code below. \n      const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"testing.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"testing.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n \n it is important that both the  <LinkMenuItem>  id property and the\n`<FormattedMessage>`properties inside label have the correct values\nassigned, i.e.: \n the LinkMenuItem id will be  menu-userList  while the FormattedMessage\nid will be  testing.menu.userList  and the defaultMessage will be\n User List . \n locales \n The locales files are objects that contain all of the i18n locales of\nthe app. \n By default the boilerplate contains both the english and italian i18n\nfiles. \n In your app project in  src/locales/en.js  and  src/locales/it.js  you\ncan see your labels. \n      export   default   { \n      locale :   'en' , \n      messages :   { \n         'testing.title' :   '' , \n         'testing.label.errors' :   '' , \n         'testing.label.cancel' :   '' , \n         'testing.chooseAnOption' :   '' , \n         'testing.tip' :   '' , \n         'testing.new' :   '' , \n         'testing.save' :   '' , \n         'testing.saveAndApprove' :   '' , \n         'testing.unpublish' :   '' , \n         'testing.setContentAs' :   '' , \n         'testing.cancel' :   '' , \n         'testing.saveAndContinue' :   '' , \n         'testing.stickySave.status' :   '' , \n         'testing.stickySave.lastAutoSave' :   '' , \n       } , \n     } ; \n \n While running in standalone mode the boilerplate does not offer a way\nfor the user pick a locale, but both will be loaded inside app-builder\nand will be consumed as intended by it, using the correct one based on\nthe user-picked language. \n It is of course possible to change the standalone app to give the user\nthe option to choose the locale in here as well, but this is not\nsomething will be covering in this tutorial. \n Customizing the menu labels \n To customize the existing menu labels, we’ll add the new label ids\ninside both the english and Italian locale files: \n \n Note \n If you named your app something besides  testing  you’ll need to fix\nthese tags to match the name of your app. \n \n      ... \n    messages :   { \n         ... \n         'testing.menu.userList' :   'List of Users' , \n         'testing.menu.pageModelList' :   'Page Models' , \n         ... \n     } , \n     ... \n \n The key in the messages object matches the id of the\n`<FormattedMessage>`component we placed inside the menu, while its\nvalue is the actual string that will be displayed depending on the\ncurrently active language. \n Routes and RoutesDir \n Both of these elements are imported from  src/ui/App.js . The first one\nis a collection of actual  <Route>  components, and the second one is an\nobject containing each route data, i.e.: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n     ] ; \n \n The constant  ROUTE_TESTING  is imported from  src/app-init/routes.js \n Customizing the Routes \n Next we will create the two routes for the two links we have created by\ncreating first the two constants needed. \n In your IDE open  src/app-init/routes.js \n      export   const   ROUTE_TESTING   =   '/testing' ; \n     export   const   ROUTE_USER_LIST   =   '/testing/user-list' ; \n     export   const   ROUTE_PAGE_MODELS   =   '/testing/page-models' ; \n \n \n Note \n Change the value of  testing  to what you selected for the name of\nyour App extension. \n \n The value of each constant will be the path of the route. It is\nimportant that each route is a subroute of the id of the app itself,\notherwise this may cause name collision when running inside the\nintegrated environment of app-builder. \n Both routes are next imported inside  App.js : \n Update the imports with your new ROUTE tags. \n      import   { \n       ROUTE_TESTING , \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n \n and then add to the  routesDir  constant: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n       { \n        path :   ROUTE_USER_LIST , \n         render :   ( )   =>   < > user list < / > , \n       } , \n       { \n        path :   ROUTE_PAGE_MODELS , \n         render :   ( )   =>   < > page models < / > , \n       } , \n     ] ; \n \n Next, import the routes constants inside  LinkMenu.js  and change\naccordingly the  to  property of the  <LinkMenuItem>  component: \n      ... \n     import   { \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"tatata.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = { ROUTE_USER_LIST } \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"tatata.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = { ROUTE_PAGE_MODELS } \n         / > \n       < / > \n     ) ; \n     ... \n \n Next clicks on the links in the menu will change the routes and display\nthe content defined in the  App.js  file. \n state \n The state in src/babel.js is the combined reducer of the app, the\nrootReducer.js contains the combined reducer of the app and exports it,\nbut also contains the entire reducer of the app when running in\nstandalone mode. \n      export   const  testing  =   combineReducers ( { \n       // implement here your app specific reducers \n     } ) ; \n\n     export   default   combineReducers ( { \n      apps :   combineReducers ( {  testing  } ) , \n      api , \n      currentUser , \n      form , \n      loading , \n      locale , \n      messages , \n      modal , \n      pagination , \n     } ) ; \n \n The app specific reducers are stored inside the  apps  object, this is\ndone to avoid possible name collisions with any reducer stored inside\napp-builder when running the app in integrated mode. \n Customizing the Reducers \n Next we will be creating the two reducers for the user list and page\nmodels. They will be created inside two new directories\n src/state/apps/testing/userList/  and\n src/state/apps/testing/pageModels . The  types.js  files will contain\nthe two action types that we’ll need. \n userList/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_USERS = 'apps/testing/add-users';\n \n pageModels/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_PAGE_MODELS = 'apps/testing/page-models/add-page-models';\n \n The value of both constants contain the whole namespace\n apps/testing/REDUCER  this is done to avoid any possible name collision\nwhen running the app in integrated mode. \n Next create both actions files: \n userList/actions.js \n      import   { \n       ADD_USERS , \n     }   from   'state/apps/testing/userList/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addUsers   =   users   =>   ( { \n      type :   ADD_USERS , \n      payload :  users , \n     } ) ; \n \n pageModels/actions.js \n      import   { \n       ADD_PAGE_MODELS , \n     }   from   'state/apps/testing/pageModels/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addPageModels   =   pageModels   =>   ( { \n      type :   ADD_PAGE_MODELS , \n      payload :  pageModels , \n     } ) ; \n \n then the selectors: \n userList/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getUserList   =   state   =>  state . apps . testing . userList ; \n     export   const  getList  =   createSelector ( getUserList ,   userList   =>  userList . list ) ; \n \n pageModels/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getPageModels   =   state   =>  state . apps . testing . pageModels ; \n     export   const  getList  =   createSelector ( getPageModels ,   pageModels   =>  pageModels . list ) ; \n \n And finally the reducers. The default state is going to contain some\nsample data for us to display. \n userList/reducer.js \n      import   {   ADD_USERS   }   from   'state/apps/testing/userList/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'active' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'admin' , \n            email :   'admin@entando.com' , \n           } , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'disabled' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'User Name' , \n            email :   'user1@entando.com' , \n           } , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_USERS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n pageModels/reducer.js \n      import   {   ADD_PAGE_MODELS   }   from   'state/apps/testing/pageModels/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          code :   'home' , \n          descr :   'Home Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n         { \n          code :   'service' , \n          descr :   'Service Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_PAGE_MODELS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n Last, we can add the two reducers just created to the\n src/state/rootReducer.js \n      ... \n     import  userList  from   'state/apps/testing/userList/reducer' ; \n     import  pageModels  from   'state/apps/testing/pageModels/reducer' ; \n\n     export   const  testing  =   combineReducers ( { \n      pageModels , \n      userList , \n     } ) ; \n     ... \n \n we will now be able to see with the  reduxDevTools  in our browser. To\nview this state in your reduxDevTools go to: \n State -→ apps -→ testing -→ pageModels  and\n State -→ apps -→ testing -→ userList \n Creating the UI Components \n At this point, both routes created should be rendering a simple string.\nWe will next create the actual component that will be rendered inside\nthe page. \n userList \n Inside  src/ui/userList/  create the  List  component. Create the\n userList  directory and  List.js  file in that directory. \n      import  React  from   'react' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( )   =>   { \n       const  data  =   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n       ] ; \n\n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n               < tr > \n                 < td > username < / td > \n                 < td > registration < / td > \n               < / tr > \n             < / thead > \n             < tbody > \n               { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Next, change the route inside  src/ui/App.js . Add the import below and\nupdate the component to reference the List component created in the\nprior step. \n      ... \n     import  List  from   'ui/userList/List' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  List , \n       } , \n     ... \n \n The table will now display correctly when clicking on the menu item. \n connecting to the store \n Next let’s connect the component to the store to get the data from the\nreducer. \n The first step is creating the  ListContainer.js  next to the  List \ncomponent file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/userList/selectors' ; \n\n     import  List  from   'ui/userList/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The List\nfile should now look like this: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Make sure that you remove the predefined  data  const since the data\nwill now be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js .\nUpdate the import to the container and update the component in\n ROUTE_USER_LIST  to the new ListContainer. \n      ... \n     import  ListContainer  from   'ui/userList/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  ListContainer , \n       } , \n     ... \n \n Go back to your app. We will now see the data inside the table\nreflecting the content of the storage. \n Page Models \n inside  src/ui/pageModels/  we are going to create the  List  component \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n\n     export   default  List ; \n \n Next change the route inside  src/ui/App.js \n      ... \n     import  ListPageModels  from   'ui/pageModels/List' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  ListPageModels , \n       } , \n     ... \n \n The table will now be displayed correctly when clicking on the menu\nitem. \n Connecting to the Store \n Next, connect the component to the store to get the data from the\nreducer. \n The very first thing we’ll do is create the  ListContainer.js  next to\nthe  List  component file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/pageModels/selectors' ; \n\n     import  List  from   'ui/pageModels/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The whole\nList component will have this content: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . code } < / td > \n           < td > { row . descr } < / td > \n         < / tr > \n       ) ) ; \n\n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > code < / td > \n               < td > descr < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n     export   default  List ; \n \n Next make sure that you remove the predefined  data  const since the\ndata will be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js \n      ... \n     import  PageModelsListContainer  from   'ui/pageModels/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  PageModelsListContainer , \n       } , \n     ... \n \n You will now see the data inside the table reflecting the content of the\nstorage. \n Connecting the app to an Entando core instance \n By default the app is using mocks and not connecting to any Entando core\ninstance. \n Because the app is making use of  @entando/apimanager  we can easily\nchange this by setting up two  .env  variables inside the  .env  file in\nthe project root: \n     REACT_APP_DOMAIN=http://localhost:8080/entando-app\n    REACT_APP_USE_MOCKS=false\n \n The  REACT_APP_DOMAIN  must pointing towards the domain and container\nwhere the Entando instance is running and  must not  contain trailing\nslashes. \n Once this is done to make the change happen we will have to stop the app\nusing  ctrl + c  and re run it with  npm start . \n Now the toast stating  This application is using mocks  won’t be popping\nup anymore. \n You can make sure that the configuration is correct by looking at the\nnetwork section in the browser dev tools. By default the app\nautomatically makes an admin login against a plain Entando instance to\nauthenticate the user and to be able to consume any protected api. \n This is not an ideal scenario and it is meant to be used only for\ndebugging purposes for many reasons: \n \n \n the username and password should never be hardcoded in your app \n \n \n if authentication is required the user should be the one performing\nthe login action \n \n \n the plain default passwords in use won’t be useful against a proper\nproduction instance of Entando \n Adding the API Calls \n We are now going to add api calls for both users and page models to\nretrieve the data live instead of relying on our store’s default state. \n Inside  src/api  create the  users.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   ( \n       makeRequest ( \n         { \n          uri :   ` /api/users ${ params } ` , \n          method :   METHODS . GET , \n          mockResponse :   { } , \n          useAuthentication :   true , \n         } , \n        page , \n       ) \n     ) ; \n \n and then create the  pageModels.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   makeRequest ( { \n      uri :   ` /api/pageModels ${ params } ` , \n      method :   METHODS . GET , \n      mockResponse :   { } , \n      useAuthentication :   true , \n     } ,  page ) ; \n Creating the Thunk \n In order to use the api call we next create a thunk action, which is a\nredux action with side effects, like an API call. \n inside the  src/state/apps/testing/userList/actions.js  file we are\ngoing to add the new action: \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getUsers , \n     }   from   'api/users' ; \n     ... \n\n     // thunks \n\n     export   const  fetchUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getUsers ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( json )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addUsers ( json . payload ) ) ; \n             }   else   { \n               dispatch ( addErrors ( json . errors . map ( err   =>  err . message ) ) ) ; \n             } \n             resolve ( ) ; \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Next do the same inside  src/state/apps/testing/pageModels/actions.js : \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getPageModels , \n     }   from   'api/pageModels' ; \n     ... \n\n     // thunks \n\n     export   const  fetchPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getPageModels ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( data )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addPageModels ( data . payload ) ) ; \n               resolve ( ) ; \n             }   else   { \n               dispatch ( addErrors ( data . errors . map ( err   =>  err . message ) ) ) ; \n               resolve ( ) ; \n             } \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Now with two exports, it is safe to remove the\n eslint-disable-next-line  comment on line 5 of both files. \n changing the mapDispatchToProps in the containers \n Next, in order to pass the newly created thunk to both List components,\nwe’ll update the containers accordingly, as: \n src/ui/userList/ListContainer.js \n      ... \n     import   {  fetchUsers  }   from   'state/apps/testing/userList/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchUsers ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n \n src/ui/pageModels/ListContainer.js \n      ... \n     import   {  fetchPageModels  }   from   'state/apps/testing/pageModels/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchPageModels ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n Updating the List components \n Both List components were simple components with only a  render  method,\ntherefore could be declared as simple constants. \n Next we will fetch data during the  componentDidMount  life cycle event\nwhich will require we turn the constant into a class on top of changing\nthe PropTypes to add the new fetch method passed down to the component. \n src/ui/userList/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . username } < / td > \n             < td > { row . registration } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > username < / td > \n                   < td > registration < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n \n src/ui/pageModels/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . code } < / td > \n             < td > { row . descr } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > code < / td > \n                   < td > descr < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n clear the default value of the reducer \n Now we should be fetching data from the server, therefore we can safely\nmake the list key in the  defaultState  object an empty array: \n src/state/apps/testing/userList/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n \n src/state/apps/testing/pageModels/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n adding additional dependencies \n It may be necessary to set additional dependencies for your project. If\nthe need arises, it is important to remember a few rules: \n Only actual dependencies that are not already included in  app-builder \ncan be added as pure dependencies. Every other dependency must either be\na  devDependency  or  peerDependency . \n If you are not careful you may end up with duplicated dependencies that\n will  result in errors manifesting themselves when running the app\ninside App Builder. \n running the app in integrated mode within App Builder \n After running  npm install  in the App Builder, the user can run the\n npm run app-install <appId>  command to install the app. \n This command will trigger a download of the app from npm and the\ninstallation of its component within App Builder. After the installation\nprocess is complete, it will be possible to either  npm start  or\n npm build  App Builder. \n To install a dev app, like the one developed in this tutorial which have\nnot been previously published on npm, you will need to use additional\nflags and will have to run a few additional commands. \n Before running the Install command  make sure that you have\nuninstalled all existing peer and dev dependencies to avoid collision\nwith app builder. To do so, from the app builder app directory\n( testing , in this tutorial) just run in the correct order the\nfollowing commands: \n npm run babel \n npm i --only=production \n The first will create the dist directory that will be needed by App\nBuilder while the second one will uninstall anything but production\ndependencies. \n Next, from the App Builder directory, run the install command with these\nadditional flags: \n \n \n -d  specify the relative path where the app is installed. When\nusing this flag the appId should be the normalized app name, without\nthe  @entando/  prefix. \n \n \n -p  specify the package name if it is different from the appId \n \n \n to use flags you will have to use the double dash in the command: \n npm run app-install —  cms -d ../testing -p @entando/testing \n the value in the  -p  flag should always match the actual name of the\napp that is going to be installed inside App Builder . You can check\nyour app name inside the  package.json  file of your app. \n If you experience problems after running the build command delete the\n node_modules  directory before running the second command. \n"},{title:"Backing Up and Restoring an Entando Application",frontmatter:{},regularPath:"/v6.1/tutorials/devops/backing-up-and-restoring-your-environment.html",relativePath:"v6.1/tutorials/devops/backing-up-and-restoring-your-environment.md",key:"v-07300966",path:"/v6.1/tutorials/devops/backing-up-and-restoring-your-environment.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Create a Backup",slug:"create-a-backup"},{level:2,title:"Restore a Backup",slug:"restore-a-backup"}],lastUpdated:"9/22/2020, 4:28:19 PM",content:' Backing Up and Restoring an Entando Application \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n \n \n This tutorial will show you how you can use an Entando application that\nyou have built as a launching point for creating new applications. \n Create a Backup \n This step requires using a running Entando environment to take an application backup.\nThe output of this step is a local directory with the files (database and static assets) you can use to restore the application later. \n \n \n Log into  App Builder \n \n \n Go to  Configuration -> Database \n \n \n Click on  Create A Backup  and wait for the process to complete. All of the static assets and database backups are persisted to a PVC in /entando-data on the server pod. \n \n \n Transfer the files from the server-container. The details will vary depending on your kubernetes environment. \n \n \n \n \n \n kubectl \n OpenShift \n \n \n \n \n kubectl cp <pod>:<path> <local-path> \n oc rsync <pod>:<path> <localPath> \n \n \n e.g. kubectl cp quickstart-server-deployment-7b8c699599-f84zq:/entando-data backup \n e.g. oc rsync app-entando-server-deployment-67fd5b9954-s72mb:/entando-data \n \n \n \n \n You should see 3 directories -  databases ,  protected , and  resources .\nThe  protected  directory contains the timestamped backup you triggered from the  App Builder . \n Restore a Backup \n In this lab you’ll take a previously built demo application, install the\nbackup files, build a Docker image from the updated app, and deploy it as a new application. \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the  entando-de-app  you just cloned: \n cd entando-de-app\n \n \n \n Take the backup file and unzip it in a location of your choice. \n \n \n This zip contains all of the assets, content, and metadata\nneeded to launch an Entando application. We are going to package\nthe static assets and database backup into a Docker image. \n \n \n Entando will automatically instantiate and populate the app from\nthe most recent backup \n \n \n \n \n Move the resources and protected folders from your Entando backup into your\n entando-de-app  application under  src/main/webapp  replacing any content that is\nalready there. \n \n \n Build a docker image from the app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n Note that the "derby" option here is only for the initialization\nphase of the DB when deploying. It isn’t the final database\nchoice \n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for the following: \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker account to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Now we need to generate a new application for deployment to\nKubernetes using the helm chart \n \n \n If you have an output from helm from before you can re-use it\nand just apply the changes to the config map. In this case skip to step 12. \n \n \n Or you can re-run helm and change the output \n \n \n \n \n Re-run the helm command for your environment \n \n \n Open the output yaml file from the helm command in the text editor\nof your choice \n \n For example:  vi training-alpha.yaml \n \n \n \n In that file look for the  ConfigMap \n \n \n The config map defines all of the images that are available as\npart of the deployment. They aren’t all used concurrently. \n \n \n You can also view this config map in  kubernetes/OpenShift \n \n \n \n \n Now you need to update the deployment to use your customized Wildfly\nimage. Find  entando-de-app-wildfly  in the config map \n \n Note that we are changing the de-app but you could create a\ncustom version of any of the included images \n \n \n \n Change the version to match the version you used for your image \n \n \n Change the "organization" to the name of your main image repository\norganization and if you aren’t using docker.io (DockerHub) then\nchange the registry as well. \n \n \n Save the file \n \n \n Follow the deployment steps you went through when you originally\ndeployed your Entando application to your Kubernetes instance \n \n \n Once deployed go to the  App Builder  in your app \n \n \n Click  Go To Homepage  and you should see your restored application. \n \n \n'},{title:"Business Objective",frontmatter:{},regularPath:"/v6.1/tutorials/customize-the-platform/pda-tutorial.html",relativePath:"v6.1/tutorials/customize-the-platform/pda-tutorial.md",key:"v-5ca42bd6",path:"/v6.1/tutorials/customize-the-platform/pda-tutorial.html",headers:[{level:2,title:"Micro Frontend",slug:"micro-frontend"},{level:2,title:"Process Automation Manager (PAM)",slug:"process-automation-manager-pam"},{level:2,title:"Business Process Modeling Notation (bpmn)",slug:"business-process-modeling-notation-bpmn"},{level:2,title:"Decision Model and Notation (dmn)",slug:"decision-model-and-notation-dmn"},{level:2,title:"Back End for Front End (BFF)",slug:"back-end-for-front-end-bff"},{level:2,title:"Task List",slug:"task-list"},{level:3,title:"PAM Implementation",slug:"pam-implementation"},{level:2,title:"Task Details",slug:"task-details"},{level:3,title:"PAM Implementation",slug:"pam-implementation-2"},{level:2,title:"Task Comments",slug:"task-comments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-3"},{level:2,title:"Task Forms",slug:"task-forms"},{level:3,title:"PAM Implementation",slug:"pam-implementation-4"},{level:2,title:"Attachments",slug:"attachments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-5"},{level:2,title:"New Process Form",slug:"new-process-form"},{level:2,title:"Summary Card",slug:"summary-card"},{level:3,title:"PAM Implementation",slug:"pam-implementation-6"},{level:2,title:"Totals Over Time",slug:"totals-over-time"},{level:3,title:"PAM Implementation",slug:"pam-implementation-7"},{level:2,title:"Styling",slug:"styling"},{level:2,title:"Implementing a New Engine or Integrating a New Task Source",slug:"implementing-a-new-engine-or-integrating-a-new-task-source"},{level:2,title:"Page Templates and Layout",slug:"page-templates-and-layout"},{level:2,title:"Creating a new PDA MFE",slug:"creating-a-new-pda-mfe"},{level:2,title:"Communication between MFEs",slug:"communication-between-mfes"},{level:2,title:"Micro Frontend Overview",slug:"micro-frontend-overview"},{level:3,title:"Task forms",slug:"task-forms-2"},{level:2,title:"Widgets",slug:"widgets"},{level:2,title:"Building From source",slug:"building-from-source"},{level:2,title:"Code Style",slug:"code-style"},{level:2,title:"Sonar",slug:"sonar"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Business Objective \n The Entando Process Driven Applications plugin is built to provide a\nrich and full featured user experience to allow for the management and\ncompletion of business processes and automation. The UX is delivered a\ngeneral purpose UX layer built using micro frontends that can be\nutilized for any business process or task engine. Customers drive the UX\nlayer by utilizing a pre-developed Entando integration or by\nimplementing a set of interfaces on the server side. The backend is a\nSpring Boot microservice that provides a pluggable interface allowing\nfor the injection of any underlying process or automation toolkit. The\ninterfaces and steps for creating a new PDA backend implementation are\nprovided below. This document provides an overview of the Entando\nProcess Driven Apps (PDA) plugin. The initial section covers the\nbusiness functionality and user facing micro frontends. The second\nsection covers the architecture and the points of extension for the PDA\nplugin. The third provides a detailed technical overview for developers\nto add new functionality to a PDA implementation. \n Terminology \n Micro Frontend \n A Micro frontend architecture is an approach to developing web\napplication as a composition of small frontend apps. Instead of writing\na large monolith frontend application, the application is broken down\ninto domain specific micro frontends, which are self-contained and can\nbe developed and deployed independently. \n Process Automation Manager (PAM) \n A business process automation engine built and maintained by Red Hat \n Business Process Modeling Notation (bpmn) \n Business Process Model and Notation (BPMN) is a graphical representation\nfor specifying business processes in a business process model. \n Decision Model and Notation (dmn) \n Decision Model and Notation is a standard published by the Object\nManagement Group. It is a standard approach for describing and modeling\nrepeatable decisions within organizations to ensure that decision models\nare interchangeable across organizations. \n Back End for Front End (BFF) \n A microservice architecture allows teams to iterate quickly and to\ndevelop technology to scale rapidly. The Backend for Frontend (BFF)\narchitecture is a type of pattern built with microservices. The key\ncomponent of this pattern is an application that connects the front-end\nof your application with the backend. This BFF Code Pattern will help\nyou build that component according to IBM’s best practices. \n PDA Micro Frontends \n This section provides an overview of each of the micro frontends (MFE)\nthat are available as part of the Entando PDA plugin. In cases below\nwhere there are details specific to the PAM implementation they are\nprovided for that MFE. When extending the integration layer to other\nengines or custom implementations it will be up to the integrating team\nto define behavior and datasource for each MFE. \n Task List \n The task list MFE provides a user with a list of visible tasks that are\neither assigned to that user or that are potentially ownable by that\nuser. In the default implementation the visible tasks are limited to a\nsingle process instance. At configuration time the application designer\nis given the option to select a set of columns that will be visible in\nthe task list for that page. \n PAM Implementation \n The default PAM implementation makes the top level task fields available\nin the task list for selection. It is possible to fetch task and process\nvariables for rendering in the task list but these values are excluded\nby default due to the additional API call overhead required. \n Task Details \n The task details MFE renders detailed information about a given task.\nThe task details widget is intended to give the final user processing a\ntask the information necessary to complete the task at hand. The task\ndetails are rendered in a read only grid. See the styling section below\nfor changing and customizing the layout. \n PAM Implementation \n The PAM integration renders task variables in the task details widget. \n Task Comments \n The task comments MFE gives the user the ability to view notes attached\nto a given task and to add new notes to a task. \n PAM Implementation \n The PAM implementation reads and publishes notes to the comments\nendpoint \n Task Forms \n The task form implementation renders a form specific to a task and gives\nthe user the ability to complete that form. The form implementation is a\nwrapper around a JSON schema that describes the layout, style and\ncontent of the form. It is up to the backend implementation to transform\nto the schema and default ux layout needed to render the form. See the\ntechnical documentation below for more on the JSON schema based\nimplementation. \n PAM Implementation \n The PAM implementation of forms depends on the presence of a form\ndefinition being present on the PAM task. The Entando PAM engine\nimplementation transforms from the PAM format to the JSON schema to\nrender the form. And it transforms the API format back to the PAM format\nbased on the form definition in PAM. There are some limitations on form\ncustomization due to the format required to return data to PAM. See the\nforms section in the technical documentation for more information. \n Attachments \n The attachments MFE gives the user to view documents attached to a\ntask/case/process and to add new documents to a task/case/process. \n PAM Implementation \n The PAM implementation posts the documents to the PAM endpoints for\nstorage. Future features will include using Entando document storage for\nstoring documents and a pluggable document management interface. \n New Process Form \n The new process form renders a form that allows the final user to\nprovide the information necessary to instantiate a new business process\ninstance. The technology for generating the process form is the same as\nthe JSON schema definition used for task forms. === PAM Implementation\nThe PAM implementation depends on a form definition being attached to\nthe process definition. Entando transforms the PAM representation into a\nJSON schema form that can be rendered to the final user. \n Summary Card \n The summary card MFE provides a view into aggregate data for the process\nimplementation. The rendered information includes a total value, a trend\nvalue, and a selector for timeframe. The summary card allows the\napplication developer to select a request for rendering the requested\ninformation which maps to a call in the underlying engine to provide the\nsummarized data. \n PAM Implementation \n The PAM implementation of the summary card widget relies on the PAM\ncustom query functionality. The PAM PDA engine exposes configuration\nthat allows users/developers to define a custom query in a config file\nthat will be executed to render the summary card. This implementation\nallows the data rendered on the summary cards to be changed via\nconfiguration. In the application there is a properties file that allows\nthe implementer to provide a custom query for each of the cards. \n Totals Over Time \n The totals over time MFE provides a dual axis line/bar graph providing\ntrend information about the process environment. The MFE also provides\nthree summary values for comparison over the same time period. \n PAM Implementation \n The PAM implementation of the totals over time MFE utilizes custom\nqueries to fetch the summary data rendered in the chart. The queries\nused in the implementation are defined in configuration files in the MFE\nand can be updated to render data specific to a given implementation. \n Customizing the Process Driven Application \n Styling \n The Entando PDA MFEs are styled via a material UI theme. That theme can\nbe downloaded and updated here:\n https://github.com/entando/frontend-libraries/tree/master/packages/entando-ui \n Implementing a New Engine or Integrating a New Task Source \n Implementing a new Engine for Process Driven Applications means to\ncreate a new Java Project and implement the interfaces defined in the\npda-core-engine project. So, the new project should include the\npda-core-engine as a dependency. To see an implementation in action,\ntake a look at the pda-redhatpam-engine project, which implements the\nRed Hat PAM engine integration. After the engine is implemented, the JAR\nfile resulting from the implementation should be available in the\nclasspath for entando-process-driven-plugin, which is the project that\nis ultimately executed and exposes the Rest APIs for the frontend\napplication. One way to do that is by publishing the engine\nimplementation to a Maven repository and adding it as a dependency to\nthe entando-process-driven-plugin project. Below are the descriptions of\nthe key classes and interfaces in the pda-core-engine project that need\nto be inherited or implemented when creating a new engine\nimplementation: \n \n \n Engine: This class represents a BPM engine and exposes the services\nthat are available for that specific implementation. It is intended\nto be inherited and the subclass should provide the real\nimplementation for each service by calling the superclass\nconstructor with the service implementations as arguments. If any\nservice is not supported, a null value should be passed to the\ncorresponding constructor argument. The engine can provide\nimplementations for the the following service interfaces: \n \n \n TaskService: defines service methods for task retrieval from the\nBPM engine. \n \n \n TaskDefinitionService: defines service methods related to task\ndefinition. A task definition specifies which fields or columns\nare available for all task instances. \n \n \n TaskCommentService: defines service methods related to task\ncomment manipulation. It should be implemented if the task\ncomment is supported by the engine. \n \n \n TaskAttachmentService: defines service methods to operate on\ntask attachments. It should be implemented if the engine\nsupports file attachment on the task. \n \n \n TaskFormService: defines service methods for task form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n TaskLifecycleService: defines service methods related to the\ntask lifecycle. The lifecycle operations move the task from one\nstate to another. \n \n \n TaskLifecycleBulkService: defines methods for bulk lifecycle\noperations. Like the TaskLifecycleService, methods here move the\ntask from one state to another, but this interface works with\nmultiple tasks at a time. \n \n \n ProcessService: defines service methods for process definitions\noperations. \n \n \n ProcessFormService: defines service methods for process form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n GroupService: define service methods related to groups from the\nBPM engine. \n Page Templates and Layout \n Page templates are page templates that facilitate rapid development of\npages and allow adding pre-made components - widgets - just by drag &\ndropping. Templating language used in page models is parsed by Apache\nFreeMarker template engine. To create a new page model, go to the Admin\npanel and select UX Pattern > Page Models. Press “Add” and you will be\nredirected to the page model creation screen. Add the page model code\nand page model name. Depending on the version you are using you will\nneed to provide a XML or JSON schema. This schema is used to generate\nthe page layout in page configuration screen - it’s used to drag & drop\nwidgets on the page and helps users visualize where each widget will be\nplaced on the page. Basic schema could look like this \n {\n  "frames": [\n    {\n      "pos": 0,\n      "descr": "Widget description",\n      "mainFrame": false,\n      "defaultWidget": null,\n      "sketch": {\n        "x2": 1,\n        "y2": 0,\n        "x1": 0,\n        "y1": 0\n      }\n    }\n  ]\n}\n \n Each item in the frames array represents a widget frame (slot). \n \n \n pos - a position index (starts from zero); this value is used in\nAPIs to address specific widget on the page \n \n \n descr - widget frame description that is displayed in page\nconfiguration screen \n \n \n mainFrame - The primary frame on the page model \n \n \n defaultWidget - widget code for a default widget to use in this\nframe; page model developer can help out users and suggest the\ndefault widgets to use (e.g., header and footer widgets) \n \n \n sketch - an object with 4 coordinates on x and y axises; this allows\nthe developer to place the widgets on the visual representation of\nthe page model’s frames. \n \n \n Sketch’s x and y values go from 0 to 11 (similar to columns in\nBootstrap), so if you want to place a 2x2 frame at the top left corner\nof the page, the values would be x1: 0, x2: 1 y1: 0 y2: 1. \n After you create the JSON/XML schema for the widgets, you can start\nworking on the page template itself. It’s a HTML template that contains\nreferences to the frames you have added in schema. To add a frame in a\nspecific place of the page, just add  <@wp.show frame=0 /> , where frame\nis the pos variable from the schema. Do not forget to add\n <#assign wp=JspTaglibs["/aps-core"]>  at the top of your template, it\nwill provide access to wp variable. \n After you are done with your page model, go to Page designer > Page\ntree and create a new page by pressing “Add”. Fill the needed\ninformation and under Settings > Page Model select your newly created\npage model. Press “Save and Configure” and you will be redirected to the\npage configuration screen where you will be able to drag & drop the\navailable widgets onto the free frames. Set up your widgets (not all\nframes need to be filled) and publish the page. To see your page you can\npress “Preview” or go to\n `<YOUR_ENVIRONMENT_URL>/<LOCALE>/<PAGE_CODE>.page . If your pages\nshare common parts such as GTM scripts, consider using fragments.\nFragments are like shared code snippets - just add <@wp.fragment\ncode="<FRAGMENT_CODE>" escapeXml=false /> to your page template and\nthe code inside the fragment will be added to your page. \n Creating a new PDA MFE \n There are no limitations on the stack that could be used to create PDA\nMFEs. Custom Elements are a great way to hide implementation details\nwhile providing a neutral interface to others. To create a simple PDA\nMFE, implement your solution using technologies you are familiar with\nand wrap it in a custom element. Build your solution with a custom\nelement and upload the built files (Settings > File Browser) in\n/public/ folder. Go to  UX Pattern > Widget  section of the admin panel\nand press “Add” to add a new widget. Enter widget code, titles, select\ngroup (for free access to everybody, select “Free Access”), and fill the\nCustom UI: \n <#assign wp=JspTaglibs["/aps-core"]>\n<script src="<@wp.resourceURL />path/from/static/bundle.js"><\/script>\n<your-custom-element parameter=”value” />\n \n <#assign wp=JspTaglibs["/aps-core"]>  - provides access to wp variable\nthat is used to get resource URL. After you add the widget, go to the\npage tree, select a page where you would like to use the widget and\nconfigure it. Drag and drop the widget into a frame and publish the\npage. \n Communication between MFEs \n Communication between MFEs can be achieved using Custom Events. Each\nwidget can define events that it will emit and register to events that\nare important to it. \n const createWidgetEvent = eventType => {\n  return payload => {\n    const widgetEvent = new CustomEvent(eventType, { payload });\n    window.dispatchEvent(widgetEvent);\n  };\n};\n\n\nconst subscribeToWidgetEvent = (eventType, eventHandler) => {\n  window.addEventListener(eventType, eventHandler);\n  return () => {\n    window.removeEventListener(eventType, eventHandler);\n  };\n};\n \n Custom element then creates the events it emits and registers to the\nevents that it wants to react to \n constructor(props) {\n  super(props);\n\n  // other code\n\n  this.onClickSubmit = createWidgetEvent(‘myWidget.onSubmit’);\n}\n\nconnectedCallback() {\n\n  // other code\n\n  this.unsubscribeFromWidgetEvents = subscribeToWidgetEvent(\n    ‘otherWidget.onClickClear’,\n    () => {\n      // callback function when otherWidget fires the onClickClear custom event\n    }\n  }\n}\n Technical Documentation \n Micro Frontend Overview \n Task forms \n Widgets containing form (e.g., task completion form widget) use JSON\nschema to dynamically create forms. Widget implementation uses\nreact-jsonshema-form library that converts forms’ JSON schemas into\nReact components. Our initial implementation uses Material UI components\nvia Material UI theme library rjsf-material-ui as baseline and has\nEntando specific templates, widgets and fields (which are\nreact-jsonshema-form terms for parts of forms). In this section you will\nlearn about basic setup of the form, but if you would like to learn\nmore, please refer to react-jsonshema-form documentation. Themed JSON\nform is created using the withTheme() method from the\nreact-jsonschema-form package \n import { withTheme } from \'react-jsonschema-form\';\nimport { Theme as MuiRJSForm } from \'rjsf-material-ui\';\n\nconst JSONForm = props => {\n\n  const ThemedForm = withTheme(MuiRJSForm);\n\n  // ...\n\n  return (\n    <ThemedForm\n    schema={formSchema}\n    uiSchema={uiSchema}\n    {...customTemplates}\n    widgets={customWidgets}\n    formData={formData}\n    onSubmit={e => onSubmitForm(e)}\n    >\n  );\n};\n\nexport default JSONForm;\n \n For JSON Form to work, the form schema is mandatory. It’s a JSON\ndefinition of the form’s structure. Users can also provide form data via\nformData variable, which should follow the structure of JSON schema; and\nUI schema using uiSchema variable, which allows users to customise the\nform’s UI (components, rules, types, etc.) To test JSON schema, UI\nschema and form data, you can use react-jsonschema-form sandbox\nenvironment. Custom Entando templates, widgets, and fields provide a\npossibility to customise the layout of the form using Grid components.\nTo specify what area a field or subform should fill, users can provide\nsize parameter in UI schema’s ui:options object. Size refers to Material\nUI’s grid column widths (Material UI documentation) where the area the\nfrom can take up is divided into 12 columns and value 12 (a default\nvalue if size is not provided) means the field or subform should take up\nall 12 columns. That means that size should be a value from 1 to 12. If\ntwo fields that are next to each other have size values 8 and 4\nrespectively - they will fit into one row, first field being 2 times\nwider than the second field. User can also provide innerSize parameter\nto size the input inside the field. This helps with formatting - if user\nwants a two column layout and have smaller input fields inside these\ncolumns. Multicolumn layout can also be achieved using\ngenerateColumnedOFT(columnSize) functionality, basically providing the\ndefault columnSize to the created form. generateColumnedOFT returns an\nObjectFieldTemplate that is used as a template for all object fields\n(fields that contain properties inside of them). To help us understand\nthe mapping between JSON schema and UI schema lets define an example\nschema: \n {\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "$id": "http://entando.org/schemas/pda-form.json",\n  "title": "Mortgage Application Form",\n  "type": "object",\n  "properties": {\n    "Application": {\n      "title": "Application",\n    "type": "object",\n    "required": [],\n    "properties": {\n        "mortgageamount": {\n          "type": "integer",\n          "title": "Mortgage amount",\n          "description": "Mortgage amount"\n        },\n        "downpayment": {\n          "type": "integer",\n          "title": "Down Payment",\n          "description": "Down Payment"\n        },\n        "applicant": {\n          "title": "Applicant",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "name": {\n              "type": "string",\n              "title": "Name",\n              "description": "Name",\n              "maxLength": 100\n            },\n            "annualincome": {\n              "type": "integer",\n              "title": "Annual Income",\n              "description": "Annual Income"\n            }\n          }\n        },\n        "property": {\n          "title": "Property",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "age": {\n              "type": "integer",\n              "title": "Age of property",\n              "description": "Age of property"\n            },\n            "address": {\n              "type": "string",\n              "title": "Address of property",\n              "description": "Address of property",\n              "maxLength": 100\n               }\n          }\n        }\n      }\n    },\n    "inlimit": {\n      "type": "boolean",\n    "title": "Is mortgage application in limit?"\n    }\n  }\n}\n \n From this JSON (you can copy & paste it into the react-jsonschema-form\nsandbox) we can see that there is a main form with a title “Mortgage\nApplication Form”. Root “Mortgage Application Form” form has two\nproperties - one is a subform  Application  and the second one is just a\ncheckbox field (field ID is inlimit). Application subform contains 2\nfields: Mortgage amount (field ID is mortgageamount) and Down Payment\n(field ID is downpayment); and two subforms - Applicant (field ID is\napplicant) and Property (field ID is property). Applicant subform\ncontains 2 fields - Name (field ID is name) and Annual Income (field ID\nis annualincome). Property subform contains 2 fields - Age of property\n(field ID is age) and Address of property (field ID is address) By\ndefault (without providing UI schema) they are all listed one field per\nrow. To use Entando’s implementation of Grid layout, users have to\nprovide UI schema with details about each field. For example, if we\nwould like to have a layout that looks like this (fields are marked\n [ field name ] ): \n +----------------------------------------------------------------------------+\n| Mortgage Application Form                                                  |\n+----------------------------------------------------------------------------+\n| Application                                                                |\n+----------------------------------+-----------------------------------------+\n| [Mortgage amount]                | [Down Payment]                          |\n+----------------------------------+-----------------+-----------------------+\n| Applicant                                          | Property              |\n+----------------------------------+-----------------+-----------------------+\n| [Name]                           | [Annual Income] | [Age of property]     |\n+----------------------------------+-----------------+-----------------------+\n|                                                    | [Address of property] |\n+----------------------------------------------------+-----------------------+\n \n To set up the UI schema you have to define each field you want to\ncustomise by addressing using the field IDs - to add options to\nApplicant’s Name field, you will have to create an object tree going\nfrom root object through Application —> Applicant —> Name (using IDs\nit’s Application.applicant.name). UI schema for the table layout defined\nabove would look like this: \n {\n  Application: {\n    \'ui:options\': {\n      size: 12, // <-- this value is not mandatory as size is 12 columns-wide by default\n    },\n    mortgageamount: {\n      \'ui:disabled\': true, // <-- user can define fields disabled at UI schema level\n      \'ui:options\': {\n        size: 6, // <-- Mortgage amount field should take up half of the row\n      },\n    },\n    downpayment: {\n      \'ui:options\': {\n        size: 4, // <-- Down payment field should take up the other half of the row\n      },\n    },\n    applicant: {\n      \'ui:options\': {\n        size: 8, // <-- Applicant subform should take up 8 out of 12 columns\n      },\n      name: {\n        \'ui:options\': {\n          size: 8, // <-- Applicant name field should take up 8 columns in the 8 columns that Applicant subform occupies\n        },\n      },\n      annualincome: {\n        \'ui:options\': {\n          size: 4, // <-- Annual Income field taking up the remaining 4 columns\n        },\n      },\n    },\n    property: {\n      \'ui:options\': {\n        size: 4, // <-- Property subform should take up the remaining 4 out of 12 columns\n      },\n      // note that property\'s fields are not mentioned - defaulting them to 12 columns in are that is available to them\n    },\n  },\n};\n\nAs Material UI components are used for field templates, there might be a need to pass some Material UI options into the field. You can do that by adding muiProps object to the ui:options.\nFor example, if you would like to make the Down payment field resizable, you can add multiline: true to muiProps option. If you want to make the field take up multiple rows by default, add rows and rowsMax fields. The latter limits how many rows should be added until the scroll bar is shown.\ndownpayment: {\n  \'ui:options\': {\n    size: 4,\n    muiProps: {\n      multiline: true,\n      rows: 2,\n      rowsMax: 4\n    }\n  }\n}\n Widgets \n Different types of widgets can be applied by passing the type via\n"ui:widget". Property tells the form which UI widget should be used to\nrender a field. You can read about react-jsonschema-form supported\nwidgets here. \n Building From source \n Reference the component projects for instructions to build from source.\n https://github.com/entando/entando-process-driven-plugin \n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n https://github.com/entando/pda-redhatpam-engine \n https://github.com/entando/pda-core-engine \n Code Style \n See:  https://github.com/entando/entando-code-style \n Sonar \n https://sonarcloud.io/organizations/entando/projects \n'},{title:"Building a Docker Image for the Entando Core",frontmatter:{},regularPath:"/v6.1/tutorials/devops/build-core-image.html",relativePath:"v6.1/tutorials/devops/build-core-image.md",key:"v-beeab77c",path:"/v6.1/tutorials/devops/build-core-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"7/10/2020, 5:59:23 AM",content:" Building a Docker Image for the Entando Core \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will take you through the basic steps to create a docker\nimage from an Entando core application. A more detailed guide with\nadditional commands and configuration can be found here: \n https://github.com/entando-k8s/entando-de-app \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Build a docker image from the core app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n"},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/v6.1/tutorials/devops/external-database/",relativePath:"v6.1/tutorials/devops/external-database/README.md",key:"v-197d46c4",path:"/v6.1/tutorials/devops/external-database/",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando applicaiton is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Connect to an External Keycloak Instance",frontmatter:{},regularPath:"/v6.1/tutorials/devops/external-keycloak/",relativePath:"v6.1/tutorials/devops/external-keycloak/README.md",key:"v-43de24f2",path:"/v6.1/tutorials/devops/external-keycloak/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Get keycloak information",slug:"_1-get-keycloak-information"},{level:3,title:"2. Generate the secret",slug:"_2-generate-the-secret"},{level:3,title:"3. Upload the secret",slug:"_3-upload-the-secret"},{level:3,title:"4. Deploy the Entando6 application",slug:"_4-deploy-the-entando6-application"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Connect to an External Keycloak Instance \n Purpose \n This tutorial enables the Entando administrator to leverage an existing\nKeycloak instance. \n Requirements \n \n \n A Keycloak instance \n \n \n A realm named "entando" on that instance \n \n \n An admin user for the "entando" realm \n Steps \n 1. Get keycloak information \n Retrieve the relevant information from the Keycloak instance you want to\nuse. \n Specifically you will need: \n \n \n The username of the Keycloak admin that has admin rights to the\n"entando" realm, e.g entando-keycloak-admin \n \n \n The Keycloak admin password, e.g. password123 \n \n \n The base url for the Keycloak server, including the auth value, e.g.\n https://my-keycloak-instance.com/auth \n 2. Generate the secret \n You now need to generate a secret with name  keycloak-admin-secret \nusing the information retrieved from step 1. The Entando administrator\nwill automatically detect this secret by name, and use it to log onto\nthe provided Keycloak server. \n Here is an example of the secret you will need to construct: \n ---\napiVersion: v1\nstringData:\n    username: <the username of the Keycloak admin user for the "entando" realm>\n    password: <the password of this Keycloak admin user>\n    url: <the base url of the Keycloak service, typically ending with the path /auth>\nkind: Secret\nmetadata\n    name: keycloak-admin-secret\n    namespace: <your-app-namespace>\ntype: Opaque\n \n \n Note \n To encode your values, in bash, you can do\n echo <your-value> | base64 \n 3. Upload the secret \n Next upload the secret to the namespace where you want to deploy your\nEntando 6 instance. \n oc create -f my-secret.yaml -n <my-app-namespace>\n 4. Deploy the Entando6 application \n Now you are ready to deploy your Entando 6 application and the\nadministrator will reuse the  keycloak-admin-secret  secret to populate\nthe environment correctly. \n Conclusion \n You should now have a working Entando 6 instance using an external\nKeycloak server. \n'},{title:"Bundle and components details",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/ecr-bundle-details.html",relativePath:"v6.1/tutorials/ecr/ecr-bundle-details.md",key:"v-5ba28d60",path:"/v6.1/tutorials/ecr/ecr-bundle-details.html",headers:[{level:2,title:"Bundle convensions",slug:"bundle-convensions"},{level:2,title:"Descriptor File",slug:"descriptor-file"},{level:2,title:"Plugin Descriptor",slug:"plugin-descriptor"},{level:2,title:"Widget Descriptor",slug:"widget-descriptor"},{level:2,title:"Fragment Descriptor",slug:"fragment-descriptor"},{level:2,title:"Page Model Descriptor",slug:"page-model-descriptor"},{level:2,title:"Content Type Descriptor",slug:"content-type-descriptor"},{level:2,title:"Content Model Descriptor",slug:"content-model-descriptor"},{level:2,title:"Static Files",slug:"static-files"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Bundle and components details \n In order for the entando-component-manager to read the content of a\nbundle and install components, a  descriptor.yaml  file is required at\nthe root of the bundle package. \n Here is a generic bundle structure \n .\n├ descriptor.yaml\n├ resources/\n│ └ ...\n└ ... (folders reported in descriptor.yaml file)\n Bundle convensions \n \n \n The bundle descriptor file needs to be named  descriptor.yaml \notherwise the bundle will not be recognized. \n \n \n Static resources are not defined in the  descriptor.yaml  file as\nthey are by default read from a  resources  folder. If you need to\ninstall static resources, please follow the following convention. \n Descriptor File \n The descriptor file will aggregate all components inside and has the\nfollowing structure. \n \n Warning \n Remember the file needs to be named  descriptor.yaml . \n \n Descriptor.yaml. \n code: survey_bundle # The bundle ID\ndescription: This is the survey bundle # The description of the bundle\n\ncomponents: # All components will be here\nOptional. Use if the component requires a deployment\n  plugins:\n    - folder/you/want/my_plugin_descriptor.yaml\n    - folder/you/want/another_plugin_descriptor.yaml\nTo create widgets you will need to add references to the descriptor file\'s\n  widgets:\n    - widgets/my_widget_descriptor.yaml\n    - widgets/another_widget_descriptor.yaml\nTo create fragments, you will need to add references to the descriptor file\'s\n  fragments:\n    - fragments/my_fragment.yaml\nTo create Page Models you will need to add references to the descriptor file\'s\n  pageModels:\n    - pagemodels/my_page_model_descriptor.yaml\n    - pagemodels/another_page_model_descriptor.yaml\nTo create Content Types you will need to add references to the descriptor file\'s\n  contentTypes:\n    - contenttypes/my_content_type_descriptor.yaml\nTo create Content Models you will need to add references to the descriptor file\'s\n  contentModels:\n    - contentmodels/my_content_model_descriptor.yaml\n    - contentmodels/another_content_model_descriptor.yaml\nLabels on the system\n  labels:\n    - key: HELLO # This is the label identifier\n      titles: # The titles on the label\n        it: Mio Titolo # The title in Italian\n        en: My Title # The title in English\n Plugin Descriptor \n A plugin should be described using the  EntandoPlugin CustomResource\nformat . \n Here is an example, but check the CRD for details on the available\nfields. \n Plugin descriptor.yaml. \n kind: "EntandoPlugin"\napiVersion: "entando.org/v1alpha1"\nmetadata:\n  name: "my-plugin"\nspec:\n  image: "my-image"\n  replicas: 1\n  dbms: "postgresql"\n  roles:\n    - name: "task-list"\n      code: "task-list"\n    - name: "task-get"\n      code: "task-get"\n    - name: "connection-list"\n      code: "connection-list"\n    - name: "connection-get"\n      code: "connection-get"\n    - name: "connection-create"\n      code: "connection-create"\n    - name: "connection-delete"\n      code: "connection-delete"\n    - name: "connection-edit"\n      code: "connection-edit"\n  permissions: []\n  parameters: {}\n  ingressPath: "/myPath"\n  healthCheckPath: "/actuator/health"\n  securityLevel: "strict"\n  connectionConfigNames: []\n Widget Descriptor \n Here is an example of a widget descriptor \n Widget descriptor.yaml. \n code: another_todomvc_widget # The Widget identification\n\ntitles: # Widget\'s Titles\n  en: TODO MVC Widget # Title in English\n  it: TODO MVC Widget # Title in Italian\n\ngroup: free # The owner group of the widget\nOptional. The UI Path, the widget.ftl file will have the customUi content\ncustomUiPath: widget.ftl\nOptional. The Custom UI\ncustomUi: >-\n    <h1>My custom widget UI</h1>\nOptional. ConfigUI\nconfigUi:\n  customElement: todomvc-config # The name of the custom-element used to render the configUI\n  resources:\n    - <bundleid>/static/js/main.js # The resources necessary to the custom element to render the configUI, like the code\n Fragment Descriptor \n Fragment descriptor.yaml. \n code: my-fragment # The fragment identification\nOptional. The fragment content\nguiCode: >-\n  "<div>Here the content</div>"\nOptional. The GuiCode Path, the fragment.ftl file will have the guiCde conent in it\nguiCodePath: fragment.ftl\n Page Model Descriptor \n Page model descriptor.yaml. \n code: todomvc_page_model # The Page Model identification\ndescription: TODO MVC basic page model # The Page Model description\n\ntitles: # Page Model\'s Titles\n  en: TODO MVC PageModel # Title in English\n  it: TODO MVC PageModel # Title in Italian\nThe Page Model configuration\nconfiguration:\n  frames: # All frames\n    - pos: 0 # Frame position\n      description: Header # Frame description\n      sketch: # Frame sketch configuration\n        x1: 0\n        y1: 0\n        x2: 11\n        y2: 0\nA simplified way to define a Frame\n    - pos: 1\n      description: Breadcrumb\n      sketch: { x1: 0, y1: 1, x2: 11, y2: 1 }\nOptional. Define the Page Model Template in a separate file or inside the descriptor file with `template`\ntemplatePath: page.ftl\nOptional. Define the Page Model Template this way or in a separate file with `templatePath`\ntemplate: >-\n  <#assign wp=JspTaglibs[\\"/aps-core\\"]>\n  <!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.0 Transitional//EN\\">\n  <html>\n      <head>\n          <title><@wp.currentPage param=\\"title\\" /></title>\n      </head>\n      <body>\n          <h1><@wp.currentPage param=\\"title\\" /></h1>\n          <a href=\\"<@wp.url page=\\"homepage\\"/>\\">Home</a><br>\n          <div>\n              <h1>Bundle 1 Page Model</h1>\n              <@wp.show frame=0 />\n          </div>\n      </body>\n  </html>\n Content Type Descriptor \n For more details on the properties, refer to the Content Type\ndocumentation. \n Content-type descriptor.yaml. \n code: CNG\nname: Demo\nstatus: 0\n\nattributes:\n  - code: title\n    type: Text\n    name: Title\n    roles:\n      - code: jacms:title\n        descr: The main title of a Content\n    disablingCodes: []\n    mandatory: true\n    listFilter: false\n    indexable: false\n\n    enumeratorStaticItems: string\n    enumeratorStaticItemsSeparator: string\n    enumeratorExtractorBean: string\n\n    validationRules:\n      minLength: 0\n      maxLength: 100\n      regex: string\n      rangeStartString: string\n      rangeEndString: string\n      rangeStartStringAttribute: string\n      rangeEndStringAttribute: string\n      equalString: string\n      equalStringAttribute: string\n      rangeStartDate: string\n      rangeEndDate: string\n      rangeStartDateAttribute: string\n      rangeEndDateAttribute: string\n      equalDate: string\n      equalDateAttribute: string\n      rangeStartNumber: 0\n      rangeStartNumberAttribute: string\n      rangeEndNumber: 0\n      rangeEndNumberAttribute: string\n      equalNumber: 0\n      equalNumberAttribute:\n      ognlValidation:\n        applyOnlyToFilledAttr: false\n        errorMessage: Something\n        keyForErrorMessage: some\n        keyForHelpMessage: thing\n        ognlExpression: string\n Content Model Descriptor \n Content-model descriptor.yaml. \n id: 8880003\ncontentType: CNG\ndescription: Demo Content Model\nOptional. Define the Content Model Shape in a separate file or inside descriptor file with `contentShape`\ncontentShapePath:\nOptional. Define the Content Model Shape this way or in a separate file with `contentShapePath`\ncontentShape: >-\n  <article>\n    <h1>$content.Title.text</h1>\n    <h2>Demo content model</h2>\n    #if ( $content.MainBody.text != "" )\n    $content.MainBody.text\n    #end\n  </article>\n Static Files \n In order to upload static files, you will need to create a folder called\n resources/ , all files inside this folder will be uploaded in the same\nfolder structure that is inside. \n resources/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.css\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n On the structure mentioned above, the resulting files in the Entando\narchitecture will be: \n yourbundleid/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.js\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n \n Important \n yourbundleid  is the  code  property inside  descriptor.yaml \n \n So if you need to use the file in a widget or page model, use this FTL\ntag  <@wp.resourceURL /> : \n <img src="<@wp.resourceURL />yourbundleid/images/logo.png">\n<link rel="stylesheet" href="<@wp.resourceURL />yourbundleid/css/styles.css">\n<link rel="shortcut icon" href="<@wp.resourceURL />yourbundleid/images/favicon.ico" type="image/x-icon"/>\n<script type="application/javascript" src="<@wp.resourceURL />yourbundleid/js/script.js"><\/script>\n \n '},{title:"Filtering bundles",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/ecr-bundle-filters.html",relativePath:"v6.1/tutorials/ecr/ecr-bundle-filters.md",key:"v-861cc580",path:"/v6.1/tutorials/ecr/ecr-bundle-filters.html",headers:[{level:3,title:"Supported labels keys are:",slug:"supported-labels-keys-are"},{level:3,title:"Example",slug:"example"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Filtering bundles \n ECR bundles are filterable by component from App Builder user interface. \n \n Behind the scenes, filtering is done using the label-based filtering provided out of the box from Kubernetes. \n To enable filtering of a bundle, the custom-resource representing the bundle on the Entando Cluster needs to contain the correct labels. An important note on the values to add the the  labels  field, even if to correctly define a label in a k8s resource both the key and the value are required, from an Entando point of view only the key part of the label is used for filtering. The value could be set to anything, but our reccomendation is to use  "true"  for clarity and simplicity. \n Supported labels keys are: \n \n \n \n \n \n \n \n Label entry \n Description \n \n \n \n \n widget: "true" \n The bundle contains one or more microfrontends (widgets)  \n \n \n plugin: "true" \n The bundle contains one or more microservices (plugins) \n \n \n fragment: "true" \n The bundle contains one or more fragments \n \n \n page: "true" \n The bundle contains one or more pages \n \n \n pageTemplate: "true" \n The bundle contains one or more page templates \n \n \n contentType: "true" \n The bundle contains one or more content types \n \n \n contentTemplate: "true" \n The bundle contains one or more content templates \n Example \n Here an example of the metadata for a ecr bundle containg micro-frontends, some microservices, pages and page templates \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: demo-bundle\n  labels:\n    widget: "true"\n    plugin: "true"\n    page: "true"\n    pageTemplate: "true"\nspec:\n  details:\n  ...\n \n '},{title:"How to customize bundle info shown in Entando App Builder",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/ecr-bundle-presentation-config.html",relativePath:"v6.1/tutorials/ecr/ecr-bundle-presentation-config.md",key:"v-5ccc0800",path:"/v6.1/tutorials/ecr/ecr-bundle-presentation-config.html",lastUpdated:"6/26/2020, 10:59:44 AM",content:" How to customize bundle info shown in Entando App Builder \n \n In the image above you can see an example of a bundle as is displayed in the ECR user interface inside the Entando App Builder. \n The corresponding custom-resource file on Kubernetes is similar to this: \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: simple-entando-bundle\nspec:\n  details:\n    name: \"Entando Bundle\"\n    description: An example of an Entando bundle\n    dist-tags:\n      latest: v0.0.1\n    time:\n      created: '2020-05-20T15:59:21.946Z'\n      modified: '2020-05-20T15:59:21.946Z'\n      v0.0.1: '2020-05-20T15:59:21.946Z'\n    versions:\n      - v0.0.1\n    keywords:\n      - entando6\n    author: Entando\n    thumbnail: >-\n      data:image/jpeg;base64,....\n  tags:\n....\n \n In order to change the UI elements, you need to update the custom-resource in accordance with this table \n \n \n \n Field \n UI Element \n \n \n \n \n spec.details.name \n Set the bundle title \n \n \n spec.details.description \n Set the bundle description (only visible in the list presentation format) \n \n \n spec.details.thumbnail \n Set the bundle thumbnail, expressed as a base64 encoded string \n \n \n spec.details.dist-tags.latest \n Set what's the latest version of the bundle \n \n \n \n"},{title:"Overview",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/ecr-overview.html",relativePath:"v6.1/tutorials/ecr/ecr-overview.md",key:"v-7ab73f40",path:"/v6.1/tutorials/ecr/ecr-overview.html",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Glossary",slug:"glossary"},{level:3,title:"Component",slug:"component"},{level:3,title:"ECR Bundle",slug:"ecr-bundle"},{level:3,title:"EntandoDeBundle custom resource",slug:"entandodebundle-custom-resource"},{level:3,title:"Entando-component-manager",slug:"entando-component-manager"},{level:3,title:"Entando-K8S-service",slug:"entando-k8s-service"},{level:2,title:"Architecture",slug:"architecture"},{level:2,title:"Example flow",slug:"example-flow"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Overview \n Introduction \n The Entando Component Repository (ECR) is meant to be a repository to\nshare reusable components among different Entando instances. \n The following glossary relates to the ECR and related concepts: \n Glossary \n Component \n An Entando component - simply referred to as component - is a piece of\nreusable code/resource to be used in an Entando widget, page or\napplication. Examples of components are widgets, microfrontends,\ncontent-types, labels, plugins, and static resources \n ECR Bundle \n An ECR bundle - is a package containing one or more components and a\n'descriptor.yaml' file providing information about the bundle. The\nbundle is published on an NPM registry and is shared with an Entando\napplication using the EntandoDeBundle custom resource. \n EntandoDeBundle custom resource \n The EntandoDeBundle custom resource is a Kubernetes custom resource\nreadable by the Entando6 operator. It’s used to provide information\nabout an ECR bundle and make the bundle available in kubernetes for the\nentando-component-manager. \n Entando-component-manager \n The entando-component-manager - a.k.a component-manager is part of the\nEntando6 app and dialogs both with the Kubernetes cluster via the\nentando-k8s-service and with the entando-core. The\nentando-component-manager reads the bundles from the cluster and exposes\nthem via an API accessible from AppBuilder. The component-manager is\nalso responsible of the installation/removal of components from\nentando-core \n Entando-K8S-service \n The Entando-K8S-Service is part of the Entando infrastructure and is\nresponsible for the low-level communication with the K8S cluster API. \n Architecture \n \n From an architectural point of view, the ECR is composed of 1. The\nEntandoDeBundles which contain the metadata associated with a bundle 2.\nThe Entando-k8s-service which reads the bundles from the\ncluster/namspace(s) and serves them via a consumable API 3. The\nComponent-manager which creates the connection between the EntandoApp\nand the K8S-service. \n Example flow \n \n \n The user lands on the ECR page in app-builder and wants to see the\nlist of bundles shared with that EntandoApp \n \n \n AppBuilder asks the component-manager for the list of available\nbundles \n \n \n Component-manager queries the k8s-service to get the available\nbundles \n \n \n The k8s-service queries the cluster/namespace(s) it is able to read\nfrom for available bundles and returns the list to the\ncomponent-manager \n \n \n Component-manager returns a list to App-Builder \n \n \n The user is able to see the available bundles and is able to install\none or more of them \n \n \n"},{title:"Troubleshooting ECR",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/ecr-troubleshooting-guide.html",relativePath:"v6.1/tutorials/ecr/ecr-troubleshooting-guide.md",key:"v-176c11e4",path:"/v6.1/tutorials/ecr/ecr-troubleshooting-guide.html",headers:[{level:2,title:"A bundle installation/removal has failed, how to access the logs?",slug:"a-bundle-installation-removal-has-failed-how-to-access-the-logs"},{level:3,title:"Overview",slug:"overview"},{level:3,title:"Solution",slug:"solution"},{level:2,title:"My bundle has an issue, how should I publish a new version of the bundle?",slug:"my-bundle-has-an-issue-how-should-i-publish-a-new-version-of-the-bundle"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Solution",slug:"solution-2"},{level:2,title:"Bundle installation fails because a file has not been found in the bundle",slug:"bundle-installation-fails-because-a-file-has-not-been-found-in-the-bundle"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Solution",slug:"solution-3"},{level:2,title:"Bundle installation failed due to plugin(s) images not reachable",slug:"bundle-installation-failed-due-to-plugin-s-images-not-reachable"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Solution",slug:"solution-4"},{level:2,title:"I can't uninstall a bundle because some components are in use",slug:"i-can-t-uninstall-a-bundle-because-some-components-are-in-use"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Solution",slug:"solution-5"}],lastUpdated:"6/27/2020, 10:35:02 PM",content:" Troubleshooting ECR \n A bundle installation/removal has failed, how to access the logs? \n Overview \n Currently the Entando component manager logs are available in kubernetes via dashboard (openshift) or cli tools (k9s or kubectl).\nIf in you Entando cluster you have more than one Entando App custom resource, you will need to know what's the correct component-manager to check using the corresponding Entando App name and namespace where the app has been deployed. \n Solution \n Using  kubectl  and assuming for simplicity that you have only one Entando App named  quickstart  and your Entando cluster is only composed of one namespace, also named  quickstart ,\nyou can get the component-manager logs using the command \n kubectl logs -f deployment/quickstart-server-deployment --namespace quickstart -c de-container\n \n Note : the  -f  flag is optional and could be used to follow the logs for debugging purposes \n My bundle has an issue, how should I publish a new version of the bundle? \n Overview \n Sometimes a bundle could have some issues: typos in the  descriptor.yaml  file, wrong references of components or to not available docker images are just a few of the possible errors. \n Solution \n \n If the bundle is shared using a git repository, you can make the required changes to your project and publish the new version to git and generate a new tag for it. \n Once the new tag is published, update the bundle costum-resource avaialble in you Entando Cluster by adding the new tag to the  tags  objects  and replacing the latest  dist-tags  to point to this new version. \n Proceed with the new installation \n \n If you're actively working on your bundle and you simply want to verify things are working correctly, instead of generating a new tag for each release of the bundle you can try to keep overriding a specific tag using the git command  git tag -f . We suggest you to follow this practice only during development and not in production. \n Bundle installation fails because a file has not been found in the bundle \n Overview \n When a component that is referenced in the  descriptor.yaml  is missing in the bundle or not correctly referenced, the bundle installation fails and in the logs is reported which file has not been found. \n ERROR - File with name {filename} not found in the bundle\n Solution \n When such a problem happens, verify that the component referenced in the descriptor file are actually present in the bundle and that the reference is properly typed. \n Publish a new version of your bundle as described in the\n \"My bundle has an issue\"  section \n Bundle installation failed due to plugin(s) images not reachable \n Overview \n Plugin included in a bundle are referenced using their docker image. Sometime the image is not available - maybe has not yet be published or is in a private docker registry - and plugin installation can't happen and the entire bundle installation process can't finish successfully \n Solution \n Verify that the docker image you are referencing is correct and publicly available. \n \"My bundle has an issue\"  section \n I can't uninstall a bundle because some components are in use \n Overview \n When removing an installed bundle, the Entando component manager verfies that the bundle components\nare not in use by any other component. Removing such components would cause an error during removal\nas in certain case the deleting a component in use is not permitted. \n Solution \n In order to prevent such errors, the user is alerted and required to manually decouple the bundle\ncomponents before beign able to completely remove the bundle from the system. \n"},{title:"Create a local NPM registry for testing",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/how-to-create-local-npm-registry.html",relativePath:"v6.1/tutorials/ecr/how-to-create-local-npm-registry.md",key:"v-580c2f40",path:"/v6.1/tutorials/ecr/how-to-create-local-npm-registry.html",headers:[{level:2,title:"Start local nexus as a docker container",slug:"start-local-nexus-as-a-docker-container"},{level:2,title:"Setup a private npm registry",slug:"setup-a-private-npm-registry"},{level:2,title:"Setup npm-realm and user for publishing",slug:"setup-npm-realm-and-user-for-publishing"},{level:2,title:"Create the role",slug:"create-the-role"},{level:2,title:"Create the user",slug:"create-the-user"},{level:2,title:"Enable npm realm to support npm adduser or npm login",slug:"enable-npm-realm-to-support-npm-adduser-or-npm-login"},{level:2,title:"Configure NPM",slug:"configure-npm"},{level:2,title:"Config npm to use the local repository",slug:"config-npm-to-use-the-local-repository"},{level:2,title:"Login to the registry",slug:"login-to-the-registry"},{level:2,title:"Good to go",slug:"good-to-go"},{level:2,title:"Set the publish repository at package.json level",slug:"set-the-publish-repository-at-package-json-level"}],lastUpdated:"7/10/2020, 10:24:52 AM",content:' Create a local NPM registry for testing \n As a registry you can use whatever technology you prefer. Some examples\nare the  NPM official registry ,\n Verdaccio  or\n Nexus \n For development purposes, let’s start a local Nexus repository and set\nit up as NPM registry \n Start local nexus as a docker container \n Start by creating a volume to host all the data you will build in nexus.\nThis is useful to save the content even if you will remove the docker\ncontainer. You can follow two different approaches here: 1. You create a\ndocker volume and mount it (that’s the sonatype recommanded approach) 2.\nYou create a folder, change the modification to 777 and use that as a\nvolume \n By following the first approach, here are the commands you will need to\nissue in order to run Nexus as a docker container using the docker\ncommand \n docker volume create --name nexus-data\ndocker run -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n \n With the second approach, create a directory (e.g.  nexus-data ) and set\nthe own to UID 200 \n mkdir nexus-data && chown -R 200:200 nexus-data\ndocker run -d -p 8081:8081 --name nexus -v "$(pwd)/nexus-data":/nexus-data sonatype/nexus3\n \n Nexus should be available at your localhost at port 8081 \n Now you need to sign-in as an admin to configure Nexus and make it\nusable as a private npm repository. To do so, you need to get the admin\ncredential from inside the container. \n docker exec -it nexus cat /nexus-data/admin.password\n \n Now you can use the password to access your private nexus instance as an\nadmin and change the admin password to something easier for you to work\nwith. \n Setup a private npm registry \n \n NOTE : Nexus allows you to setup both a private registry and a\nproxy to an external registry. For development purposes, having only a\nprivate registry could make sense in order to retrieve only local\nmodules and not modules available on remote registries, though feel\nfree to setup also a proxy if you want to get access to npm modules\noutside of the private registry. Check out the\n documentation \non nexus website for further details. \n \n To setup a local repository: 1. Go to the\n Server administration and configuration  page 2. Go to repositories 3.\nCreate a new repository 4. Choose the  npm (hosted)  5. Provide a name\nand save \n \n NOTE : If you want you can also create a group repository to\nsupport search from multiple sources (local/proxies) at the same time. \n Setup npm-realm and user for publishing \n In order to be able to login and publish into a repository you need to \n \n Create a role to enable user publishing 2. Create a user and assign\nroles to them 3. Enable the NPM realm to support  npm adduser  or\n npm login  commands \n Create the role \n \n \n Go to  Security > Roles > Create role > Nexus Role \n \n \n Choose a role ID and name \n \n \n In the privileges, add the one required for publishing, e.g.\n nx-repository-view-npm-<your-repo>-* \n \n \n Save \n Create the user \n \n \n Go to  Security > Users > Create local user \n \n \n Add the relevant informations for your user, set the user  Active \nand add the role you created in the previous step \n Enable npm realm to support  npm adduser  or  npm login \n \n \n Go to  Security > Realms \n \n \n Add  the npm Bearer Token Realm  to the active column \n Configure NPM \n Config npm to use the local repository \n In order to use the private repository as default repository you need to\nconfigure npm accordingly (or use the  --registry=  option with all your\ncommands) \n npm config set registry http://localhost:8081/repository/<repo-name>/\n \n \n Note A : The trailing slash at the end of the repository is\nrequired for the repository to work \n \n \n Note B : This repository will be used for all the npm methods, so\nbare in mind that changing the global repository will potentially\nbreak other projects. If you want to avoid this, continue to use the\n --registry  option. \n Login to the registry \n You should be able to login to the registry using the login command \n npm login --registry=http://localhost:8081/repository/<repo-name>/\n Good to go \n You can now publish your own npm modules to the private registry using\nthe publish command \n npm publish --registry=http://localhost:8081/repository/<repo-name>/\n Set the publish repository at package.json level \n In your npm module you can also add to the  package.json  an entry to\nmake the private repository the default for publishing. Add this to your\npackage.json file \n   "publishConfig": {\n    "registry": "http://localhost:8081/repository/<repo-name>/"\n  }\n \n '},{title:"Bundle uninstall",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/ecr-uninstall-flow.html",relativePath:"v6.1/tutorials/ecr/ecr-uninstall-flow.md",key:"v-ddda39c0",path:"/v6.1/tutorials/ecr/ecr-uninstall-flow.html",headers:[{level:2,title:"Uninstall process",slug:"uninstall-process"},{level:2,title:"Troubleshooting",slug:"troubleshooting"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Bundle uninstall \n Uninstall process \n To uninstall a bundle that was previously installed on an Entando App Engine, from Entando App builder UI go to\nthe  Component Repository  tab and select the bundle you want to uninstall \n \n An initial check is made to verify none of the bundle components are in use.\nIf any of the components are in use, a popup will alert you.\nNote that you can't force the removal of a bundle if its components are in use. \n Once the removal process starts: \n \n Bundle resources are deleted from the Entando App Engine \n Components included in the bundle are removed from the Entando App Engine \n Plugins are unlinked \n Troubleshooting \n If any error happens during the uninstall process and you don't know what to do,\ncheck out the  Troubleshooting guide  or the  Entando Forum \n"},{title:"How to setup a Nexus instance on a Kubernetes cluster",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.html",relativePath:"v6.1/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.md",key:"v-cd20d140",path:"/v6.1/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.html",headers:[{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a namespace for nexus",slug:"_1-create-a-namespace-for-nexus"},{level:3,title:"2. Create the deployment file.",slug:"_2-create-the-deployment-file"},{level:3,title:"3. Create the deployment",slug:"_3-create-the-deployment"},{level:3,title:"4. Create a service for nexus",slug:"_4-create-a-service-for-nexus"},{level:3,title:"5. Access nexus",slug:"_5-access-nexus"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' How to setup a Nexus instance on a Kubernetes cluster \n Requirements \n \n \n A kubernetes cluster (that could be minikube, minishift, microk8s,\netc.) \n \n \n A dedicated namespace for nexus (we are going to use  nexus  as\ntarget namespace) \n Steps \n 1. Create a namespace for nexus \n We are going to deploy our nexus instance on a namespace called  nexus \n kubectl create namespace nexus\n 2. Create the deployment file. \n Let’s create a  Deployment.yaml  file to describe our nexus\ndeployment. \n Here things get a little bit different between nexus 2.x and nexus 3.x.\nIn both cases though we are going to use a volume mount for nexus-data,\nremember that this is going to be removed when the pod is removed. In\nproduction you should probably use some kind of persistent data. \n Nexus 2.x \n Here we are passing a few customizable ENV variable and adding a volume\nmount for nexus data. \n Deployment.yaml. \n     apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nexus\n      namespace: nexus\n    spec:\n      replicas: 1\n      template:\n        metadata:\n          labels:\n            app: nexus-server\n        spec:\n          containers:\n            - name: nexus\n              image: sonatype/nexus:latest\n              env:\n              - name: MAX_HEAP\n                value: "800m"\n              - name: MIN_HEAP\n                value: "300m"\n              resources:\n                limits:\n                  memory: "4Gi"\n                  cpu: "1000m"\n                requests:\n                  memory: "2Gi"\n                  cpu: "500m"\n              ports:\n                - containerPort: 8081\n              volumeMounts:\n                - name: nexus-data\n                  mountPath: /sonatype-work\n          volumes:\n            - name: nexus-data\n              emptyDir: {}\n Nexus 3.x \n For Nexus 3.x we dont use any custom env variables. You can check the\nofficial docker repo for the supported env variables. \n Deployment.yaml. \n     apiVersion: extensions/v1beta1\n    kind: Deployment\n    metadata:\n      name: nexus\n      namespace: nexus\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n            app: nexus-server\n      template:\n        metadata:\n          labels:\n            app: nexus-server\n        spec:\n          containers:\n            - name: nexus\n              image: sonatype/nexus3:latest\n              resources:\n                limits:\n                  memory: "4Gi"\n                  cpu: "1000m"\n                requests:\n                  memory: "2Gi"\n                  cpu: "500m"\n              ports:\n                - containerPort: 8081\n              volumeMounts:\n                - name: nexus-data\n                  mountPath: /nexus-data\n          volumes:\n            - name: nexus-data\n              emptyDir: {}\n 3. Create the deployment \n Now let’s create the deployment \n kubectl create -f Deployment.yaml\n \n You can check the deployment pod status with \n kubectl get pod -n nexus\n 4. Create a service for nexus \n Now you need to create a  Service.yaml  file that will to expose the\nnexus endpoint using NodePort. \n \n Note \n If you are on a cloud, you can expose the service using a load\nbalancer using the service type Loadbalancer. Also, the Prometheus\nannotations will help in service endpoint monitoring by Prometheus. \n \n Service.yaml. \n apiVersion: v1\nkind: Service\nmetadata:\n  name: nexus-service\n  namespace: devops-tools\n  annotations:\n      prometheus.io/scrape: \'true\'\n      prometheus.io/path:   /\n      prometheus.io/port:   \'8081\'\nspec:\n  selector:\n    app: nexus-server\n  type: NodePort\n  ports:\n    - port: 8081\n      targetPort: 8081\n      nodePort: 32000\n \n Now you can create the service \n kubectl create -f Service.yaml\n \n Check the service configuration using kubectl. \n kubectl describe service nexus-service -n devops-tools\n 5. Access nexus \n Now you will be able to access nexus on any of the Kubernetes node IP on\nport 32000/nexus as we have exposed the node port. For example, \n \n \n \n \n \n \n \n Service \n Url \n \n \n Nexus 2 \n http://35.144.130.153:32000/nexus \n \n \n Nexus 3 \n http://35.144.130.153:32000 \n \n \n \n \n Note \n For Nexus 2.x and Nexus 3 < 3.17 the default username and password\nwill be admin & admin123, while for Nexus 3 >= 3.17 you need to get\nthe password from within the container with\n cat /nexus-data/admin.password \n \n'},{title:"Use Blueprint generated plugin and microfrontend without a bundle",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.html",relativePath:"v6.1/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.md",key:"v-1df409ed",path:"/v6.1/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:2,title:"1. Generate an entity using the Blueprint",slug:"_1-generate-an-entity-using-the-blueprint"},{level:2,title:"2. Populate the bundle with the micro frontends",slug:"_2-populate-the-bundle-with-the-micro-frontends"},{level:2,title:"3. Generate a docker image for your microservice",slug:"_3-generate-a-docker-image-for-your-microservice"},{level:2,title:"4. Publish the Docker image to Docker registry (DockerHub or equivalent)",slug:"_4-publish-the-docker-image-to-docker-registry-dockerhub-or-equivalent"},{level:2,title:"5. Deploy the plugin in your Entando Cluster",slug:"_5-deploy-the-plugin-in-your-entando-cluster"},{level:2,title:"6. Wait for your plugin to be in Running state and link the plugin with the app using an EntandoAppPluginLink custom resource",slug:"_6-wait-for-your-plugin-to-be-in-running-state-and-link-the-plugin-with-the-app-using-an-entandoapppluginlink-custom-resource"},{level:2,title:"7. Upload the Microfrontend to your EntandoApp",slug:"_7-upload-the-microfrontend-to-your-entandoapp"},{level:2,title:"8. Create a fragment for keycloak",slug:"_8-create-a-fragment-for-keycloak"},{level:2,title:"9. Import the fragment into the head section of the used page template",slug:"_9-import-the-fragment-into-the-head-section-of-the-used-page-template"},{level:2,title:"10. Use the microfrontend and microservice",slug:"_10-use-the-microfrontend-and-microservice"}],lastUpdated:"7/31/2020, 4:10:03 AM",content:' Use Blueprint generated plugin and microfrontend without a bundle \n Purpose \n In this tutorial you will learn how to use the plugin and microfrontend generated using the Entando Blueprint\nin a running cluster without the need to include the components in a bundle \n Requirements \n \n \n A microservice built with the Entando Component Generator \n \n \n Node and NPM are installed on your machine (use LTS version) \n \n \n Docker is installed on your machine and you are able to upload images to docker-hub or an image repository of your\nchoice \n \n \n An Entando Cluster where to deploy the Entando Plugin with a working instance of Entando App Builder\nand Entando App Engine \n Steps \n 1. Generate an entity using the Blueprint \n In order to include auto-generated micro frontends to your bundle you\nwill need to use the  jhispter entity  generator. Let’s assume we want\nto generate a simple  Conference  entity. \n jhipster entity Conference\n \n Let’s use these options: \n \n \n One field of type  String  called  name  with no validation \n \n \n No relationships with other entities \n \n \n REST controller should use the repository directly \n \n \n No pagination for the entity \n 2. Populate the bundle with the micro frontends \n \n To populate the bundle with the generated micro frontends, run the\n ./buildBundle.sh  script or use the npm. \n npm run populate-bundle\n \n \n Important \n The bundle population with the micro frontends requires some time to\nbe processed. You should be able to follow the progress of the\noperation on screen. \n 3. Generate a docker image for your microservice \n JHipster uses the JIB Maven plugin to generate a docker image for your\nmicroservice. \n The name of the output image generated with JIB will be composed by: \n \n The organization you chose during the setup wizard (by default that\'s set to  entando ) \n The name of the application \n Version  0.0.1-SNAPSHOT \n \n You can build the docker image with this command \n ./mvnw -Pprod clean package jib:dockerBuild\n \n If for example during setup wizard you chose a custom organization  myorg  and the set the application name to  jhipster  the resulting docker image is going to be  myorg/jhipster:0.0.1-SNAPSHOT \n \n Note \n Output image name can be changed in the  pom.xml  file by providing the\nby providing a different value in the  plugins.plugin.jib-maven-plugin.configuration.to.image  tag \n \n  <plugin>\n   <groupId>com.google.cloud.tools</groupId>\n   <artifactId>jib-maven-plugin</artifactId>\n   <configuration>\n     \x3c!-- ... --\x3e\n     <to>\n       <image>\x3c!-- use a custom value here --\x3e</image>\n     </to>\n     \x3c!-- ... --\x3e\n   </configuration>\n </plugin>\n \n \n Note \n Output image name can also be changed temporarely\nby customizing in the  ./mvnw  command using the  -Djib.to.image \nparameter. For example, if you want to build an image with organization  myneworg , name  myapp  and version  latest  you can do \n ./mvnw -Pprod clean package jib:dockerBuild -Djib.to.image=myneworg/myapp:latest\n \n \n \n Warning \n If you change the target image of the docker build, remember to update\nthe plugin metadata in the bundle accordingly. \n 4. Publish the Docker image to Docker registry (DockerHub or equivalent) \n Let’s now publish the docker image for the microservice to make it\navailable later during bundle installation in the cluster. \n docker push <name-of-the-image:tag>\n 5. Deploy the plugin in your Entando Cluster \n Assuming you have an Entando Cluster available in an  entando  namespace, you can now take\nthe plugin custom resource generated by the Entando Blueprint in the  bundle/plugins  folder and deploy it\nin your  entando  namespace. \n \n Warning \n As stated at step 4, if you changed the target image of your docker build, the plugin custom resource\nin the  bundle/plugins  folder needs to be updated to point to the correct image \n \n From the jhipster project root \n cd bundle/plugins\n\nkubectl create -f <plugin-file.yaml> -n entando\n 6. Wait for your plugin to be in  Running  state and link the plugin with the app using an  EntandoAppPluginLink  custom resource \n Once the plugin server deployment will be up and running, you can create an  EntandoAppPluginLink custom resource \nto make the plugin API available from the EntandoApp domain.\nHere an example of a EntandoAppPluginLink custom resource. Some assumptions with this custom resource: \n \n The EntandoPlugin generated with the blueprint has name  my-demo-plugin \n The EntandoApp where I want to expose the  my-demo-plugin  apis is named  my-entando-app \n Both are deployed on the  entando  namespace. \n As a name for the link, I\'ll use  my-entando-app-to-my-demo-plugin-link \n \n \n Warning \nRemember to change the fields to match your setup. \n \n > cat <<EOF > /tmp/mylink.yaml\napiVersion: entando.org/v1\nkind: EntandoAppPluginLink\nmetadata:\n  name: my-entando-app-to-my-demo-plugin-link\n  namespace: entando\nspec:\n  entandoAppName: my-entando-app\n  entandoAppNamespace: entando\n  entandoPluginName: my-demo-plugin\n  entandoPluginNamespace: entando\nEOF\n \n Now add this link to your environment \n kubectl create -f /tmp/my-link.yaml -n entando\n \n A new link deployer will start and will work behind the scenes to add your plugin  ingressPath  (this is part of the\nplugin  spec ) to the EntandoApp ingress \n 7. Upload the Microfrontend to your EntandoApp \n Now that the the plugin and the app are linked together, you can proceed to generate the Micro Frontend from the App Builder\nand upload the static resources like  js  and  css  files. \n \n From AppBuilder access the File browser and create a new folder in the  public  folder and name like the name of the bundle (is the  code  field available\nin the  /bundle/descriptor.yaml  file of the blueprint project) or using a custom name, e.g.  demo-widget \n \n \n Warning \nIf you choose to use a custom folder, remember to update the references in the customUI of the widget later \n \n \n Upload all the resources generated in  step 2 of this guide  and available in the  /bundle/resources  folder\nof the blueprint project into the  demo-widget  folder of Entando App Builder file browser. \n \n \n Warning \nYou can decide to recreate the folder structure as the one in  /bundle/resources  or not, but you need to update the\nreferences in the customUi / configUI of the widget later \n \n \n Create the widget component from the  UX Patterns > Widgets  page. You can use whatever title you want, but for\nthe customUI copy the one generated in  step 2 of this guide  for one of the widgets you generated.\nAs an example, the customUI for the  detailWidget  of the conference entity is available in\n /bundle/ui/widgets/conference/detailsWidget/conference-details-widget.ftl \n \n \n Warning \nRemember to update all the references in the customUI to use the custom folder structure you defined in steps 7.1 and 7.2 \n \n \n You will need to update the service-url of your widgets to reflect the ingress path to your microservice created above. This path can be set on your customer element if you set it up during blueprint generation. For example, \n \n Create the widget on app-builder, you can see the right custom element to use into public/index.html\n\n\tUpdate the service-url value with the relative path of your service if you\'re deploying a bundle\n\t\tEx. <car-table service-url="/newBp/api"  />\n\tOr use the full path if you\'re deploying the BE and FE individually\n\t\tEx. <car-table service-url="http://newbp-plugin-entando.192.168.64.7.nip.io/newBp/api"/>\n 8. Create a fragment for keycloak \n \n In the App Builder go to  UX Patterns --\x3e Fragments . \n Select Add \n For the code enter  keycloak. \n Place the freemarker template below into the Gui Code field. \n \n <script src="http://ROUTE_TO_KEYCLOAK/auth/js/keycloak.js"><\/script>\n\t<script>\n\t  const keycloak = Keycloak(\'/entando-de-app/keycloak.json\');\n\t  function createKcDispatcher(payload) {\n\t    return () =>\n\t      window.dispatchEvent(\n\t        new CustomEvent("keycloak", { detail: payload })\n\t      );\n\t  }\n\t  keycloak.onReady = createKcDispatcher({ eventType: "onReady" });\n\t  keycloak.onAuthSuccess = createKcDispatcher({\n\t    eventType: "onAuthSuccess"\n\t  });\n\t  keycloak.onAuthError = createKcDispatcher({\n\t    eventType: "onAuthError"\n\t  });\n\t  keycloak.onAuthRefreshSuccess = createKcDispatcher({\n\t    eventType: "onAuthRefreshSuccess"\n\t  });\n\t  keycloak.onAuthRefreshError = createKcDispatcher({\n\t    eventType: "onAuthRefreshError"\n\t  });\n\t  keycloak.onAuthLogout = createKcDispatcher({\n\t    eventType: "onAuthLogout"\n\t  });\n\t  keycloak.onTokenExpired = createKcDispatcher({\n\t    eventType: "onTokenExpired"\n\t  });\n\t  const onInit = createKcDispatcher({ eventType: "onInit" });\n\t  window.entando = {\n\t    ...(window.entando || {}),\n\t    keycloak\n\t  };\n\t  window.entando.keycloak.init({ onLoad: "check-sso" }).success(onInit);\n\t<\/script>\n 9. Import the fragment into the head section of the used page template \n Add the following freemarker snippet to the page template you are using for your pages. \n <@wp.fragment code="keycloak" escapeXml=false />\n 10. Use the microfrontend and microservice \n You can now use your micro frontend and your microservice in your Entando App. \n'},{title:"Creating an Entando Component Repository (ECR) bundle using npm registry",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.html",relativePath:"v6.1/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.md",key:"v-af750026",path:"/v6.1/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a bundle folder",slug:"_1-create-a-bundle-folder"},{level:3,title:"2. Add a descriptor.yaml file",slug:"_2-add-a-descriptor-yaml-file"},{level:3,title:"3. Add a simple component to the bundle",slug:"_3-add-a-simple-component-to-the-bundle"},{level:3,title:"4. Make the bundle an NPM module to be hostable on an NPM registry.",slug:"_4-make-the-bundle-an-npm-module-to-be-hostable-on-an-npm-registry"},{level:3,title:"5. Publish the bundle on an NPM registry",slug:"_5-publish-the-bundle-on-an-npm-registry"},{level:3,title:"6. Create the EntandoDeBundle custom resource for Kubernetes",slug:"_6-create-the-entandodebundle-custom-resource-for-kubernetes"},{level:3,title:"7. Upload the bundle to Kubernetes",slug:"_7-upload-the-bundle-to-kubernetes"},{level:2,title:"Conclusion",slug:"conclusion"},{level:2,title:"Resources",slug:"resources"}],lastUpdated:"12/15/2020, 3:24:13 PM",content:' Creating an Entando Component Repository (ECR) bundle using npm registry \n Purpose \n Generate a simple Entando Component Repository (ECR) bundle shareable in an Entando 6 environment using npm registry \n Requirements \n You can create the bundle using you favorite text/code editor. To share the bundle you will need: \n \n Node / NPM \n An NPM registry where to upload the bundle \n A K8S cluster where to upload the bundle (e.g. minikube, microk8s, minishift) configured correctly for Entando 6 \n A namespace in the cluster reachable from the operator and entando-k8s-service \n The  entando-bundle-cli  command-line tool to generate the necessary metadata to share the bundle in a Kubernetes cluster \n Steps \n 1. Create a bundle folder \n To start, let’s create a new folder to host your bundle. \n mkdir example-bundle && cd example-bundle\n 2. Add a descriptor.yaml file \n For a bundle to be readable by the ECR it will need at least a  descriptor.yaml  file in the folder. Let’s create it with some minimal information. \n vim descriptor.yaml\n \n Here is some content for your base descriptor. \n code: example-bundle\ndescription: This is an example of an Entando 6 bundle\n\ncomponents:\n 3. Add a simple component to the bundle \n This bundle will contains only a simple widget. \n Let’s first create the widget metadata in a dedicated folder. \n mkdir widgets\n\nvim widgets/example-widget.yaml\n \n Now let’s populate the  example-widget.yaml  metadata with some content: \n code: example-widget\ntitles:\n  en: Example Widget\n  it: Widget d\'esempio\ngroup: free\ncustomUi: <h2>Hi from Example Widget</h2>\n \n Finally, add a reference to this widget in the bundle  descriptor.yaml  file. \n code: example-bundle\ndescription: This is an example of a Entando 6 bundle\n\ncomponents:\n    widgets:\n        - widgets/example-widget.yaml\n 4. Make the bundle an NPM module to be hostable on an NPM registry. \n From the bundle root, initialize a  package.json  file \n npm init\n \n Follow the instructions on screen. Here is an example of a possible  package.json  file: \n {\n  "name": "example-bundle",\n  "version": "1.0.0",\n  "description": "An example of an Entando6 bundle",\n  "license": "LGPL-2.1",\n  "main": "descriptor.yaml",\n  "keywords": [\n    "entando6",\n    "digital-exchange",\n    "entando-de-bundle"\n  ]\n}\n \n \n Note \n Try to keep the name of the published bundle the same as the bundle code in the descriptor.yaml file to avoid confusion. \n 5. Publish the bundle on an NPM registry \n Now your bundle is ready to be published on an NPM registry. \n From the root of the bundle (where the package.json and descriptor.yaml files are) you can issue an  npm publish  command. \n \n Important \n It would be ideal to have a private npm registry to upload this into.\nCheck the  resources section  for more details; \n \n npm publish --registry=<your-registry>\n 6. Create the EntandoDeBundle custom resource for Kubernetes \n Assuming the "entando-bundle-cli" command-line utility is already installed and available globally on your system, you can now convert the module into an EntandoDeBundle K8S custom resource. We assume you have a namespace in a Kubernetes cluster which is readable from the Entando Operator and you have the permissions to create resources there. Let’s call this namespace  accessible-ns \n You can also provide a thumbnail for your bundle using  --thumbnail-url=<your-thumbnail-url . \n entando-bundle from-npm @entando/example-bundle --name=example-bundle --namespace=accessible-ns --dry-run > example-bundle.yaml\n 7. Upload the bundle to Kubernetes \n Now you simply need to upload the bundle into Kubernetes. \n kubectl create -f example-bundle.yaml\n Conclusion \n You should now have the bundle available in your cluster and accessible from the App Builder. \n Resources \n \n \n Setup a local npm registry for testing\npurposes \n \n \n Entando Bundle CLI\nproject \n \n \n'},{title:"Microfrontends",frontmatter:{sidebarDepth:2},regularPath:"/v6.1/tutorials/micro-frontends/",relativePath:"v6.1/tutorials/micro-frontends/README.md",key:"v-09fe236b",path:"/v6.1/tutorials/micro-frontends/",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Tutorials",slug:"tutorials"}],lastUpdated:"12/15/2020, 3:24:13 PM",content:" Microfrontends \n Introduction \n \n The idea behind Micro Frontends is to think about a website or web app as  a composition of features  which are owned by  independent teams . Each team has a  distinct area of business  or  mission  it cares about and specialises in. A team is  cross functional  and develops its features  end-to-end , from database to user interface. \n —  Michael Geers,  micro-frontends.org \n \n Think of micro frontends as the implementation of a microservices architecture applied to the full web application that extends all the way to the frontend. \n Entando implements micro frontends based on  Web Components , a set of technologies that allow developers to create reusable custom elements supported by all major internet browsers. \n Web Components can work with vanilla JavaScript as well as with the most popular web frameworks (e.g., React, Angular, and Vue). \n Entando's microservice and micro frontend architecture allows developers to work with their favorite technology stack, and makes it easier for companies to integrate disparate applications. \n Tutorials \n \n \n Create a React Micro Frontend \n \n \n Create an Angular Micro Frontend \n \n \n Add an App Builder configuration screen to a\nwidget \n \n \n Display widget configuration \n \n \n The Entando Blueprint generated widgets \n \n \n Communicate Between Micro Frontends \n \n \n Widget authentication with Keycloak \n \n \n"},{title:"Creating an Entando Component Repository (ECR) bundle from Blueprint",frontmatter:{},regularPath:"/v6.1/tutorials/ecr/tutorials/from-blueprint-to-de.html",relativePath:"v6.1/tutorials/ecr/tutorials/from-blueprint-to-de.md",key:"v-be5aa166",path:"/v6.1/tutorials/ecr/tutorials/from-blueprint-to-de.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Generate an entity",slug:"_1-generate-an-entity"},{level:3,title:"2. Populate the bundle with the micro frontends",slug:"_2-populate-the-bundle-with-the-micro-frontends"},{level:3,title:"3. Generate a docker image for your microservice",slug:"_3-generate-a-docker-image-for-your-microservice"},{level:3,title:"4. Publish the Docker image to Docker registry (DockerHub or equivalent)",slug:"_4-publish-the-docker-image-to-docker-registry-dockerhub-or-equivalent"},{level:3,title:"5. Publish the bundle to an Npm registry",slug:"_5-publish-the-bundle-to-an-npm-registry"},{level:3,title:"6. Generate the EntandoDeBundle Kubernetes custom resource",slug:"_6-generate-the-entandodebundle-kubernetes-custom-resource"},{level:3,title:"7. Deploy the EntandoDeBundle custom resource on the cluster",slug:"_7-deploy-the-entandodebundle-custom-resource-on-the-cluster"},{level:2,title:"Conclusion",slug:"conclusion"},{level:2,title:"Resources",slug:"resources"}],lastUpdated:"7/10/2020, 10:24:52 AM",content:" Creating an Entando Component Repository (ECR) bundle from Blueprint \n Purpose \n In this tutorial you will learn how to generate an ECR bundle from a microservice generated using the JHipster’s Entando Blueprint. \n Requirements \n \n \n A microservice built with the Entando Blueprint \n \n \n Node and NPM are installed on your machine \n \n \n An NPM registry where to upload the bundle (must be logged in) \n \n \n Docker installed on your machine and you are able to upload images\nto docker-hub \n Steps \n \n Note \n In this tutorial we will assume you have generated at least an entity for your microservice. \n 1. Generate an entity \n In order to include auto-generated micro frontends to your bundle you will need to use the  jhispter entity  generator. Let’s assume we want to generate a simple  Conference  entity. \n jhipster entity Conference\n \n Let’s use these options: \n \n \n One field of type  String  called  name  with no validation \n \n \n No relationships with other entities \n \n \n REST controller should use the repository directly \n \n \n No pagination for the entity \n 2. Populate the bundle with the micro frontends \n To populate the bundle with the generated micro frontends, run the  ./buildBundle.sh  script or use the npm. \n npm run populate-bundle\n \n \n Important \nThe bundle population with the micro frontends requires some time to be processed. You should be able to follow the progress of the operation on screen. \n 3. Generate a docker image for your microservice \n JHipster uses the JIB Maven plugin to generate a docker image for your microservice. \n By default the output image will use the name of your application and the  0.0.1-SNAPSHOT  tag, eg.  entando/jhipster@0.0.1-SNAPSHOT . \n ./mvnw -Pprod clean package jib:dockerBuild [-Djib.to.image=<your-image-name]\n \n \n Note \n By default the organization used to generate the docker image is  entando , but you can provide a custom value during project initialization, as well as by changing the  pom.xml  file or by providing the  -Djib.to.image=<org>/<name>:<version>  to the  jib:dockerBuild  command. \n \n \n Note \n Output image name is generated using the organization value defined during project initialization. You can override the provided values by altering the  pom.xml  file or by customizing the  -Djib.to.image  parameter used in the  ./mvnw  command \n \n \n Warning \n If you manually override the target image of the docker build, remember to update the plugin metadata in the bundle accordingly. \n 4. Publish the Docker image to Docker registry (DockerHub or equivalent) \n Let’s now publish the docker image for the microservice to make it available later during bundle installation in the cluster. \n docker push <name-of-the-image:tag>\n 5. Publish the bundle to an Npm registry \n Now let’s publish the bundle to your private NPM registry. \n cd bundle/\n\nnpm publish . --registry=<your-private-registry-url>\n 6. Generate the EntandoDeBundle Kubernetes custom resource \n You should now be able to generate an EntandoDeBundle custom resource using the  entando-bundle  command-line tool. \n \n Warning \n Make sure both the NPM registry where you published the bundle and the Docker registry where you published the docker image are accessible in read mode without restrictions. \n \n entando-bundle from-npm <your-bundle-name> --dry-run --registry=<your-private-registry> [--name=<custom-name>] [--namespace=<namespace-to-deploy>] > jhipster-bundle.yaml\n 7. Deploy the EntandoDeBundle custom resource on the cluster \n Finally, let’s deploy the previously generated custom resource on the Kubernetes/OpenShift cluster \n kubectl create -f jhipster-bundle.yaml\n Conclusion \n You should now have the bundle available in your cluster and accessible from App Builder. \n Resources \n \n \n Setup a local npm registry for testing\npurposes \n \n \n Entando Bundle CLI\nproject \n \n \n Entando blueprint \n \n \n"},{title:"Create an Angular Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/v6.1/tutorials/micro-frontends/angular.html",relativePath:"v6.1/tutorials/micro-frontends/angular.md",key:"v-3b0f49bc",path:"/v6.1/tutorials/micro-frontends/angular.html",headers:[{level:2,title:"Create Angular App",slug:"create-angular-app"},{level:3,title:"Convert to Custom Element",slug:"convert-to-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widget",slug:"add-widget"},{level:3,title:"See It in Action",slug:"see-it-in-action"}],lastUpdated:"7/10/2020, 12:19:38 PM",content:" Create an Angular Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n \n \n Tested Versions \n node v13.8.0 → We suggest using  nvm  to handle node installations. \n Create Angular App \n Install Angular CLI. \n npm   install  -g @angular/cli\n \n Generate a new angular application. \n ng new angular-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-widget\n \n ng serve\n \n This is the expected output: \n angular-widget\n├── e2e\n│   └── src\n│       ├── app.e2e-spec.ts\n│       └── app.po.ts\n│\n├── node_modules\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   └── app.module.ts\n│   │\n│   ├── assets\n│   │   └── .gitkeep\n│   │\n│   ├── environment\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   │\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   └── test.ts\n│\n├── .editorconfig\n├── .gitignore\n├── angular.json\n├── browserlist\n├── karma.conf.js\n├── package.json\n├── README.md\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.spec.json\n└── tslint.json\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n WARNING \n Install the Angular elements package using  ng add , not with  npm install  as it runs additional steps behind the scenes like adding the  document-register-element  polyfill. \n \n TIP \n Angular elements are Angular components packaged as custom elements (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way. \n \n Open  angular-widget/src/app/app.component.ts . \n \n Here's what the initial file looks like: \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule  }   from   '@angular/core' ; \n\n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  bootstrap :   [ AppComponent ] \n } ) \n export   class   AppModule   {   } \n \n Replace the entire file with: \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-widget' ,  el ) ; \n   } \n } \n \n \n In the initial file,  AppComponent  is bootstrapped directly during application launch. \n In the updated file, we booststrap our custom element using the  ngDoBootstrap()  method . \n \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Test Micro Frontend \n Now, let's check our custom element to see if it's working. \n Open  angular-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-widget /> . \n <! doctype   html > \n < html   lang = \" en \" > \n < head > \n   < meta   charset = \" utf-8 \" > \n   < title > AngularWidget </ title > \n   < base   href = \" / \" > \n   < meta   name = \" viewport \"   content = \" width=device-width, initial-scale=1 \" > \n   < link   rel = \" icon \"   type = \" image/x-icon \"   href = \" favicon.ico \" > \n </ head > \n < body > \n   < angular-widget   /> \n </ body > \n </ html > \n \n Congratulations! \n You’re now running  Angular  in a containerized micro frontend. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate an  angular-widget/dist  directory. \n If we assume browser support for  ES6 (ECMAScript 2015) , we can focus on the following JavaScript files to publish our app: \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Generated Build Files \n --outputHashing=none  generates files without hashes so we can deploy new versions of the micro frontend without having to reconfigure our widget in Entando to point to the newly built files. \n \n If you want to use file names with content hashes to avoid potential caching issues in your browser, you can update the  Custom UI  field of your widget after building new versions of your micro frontend. Widget configuration is covered in the next section. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Configuration  at the upper right hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  angular-widget \n \n \n Click  Save . \n \n \n Click  angular-widget . \n \n \n Click 'Upload Files`. \n \n \n Upload the following files from  angular-widget/dist/angular-widget : \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Add Widget \n \n \n Go to  Entando App Builder  in your browser. \n \n \n Click  UX Patterns  →  Widgets  at the top nav. \n \n \n Click  Add  at the upper right. \n \n \n Enter the following: \n \n \n \n \n Title: Angular Widget  → for both English and Italian languages \n Code: angular_widget  → note: dashes are not allowed \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/runtime-es2015.js \" > </ script > \n\n < angular-widget   /> \n \n \n Click  Save . \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n See It in Action \n Let's see the Angular micro frontend in action on our page. \n Add Page \n Note \n If you've already configured your home page: \n \n   Next to the  Home  folder, under  Actions , click  Configure . \n   Skip to the  Add Widget  section. \n \n \n Let's add our widget to the  Home  page. \n \n \n Click  Page Designer  →  Page Tree  at the top nav. \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n Add Widget \n \n \n In the Search field in right-hand sidebar, enter  Angular Widget . \n \n \n Drag and drop  Angular Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n Congratulations! \n You now have an Angular micro frontend running in Entando. \n \n"},{title:"Communicate Between Micro Frontends",frontmatter:{sidebarDepth:2},regularPath:"/v6.1/tutorials/micro-frontends/communication.html",relativePath:"v6.1/tutorials/micro-frontends/communication.md",key:"v-ca77df0c",path:"/v6.1/tutorials/micro-frontends/communication.html",headers:[{level:2,title:"Publisher",slug:"publisher"},{level:3,title:"Create Custom Event",slug:"create-custom-event"},{level:3,title:"Update React App to Dispatch Event",slug:"update-react-app-to-dispatch-event"},{level:3,title:"Test Event Dispatcher",slug:"test-event-dispatcher"},{level:2,title:"Subscriber",slug:"subscriber"},{level:3,title:"Add Event Listener",slug:"add-event-listener"},{level:3,title:"Display Custom Event",slug:"display-custom-event"},{level:3,title:"Test Event Listener",slug:"test-event-listener"},{level:2,title:"Add Widgets to App Builder",slug:"add-widgets-to-app-builder"},{level:3,title:"Create Environment File",slug:"create-environment-file"},{level:3,title:"Run npm build",slug:"run-npm-build"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widgets",slug:"add-widgets"},{level:3,title:"Add Page Template",slug:"add-page-template"},{level:3,title:"View on Homepage",slug:"view-on-homepage"},{level:2,title:"Angular to React",slug:"angular-to-react"},{level:3,title:"Create Angular Publisher",slug:"create-angular-publisher"},{level:3,title:"Add to App Builder",slug:"add-to-app-builder"}],lastUpdated:"7/14/2020, 4:40:55 PM",content:" Communicate Between Micro Frontends \n Recommended Learning \n \n Tutorial:  Create a React Micro Frontend \n Tutorial:  Create an Angular Micro Frontend \n \n \n Entando supports communication between micro frontends using  Custom Events , an established web standard. In this tutorial, we'll build: \n \n A React micro frontend that publishes an event \n A React micro frontend that listens to an event \n An Angular micro frontend that publishes an event to a React micro frontend \n Publisher \n Create a simple app to publish an event. \n npx create-react-app publisher-widget --use-npm\n \n Start the app. \n cd  publisher-widget\n \n npm  start\n Create Custom Event \n Next, add event firing logic. \n Add a new file  publisher-widget/src/PublisherWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   PublisherWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . onGreet   =   name   =>   this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App onGreet = { this . onGreet }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'publisher-widget' ,  PublisherWidgetElement ) ; \n\n export   default  PublisherWidgetElement ; \n \n \n In the  CustomEvent  constructor,  detail  is the specific name to use in the event payload, as per the  DOM specification . \n Import Custom Element \n Update  publisher-widget/src/index.js . \n import   './index.css' ; \n import   './PublisherWidgetElement' ; \n Test Custom Element \n Update  publisher-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < publisher-widget   /> \n    ...\n   </ body > \n Update React App to Dispatch Event \n Update  publisher-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n class   App   extends   React . Component   { \n   constructor ( props )   { \n     super ( props ) ; \n     this . state  =   {  name :   '' } ; \n   } \n\n   handleNameChange ( value )   { \n     this . setState ( prevState   =>   ( { \n       ... prevState , \n      name :  value , \n     } ) ) ; \n   } \n\n   render ( )   { \n     const   {  name  }   =   this . state ; \n     const   {  onGreet  }   =   this . props ; \n     return   ( \n       < div > \n         < h1 > Send a greeting < / h1 > \n         < label htmlFor = \"name\" > Name < / label > \n         < input id = \"name\"  onChange = { e   =>   this . handleNameChange ( e . target . value ) }  value = { name }   / > \n         < button onClick = { ( )   =>   onGreet ( name ) } > Say hello ! < / button > \n       < / div > \n     ) ; \n   } \n } \n\n export   default  App ; \n Test Event Dispatcher \n In the JavaScript console of your browser, enter: \n window . addEventListener ( 'greeting' ,   ( evt )   =>  console . log ( 'Hello' ,  evt . detail . name ) ) \n \n Write something in the text field. Click the \"Say hello!\" button and take a look at the JS console. It will show the event message. \n Congratulations! \n You’ve now published a custom event. \n Subscriber \n Next, let’s create the subscriber. \n npx create-react-app subscriber-widget --use-npm\n \n Start the app. \n cd  subscriber-widget\n \n npm  start\n Add Event Listener \n Add a new file  subscriber-widget/src/SubscriberWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   SubscriberWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . name  =   null ; \n     this . subscribeToWidgetEvent ( EVENTS . greeting ,   ( evt )   =>   this . onGreeting ( evt . detail . name ) ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   subscribeToWidgetEvent ( eventType ,  eventHandler )   { \n    window . addEventListener ( eventType ,  eventHandler ) ; \n   } \n\n   onGreeting ( name )   { \n     this . name  =  name ; \n     this . render ( ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App name = { this . name }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'subscriber-widget' ,  SubscriberWidgetElement ) ; \n\n export   default  SubscriberWidgetElement ; \n Import Custom Element \n Update  subscriber-widget/src/index.js . \n import   './index.css' ; \n import   './SubscriberWidgetElement' ; \n Test Micro Frontend \n Update  subscriber-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < subscriber-widget > \n    ...\n   </ body > \n Display Custom Event \n Update  subscriber-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n function   App ( {  name  } )   { \n   return  name  ?   ( < h2 > Just got a greeting  from   { name } < / h2 > ) \n     :   ( < h2 > Waiting  for  a greeting ... < / h2 > ) ; \n } \n\n export   default  App ; \n Test Event Listener \n In the JavaScript console of your browser, enter: \n const  widgetEvent  =   new   CustomEvent ( 'greeting' ,   { \n  detail :   { \n    name :   'Pippo' \n   } , \n } ) ; \nwindow . dispatchEvent ( widgetEvent ) ; \n \n The custom event should now display in the  subscriber-widget . \n Congratulations! \n You’ve now created a micro frontend that listens to custom events. \n Add Widgets to App Builder \n Now let's add the publisher and subscriber micro frontends in Entando. \n \n Note: These are the same steps as the  Create a React Micro Frontend  tutorial. \n Create Environment File \n Publisher Widget \n \n \n Create an  .env  file in the project root for the  publisher-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/publisher-widget\n \n Notes \n \n Replace  quickstart-entando.192.168.64.34.nip.io  with the ingress you use to access Entando from your local browser. \n /entando-de-app/cmsresources/  is your Resource URL. \n publisher-widget  is the public folder we'll create to host the publisher micro frontend. \n Subscriber Widget \n \n \n Create an  .env  file in the project root for the  subscriber-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n \n Use  subscriber-widget  for the name of the public folder we'll create to host the subscriber micro frontend. \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/subscriber-widget\n Run npm build \n Publisher Widget \n \n \n Open a command line, and navigate to the project root of the  publisher-widget . \n \n \n Run build. \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n Subscriber Widget \n \n Repeat steps 1-3 for the  subscriber-widget . \n Create Public Folder \n Publisher Widget \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Configuration  at the upper right hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  publisher-widget . \n \n \n Click  Save . \n \n \n Click  public  →  publisher-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n publisher-widget/static/css \n publisher-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n publisher-widget/static/css/main.css \n publisher-widget/static/js/main.js \n publisher-widget/static/js/runtime.js \n publisher-widget/static/js/vendor.js \n Subscriber Widget \n \n Repeat steps 1-10 for the  subscriber-widget . \n Add Widgets \n Publisher Widget \n \n \n Go to  Entando App Builder  in your browser. \n \n \n Click  UX Patterns  →  Widgets  at the top nav. \n \n \n Click  Add  at the upper right. \n \n \n Enter the following: \n \n \n \n Title: Publisher Widget  → for both English and Italian languages \n Code: publisher_widget  → note: dashes are not allowed \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> publisher-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/main.js \" > </ script > \n < publisher-widget   /> \n \n \n Click  Save . \n Subscriber Widget \n Repeat steps 1-5 for the subscriber widget. \n \n Title: Subscriber Widget  → for both English and Italian languages \n Code: subscriber_widget  → note: dashes are not allowed \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> subscriber-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/main.js \" > </ script > \n < subscriber-widget   /> \n Add Page Template \n \n \n Click  UX Patterns  →  Page Templates  →  Add . \n \n \n Enter the following: \n \n \n \n Code: two_widget  → note: dashes are not allowed \n Name: Two Widget \n JSON Configuration: \n \n { \n   \"frames\" :   [ \n     { \n       \"pos\" :   0 , \n       \"descr\" :   \"Sample Frame\" , \n       \"mainFrame\" :   false , \n       \"defaultWidget\" :   null , \n       \"sketch\" :   null \n     } , \n     { \n       \"pos\" :   1 , \n       \"descr\" :   \"Sample Frame Two\" , \n       \"mainFrame\" :   false , \n       \"defaultWidget\" :   null , \n       \"sketch\" :   null \n     } \n   ] \n } \n \n \n Template: \n \n < #assign  wp = JspTaglibs [ \"/aps-core\" ] > \n <! DOCTYPE   HTML   PUBLIC   \"-//W3C//DTD HTML 4.0 Transitional//EN\" > \n < html > \n   < head > \n       < title > < @wp . currentPage param = \"title\"   /> </ title > \n   </ head > \n   < body > \n     < h1 > < @wp . currentPage param = \"title\"   /> </ h1 > \n     < div > < @wp . show frame = 0   /> </ div > \n     < div > < @wp . show frame = 1   /> </ div > \n   </ body > \n </ html > \n \n \n Click  Save . \n View on Homepage \n \n \n Click  Page Designer  →  Page Tree . \n \n \n For the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n Click  Edit . \n \n \n In the  Settings  section, select: \n \n \n \n Page Model: Two Widget \n \n \n \n Click  Save and Configure . \n \n \n In the  WIDGETS  sidebar on the right: \n \n \n \n Drag  Publisher Widget  and  Subscriber Widget  into  Sample Frame  and  Sample Frame Two . \n \n \n \n Click  Publish . \n \n \n To view the home page, scroll to the top of the page, and click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n Congratulations! \n You can now communicate between micro frontends with  Custom Events . \n Angular to React \n We can also communicate between micro frontends using different JavaScript frameworks. \n In this next example, we’ll create an Angular micro frontend to publish an event, and we'll use the React micro frontend we created in the previous section to receive the event. \n Create Angular Publisher \n ng new angular-publisher-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-publisher-widget\n \n ng serve\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n Replace the contents of  angular-widget/src/app/app.module.ts . \n \n In this file, we bootstrap the custom element using the  ngDoBootstrap  method. \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n import   {  ReactiveFormsModule  }   from   '@angular/forms' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule , \n    ReactiveFormsModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-publisher-widget' ,  el ) ; \n   } \n } \n Create Custom Event \n Replace the contents of  angular-widget/src/app/app.component.ts . \n \n Here, we're adding code to dispatch the custom event. \n \n import   {  Component  }   from   '@angular/core' ; \n import   {  FormControl ,  FormGroup  }   from   '@angular/forms' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n@ Component ( { \n  selector :   'app-root' , \n  templateUrl :   './app.component.html' , \n  styleUrls :   [ './app.component.css' ] \n } ) \n export   class   AppComponent   { \n  greetingForm  =   new   FormGroup ( { \n    name :   new   FormControl ( '' ) , \n   } ) ; \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   onSubmit ( )   { \n     const  name  =   this . greetingForm . get ( 'name' ) . value ; \n     this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n } \n Add HTML Form \n Replace the contents of  angular-widget/src/app/app.component.html . \n \n In the app component html, we're adding a simple form to call our component class  app.component.ts . \n \n < h1 > Send a greeting </ h1 > \n < form   [formGroup] = \" greetingForm \"   (ngSubmit) = \" onSubmit() \" > \n   < label > \n    Name\n     < input   type = \" text \"   formControlName = \" name \" > \n   </ label > \n   < button   type = \" submit \" > Say hello! </ button > \n </ form > \n View Micro Frontend \n Open  angular-publisher-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-publisher-widget /> . \n < body > \n   < angular-publisher-widget   /> \n </ body > \n \n You can check to see if your micro frontend is working in your browser (e.g., localhost:4200) \n Add to App Builder \n Now we're ready to host our micro frontend in Entando. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate a  dist  directory. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Configuration  →   File Browser   →  public . \n \n \n Create a folder named  angular-publisher-widget . \n \n \n Click 'Upload Files`. \n \n \n From your generated  dist  folder, upload: \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n Add Widget \n \n \n Click  UX Patterns  →  Widgets  at the top nav. \n \n \n Click  Add  at the upper right. \n \n \n Enter the following: \n \n \n \n Title: Angular Publisher Widget  → for both English and Italian languages \n Code: angular_publisher_widget  → note: dashes are not allowed \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/runtime-es2015.js \" > </ script > \n\n < angular-publisher-widget   /> \n \n \n Click  Save . \n View on Homepage \n \n \n Click  Page Designer  →  Page Tree  at the top nav. \n \n \n Next to the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n In the Search field in right-hand sidebar, enter  Angular Publisher Widget . \n \n \n Drag and drop  Angular Publisher Widget  into the  Sample Frame  in the main body of the page. \n \n \n \n Replace  Publisher Widget . \n \n \n \n Click  Publish . \n \n \n In the top navigation, on the right, click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n \n Note: If you don't see an input field, refresh the page. \n \n Congratulations! \n You've now created an Angular micro frontend that can communicate with a React micro frontend. \n \n"},{title:"Authentication",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/authentication/",relativePath:"v6.1/tutorials/micro-frontends/authentication/README.md",key:"v-2bb0591c",path:"/v6.1/tutorials/micro-frontends/authentication/",lastUpdated:"6/26/2020, 10:59:44 AM",content:" Authentication \n Keycloak is used for authentication. \n To set up keycloak server, please refer to Keycloak\n documentation . \n As all MFE widgets use the same Keycloak instance, it should be\ninitialized on a container of all widgets. \n Using Details widget generated using Entando JHipster blueprint as an\nexample, let’s get familiar with authentication implementation. \n As mentioned before, widget auth implementation assumes that Keycloak is\ninitialized outside of the widget. In Details example, it is done in\nindex.html where Keycloak server’s keycloak.js is used. \n <head>\n    <script src=\"keycloak.js\"><\/script>\n    <script>\n        var keycloak = new Keycloak();\n        keycloak\n          .init({ onLoad: 'check-sso' })\n          .success(onInit);\n    <\/script>\n</head>\n \n \n Note \n keycloak.js is provided by your Keycloak server at\n <SERVER_URL:PORT>/auth/js/keycloak.js \n \n Keycloak is initialized by passing Keycloak server path, realm and\nclient ID and calling  init({/* options */})  function. \n const keycloak = Keycloak({\n  url: 'http://localhost:9080/auth',\n  realm: 'jhipster',\n  clientId: 'jhipster-entando-react-client',\n});\n\nkeycloak\n  .init({ onLoad: 'check-sso' })\n  .success(onInit);\n \n Depending on Keycloak version you are using,  init()  function can\nreturn a Promise (newer versions support  promiseType: 'native' \noption). \n keycloak\n  .init({ onLoad: 'check-sso', promiseType: 'native' })\n  .then(authenticated => {\n    alert(authenticated ? 'Authenticated' : 'Not authenticated');\n  })\n  .catch(() => {\n    alert('Failed to initialize');\n  });\n \n All the Keycloak events are made custom events - this way widgets could\nreact to them if a need arises. \n function createKcDispatcher(payload) {\n  return () => window.dispatchEvent(new CustomEvent('keycloak', { detail: payload }));\n}\n\nkeycloak.onReady = createKcDispatcher({ eventType: 'onReady' });\nkeycloak.onAuthSuccess = createKcDispatcher({ eventType: 'onAuthSuccess' });\nkeycloak.onAuthError = createKcDispatcher({ eventType: 'onAuthError' });\nkeycloak.onAuthRefreshSuccess = createKcDispatcher({ eventType: 'onAuthRefreshSuccess' });\nkeycloak.onAuthRefreshError = createKcDispatcher({ eventType: 'onAuthRefreshError' });\nkeycloak.onAuthLogout = createKcDispatcher({ eventType: 'onAuthLogout' });\nkeycloak.onTokenExpired = createKcDispatcher({ eventType: 'onTokenExpired' });\nconst onInit = createKcDispatcher({ eventType: 'onInit' });\n \n Keycloak object is then stored into  window.entando  object for widgets\nto have access to. \n window.entando = {\n  ...(window.entando || {}),\n  keycloak,\n};\n \n On the widget side inside the custom element creation logic Keycloak\nobject is accessed and passed into the component via Keycloak context \n const getKeycloakInstance = () =>\n  (window &&\n    window.entando &&\n    window.entando.keycloak &&\n    { ...window.entando.keycloak, initialized: true }\n  ) || { initialized: false };\n\n\n// ...\n\nconstructor(...args) {\n  // ...\n  this.keycloak = getKeycloakInstance();\n}\n\nconnectedCallback() {\n  // ...\n  ReactDOM.render(\n    <KeycloakContext.Provider value={this.keycloak}>\n      <ConferenceDetailsContainer />\n    </KeycloakContext.Provider>,\n    this.mountPoint\n  );\n}\n \n And on the component side you can show different content depending on\nthe authentication status \n At  auth/KeycloakViews.js \n export const AuthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return authenticated ? children : null;\n};\n\nexport const UnauthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return !authenticated ? children : null;\n};\n \n At  components/ConferenceDetailsContainer.js \n render() {\n  const { conference, loading } = this.state;\n  const { t, keycloak } = this.props;\n\n  return (\n    <ThemeProvider theme={this.theme}>\n      <UnauthenticatedView keycloak={keycloak}>\n        {t('common.notAuthenticated')}\n      </UnauthenticatedView>\n      <AuthenticatedView keycloak={keycloak}>\n        {loading && t('common.loading')}\n        {!loading && <ConferenceDetails conference={conference} />}\n      </AuthenticatedView>\n    </ThemeProvider>\n  );\n}\n \n \n Note \n Keycloak object is accessible via props because of  withKeycloak  HOC:\n export default withKeycloak(ConferenceDetailsContainer); \n \n"},{title:"Tutorial: Blueprint generated widgets' overview",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",relativePath:"v6.1/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/README.md",key:"v-7329955e",path:"/v6.1/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",headers:[{level:2,title:"Common parts",slug:"common-parts"},{level:3,title:"Authentication",slug:"authentication"},{level:3,title:"Custom events",slug:"custom-events"},{level:3,title:"Tests and mocks",slug:"tests-and-mocks"},{level:3,title:"PropTypes",slug:"proptypes"},{level:3,title:"Fetching data",slug:"fetching-data"},{level:2,title:"Form widget",slug:"form-widget"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: Blueprint generated widgets\' overview \n When you create an entity using Entando blueprint, it generates a few\npremade widgets. In this section we will review them. \n We will be using  Conference  as an entity name for the examples below. \n Common parts \n Each widget contains a README file that should help you with the setup. \n All generated widgets are web components created using Custom Elements\nAPI. \n Each widget is displayed using the custom element tag - e.g., inside the\nDetails widget folder  conference/detailsWidget/public/index.html  you\ncan find\n conference-details id="1" override-edit-handler hide-edit-button /> .\nThis element  <conference-details />  is defined in the component entry\npoint at\n conference/detailsWidget/src/custom-elements/ConferenceDetailsElement.js . \n \n Note \n custom element names ( conference-details ) require a dash in them to\nbe used, e.g., (kebab-case) - they can not be single words. \n \n For more information about web components, custom elements and micro\nfrontends, please refer to "Create a react micro frontend widget"\nsection. \n Authentication \n If widget requires authentication, component is wrapped in\n KeycloakContext.Provider  and Keycloak object is fetched from\n window.entando.keycloak  variable. Entando is using Keycloak as our\nauthentication provider, but you can add any providers you like. \n ReactDOM.render(\n  <KeycloakContext.Provider value={this.keycloak}>\n    <StylesProvider jss={this.jss}>\n      <ThemeProvider theme={this.muiTheme}>{FormContainer}</ThemeProvider>\n    </StylesProvider>\n  </KeycloakContext.Provider>,\n  this.mountPoint\n);\n \n For more information about authentication implementation, please refer\nto the "Authentication" section. \n Custom events \n All widgets rely on custom events for communication which is why custom\nevent creation and removal is in each widget, as well as event listener\ncreation. Note that when an event listener is created, it should be when\nthe element is no longer needed. It should be created in the custom\nelement’s  disconnectedCallback()  function. \n To add more events to listen to the widgets, add the event types to\n INPUT_EVENT_TYPES  object at\n detailsWidget/src/custom-elements/widgetEventTypes.js  which will add\nit to the listener list (or remove the event by removing the element). \n For more information about custom events and widget communication,\nplease refer to the section on "Widget communication". \n Tests and mocks \n Each widget has tests written for it. Entando uses\n react-testing-library , but developers are free to upgrade and use any\ntool. Tests are kept at  detailsWidget/src/components/  and mocks for\nthem are at  detailsWidget/src/components/ . \n PropTypes \n PropTypes for data used across several components are shared - you can\nsee and modify them at  detailsWidget/src/components/ . This way you can\navoid repeating same propTypes in each component and just import shared\nones \n import React from \'react\';\nimport conferenceType from \'components/__types__/conference\';\n\nconst ConferenceDetails = props => {\n  // ...\n};\n\nConferenceDetails.propTypes = {\n  conference: conferenceType,\n  t: PropTypes.func.isRequired,\n};\n\nexport default ConferenceDetails;\n Fetching data \n For data fetching from widgets use Fetch API. You can find functions for\nfetching data at  detailsWidget/src/api  in different files for\ndifferent contexts. \n Form widget \n For displaying forms within a widget use\n Formik  which helps with form state\nmanagement. For data validation use\n Yup . \n'},{title:"Microfrontends",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/README.md",key:"v-2c5a4dbe",path:"/v6.1/tutorials/micro-frontends/micro-frontends/",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Tutorials",slug:"tutorials"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Microfrontends \n Introduction \n \n The idea behind Micro Frontends is to think about a website or web app\nas  a composition of features  which are owned by  independent\nteams . Each team has a  distinct area of business  or  mission \nit cares about and specialises in. A team is  cross functional  and\ndevelops its features  end-to-end , from database to user interface. \n —  Michael Geers,  micro-frontends.org \n \n \n So, think of microfrontends as the implementation of microservices\nconcept to a full web app, UI included. \n The Entando way to microfrontends is based on  Web\nComponents ,\na set of technologies that allow developers to create reusable custom\nelements supported by all major internet browsers. \n Web Components can work with vanilla JS as well as with the most popular\nweb frameworks (React, Angular, Vue, etc.). \n That means the Entando platform enables developers work with their\nfavourite tech stack, and allows companies to quickly evolve their\ntechnology and to always look for best tech talents no matter the\nframework they use. \n The following tutorials will help you creating Entando Widgets using a\nmicrofrontend-based approach. \n Tutorials \n \n \n Create a React widget \n \n \n Create an Angular widget \n \n \n Add an App Builder configuration screen to a\nwidget \n \n \n Display widget configuration \n \n \n The Entando Blueprint generated widgets \n \n \n Communication between two React widgets \n \n \n Communication between an Angular widget and a React\nwidget \n \n \n Widget authentication with Keycloak \n \n \n"},{title:"Authentication",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/authentication.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/authentication.md",key:"v-64e83e2d",path:"/v6.1/tutorials/micro-frontends/micro-frontends/authentication.html",lastUpdated:"6/26/2020, 10:59:44 AM",content:" Authentication \n Keycloak is used for authentication. \n To set up keycloak server, please refer to Keycloak\n documentation . \n As all MFE widgets use the same Keycloak instance, it should be\ninitialized on a container of all widgets. \n Using Details widget generated using Entando JHipster blueprint as an\nexample, let’s get familiar with authentication implementation. \n As mentioned before, widget auth implementation assumes that Keycloak is\ninitialized outside of the widget. In Details example, it is done in\nindex.html where Keycloak server’s keycloak.js is used. \n <head>\n    <script src=\"keycloak.js\"><\/script>\n    <script>\n        var keycloak = new Keycloak();\n        keycloak\n          .init({ onLoad: 'check-sso' })\n          .success(onInit);\n    <\/script>\n</head>\n \n \n Note \n keycloak.js is provided by your Keycloak server at\n <SERVER_URL:PORT>/auth/js/keycloak.js \n \n Keycloak is initialized by passing Keycloak server path, realm and\nclient ID and calling  init({/* options */})  function. \n const keycloak = Keycloak({\n  url: 'http://localhost:9080/auth',\n  realm: 'jhipster',\n  clientId: 'jhipster-entando-react-client',\n});\n\nkeycloak\n  .init({ onLoad: 'check-sso' })\n  .success(onInit);\n \n Depending on Keycloak version you are using,  init()  function can\nreturn a Promise (newer versions support  promiseType: 'native' \noption). \n keycloak\n  .init({ onLoad: 'check-sso', promiseType: 'native' })\n  .then(authenticated => {\n    alert(authenticated ? 'Authenticated' : 'Not authenticated');\n  })\n  .catch(() => {\n    alert('Failed to initialize');\n  });\n \n All the Keycloak events are made custom events - this way widgets could\nreact to them if a need arises. \n function createKcDispatcher(payload) {\n  return () => window.dispatchEvent(new CustomEvent('keycloak', { detail: payload }));\n}\n\nkeycloak.onReady = createKcDispatcher({ eventType: 'onReady' });\nkeycloak.onAuthSuccess = createKcDispatcher({ eventType: 'onAuthSuccess' });\nkeycloak.onAuthError = createKcDispatcher({ eventType: 'onAuthError' });\nkeycloak.onAuthRefreshSuccess = createKcDispatcher({ eventType: 'onAuthRefreshSuccess' });\nkeycloak.onAuthRefreshError = createKcDispatcher({ eventType: 'onAuthRefreshError' });\nkeycloak.onAuthLogout = createKcDispatcher({ eventType: 'onAuthLogout' });\nkeycloak.onTokenExpired = createKcDispatcher({ eventType: 'onTokenExpired' });\nconst onInit = createKcDispatcher({ eventType: 'onInit' });\n \n Keycloak object is then stored into  window.entando  object for widgets\nto have access to. \n window.entando = {\n  ...(window.entando || {}),\n  keycloak,\n};\n \n On the widget side inside the custom element creation logic Keycloak\nobject is accessed and passed into the component via Keycloak context \n const getKeycloakInstance = () =>\n  (window &&\n    window.entando &&\n    window.entando.keycloak &&\n    { ...window.entando.keycloak, initialized: true }\n  ) || { initialized: false };\n\n\n// ...\n\nconstructor(...args) {\n  // ...\n  this.keycloak = getKeycloakInstance();\n}\n\nconnectedCallback() {\n  // ...\n  ReactDOM.render(\n    <KeycloakContext.Provider value={this.keycloak}>\n      <ConferenceDetailsContainer />\n    </KeycloakContext.Provider>,\n    this.mountPoint\n  );\n}\n \n And on the component side you can show different content depending on\nthe authentication status \n At  auth/KeycloakViews.js \n export const AuthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return authenticated ? children : null;\n};\n\nexport const UnauthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return !authenticated ? children : null;\n};\n \n At  components/ConferenceDetailsContainer.js \n render() {\n  const { conference, loading } = this.state;\n  const { t, keycloak } = this.props;\n\n  return (\n    <ThemeProvider theme={this.theme}>\n      <UnauthenticatedView keycloak={keycloak}>\n        {t('common.notAuthenticated')}\n      </UnauthenticatedView>\n      <AuthenticatedView keycloak={keycloak}>\n        {loading && t('common.loading')}\n        {!loading && <ConferenceDetails conference={conference} />}\n      </AuthenticatedView>\n    </ThemeProvider>\n  );\n}\n \n \n Note \n Keycloak object is accessible via props because of  withKeycloak  HOC:\n export default withKeycloak(ConferenceDetailsContainer); \n \n"},{title:"Tutorial: create a react micro frontend widget",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/create-react-microfrontend-widget.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/create-react-microfrontend-widget.md",key:"v-c73e25e6",path:"/v6.1/tutorials/micro-frontends/micro-frontends/create-react-microfrontend-widget.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Bootstrap a react app",slug:"bootstrap-a-react-app"},{level:2,title:"Wrap the react app in a custom element",slug:"wrap-the-react-app-in-a-custom-element"},{level:2,title:"Build the widget",slug:"build-the-widget"},{level:2,title:"Create the Entando 6 widget in App Builder",slug:"create-the-entando-6-widget-in-app-builder"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: create a react micro frontend widget \n Prerequisites \n Use last stable node version (at the time of writing  v13.8.0 ). We\nsuggest using  nvm  to handle node\ninstallations. \n Bootstrap a react app \n In this tutorial we use  Create React\nApp , but feel free to adopt whatever\nboilerplate you like. \n npx create-react-app my-widget --use-npm \n This is the expected output: \n my-widget\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Now, type  cd my-widget  and  npm start  to start the app. \n Wrap the react app in a custom element \n Let’s add a new file  WidgetElement.js , containing the custom element\nthat will wrap the entire React app under the  src  folder. \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nclass WidgetElement extends HTMLElement {\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    ReactDOM.render(<App />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget\', WidgetElement);\n\nexport default WidgetElement;\n \n \n Note \n connectedCallback  is a lifecycle hook method of custom elements,\npart of the web components spec. \n \n Then, the  index.js  file should be updated. Starting from this: \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport \'./index.css\';\nimport App from \'./App\';\nimport * as serviceWorker from \'./serviceWorker\';\n\nReactDOM.render(<App />, document.getElementById(\'root\'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n replace the whole file with these two lines \n import \'./index.css\';\nimport \'./WidgetElement\';\n \n You only have to import  WidgetElement  plus the css, if needed. \n We assume we don’t need a service worker for the widget, so we can\ndelete serviceWorker.js. \n Now, to ensure our custom element is working we have to edit\n public/index.html . Remove  <div id="root"></div>  from the  body  (we\nprogrammatically generated the react root in the  connectedCallback \nmethod of  WidgetElement ) and add our custom element  <my-widget /> . \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget />\n  </body>\n</html>\n \n \n Note \n \n \n the custom element name ( my-widget  in this tutorial)  must \nmatch the first parameter of  customElements.define  method \n \n \n custom element names  require a dash to be used in\nthem \n(kebab-case) - they can’t be single words. \n \n \n \n Page should auto reload and…​ congrats! You’re running a barebones\nEntando 6 widget in isolation. \n Build the widget \n In order to avoid path issues, we should set up a one line  .env  file\nin the CRA project root: \n PUBLIC_URL=http://localhost:8080/entando/resources/static/my-widget\n \n Where `` is the path of the Entando 6 instance containing the widget. \n Ready to build now! From the react project root, type \n npm run build \n and a  build  dir will be generated. Now rename \n \n \n a file like  static/js/runtime~main.c7dcdf0b.js  to\n static/js/runtime.js  (bootstrapping logic) \n \n \n a file like  static/js/2.230b21ef.chunk.js  to  static/js/vendor.js \n(third-party libraries) \n \n \n a file like  static/js/main.1fd3965a.chunk.js  to\n static/js/main.js  (app) \n \n \n a file like  static/css/main.d1b05096.chunk.js  to\n static/css/main.css  (stylesheet) \n \n \n \n Note \n you could keep the original names in order to avoid potential caching\nissues, but then you will have to update the  Custom UI  field in the\nApp Builder widget screen every time a new version of the widget is\ndeployed. DE bundles can help with this and are covered in another\nlab. \n Create the Entando 6 widget in App Builder \n For the purposes of this tutorial we are going to load the widget to the\nApp builder manually. In a live system you would include this in an\nEntando app, load via API, or via a Component Repository bundle. \n Open the Entando App Builder \n \n \n Go to Configuration → File Browser \n \n \n Click public \n \n \n Click Create Folder \n \n \n Enter  my-widget \n \n \n Click save \n \n \n Click  my-widget  folder \n \n \n Recreate the same folder structure (my-widget/static/js,\nmy-widget/static/css) \n \n \n Upload files from js and css folders in the corresponding folders in\nfile browser \n \n \n \n Note \n You can also embed the widget directly in a local copy of an Entando\napp. Copy it into the Entando 6 instance under\n src\\main\\webapp\\resources\\my-widget \n \n Now create the widget in the App Builder \n go to UX Patterns → Widgets and click on the  New  button. \n You’ll see a screen like this one \n \n Fill the form, e.g.: \n \n \n my_widget  as widget code (dashes are not allowed in a widget\ncode) \n \n \n My Widget  as title for all the languages \n \n \n Free access  as group \n \n \n the following code as  Custom UI \n \n \n \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/main.js"><\/script>\n<my-widget />\n \n Update the paths to match what you loaded to the app builder in the\nsteps above. And save the widget. \n \n Note \n <#assign wp=JspTaglibs[ "/aps-core"]>  is needed for your widget code\nto have access to  @wp  object which provides access to environment\nvariables. \n \n Then, configure a page (let’s assume it’s called  mypage ) and drag the\nwidget  mywidget  in the page model. Publish, load the page (its url\nshould be ``) and  voilà , here’s our react app embedded as a widget.\nDone! \n'},{title:"Tutorial: Add App Builder configuration screen for an Entando 6 widget",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/create-config-screen-for-appbuilder-widget.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/create-config-screen-for-appbuilder-widget.md",key:"v-092b0aad",path:"/v6.1/tutorials/micro-frontends/micro-frontends/create-config-screen-for-appbuilder-widget.html",headers:[{level:2,title:"Generate a React app",slug:"generate-a-react-app"},{level:2,title:"Edit the root app component",slug:"edit-the-root-app-component"},{level:2,title:"Wrap the react app in a web component",slug:"wrap-the-react-app-in-a-web-component"},{level:2,title:"Add widget config screen in App Builder",slug:"add-widget-config-screen-in-app-builder"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Tutorial: Add App Builder configuration screen for an Entando 6 widget \n Entando 6 widgets can be customized through an App Builder configuration\nscreen so the citizen developers can avoid writing ad-hoc additional\ncode. \n In Entando 6, the configuration screen is also a micro frontend, which\ncan also be defined as a web component. That means you can develop and\ntest it in isolation, without a running Entando instance. \n Generate a React app \n Let’s start with the boilerplate provided by  Create React\nApp , probably the most popular one. \n npx create-react-app my-widget-config --use-npm \n my-widget-config\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Then, type  cd my-widget-config  and  npm start  to start the app. \n Edit the root app component \n Let’s start with a simple form: only an input with a label. So, let’s\nedit  App.js \n import React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: ''};\n  }\n\n  handleNameChange(value) {\n    this.setState(prevState => ({\n      ...prevState,\n      name: value,\n    }));\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div>\n        <h1>Sample Entando 6 Widget Configuration</h1>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" onChange={e => this.handleNameChange(e.target.value)} value={name} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n You are free to use your favorite form handling library e.g.,\n Formik ,\n redux-form  (that requirese redux) or others. \n In regards to styling, since this is going to be an App Builder screen,\nwe strongly suggest using  PatternFly\nv3  ( patternfly  and  patternfly-react \npackages) to keep UX coherence. \n Wrap the react app in a web component \n Now, let’s add the web component that will wrap the entire React app.\nLet’s name it  WidgetElement \n import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nclass WidgetElement extends HTMLElement {\n  constructor() {\n    super();\n    this.reactRootRef = React.createRef();\n    this.mountPoint = null;\n  }\n\n  get config() {\n    return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n  }\n\n  set config(value) {\n    return this.reactRootRef.current.setState(value);\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement('div');\n    this.appendChild(this.mountPoint);\n    ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n  }\n}\n\ncustomElements.define('my-widget-config', WidgetElement);\n\nexport default WidgetElement;\n \n Its responsibility is rendering the react app and syncing the react app\nstate in a  config  property, that  must  be named that way. The key to\nApp builder communication is that it works in three steps: \n \n \n App Builder reads  config  property when the widget config screen is\nrendered \n \n \n config  property is mutated when a user configures the widget \n \n \n When a user saves the config, App Builder retrieves it (again, from\nthe  config  property) and persists it through Entando APIs \n \n \n This means the widget developer can focus on the configuration screens\nwithout having to call Entando APIs to read or write configuration. \n One more JS file to update:  index.js . Starting from this \n import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n You only have to import  WidgetElement  plus the css, if needed.\nSomething like \n import './index.css';\nimport './WidgetElement';\n \n We assume we don’t need a service worker for the widget, so we can\ndelete serviceWorker.js. \n To ensure our web component is working we have to edit\n public/index.html . Remove  <div id=\"root\"></div>  from the  body  (we\nprogrammatically generated the react root in the  connectedCallback \nmethod of  WidgetElement ) and add our new web component tag\n <my-widget /> . \n <!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget-config />\n  </body>\n</html>\n \n \n Note \n the web component tag name ( my-widget-config  in this tutorial)\n must  match the first parameter of the  customElements.define \nmethod. \n \n The page should auto reload and…​congrats, you’re running an Entando 6\nwidget in isolation. \n Add widget config screen in App Builder \n Before integrating the widget config screen, we need some widget info.\nOpen App Builder, go to UX Patterns → Widgets and click on the installed\nwidget that we’re creating the configuration screen for. \n You’ll see a screen like: \n \n Next, we’ll build our widget before embedding it into the Entando 6\ninstance. From the react project root, type \n npm run build \n and a  build/static  directory will be generated. Copy it into the\nEntando 6 instance under\n src\\main\\webapp\\cmsresources\\my-widget-config , then rename \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n Now, edit again the widget and update the  configUI  field. \n {\n  \"customElement\": \"my-widget-config\",\n  \"resources\": [\n    \"my-widget-config/static/js/runtime.js\",\n    \"my-widget-config/static/js/vendor.js\",\n    \"my-widget-config/static/js/main.js\"\n  ]\n}\n \n \n Note \n \n \n It is possible to keep the original names in order to avoid\npotential caching issues, but then you will have to update the\n Config UI  field in the App Builder widget screen each time a new\nversion of the widget is deployed. \n \n \n configUI  is a JSON object, so pay attention to save a\nwell-formed one (the integrated JSON editor will help you) \n \n \n value for  customElement  must match the name of custom tag in\n index.html  and the one passed as parameter to\n customElements.define  in  WidgetElement \n \n \n \n Last step: configure a page in App Builder, drag our widget into the\npage model slot and you’ll see the configuration screen we just built. \n"},{title:"Tutorial: create an angular microfrontend widget",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/create-angular-microfrontend-widget.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/create-angular-microfrontend-widget.md",key:"v-b07a18da",path:"/v6.1/tutorials/micro-frontends/micro-frontends/create-angular-microfrontend-widget.html",headers:[{level:2,title:"Pre-requisites",slug:"pre-requisites"},{level:2,title:"Bootstrap an angular app",slug:"bootstrap-an-angular-app"},{level:2,title:"Wrap the angular app in custom element",slug:"wrap-the-angular-app-in-custom-element"},{level:2,title:"Build the widget",slug:"build-the-widget"},{level:2,title:"Create the Entando 6 widget in App Builder",slug:"create-the-entando-6-widget-in-app-builder"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: create an angular microfrontend widget \n Pre-requisites \n Use last stable node version (at the time of writing  v13.8.0 ). We\nsuggest using  nvm  to handle node\ninstallations. \n Bootstrap an angular app \n Install Angular CLI globally, then generate a new angular application.\nWhen the CLI will ask you about routing and styling, go with no routing\nand with CSS. \n npm install -g @angular/cli \n ng new my-widget \n This is the expected output: \n my-widget\n├── e2e\n│   └── src\n│       ├── app.e2e-spec.ts\n│       └── app.po.ts\n│\n├── node_modules\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   └── app.module.ts\n│   │\n│   ├── assets\n│   │   └── .gitkeep\n│   │\n│   ├── environment\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   │\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   └── test.ts\n│\n├── .editorconfig\n├── .gitignore\n├── angular.json\n├── browserlist\n├── karma.conf.js\n├── package.json\n├── README.md\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.spec.json\n└── tslint.json\n Wrap the angular app in custom element \n Easiest way is using  angular elements , the official angular custom\nelement solution. \n ng add @angular/elements \n \n Note \n install the angular elements package through CLI ( ng add ) and not\nthrough  npm install , as it does something more under the hood, like\nadding  document-register-element  polyfill. \n \n Now, edit the  AppModule  class, from \n import { BrowserModule } from \'@angular/platform-browser\';\nimport { NgModule } from \'@angular/core\';\n\nimport { AppComponent } from \'./app.component\';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n \n to \n import { BrowserModule } from \'@angular/platform-browser\';\nimport { NgModule, Injector } from \'@angular/core\';\nimport { createCustomElement } from \'@angular/elements\';\nimport { AppComponent } from \'./app.component\';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  entryComponents: [AppComponent]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootstrap() {\n    const el = createCustomElement(AppComponent, { injector: this.injector });\n    customElements.define(\'my-widget\', el);\n  }\n}\n \n Please pay attention to  AppComponent  in the module declaration: it’s\nno more in the  bootstrap  property but in the  entryComponents  one. \n Now, to ensure our custom element is working fine we have to edit\n index.html . In the  body , replace  <app-root></app-root>  with\n <my-widget /> . \n <!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>MyWidget</title>\n  <base href="/">\n  <meta name="viewport" content="width=device-width, initial-scale=1">\n  <link rel="icon" type="image/x-icon" href="favicon.ico">\n</head>\n<body>\n  <my-widget />\n</body>\n</html>\n \n \n Note \n \n \n the custom element name ( my-widget  in this tutorial)  must \nmatch the first parameter of  customElements.define  method \n \n \n custom element names  require a dash to be used in\nthem \n(kebab-case) - they can’t be single words \n \n \n \n Page should auto reload and…​ congrats! You’re running a barebones\nEntando 6 widget in isolation. \n Build the widget \n From the angular project root, type \n ng build --prod --output-hashing none \n and a  dist/my-widget  dir will be generated. Assuming ES2015 is enough\nas minimum JS version, we can ignore ES5 stuff and pay only attention\nto: \n \n \n main-es2015.js \n \n \n polyfills-es2015.js \n \n \n runtime-es2015.js \n \n \n styles.css \n \n \n \n Note \n omitting the  --output-hashing none  options you could keep the\noriginal names in order to avoid potential caching issues, but then\nyou will have to update the  Custom UI  field in the App Builder\nwidget screen every time a new version of the widget is deployed. DE\nbundles can help with this and are covered in another lab. \n Create the Entando 6 widget in App Builder \n For the purposes of this tutorial we are going to load the widget to the\nApp builder manually. In a live system you would include this in an\nEntando app, load via API, or via a Digital Exchange bundle. \n Open the Entando App Builder. \n \n \n Go to Configuration → File Browser \n \n \n Click public \n \n \n Click Create Folder \n \n \n Enter  my-widget \n \n \n Click save \n \n \n Click  my-widget  folder \n \n \n Click upload and load the js (main, polyfills and runtime) and css\nfor your widget \n \n \n \n Note \n You can also embed the widget directly in a local copy of an Entando\napp. Copy it into the Entando 6 instance under\n src\\main\\webapp\\resources\\my-widget \n \n Now create the widget in the App Builder. go to UX Patterns → Widgets\nand click on the  New  button. \n You’ll see a screen like this one \n \n Fill the form, e.g.: \n \n \n my_widget  as widget code (dashes are not allowed in a widget\ncode) \n \n \n My Widget  as title for all the languages \n \n \n Free access  as group \n \n \n the following code as  Custom UI \n \n \n \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />my-widget/styles.css">\n<script async src="<@wp.resourceURL />my-widget/main-es2015.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/polyfills-es2015.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/runtime-es2015.js"><\/script>\n\n<my-widget />\n \n \n Note \n let’s assume we don’t need ES5 polyfills that angular generated with\nthe build. \n \n Update the paths to match what you loaded to the app builder in the\nsteps above. And save the widget. \n \n Note \n <#assign wp=JspTaglibs[ "/aps-core"]>  is needed for your widget code\nto have access to  @wp  object which provides access to a environment\nvariables. \n \n Then, configure a page (let’s assume it’s called  mypage ) and drag the\nwidget  mywidget  in the page model. Publish, load the page (its url\nshould be ``) and  voilà , here’s our angular app embedded as a widget.\nDone! \n'},{title:"Tutorial: Display widget configuration data",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/display-widget-config-data.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/display-widget-config-data.md",key:"v-4381b4cd",path:"/v6.1/tutorials/micro-frontends/micro-frontends/display-widget-config-data.html",headers:[{level:2,title:"Add an attribute to the custom element",slug:"add-an-attribute-to-the-custom-element"},{level:2,title:"Make react component handle the input",slug:"make-react-component-handle-the-input"},{level:2,title:"Rebuild the widget",slug:"rebuild-the-widget"},{level:2,title:"Update the Entando 6 widget in App Builder",slug:"update-the-entando-6-widget-in-app-builder"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: Display widget configuration data \n So, we already created a react micro frontend widget and configuration\nscreen to customize a  name  field. \n In this tutorial we will display that field in our micro frontend\nwidget. \n Add an attribute to the custom element \n Edit  WidgetElement  to add attribute handling to the custom element,\nand make re-render our app when an attribute changes. Now, the  name \nattribute is being read from the custom element and passed as a prop to\nthe react root component ( App ). \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nconst ATTRIBUTES = {\n  name: \'name\',\n};\n\nclass WidgetElement extends HTMLElement {\n\n  static get observedAttributes() {\n    return Object.values(ATTRIBUTES);\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!Object.values(ATTRIBUTES).includes(name)) {\n      throw new Error(`Untracked changed attribute: ${name}`);\n    }\n    if (this.mountPoint && newValue !== oldValue) {\n      this.render();\n    }\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  render() {\n    const name = this.getAttribute(ATTRIBUTES.name);\n    ReactDOM.render(<App name={name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget\', WidgetElement);\n\nexport default WidgetElement;\n \n \n Note \n attributeChangedCallback  is also a custom elements lifecycle hook\nmethod. \n Make react component handle the input \n Edit the  App  component now, to make it display the  name  prop. \n import React from \'react\';\nimport \'./App.css\';\n\nfunction App({name}) {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <p>\n          Hello, {name}!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n \n Now, to ensure our custom element is working we can edit\n public/index.html  and set a value for the  name  attribute of the\ncustom element. \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget name="Marco"/>\n  </body>\n</html>\n \n After page reload, you should be able to display a simple "Hello,\nMarco!" message. \n Rebuild the widget \n From the react project root, type: \n npm run build \n and the  build/static  directory will be (re)generated. Copy it again\ninto the Entando 6 instance under\n src\\main\\webapp\\resources\\static\\my-widget , then rename \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n a file like  css/main.d1b05096.chunk.js  to  css/main.css \n(stylesheet) \n \n \n \n Note \n you could keep the original names in order to avoid potential caching\nissues, but then you will have to update the  Custom UI  field in the\nApp Builder widget screen every time a new version of the widget is\ndeployed. \n \n If the application server you’re running does not have hot deploy\nenabled, restart it. \n Update the Entando 6 widget in App Builder \n Open the Entando App Builder, go to UX Patterns → Widgets, find the\nwidget  My Widget  and click to edit it. \n You’ll see a screen like this one \n \n Update the  Custom UI  field from: \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<my-widget />\n \n to \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<@wp.currentWidget param="config" configParam="name" var="configName" />\n<my-widget name="${configName}" />\n \n We basically added a JSTL tag to extract a field (under  configParam )\nfrom the config field of the current widget and put it in a  configName \nvariable, that we pass to the custom element. \n Save the widget and reload the page that contains the widget: you’ll see\n"Hello, Marco!" as expected. \n'},{title:"Tutorial: using custom event for widget communication",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/mixed-widget-communication.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/mixed-widget-communication.md",key:"v-76dcebcd",path:"/v6.1/tutorials/micro-frontends/micro-frontends/mixed-widget-communication.html",headers:[{level:2,title:"Fire an event from a widget",slug:"fire-an-event-from-a-widget"},{level:3,title:"app.module.ts",slug:"app-module-ts"},{level:3,title:"app.component.js",slug:"app-component-js"},{level:3,title:"app.template.html",slug:"app-template-html"},{level:2,title:"Consume an event in another widget",slug:"consume-an-event-in-another-widget"},{level:3,title:"SubscriberWidgetElement.js",slug:"subscriberwidgetelement-js"},{level:3,title:"App.js",slug:"app-js"},{level:2,title:"Make both widgets work in Entando",slug:"make-both-widgets-work-in-entando"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Tutorial: using custom event for widget communication \n Entando 6 widgets can communicate through  Custom\nEvents ,\nan established web standard. \n In this tutorial we’re going to build two widgets: the angular one will\nfire an event, the react one will intercept it. \n Fire an event from a widget \n ng new pub-widget-ng \n then follow the same steps or our  previous\ntutorial \n This time we need to add some form and custom event firing logic \n app.module.ts \n import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Injector } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { AppComponent } from './app.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  entryComponents: [AppComponent]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootstrap() {\n    const el = createCustomElement(AppComponent, { injector: this.injector });\n    customElements.define('pub-widget-ng', el);\n  }\n}\n app.component.js \n import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\n\nconst EVENTS = {\n  greeting: 'greeting',\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  greetingForm = new FormGroup({\n    name: new FormControl(''),\n  });\n\n  publishWidgetEvent(eventId, detail) {\n    const widgetEvent = new CustomEvent(eventId, { detail });\n    window.dispatchEvent(widgetEvent);\n  }\n\n  onSubmit() {\n    const name = this.greetingForm.get('name').value;\n    this.publishWidgetEvent(EVENTS.greeting, { name });\n  }\n}\n \n \n Note \n in the  CustomEvent  constructor,  detail  is the exact name to use in\nthe event payload, as for the\n specs . \n app.template.html \n <h1>Send a greeting</h1>\n<form [formGroup]=\"greetingForm\" (ngSubmit)=\"onSubmit()\">\n  <label>\n    Name\n    <input type=\"text\" formControlName=\"name\">\n  </label>\n  <button type=\"submit\">Say hello!</button>\n</form>\n \n To quickly test the event publishing we can execute from the JS console\nthis line of code \n window.addEventListener('greeting', (evt) => console.log('Hello', evt.detail.name))\n \n Then write something in the text field, click the \"Say hello!\" button\nand have a look ath the JS console: it will show the expected hello\nmessage. \n Consume an event in another widget \n Now, let’s create the react subscriber widget. \n npx create-react-app sub-widget-react --use-npm \n then follow the same steps or our  previous\ntutorial . \n Be careful to \n \n \n rename  WidgetElement.js  to  SubscriberWidgetElement.js \n \n \n edit  index.js : now you should import  SubscriberWidgetElement \n \n \n edit  index.html  updating the reference to the custom element: now\nit’s  <sub-widget-react> \n \n \n edit  SubscriberWidgetElement.js  and  App.js \n SubscriberWidgetElement.js \n (we’re renaming  WidgetElement  to  SubscriberWidgetElement  and update\nthe import in  index.js  accordingly) \n import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst EVENTS = {\n  greeting: 'greeting',\n};\n\nclass SubscriberWidgetElement extends HTMLElement {\n\n  constructor() {\n    super();\n    this.name = null;\n    this.subscribeToWidgetEvent(EVENTS.greeting, (evt) => this.onGreeting(evt.detail.name));\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement('div');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  subscribeToWidgetEvent(eventType, eventHandler) {\n    window.addEventListener(eventType, eventHandler);\n  }\n\n  onGreeting(name) {\n    this.name = name;\n    this.render();\n  }\n\n  render() {\n    ReactDOM.render(<App name={this.name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define('sub-widget-react', SubscriberWidgetElement);\n\nexport default SubscriberWidgetElement;\n App.js \n import React from 'react';\nimport './App.css';\n\nfunction App({ name }) {\n  return name ? (<h2>Just got a greeting from {name}</h2>)\n    : (<h2>Waiting for a greeting...</h2>);\n}\n\nexport default App;\n \n To quickly test the event publishing we can execute from the JS console\nthese lines of code \n const widgetEvent = new CustomEvent('greeting', {\n  detail: {\n    name: 'Pippo'\n  },\n});\nwindow.dispatchEvent(widgetEvent);\n \n And then the widget will update the text. \n Make both widgets work in Entando \n To properly test widgets in an entando instance, follow those steps (you\ncan use the  basic microfrontend\ntutorial  as reference) \n \n \n build both widgets \n \n \n copy widget files \n \n \n create widgets from App Builder \n \n \n create a page model from App Builder \n \n \n create a page and assign the just created page model \n \n \n configure the page dragging both widget \n \n \n If you need a simple page model, you can use this one \n JSON Configuration \n {\n  \"frames\": [\n    {\n      \"pos\": 0,\n      \"descr\": \"Sample Frame\",\n      \"mainFrame\": false,\n      \"defaultWidget\": null,\n      \"sketch\": null\n    },\n    {\n      \"pos\": 1,\n      \"descr\": \"Sample Frame Two\",\n      \"mainFrame\": false,\n      \"defaultWidget\": null,\n      \"sketch\": null\n    }\n  ]\n}\n \n Template \n <#assign wp=JspTaglibs[\"/aps-core\"]>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n    <title><@wp.currentPage param=\"title\" /></title>\n</head>\n<body>\n<h1><@wp.currentPage param=\"title\" /></h1>\n<div><@wp.show frame=0 /></div>\n<div><@wp.show frame=1 /></div>\n</body>\n</html>\n \n Now, go to the page you just created and you will find both widgets.\nWrite something in the publisher widget input, press the button and the\nsubscriber widget will update. Done! \n"},{title:"Create a React Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/v6.1/tutorials/micro-frontends/react.html",relativePath:"v6.1/tutorials/micro-frontends/react.md",key:"v-25348330",path:"/v6.1/tutorials/micro-frontends/react.html",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:3,title:"Wrap with Custom Element",slug:"wrap-with-custom-element"},{level:3,title:"Import Custom Element",slug:"import-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Get Resource URL",slug:"get-resource-url"},{level:2,title:"Build It",slug:"build-it"},{level:3,title:"npm build",slug:"npm-build"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Update Custom UI Field",slug:"update-custom-ui-field"},{level:3,title:"View in Homepage",slug:"view-in-homepage"}],lastUpdated:"7/10/2020, 12:19:38 PM",content:" Create a React Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n \n \n Tested Versions \n node v13.8.0 → We suggest using  nvm  to handle node installations. \n Create React App \n We'll use  Create React App  to create a simple app in seconds. \n npx create-react-app my-widget --use-npm\n \n This is the expected output: \n my-widget\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Start the app. \n cd  my-widget\n npm  start\n Wrap with Custom Element \n Add a new file  src/WidgetElement.js  with the custom element that will wrap the entire React app. \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n class   WidgetElement   extends   HTMLElement   { \n     connectedCallback ( )   { \n         this . mountPoint  =  document . createElement ( 'div' ) ; \n         this . appendChild ( this . mountPoint ) ; \n        ReactDOM . render ( < App  / > ,   this . mountPoint ) ; \n     } \n } \n\ncustomElements . define ( 'my-widget' ,  WidgetElement ) ; \n\n export   default  WidgetElement ; \n \n TIP \n connectedCallback  is a lifecycle hook that  runs each time the element is added to the DOM. \n \n The React  root  node is programatically generated in the  connectedCallback  method when our custom element is added to the DOM. \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Import Custom Element \n Open  src/index.js . Here's what the initial file looks like: \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import   './index.css' ; \n import  App  from   './App' ; \n import   *   as  serviceWorker  from   './serviceWorker' ; \n\nReactDOM . render ( < App  / > ,  document . getElementById ( 'root' ) ) ; \n\n // If you want your app to work offline and load faster, you can change \n // unregister() to register() below. Note this comes with some pitfalls. \n // Learn more about service workers: https://bit.ly/CRA-PWA \nserviceWorker . unregister ( ) ; \n \n Replace the entire file with these two lines. \n import   './index.css' ; \n import   './WidgetElement' ; \n Test Micro Frontend \n \n \n Open  public/index.html . \n \n \n Replace  <div id=\"root\"></div>  with the custom element  <my-widget /> . \n \n \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < my-widget   /> \n    ...\n   </ body > \n \n Congratulations! \n You’re now running  React  in a containerized micro frontend. \n Get Resource URL \n Let's add our micro frontend to Entando by adding our JavaScript and CSS files to the  public  folder. \n TIP \n Entando makes files publicly available through the  public  folder. \n Add Widget \n Initially, we'll add a widget to get the resource URL for the  public  folder. Later on, we'll use the same widget to add our micro frontend to Entando. \n \n \n Go to  Entando App Builder  in your browser. \n \n \n Click  UX Patterns  →  Widgets  at the top nav. \n \n \n Click  Add  at the upper right. \n \n \n Enter the following: \n \n \n \n \n Title: My Widget  → for both English and Italian languages \n Code: my_widget  → note: dashes are not allowed \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < @wp . resourceURL  /> \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n \n \n Click  Save . \n Add Page \n Next, let's add our widget to a page so we can view the  Resource URL . \n If you're getting started with a new install of Entando, let's add our widget to the  Home  page: \n \n \n For Experienced Entando users: \n Add a new page → Add your widget to the page \n \n \n \n \n Click  Page Designer  →  Page Tree  at the top nav. \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n \n \n In the Search field in right-hand sidebar, enter  My Widget . \n \n \n Drag and drop  My Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n This will take you to a blank home page with your widget. \n \n \n Copy the  Resource URL . \n \n /entando-de-app/cmsresources/\n Build It \n Now that we have the resource URL where we'll host our  Create React App , we're ready to build. \n \n \n Create an  .env  file in the project root of your  Create React App . \n \n \n Add the  PUBLIC_URL  where we'll be hosting our files. \n \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/my-widget\n \n \n Replace  quickstart-entando.192.168.64.34.nip.io/app-builder  with the URL for your Entando App Builder instance. →  How to find your Entando App Builder URL. \n \n Notes \n \n quickstart-entando.192.168.64.34.nip.io  represents your  Entando App Builder  instance. \n /entando-de-app/cmsresources/  is your Resource URL \n my-widget  is the public folder we'll create to host our files \n \n \n TIP \n When you run  npm run build ,  Create React App  will substitute  %PUBLIC_URL%  with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL. \n npm build \n \n \n Open a command line, and navigate to the project root of your  Create React App . \n \n \n Run the command: \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n \n \n \n Generated Build Files \n We rename the JavaScript and CSS files so we can deploy new versions of the micro frontend without having to update the  Custom UI  field of our widget to reference the new files. \n \n If you want to use the original  file names with the content hashes to avoid potential caching issues in your browser , update the  Custom UI  field of your widget when deploying new versions of your micro frontend. The  Custom UI  settings will be covered in the next section. \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Configuration  at the upper right hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  my-widget . \n \n \n Click  Save . \n \n \n Click  public  →  my-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n my-widget/static/css \n my-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n my-widget/static/css/main.css \n my-widget/static/js/main.js \n my-widget/static/js/runtime.js \n my-widget/static/js/vendor.js \n \n Note: You can drag and drop the files in your browser. \n \n Upload the  React  logo. \n \n \n my-widget/static/media/logo.5d5d9eef.svg  → You don't need to rename this file. \n Update Custom UI Field \n \n \n Click  UX Patterns  →  Widgets . \n \n \n Under the  My Widgets  cateogory → next to  My Widget  → under  Action  → select  Edit . \n \n \n Update  Custom UI  field: \n \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> my-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/main.js \" > </ script > \n < my-widget   /> \n \n \n Click  Save . \n View in Homepage \n Let's see the React micro frontend in action on our page. \n \n \n In the  Entando App Builder  dashboard, click  Go to Homepage  at the upper right. \n \n \n Go to the page that you created, and click refresh. \n \n \n \n Congratulations! \n You now have a React micro frontend running in Entando. \n \n"},{title:"Tutorial: Using a custom event for widget communication",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/widget-communication.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/widget-communication.md",key:"v-1316b766",path:"/v6.1/tutorials/micro-frontends/micro-frontends/widget-communication.html",headers:[{level:2,title:"Fire an event from a widget",slug:"fire-an-event-from-a-widget"},{level:3,title:"PublisherWidgetElement.js",slug:"publisherwidgetelement-js"},{level:3,title:"App.js",slug:"app-js"},{level:2,title:"Consume an event in another widget",slug:"consume-an-event-in-another-widget"},{level:3,title:"SubscriberWidgetElement.js",slug:"subscriberwidgetelement-js"},{level:3,title:"App.js",slug:"app-js-2"},{level:2,title:"Make both widgets work in Entando",slug:"make-both-widgets-work-in-entando"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:" Tutorial: Using a custom event for widget communication \n Entando 6 widgets can communicate through  Custom\nEvents ,\nan established web standard. \n In this tutorial we’re going to build two widgets: the first one will\nfire an event, the second one will intercept it. \n Fire an event from a widget \n npx create-react-app publisher-widget --use-npm \n then follow the same steps from our  previous\ntutorial . \n Be careful to: \n \n \n rename  WidgetElement.js  to  PublisherWidgetElement.js \n \n \n edit  index.js : now you should import  PublisherWidgetElement \n \n \n edit  index.html  updating the reference to the custom element: now\nit’s  <publisher-widget> \n \n \n edit  PublisherWidgetElement.js  and  App.js \n \n \n We need to add some event firing logic \n PublisherWidgetElement.js \n import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst EVENTS = {\n  greeting: 'greeting',\n};\n\nclass PublisherWidgetElement extends HTMLElement {\n\n  constructor() {\n    super();\n    this.onGreet = name => this.publishWidgetEvent(EVENTS.greeting, { name });\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement('div');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  publishWidgetEvent(eventId, detail) {\n    const widgetEvent = new CustomEvent(eventId, { detail });\n    window.dispatchEvent(widgetEvent);\n  }\n\n  render() {\n    ReactDOM.render(<App onGreet={this.onGreet} />, this.mountPoint);\n  }\n}\n\ncustomElements.define('publisher-widget', PublisherWidgetElement);\n\nexport default PublisherWidgetElement;\n \n \n Note \n in the  CustomEvent  constructor,  detail  is the specific name to use\nin the event payload, as for the\n specs . \n App.js \n import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: ''};\n  }\n\n  handleNameChange(value) {\n    this.setState(prevState => ({\n      ...prevState,\n      name: value,\n    }));\n  }\n\n  render() {\n    const { name } = this.state;\n    const { onGreet } = this.props;\n    return (\n      <div>\n        <h1>Send a greeting</h1>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" onChange={e => this.handleNameChange(e.target.value)} value={name} />\n        <button onClick={() => onGreet(name)}>Say hello!</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n To quickly test the event publishing we can execute from the JS console\nthis line of code \n window.addEventListener('greeting', (evt) => console.log('Hello', evt.detail.name))\n \n then write something in the text field, click the \"Say hello!\" button\nand have a look at the JS console, it will show the expected hello\nmessage. \n Consume an event in another widget \n Now, let’s create the subscriber widget. \n npx create-react-app subscriber-widget --use-npm \n then follow the same steps from our  previous\ntutorial . \n Be careful to \n \n \n rename  WidgetElement.js  to  SubscriberWidgetElement.js \n \n \n edit  index.js : now you should import  SubscriberWidgetElement \n \n \n edit  index.html  updating the reference to the custom element: now\nit’s  <subscriber-widget> \n \n \n edit  SubscriberWidgetElement.js  and  App.js \n SubscriberWidgetElement.js \n (Rename  WidgetElement  to  SubscriberWidgetElement  and update the\nimport in  index.js  accordingly) \n import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst EVENTS = {\n  greeting: 'greeting',\n};\n\nclass SubscriberWidgetElement extends HTMLElement {\n\n  constructor() {\n    super();\n    this.name = null;\n    this.subscribeToWidgetEvent(EVENTS.greeting, (evt) => this.onGreeting(evt.detail.name));\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement('div');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  subscribeToWidgetEvent(eventType, eventHandler) {\n    window.addEventListener(eventType, eventHandler);\n  }\n\n  onGreeting(name) {\n    this.name = name;\n    this.render();\n  }\n\n  render() {\n    ReactDOM.render(<App name={this.name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define('subscriber-widget', SubscriberWidgetElement);\n\nexport default SubscriberWidgetElement;\n App.js \n import React from 'react';\nimport './App.css';\n\nfunction App({ name }) {\n  return name ? (<h2>Just got a greeting from {name}</h2>)\n    : (<h2>Waiting for a greeting...</h2>);\n}\n\nexport default App;\n \n To quickly test the event publishing we can execute from the JS console\nthese lines of code \n const widgetEvent = new CustomEvent('greeting', {\n  detail: {\n    name: 'Pippo'\n  },\n});\nwindow.dispatchEvent(widgetEvent);\n \n and then the widget will update the text. \n Make both widgets work in Entando \n To properly test widgets in an Entando instance, follow these steps (you\ncan use the  basic microfrontend\ntutorial  as reference) \n \n \n build both widgets \n \n \n copy widget files \n \n \n create widgets from App Builder \n \n \n create a page model from App Builder \n \n \n create a page and assign the just created page model \n \n \n configure the page dragging both widgets to the page \n \n \n For a sample page model, use this one \n JSON Configuration \n {\n  \"frames\": [\n    {\n      \"pos\": 0,\n      \"descr\": \"Sample Frame\",\n      \"mainFrame\": false,\n      \"defaultWidget\": null,\n      \"sketch\": null\n    },\n    {\n      \"pos\": 1,\n      \"descr\": \"Sample Frame Two\",\n      \"mainFrame\": false,\n      \"defaultWidget\": null,\n      \"sketch\": null\n    }\n  ]\n}\n \n Template \n <#assign wp=JspTaglibs[\"/aps-core\"]>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n    <title><@wp.currentPage param=\"title\" /></title>\n</head>\n<body>\n<h1><@wp.currentPage param=\"title\" /></h1>\n<div><@wp.show frame=0 /></div>\n<div><@wp.show frame=1 /></div>\n</body>\n</html>\n \n Now, go to the page you just created and you will find both widgets.\nWrite something in the publisher widget input, press the button and the\nsubscriber widget will update. Done! \n"},{title:"Tutorial: Blueprint generated widgets' overview",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/micro-frontends/generated-widgets.html",relativePath:"v6.1/tutorials/micro-frontends/micro-frontends/generated-widgets.md",key:"v-4a3a209f",path:"/v6.1/tutorials/micro-frontends/micro-frontends/generated-widgets.html",headers:[{level:2,title:"Common parts",slug:"common-parts"},{level:3,title:"Authentication",slug:"authentication"},{level:3,title:"Custom events",slug:"custom-events"},{level:3,title:"Tests and mocks",slug:"tests-and-mocks"},{level:3,title:"PropTypes",slug:"proptypes"},{level:3,title:"Fetching data",slug:"fetching-data"},{level:2,title:"Form widget",slug:"form-widget"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: Blueprint generated widgets\' overview \n When you create an entity using Entando blueprint, it generates a few\npremade widgets. In this section we will review them. \n We will be using  Conference  as an entity name for the examples below. \n Common parts \n Each widget contains a README file that should help you with the setup. \n All generated widgets are web components created using Custom Elements\nAPI. \n Each widget is displayed using the custom element tag - e.g., inside the\nDetails widget folder  conference/detailsWidget/public/index.html  you\ncan find\n conference-details id="1" override-edit-handler hide-edit-button /> .\nThis element  <conference-details />  is defined in the component entry\npoint at\n conference/detailsWidget/src/custom-elements/ConferenceDetailsElement.js . \n \n Note \n custom element names ( conference-details ) require a dash in them to\nbe used, e.g., (kebab-case) - they can not be single words. \n \n For more information about web components, custom elements and micro\nfrontends, please refer to "Create a react micro frontend widget"\nsection. \n Authentication \n If widget requires authentication, component is wrapped in\n KeycloakContext.Provider  and Keycloak object is fetched from\n window.entando.keycloak  variable. Entando is using Keycloak as our\nauthentication provider, but you can add any providers you like. \n ReactDOM.render(\n  <KeycloakContext.Provider value={this.keycloak}>\n    <StylesProvider jss={this.jss}>\n      <ThemeProvider theme={this.muiTheme}>{FormContainer}</ThemeProvider>\n    </StylesProvider>\n  </KeycloakContext.Provider>,\n  this.mountPoint\n);\n \n For more information about authentication implementation, please refer\nto the "Authentication" section. \n Custom events \n All widgets rely on custom events for communication which is why custom\nevent creation and removal is in each widget, as well as event listener\ncreation. Note that when an event listener is created, it should be when\nthe element is no longer needed. It should be created in the custom\nelement’s  disconnectedCallback()  function. \n To add more events to listen to the widgets, add the event types to\n INPUT_EVENT_TYPES  object at\n detailsWidget/src/custom-elements/widgetEventTypes.js  which will add\nit to the listener list (or remove the event by removing the element). \n For more information about custom events and widget communication,\nplease refer to the section on "Widget communication". \n Tests and mocks \n Each widget has tests written for it. Entando uses\n react-testing-library , but developers are free to upgrade and use any\ntool. Tests are kept at  detailsWidget/src/components/  and mocks for\nthem are at  detailsWidget/src/components/ . \n PropTypes \n PropTypes for data used across several components are shared - you can\nsee and modify them at  detailsWidget/src/components/ . This way you can\navoid repeating same propTypes in each component and just import shared\nones \n import React from \'react\';\nimport conferenceType from \'components/__types__/conference\';\n\nconst ConferenceDetails = props => {\n  // ...\n};\n\nConferenceDetails.propTypes = {\n  conference: conferenceType,\n  t: PropTypes.func.isRequired,\n};\n\nexport default ConferenceDetails;\n Fetching data \n For data fetching from widgets use Fetch API. You can find functions for\nfetching data at  detailsWidget/src/api  in different files for\ndifferent contexts. \n Form widget \n For displaying forms within a widget use\n Formik  which helps with form state\nmanagement. For data validation use\n Yup . \n'},{title:"Add a Configuration Screen in App Builder",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/widget-configuration/",relativePath:"v6.1/tutorials/micro-frontends/widget-configuration/README.md",key:"v-62808372",path:"/v6.1/tutorials/micro-frontends/widget-configuration/",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:2,title:"Add Input Field",slug:"add-input-field"},{level:2,title:"Custom Element",slug:"custom-element"},{level:2,title:"Configuration Screen",slug:"configuration-screen"},{level:2,title:"Add Attribute",slug:"add-attribute"},{level:2,title:"Display Input",slug:"display-input"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Update Widget in App Builder",slug:"update-widget-in-app-builder"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Add a Configuration Screen in App Builder \n Entando 6 widgets can be customized through an App Builder configuration\nscreen so the citizen developers can avoid writing ad-hoc additional\ncode. \n In Entando 6, the configuration screen is also a micro frontend, which\ncan also be defined as a web component. That means you can develop and\ntest it in isolation, without a running Entando instance. \n Create React App \n Let’s start with the boilerplate provided by  Create React\nApp , probably the most popular one. \n npx create-react-app my-widget-config --use-npm \n my-widget-config\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Then, type  cd my-widget-config  and  npm start  to start the app. \n Add Input Field \n Let’s start with a simple form: only an input with a label. So, let’s\nedit  App.js \n import React from \'react\';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \'\'};\n  }\n\n  handleNameChange(value) {\n    this.setState(prevState => ({\n      ...prevState,\n      name: value,\n    }));\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div>\n        <h1>Sample Entando 6 Widget Configuration</h1>\n        <label htmlFor="name">Name</label>\n        <input id="name" onChange={e => this.handleNameChange(e.target.value)} value={name} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n You are free to use your favorite form handling library e.g.,\n Formik ,\n redux-form  (that requirese redux) or others. \n In regards to styling, since this is going to be an App Builder screen,\nwe strongly suggest using  PatternFly\nv3  ( patternfly  and  patternfly-react \npackages) to keep UX coherence. \n Custom Element \n Now, let’s add the web component that will wrap the entire React app.\nLet’s name it  WidgetElement \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nclass WidgetElement extends HTMLElement {\n  constructor() {\n    super();\n    this.reactRootRef = React.createRef();\n    this.mountPoint = null;\n  }\n\n  get config() {\n    return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n  }\n\n  set config(value) {\n    return this.reactRootRef.current.setState(value);\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget-config\', WidgetElement);\n\nexport default WidgetElement;\n \n Its responsibility is rendering the react app and syncing the react app\nstate in a  config  property, that  must  be named that way. The key to\nApp builder communication is that it works in three steps: \n \n \n App Builder reads  config  property when the widget config screen is\nrendered \n \n \n config  property is mutated when a user configures the widget \n \n \n When a user saves the config, App Builder retrieves it (again, from\nthe  config  property) and persists it through Entando APIs \n \n \n This means the widget developer can focus on the configuration screens\nwithout having to call Entando APIs to read or write configuration. \n One more JS file to update:  index.js . Starting from this \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport \'./index.css\';\nimport App from \'./App\';\nimport * as serviceWorker from \'./serviceWorker\';\n\nReactDOM.render(<App />, document.getElementById(\'root\'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n You only have to import  WidgetElement  plus the css, if needed.\nSomething like \n import \'./index.css\';\nimport \'./WidgetElement\';\n \n We assume we don’t need a service worker for the widget, so we can\ndelete serviceWorker.js. \n To ensure our web component is working we have to edit\n public/index.html . Remove  <div id="root"></div>  from the  body  (we\nprogrammatically generated the react root in the  connectedCallback \nmethod of  WidgetElement ) and add our new web component tag\n <my-widget /> . \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget-config />\n  </body>\n</html>\n \n \n Note \n the web component tag name ( my-widget-config  in this tutorial)\n must  match the first parameter of the  customElements.define \nmethod. \n \n The page should auto reload and…​congrats, you’re running an Entando 6\nwidget in isolation. \n Configuration Screen \n Before integrating the widget config screen, we need some widget info.\nOpen App Builder, go to UX Patterns → Widgets and click on the installed\nwidget that we’re creating the configuration screen for. \n You’ll see a screen like: \n \n Next, we’ll build our widget before embedding it into the Entando 6\ninstance. From the react project root, type \n npm run build \n and a  build/static  directory will be generated. Copy it into the\nEntando 6 instance under\n src\\main\\webapp\\cmsresources\\my-widget-config , then rename \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n Now, edit again the widget and update the  configUI  field. \n {\n  "customElement": "my-widget-config",\n  "resources": [\n    "my-widget-config/static/js/runtime.js",\n    "my-widget-config/static/js/vendor.js",\n    "my-widget-config/static/js/main.js"\n  ]\n}\n \n \n Note \n \n \n It is possible to keep the original names in order to avoid\npotential caching issues, but then you will have to update the\n Config UI  field in the App Builder widget screen each time a new\nversion of the widget is deployed. \n \n \n configUI  is a JSON object, so pay attention to save a\nwell-formed one (the integrated JSON editor will help you) \n \n \n value for  customElement  must match the name of custom tag in\n index.html  and the one passed as parameter to\n customElements.define  in  WidgetElement \n \n \n \n Last step: configure a page in App Builder, drag our widget into the\npage model slot and you’ll see the configuration screen we just built. \n Display Widget Configuration \n So, we already created a react micro frontend widget and configuration\nscreen to customize a  name  field. \n In this tutorial we will display that field in our micro frontend\nwidget. \n Add Attribute \n Edit  WidgetElement  to add attribute handling to the custom element,\nand make re-render our app when an attribute changes. Now, the  name \nattribute is being read from the custom element and passed as a prop to\nthe react root component ( App ). \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nconst ATTRIBUTES = {\n  name: \'name\',\n};\n\nclass WidgetElement extends HTMLElement {\n\n  static get observedAttributes() {\n    return Object.values(ATTRIBUTES);\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!Object.values(ATTRIBUTES).includes(name)) {\n      throw new Error(`Untracked changed attribute: ${name}`);\n    }\n    if (this.mountPoint && newValue !== oldValue) {\n      this.render();\n    }\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  render() {\n    const name = this.getAttribute(ATTRIBUTES.name);\n    ReactDOM.render(<App name={name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget\', WidgetElement);\n\nexport default WidgetElement;\n \n \n Note \n attributeChangedCallback  is also a custom elements lifecycle hook\nmethod. \n Display Input \n Edit the  App  component now, to make it display the  name  prop. \n import React from \'react\';\nimport \'./App.css\';\n\nfunction App({name}) {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <p>\n          Hello, {name}!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n \n Now, to ensure our custom element is working we can edit\n public/index.html  and set a value for the  name  attribute of the\ncustom element. \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget name="Marco"/>\n  </body>\n</html>\n \n After page reload, you should be able to display a simple "Hello,\nMarco!" message. \n Build It \n From the react project root, type: \n npm run build \n and the  build/static  directory will be (re)generated. Copy it again\ninto the Entando 6 instance under\n src\\main\\webapp\\resources\\static\\my-widget , then rename \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n a file like  css/main.d1b05096.chunk.js  to  css/main.css \n(stylesheet) \n \n \n \n Note \n you could keep the original names in order to avoid potential caching\nissues, but then you will have to update the  Custom UI  field in the\nApp Builder widget screen every time a new version of the widget is\ndeployed. \n \n If the application server you’re running does not have hot deploy\nenabled, restart it. \n Update Widget in App Builder \n Open the Entando App Builder, go to UX Patterns → Widgets, find the\nwidget  My Widget  and click to edit it. \n You’ll see a screen like this one \n \n Update the  Custom UI  field from: \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<my-widget />\n \n to \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<@wp.currentWidget param="config" configParam="name" var="configName" />\n<my-widget name="${configName}" />\n \n We basically added a JSTL tag to extract a field (under  configParam )\nfrom the config field of the current widget and put it in a  configName \nvariable, that we pass to the custom element. \n Save the widget and reload the page that contains the widget: you’ll see\n"Hello, Marco!" as expected. \n'},{title:"Tutorial: Display widget configuration data",frontmatter:{},regularPath:"/v6.1/tutorials/micro-frontends/widget-configuration/display-widget-config-data.html",relativePath:"v6.1/tutorials/micro-frontends/widget-configuration/display-widget-config-data.md",key:"v-5c95a127",path:"/v6.1/tutorials/micro-frontends/widget-configuration/display-widget-config-data.html",headers:[{level:2,title:"Add an attribute to the custom element",slug:"add-an-attribute-to-the-custom-element"},{level:2,title:"Make react component handle the input",slug:"make-react-component-handle-the-input"},{level:2,title:"Rebuild the widget",slug:"rebuild-the-widget"},{level:2,title:"Update the Entando 6 widget in App Builder",slug:"update-the-entando-6-widget-in-app-builder"}],lastUpdated:"6/26/2020, 10:59:44 AM",content:' Tutorial: Display widget configuration data \n So, we already created a react micro frontend widget and configuration\nscreen to customize a  name  field. \n In this tutorial we will display that field in our micro frontend\nwidget. \n Add an attribute to the custom element \n Edit  WidgetElement  to add attribute handling to the custom element,\nand make re-render our app when an attribute changes. Now, the  name \nattribute is being read from the custom element and passed as a prop to\nthe react root component ( App ). \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nconst ATTRIBUTES = {\n  name: \'name\',\n};\n\nclass WidgetElement extends HTMLElement {\n\n  static get observedAttributes() {\n    return Object.values(ATTRIBUTES);\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!Object.values(ATTRIBUTES).includes(name)) {\n      throw new Error(`Untracked changed attribute: ${name}`);\n    }\n    if (this.mountPoint && newValue !== oldValue) {\n      this.render();\n    }\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  render() {\n    const name = this.getAttribute(ATTRIBUTES.name);\n    ReactDOM.render(<App name={name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget\', WidgetElement);\n\nexport default WidgetElement;\n \n \n Note \n attributeChangedCallback  is also a custom elements lifecycle hook\nmethod. \n Make react component handle the input \n Edit the  App  component now, to make it display the  name  prop. \n import React from \'react\';\nimport \'./App.css\';\n\nfunction App({name}) {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <p>\n          Hello, {name}!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n \n Now, to ensure our custom element is working we can edit\n public/index.html  and set a value for the  name  attribute of the\ncustom element. \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget name="Marco"/>\n  </body>\n</html>\n \n After page reload, you should be able to display a simple "Hello,\nMarco!" message. \n Rebuild the widget \n From the react project root, type: \n npm run build \n and the  build/static  directory will be (re)generated. Copy it again\ninto the Entando 6 instance under\n src\\main\\webapp\\resources\\static\\my-widget , then rename \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n a file like  css/main.d1b05096.chunk.js  to  css/main.css \n(stylesheet) \n \n \n \n Note \n you could keep the original names in order to avoid potential caching\nissues, but then you will have to update the  Custom UI  field in the\nApp Builder widget screen every time a new version of the widget is\ndeployed. \n \n If the application server you’re running does not have hot deploy\nenabled, restart it. \n Update the Entando 6 widget in App Builder \n Open the Entando App Builder, go to UX Patterns → Widgets, find the\nwidget  My Widget  and click to edit it. \n You’ll see a screen like this one \n \n Update the  Custom UI  field from: \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<my-widget />\n \n to \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<@wp.currentWidget param="config" configParam="name" var="configName" />\n<my-widget name="${configName}" />\n \n We basically added a JSTL tag to extract a field (under  configParam )\nfrom the config field of the current widget and put it in a  configName \nvariable, that we pass to the custom element. \n Save the widget and reload the page that contains the widget: you’ll see\n"Hello, Marco!" as expected. \n'},{title:"Entando Platform",frontmatter:{sidebarDepth:0},regularPath:"/v6.2/docs/",relativePath:"v6.2/docs/README.md",key:"v-3aec1854",path:"/v6.2/docs/",headers:[{level:2,title:"Entando Architecture",slug:"entando-architecture"},{level:2,title:"Why Kubernetes?",slug:"why-kubernetes"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Entando Platform \n Entando is a  micro frontend platform for Kubernetes  that helps enterprises innovate faster with parallel development teams that have end-to-end autonomy across the entire stack. \n With native support for Javascript app development, a micro frontend and microservices architecture, deployment of apps in containers that can be individually scaled up and down, and automated management of containers with Kubernetes, we simplify the move for enterprises looking to modernize across on-prem and cloud infrastructures. \n Entando Architecture \n \n The Entando platform includes the following major elements: \n \n Entando App Engine : assemble micro frontends & microservices and compose them on a page. \n Entando App Builder : the user interface to build and design applications. \n Entando Component Generator : provide advanced data modeling capabilities and automatically generate the corresponding microservices and micro frontends. \n Entando Component Repository : a shared, internal repository to encourage code reuse across the enterprise. \n Entando Identity Management : token-based authentication across multiple domains and connect service providers with identity providers. \n Entando WCMS : a web content management system that supports headless CMS. \n (optional)  Entando Business Automation Bundle : workflow and task automation including out of the box integration with Red Hat Process Automation Manager (PAM). \n Why Kubernetes? \n Instead of you doing the work to ensure your apps and services stay up and running, Kubernetes does the work for you. For each app or service, you can set resource limits, the number of pods you want backing each service, upgrade strategy, and auto-scaling. Kubernetes actively manages your cluster to match your defined resource utilization and ensures your site doesn't go down. \n How Google Runs Containers in Production \n Each week, Google deploys over 2 billion containers in production to run all of its services like Gmail, YouTube, and Search. Kubernetes is Google's open source solution to automate the management of containers at scale. \n \n Over 50% of Fortune 500 companies use Kubernetes with product offerings from Amazon Elastic Kubernetes Service (EKS), Google Cloud Platform (GKE), IBM (Red Hat) OpenShift, Microsoft Azure (AKS), and VMWare Pivotal (PKS). \n"},{title:"Entando Contributor Covenant Code of Conduct",frontmatter:{},regularPath:"/v6.2/docs/community/code-of-conduct.html",relativePath:"v6.2/docs/community/code-of-conduct.md",key:"v-415409a8",path:"/v6.2/docs/community/code-of-conduct.html",headers:[{level:2,title:"Our Pledge",slug:"our-pledge"},{level:2,title:"Our Standards",slug:"our-standards"},{level:2,title:"Enforcement Responsibilities",slug:"enforcement-responsibilities"},{level:2,title:"Scope",slug:"scope"},{level:2,title:"Enforcement",slug:"enforcement"},{level:2,title:"Enforcement Guidelines",slug:"enforcement-guidelines"},{level:3,title:"1. Correction",slug:"_1-correction"},{level:3,title:"2. Warning",slug:"_2-warning"},{level:3,title:"3. Temporary Ban",slug:"_3-temporary-ban"},{level:3,title:"4. Permanent Ban",slug:"_4-permanent-ban"},{level:2,title:"Attribution",slug:"attribution"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Entando Contributor Covenant Code of Conduct \n Our Pledge \n We as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation. \n We pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community. \n Our Standards \n Examples of behavior that contributes to a positive environment for our\ncommunity include: \n \n Demonstrating empathy and kindness toward other people \n Being respectful of differing opinions, viewpoints, and experiences \n Giving and gracefully accepting constructive feedback \n Accepting responsibility and apologizing to those affected by our mistakes,\nand learning from the experience \n Focusing on what is best not just for us as individuals, but for the\noverall community \n \n Examples of unacceptable behavior include: \n \n The use of sexualized language or imagery, and sexual attention or\nadvances of any kind \n Trolling, insulting or derogatory comments, and personal or political attacks \n Public or private harassment \n Publishing others' private information, such as a physical or email\naddress, without their explicit permission \n Other conduct which could reasonably be considered inappropriate in a\nprofessional setting \n Enforcement Responsibilities \n Community leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful. \n Community leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate. \n Scope \n This Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. \n Enforcement \n Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncommunity@entando.com. \n All complaints will be reviewed and investigated promptly and fairly. \n All community leaders are obligated to respect the privacy and security of the\nreporter of any incident. \n Enforcement Guidelines \n Community leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct: \n 1. Correction \n Community Impact : Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community. \n Consequence : A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested. \n 2. Warning \n Community Impact : A violation through a single incident or series\nof actions. \n Consequence : A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban. \n 3. Temporary Ban \n Community Impact : A serious violation of community standards, including\nsustained inappropriate behavior. \n Consequence : A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban. \n 4. Permanent Ban \n Community Impact : Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals. \n Consequence : A permanent ban from any sort of public interaction within\nthe community. \n Attribution \n This Code of Conduct is adapted from the  Contributor Covenant ,\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html. \n Community Impact Guidelines were inspired by  Mozilla's code of conduct\nenforcement ladder . \n For answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations. \n"},{title:"Contributing to Entando",frontmatter:{},regularPath:"/v6.2/docs/community/contributing.html",relativePath:"v6.2/docs/community/contributing.md",key:"v-696f6946",path:"/v6.2/docs/community/contributing.html",headers:[{level:2,title:"Contributing to the Source",slug:"contributing-to-the-source"},{level:2,title:"Java",slug:"java"},{level:2,title:"Javascript",slug:"javascript"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Contributing to Entando \n There are many ways to contribute to Entando including participating in the  Entando Forum , opening issues on GitHub,  updating documentation , building bundles using the  Entando Component Repository , and contributing directly to the source. \n Contributing to the Source \n Entando welcomes contributions to our source code repositories. This is a brief overview of how to create a pull request for an Entando repository. \n If you're new to forks in the git world checkout this guide  Working with Forks \n \n Find the repository you want to edit on the Entando GitHub\n \n https://github.com/entando \n https://github.com/entando-k8s \n \n \n Create a fork of the repository you want to update \n Make your changes or updates on your fork. We recommend making your changes on a branch so that you can update your commits as needed before creating your PR \n Submit a PR against the master branch of the repository you're working against. If you're fixing a specific issue reference that issue number in the notes and linked issues \n Watch the automated builds to make sure everything passes \n The Entando team will merge your changes! \n Code Style and Formatting \n Most Entando repositories enforce code style rules. References and setup for the main\nsource types are provided below. \n Java \n Java rules are based on checkstyle and PMD can be found at in the  entando-code-style  project. There are configuration files for Intellij, Eclipse, and Netbeans for automated formatting. \n Javascript \n Code style and formatting rules for all Entando javascript projects are enforced by linters in every project. For a reference example see: .sass-lint.yml and .eslintrc.js in the  App builder \n In the future these rules will be replaced by Prettier. \n Find the Code \n Entando source can be found on GitHub in the following organizations. \n \n https://github.com/entando \n https://github.com/entando-k8s \n \n For an overview of the key projects in both GitHub organizations and their role in the architecture see  Entando Deployment Structure \n Get Help \n If you have questions, need help, or want to find out more about contributing join us at \n \n Entando Forum \n Community Slack \n \n"},{title:"Overview",frontmatter:{},regularPath:"/v6.2/docs/concepts/",relativePath:"v6.2/docs/concepts/README.md",key:"v-80ada3b6",path:"/v6.2/docs/concepts/",headers:[{level:2,title:"Entando App Engine",slug:"entando-app-engine"},{level:2,title:"Entando App Builder",slug:"entando-app-builder"},{level:2,title:"Entando Component Generator",slug:"entando-component-generator"},{level:2,title:"Entando Component Repository",slug:"entando-component-repository"},{level:2,title:"Entando Identity Management",slug:"entando-identity-management"},{level:2,title:"Entando WCMS",slug:"entando-wcms"},{level:2,title:"Entando Cluster Citizens",slug:"entando-cluster-citizens"},{level:3,title:"Architecture diagram",slug:"architecture-diagram"},{level:3,title:"Members of the cluster",slug:"members-of-the-cluster"},{level:2,title:"Entando Ingresses",slug:"entando-ingresses"},{level:3,title:"What is an ingress",slug:"what-is-an-ingress"},{level:3,title:"How ingresses are used in an Entando Cluster",slug:"how-ingresses-are-used-in-an-entando-cluster"},{level:3,title:"Default Ingress HTTP Routes",slug:"default-ingress-http-routes"},{level:3,title:"Exposing plugins in the EntandoApp domain",slug:"exposing-plugins-in-the-entandoapp-domain"},{level:3,title:"How to check ingresses in my cluster",slug:"how-to-check-ingresses-in-my-cluster"},{level:3,title:"Learn more",slug:"learn-more"}],lastUpdated:"9/9/2020, 3:54:34 PM",content:' Overview \n A portal, website, web app, or mobile app built with Entando is called an Entando application.\nAn Entando application is an assembly of out of the box and/or custom built components running on the\nEntando Platform. Components can be widgets, micro frontends, microservices, page templates,\nWCMS content or WCMS content types. \n Entando App Engine \n The Entando App Engine is the heart of the Entando Platform by providing the primary out-of-the-box services for\ndeveloping applications. Key features: \n \n Expose the APIs the Entando App Builder uses to provide the page and content management interface for your application. \n Handle the work of assembling micro frontends and microservices and combining them on specific pages as defined by the Entando App Builder. \n Provide the data access layer to persist the page and application design. \n Manage the cluster infrastructure. \n \n See also:  APIs tutorial \n Entando App Builder \n The Entando App Builder is the feature-rich management interface used to design and build pages for Entando applications. \n See also:  Widget Tutorial \n Entando Component Generator \n The Entando Component Generator is Entando\'s implementation of  JHipster  that allows users to\nquickly and efficiently generate the skeleton of an Entando Component. The Entando Component Generator provides advanced\ndata modeling capabilities including object relational mapping and automatic generation of micro frontends and microservices.\nThe generated skeleton serves as a starting point to help a development team swiftly meet the needs of the business. \n See also:  Entando JHipster Blueprint \n Entando Component Repository \n The Entando Component Repository (ECR) is used to store and retrieve shareable components so they can be used in multiple\nEntando applications across the enterprise. \n See also:  ECR Overview \n Entando Identity Management \n Entando Identity Management is the  Keycloak -based token-based authentication mechanism used by the\nEntando platform. It provides the ability to add Single Sign On capabilities across multiple domains and to connect service\nproviders with identity providers. \n See also:  Entando Authentication \n Entando WCMS \n The Entando Web Content Management System (WCMS) is a lightweight content and digital asset management system with support\nfor headless operation. It allows management of widgets and html fragments so they can be placed within an Entando application. \n See also:  Content Types  or  Content Templates \n Entando Cluster Citizens \n The purpose of this guide is to give an overview of the members of an Entando cluster and their role. \n Architecture diagram \n Let’s start with a picture of an Entando 6 cluster and how the various\nmembers interact with each other. \n Members of the cluster \n An Entando 6 cluster is composed of various citizens which interact with\neach other. Most of these citizens have a Custom Resource Definition\nfile associated with them and are deployable on Kubernetes using the\nEntando operator and controllers. \n Entando app \n An Entando application is composed of three parts: \n \n \n Entando App Builder : the user interface to customize and build an Entando application, as well as interact with the Entando Component Repository. \n \n \n Entando App Engine : the backend APIs providing access to Entando\nservices. \n \n \n Entando Component Manager : the service providing the Entando\nComponent Repository functionality, e.g. listing the available\nbundles, install/uninstall a bundle, etc. Check the  dedicated\nsection  for more details. \n \n \n The interaction between these three components (and the rest of the\nEntando cluster) use the authorization/authentication features provided\nby Keycloak. \n Entando Component Manager \n As briefly introduced before, the Entando component manager is able to\nlist the EntandoDeBundles accessible from the EntandoApp and provide the\ninstall/uninstall services to install a bundle on an Entando App. All of\nthese services are made possible by the communication with the Entando\nKubernetes service, the only service of the Entando ecosystem (other\nthan the operator itself) able to interact with the cluster and some of\nthe Entando custom resources. \n Entando Kubernetes Service \n The Entando Kubernetes Service is part of the Entando cluster\ninfrastructure custom resource, and provides an access point to some of\nthe custom resources defined by Entando, in particular: \n \n \n Entando applications \n \n \n Entando plugins \n \n \n Entando links \n \n \n Entando Component Repository bundles \n \n \n Some of the main services provided by the Entando Kubernetes Service\nare: \n \n \n Provide a list of the available EntandoDeBundles to the\ncomponent-manager \n \n \n Deploy a plugin during the installation of a bundle or discovery of\nan already available plugin and expose that to an app \n \n \n Create a link between an EntandoApp and an EntandoPlugin to expose\nthe plugin’s APIs to the EntandoApp and the micro frontends (MFEs) \n Entando Component Repository bundles \n An EntandoDeBundle - or Component Repository bundle - is a package with\na set of Entando components and resources. The Entando component manager\nis able to read these kind of packages and install the components to\nextend the functionalities of an EntandoApp. For more details on the\nEntandoDeBundle and the Entando Component Repository, check the\n component repository overview \ndocumentation \n Entando plugin \n An Entando plugin is a microservice that exposes APIs reusable by one or\nmore Entando apps. Usually the plugin services are exposed to the\nEntando developer and the end users via micro frontends. Check the\n micro frontends  tutorials for more details. You can\nquickly generate an Entando plugin using the  Entando JHipster Blueprint . The generated project\nwill be ready to work in an Entando environment providing the\nintegration with Keycloak, generating a set of default micro frontends\nand exposing the plugin’s logic via an EntandoDeBundle (check the\nreferences for details). \n Keycloak \n Keycloak in Entando 6 is responsible for authorization and\nauthentication All the members of an Entando 6 cluster interact with\nkeycloak to verify user/service authorization to perform any specific\ntask. Check out the references below for more details on keycloak. \n Entando Ingresses \n What is an ingress \n An Ingress is a Kubernetes resource which purpose is to expose HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. \n How ingresses are used in an Entando Cluster \n When deploying an Entando Cluster, ingresses are generated for the resources that requires to be exposed to the outside world. The process of creating an ingress, setup the correct routes and the certificates is done by the via the Entando Operator and the entando custom resource controllers. \n Keycloak ingress \n An dedicated ingress is created for keycloak to expose the authentication and authorization functionalities. Having a dedicated ingress is required to guarantee that both token issuing and token validation work correctly, even when the services using the keycloak instance are on different namespaces. \n Cluster infrastructure ingress \n Another ingress is created for the cluster infrastructure services in order to expose the api endpoint to interact with the cluster correctly \n Entando App ingress \n Another ingress is automatically created to expose App builder, App engine and the Entando component manager, a service part of the ECR.\nThe three containers are served under the same domain, and this is beneficial as they are able to interact without cross-origin issues. \n The Entando App ingress is also used when linking an Entando Plugin with and Entando App, operation that usually happens when a bundle containing an Entando Plugin is installed via the ECR in an Entando App. Check out the dedicated section for details. \n Entando Plugin ingress \n Also Entando Plugins are automatically exposed via an ingress when deployed in an Entando Cluster. \n Default Ingress HTTP Routes \n In this table you can see what are the default routes that are exposed for each ingress\n \n \n \n \n \n \n \n Ingress \n Ingress Http route \n Application \n \n \n \n \n Keycloak ingress \n /auth \n Keycloak \n \n \n Entando cluster infrastructure ingress \n /k8s \n Entando K8S service \n \n \n Entando App ingress \n /entando-de-app \n App engine \n \n \n /app-builder/ \n App builder \n \n \n /digital-exchange \n Entando component manager \n \n \n /<plugin-ingressPath> \n Entando plugin linked to the app \n \n \n Entando plugin ingress \n /<plugin-ingressPath> \n Entando plugin \n \n \n \n Note : The Entando plugin  ingressPath  variable is defined in the Entando Plugin custom resource under the  spec  element. The plugin ingress path is also used to expose the plugin under the Entando App domain \n Exposing plugins in the EntandoApp domain \n The process of exposing an Entando Plugin under the same domain (ingress) of the Entando App is made possible from the creation of an  EntandoAppPluginLink  custom resource and the corresponding controller. \n Once the link between the Entando App and the Entando Plugin is created, the controller reads the specification of such link and automatically creates the HTTP routes in the Entando App so that the plugin is exposed on the same domain as the App builder, App engine and Component manager. \n This allows the Microfrontend developers that need to access the plugin to not worry about CORS policy or knowing what is the full path where the plugin is exposed. The plugin is referencable using relative urls. \n How to check ingresses in my cluster \n Using the Openshift dashboard \n On the Openshift dashboard, Ingresses are not exposed directly as pods and deployments. The dashbaord provides direct access to the Ingress Routes (or simply routes) under the  Applications > Routes  menu. \n \n To see the ingress resources, you need to access them from the  Resources > Other resources  menu. From the dropdown you should select the  Ingress  resource and therefore you should be able to see the ingress available on that specific project/namespace \n Using kubectl from the command line \n From the command line, getting the ingress is very easy. Once you know the namespace(s) where your Entando Cluster is deployed, you simply need to use the \n kubect get ingresses.extensions -n <namespace>\n \n Here an example of the result in a test namespace \n > kubectl get ingresses.extensions -n local\n\nNAME               CLASS    HOSTS                               ADDRESS     PORTS   AGE\nqst-eci-ingress   <none>   qst-eci-local.192.168.1.9.nip.io   127.0.0.1   80      2d1h\nqst-ingress       <none>   qst-local.192.168.1.9.nip.io       127.0.0.1   80      2d1h\nqst-kc-ingress    <none>   qst-kc-local.192.168.1.9.nip.io    127.0.0.1   80      2d1h\n \n To get more details about a specific ingress, you can use the  get  command specifing the ingress name you want to check and the  yaml  output format \n > kubectl get ingresses.extensions -n local qst-ingress -o yaml\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  creationTimestamp: "2020-05-13T15:27:08Z"\n  generation: 1\n  labels:\n    EntandoApp: qst\n  managedFields:\n  - apiVersion: extensions/v1beta1\n    fieldsType: FieldsV1\n    fieldsV1:\n      f:status:\n        f:loadBalancer:\n          f:ingress: {}\n    manager: nginx-ingress-controller\n    operation: Update\n    time: "2020-05-13T15:27:08Z"\n  name: qst-ingress\n  namespace: local\n  ownerReferences:\n  - apiVersion: entando.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: EntandoApp\n    name: qst\n    uid: aa7053e1-fd8b-419f-bdee-df3018c013fa\n  resourceVersion: "16802097"\n  selfLink: /apis/extensions/v1beta1/namespaces/local/ingresses/qst-ingress\n  uid: e9b6f027-369a-4b84-b4b1-736a6e49f180\nspec:\n  rules:\n  - host: qst-local.192.168.1.9.nip.io\n    http:\n      paths:\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8080\n        path: /entando-de-app\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8083\n        path: /digital-exchange\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8081\n        path: /app-builder/\n        pathType: ImplementationSpecific\nstatus:\n  loadBalancer:\n    ingress:\n    - ip: 127.0.0.1\n Learn more \n For more details about ingress concept in Kubernetes please refer to the official documentation: \n \n Kubernetes Ingress documentation \n Openshift Routes documentation \n \n'},{title:"PDA Architecture",frontmatter:{},regularPath:"/v6.2/docs/concepts/pda-architecture.html",relativePath:"v6.2/docs/concepts/pda-architecture.md",key:"v-606945f4",path:"/v6.2/docs/concepts/pda-architecture.html",headers:[{level:2,title:"PDA MFEs",slug:"pda-mfes"},{level:2,title:"PDA API",slug:"pda-api"},{level:2,title:"Sidecar",slug:"sidecar"},{level:2,title:"PDA Core",slug:"pda-core"},{level:2,title:"PAM Impl",slug:"pam-impl"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" PDA Architecture \n The objective of this document is to provide an explanation for the components\nthat compose the Process Driven Applications plugin (PDA) architecture from a\ndeployment perspective as well as how they interact with each other. \n The image below shows the components in high level: \n PDA MFEs \n The PDA Micro Frontends run on the browser and they render the UI custom\ncomponents the user interacts with. These components are written in React and\nthey fetch data from the PDA API, passing the Keycloak token for authentication.\nThe MFEs also make calls to the Entando Core API in order to retrieve the\nsettings required for the configuration UI. These components will be available\non Entando App Builder after the PDA plugin bundle is installed and the user\ncan create pages with them. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n PDA API \n The Spring Boot application that communicates with the engine and make its data\navailable in a Rest API. It interacts with Keycloak to validate the token and\nwith the sidecar to retrieve the connections/sensitive data, depending on how it\nwas deployed. The application shouldn't call specific engine classes directly,\ninstead it always calls the abstractions defined in PDA Core library. The engine\nimplementation to use is decided at runtime based on the connection details\nprovided. It is important to note that the PDA API application is stateless,\nsince it doesn't have a database. All data available on the API is retrieved\nfrom the BPM engine. After bundle installation, it will be deployed as a\nmicroservice in the Kubernetes infrastructure and an Ingress will be created to\nmake the API available to the MFEs, as described by the Entando Plugin custom\nresource. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin \n Sidecar \n The sidecar is another application (docker container) deployed in the same Pod\nas the PDA API. It exposes services to manage connection details, which will be\nstored as secrets in Kubernetes. The PDA API communicates with the sidecar to\nmanage BPM engine connection details. \n The source code for this component:\n https://github.com/entando/entando-plugin-sidecar \n PDA Core \n This is the library that defines the interfaces and abstractions that should be\nimplemented to interact with specific BPM engines. This way it is possible to\nhave multiple engine implementations at the same time. \n The source code for this component:\n https://github.com/entando/pda-core-engine \n PAM Impl \n The Red Hat PAM implementation for the PDA Core library. If the connection maps\nto a PAM engine, these are the classes that are going to be executed when the\nPDA API requests for engine operations. This implementation communicates with\nthe Kie Server, which executes the defined process operations. \n The source code for this component:\n https://github.com/entando/pda-redhatpam-engine \n"},{title:"Entando's Custom Resources for Kubernetes",frontmatter:{},regularPath:"/v6.2/docs/concepts/custom-resources.html",relativePath:"v6.2/docs/concepts/custom-resources.md",key:"v-82dc7c74",path:"/v6.2/docs/concepts/custom-resources.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"The Core Entando Custom Resources",slug:"the-core-entando-custom-resources"},{level:2,title:"EntandoKeycloakServer",slug:"entandokeycloakserver"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Example",slug:"example"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties"},{level:2,title:"EntandoClusterInfrastructure",slug:"entandoclusterinfrastructure"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-2"},{level:2,title:"EntandoApp",slug:"entandoapp"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-3"},{level:2,title:"EntandoPlugin",slug:"entandoplugin"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-4"},{level:2,title:"EntandoAppPluginLink",slug:"entandoapppluginlink"},{level:3,title:"Overview",slug:"overview-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-5"},{level:2,title:"EntandoDatabaseService",slug:"entandodatabaseservice"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-6"},{level:2,title:"EntandoCompositeApp",slug:"entandocompositeapp"},{level:3,title:"Overview",slug:"overview-7"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-7"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Entando\'s Custom Resources for Kubernetes \n Objective \n This document provides an overview of the Entando Kubernetes Custom Resources and their semantics in Entando 6. \n Prerequisites \n \n Basic knowledge of Kubernetes and how to deploy Docker images to it \n Basic knowledge of Helm and how Helm Charts use YAML templates for parameterized deployments to Kubernetes \n Overview \n Amongst the many features it offers, Kubernetes also comes with a REST API that for dozens of different resources types.\nGenerally these API off full Create/Retrieve/Update/Delete (CRUD) access to each of the resource types. We\ntypically format these resources in YAML or JSON and use commandline tools such as\n kubectl  or  oc  to manage them. Each of these resources has a clearly defined structure\nthat is well documented in the  Kubernetes API  .\nKubernetes  also allows clients to subscribe to events generated as these resources get updated. These subscriptions\nare called \'watches\' and allow clients to be notified whenever the state of a resource changes. Kubernetes also\nenforces very strong role based access control (RBAC) support on all resources, with permissions down to the level\nof granularity of operation (Create/Retrieve/Update/Delete/Watch) per resource. \n The basic architecture for Kubernetes worked so well for the developers of Kubernetes that they decided to also make it\navailable to third  party developers. Kubernetes now offers a mechanism to allow 3rd parties to provide its own custom\nresource types that still leverage the CRUD support, event subscriptions and RBAC provided by Kubernetes out of the box.\nThis mechanism is referred to as Custom Resources. \n Custom Resources are very commonly used with Kubernetes Operators. Operators are Docker images that have been\ndeployed to Kubernetes Deployments. The generally observe a set of custom resources and perform some operations against\nthe Kubernetes API to reflect the state changes in the Custom Resource. We can say that the Custom Resources are associated\nwith specific semantics in how they are translated to \n One can introduce a new Custom Resource into Kubernetes by registering a Custom Resource Definition (CRD). This is really\njust another yaml or json resource that defines the structure of the Custom Resource to be installed using the OpenAPI\nJSON Schema format. When talking about Custom Resources, it is very important to distinguish between Custom Resource\nDefinitions and Custom Resources. CRD\'s are static type definitions provided by an Operator\nprovider such as Entando. For those familiar with programming languages, CRD\'s are like class definitions, whereas\nCustom Resources are actual instances of that class. \n Entando introduces two groups of Custom Resources. On the one hand, there are the core Entando Custom Resources required\nfor a basic installation of Entando in a Kubernetes cluster. These Custom Resources directly result in other\nKubernetes resources being deployed in the cluster. On the other hand, there are the Custom Resources specific\nto the Entando Component Repository that serve primarily as metadata for other Entando components. \n The Core Entando Custom Resources \n The Entando Operator observes all the Core Entando Custom Resources in one or more namespaces. This means that if a Core\nEntando Custom Resource is created, updated or deleted, the Entando Operator will trigger a new run-to-completion Pod\nthat will translate that state change into a state change in the actual Kubernetes Cluster. Often, this will\nresult in the Deployment of one or more Docker images, but also one or more Services and sometimes and Ingress\ntoo. We refer to the Docker Images that implement these run-to-completion Pods as Entando Kubernetes Controllers. \n The Entando Operator itself is also implemented as a Docker Image. You can have a closer look at how it works in the\n entando-k8s-controller-coordinator  project on Github.\nApart from the normal Maven, Java and Docker files one would expect, you will also notice the\n entando-k8s-controller-coordinator Helm Chart .\nThis Helm Chart is basically the entrypoint for installations of Entando 6 on Kubernetes. More detailed instructions\non how to install the Entando 6 Operator are available in our\n installation instructions \n EntandoKeycloakServer \n The EntandoKeycloakServer Custom Resource is used to deploy and configure a Red Hat Keycloak Server instance on the\ncluster. After deploying this Keycloak instance, the Entando Operator will create a Kubernetes Secret that provides\nthe necessary information for subsequent deployment operations to access the Keycloak instance as the Admin user. This\nallows the rest of the Entando Kubernetes Controllers to create a Keycloak OIDC client for every HTTP service that\ngets deployed. If you already have a Keycloak instance that you would use, you can skip this custom resource entirely\nand simply create the `keycloak-admin-secret\' in the operator\'s namespace as specified in\n this tutorial \n Overview \n \n Entando Cluster Citizen:  Keycloak \n Custom Resource Definition:  EntandoKeycloakServer \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-keycloak-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-keycloak \n Github Repo:  entando/entando-keycloak \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoKeycloakServer"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-keycloak"\n  namespace: "keycloak-namespace"\nspec:\n  dbms: "postgresql"\n  imageName: "entando/entando-keycloak"\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  parameters: \n    KEYCLOAK_WELCOME_THEME: my-custom-theme\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof a previously  configured  EntandoDatabaseService ,\nthe Keycloak image will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor Keycloak to use. If left empty, or given value of \'none\', Keycloak will be deployed using its own internal\nH2 database. \n spec.imageName  is used to provide a customized image. By default, the operator will use the  entando/entando-keycloak \ndiscussed above. When using the default image, please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of this image will be calculated.\nWhen you need to customize the theme or add extensions to Keycloak, you can create your own custom image and provide\nthe value in this property. In this custom image, make sure you use the default image ( entando/entando-keycloak )\nas a base image. You can then add your customizations and build your own image. Please use a fully qualified\nDocker image name here. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for Keycloak. Please ensure that this is\naccessible using the default routing suffix of your Entando Operator Deployment, or a DNS name previously\nregistered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n keycloak-admin-secret  being replaced by a Secret connecting you to this newly created Keycloak instance.\nTheoretically one could use multiple Keycloak instances in a cluster, in which case this property should be false. \n spec.parameters  is a Map of environment variables to pass to the Keycloak Docker image. For example, this could\nbe used to select a specific theme for Keycloak to use using the variable KEYCLOAK_WELCOME_THEME. These parameters\nare applied to the container\'s environment variables after all variables have been calculated. It can therefore\nalso be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Keycloak Server \n EntandoClusterInfrastructure \n The EntandoClusterInfrastructure custom resource can be used to create the shared services that Entando requires in a cluster.\nAt the time of the writing of this document, there is really only one service, which is the Entando K8S Service, but this\nmay change in future. Deployments resulting from this custom resources are configured to use the default Keycloak\nServer specified in the  keycloak-admin-secret  using the  entando  realm. An Ingress will also be created as part of this\ndeployment. At this point, there is no way to customize the image in question. \n Overview \n \n Entando Cluster Citizen:  Entando Kubernetes Service \n Custom Resource Definition:  EntandoClusterInfrastructure \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-cluster-infrastructure-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-k8s-service \n Github Repo:  entando-k8s/entando-k8s-service \n \n \n Possible Database Images: none \n Example \n ---\nkind: "EntandoClusterInfrastructure"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-eci"\n  namespace: "eci-namespace"\nspec:\n  keycloakSecretToUse: some-keycloak-secret\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  parameters: \n    KEYCLOAK_WELCOME_THEME: my-custom-theme\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando K8S Service. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n entando-cluster-infrastructure-secret  being replaced by a Secret connecting you to this newly created\nEntando K8S Service.  Theoretically one could use multiple Entando K8S Services in a cluster, in which\ncase this property should be false for new Entando K8S Services that should not override the default Secret. \n spec.parameters  is a Map of environment variables to pass to the Entando K8S Service Docker image. For example, this could\nbe used to override the ENTANDO_NAMESPACES_TO_OBSERVE variable that configures the set of Kubernetes namespaces\nthis service should read EntandoDeBundles from. Also note that all of the\n Spring variables in entando-k8s-service project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando K8S Service \n EntandoApp \n An EntandoApp is a Deployment of a Docker image that hosts an Entando and Java based web application. Entando offers two\nstandard images that can be used, but generally we expect our customers to provide their own images here. An EntandoApp\nDeployment packages three images into a single Pod: the Entando App Image in question, AppBuilder and Component Manager. \n Overview \n \n Custom Resource Definition:  EntandoApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-controller \n Github Repo:  entando/entando-k8s-app-controller \n \n \n Deployment Details - Entando App:\n \n Docker image:  entando/entando-de-app-wildfly   or    entando/entando-de-app-eap \n Github Repo:  entando-k8s/entando-de-app \n Entando Cluster Citizen:  Entando App \n \n \n Deployment Details - AppBuilder:\n \n Docker image:  entando/app-builder \n Github Repo:  entando/app-builder \n \n \n Deployment Details - ComponentManager:\n \n Docker image:  entando/entando-component-manager \n Github Repo:  entando-k8s/entando-component-manager \n Entando Cluster Citizen:  Component Manager \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-app"\n  namespace: "my-namespace"\nspec:\n  standardServerImage: wildfly\n  customServerImage: your-org/your-image:4.3.2\n  dbms: "postgresql"\n  ingressPath: my-app\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  parameters: \n    ENTANDO_VAR1: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.standardServerImage  can be either wildfly  or  eap . This instructs the Entando Operator to use one of the\ntwo standard Entando App images.\n \n For  wildfly  it will deploy the  entando/entando-de-app-wildfly  image \n For  eap  it will deploy the  entando/entando-de-app-eap  image\nThis property and the  spec.customServerImage  are  assumed to be mutually exclusive. Only provide a value to\none of the two. Please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of these images will be calculated. \n \n \n spec.customServerImage  can be used to deploy the Docker image containing your own custom Entando App. Please\nfollow the instructions on how to  build your own image . \nThis property and the  spec.standardServerImage  are  assumed to be mutually exclusive. Only provide a\nvalue to one of the two. \n spec.dbms  is used to select the database management of choice. If left empty, a default value of  postgresql \nis assumed. The value  none  is not supported. If this value matches up to the  spec.dbms  property\nof a previously configured  EntandoDatabaseService ,\nthe Entando App will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the EntandoApp to use. \n spec.ingressPath  specifies the web context of the Entando App to be deployed. This is required to create a single\npath entry in the Ingress that is used to expose the Entando App. The default behaviour of Wildfly and\nJBoss EAP is to use the name of the WAR file that is deployed, but it is possible to override this in the EntandoApp\nproject itself using a  jboss-web.xml  file .\nIn the absence of the  jboss-web/xml  file, the web context  would be the the\nMaven artifactId of the Entando Opp project. It is also possible to modify this by changing the  <finalName>  element\nin the Maven  pom.xml \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure containining the Entando Component Repository for this App to use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando App. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. Keep in mind that EntandoPlugins linked to this app will\nalso be made available on this host. \n spec.parameters  is a Map of environment variables to pass to the EntandoApp Docker image. For example, this could\nbe used to provide connection details for custom datasources or message queues as discussed in the\n custom datasources tutorial . Also note that all of the\n Spring variables in an Entando project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to each of the three containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando App \n EntandoPlugin \n An Entando Plugin is a microservice that can be made available to one or more EntandoApps in the cluster. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin . The\nDeployment resulting from an EntandoPlugin is also a multi-container Pod deployment, and will include both the\nplugin Docker image specified and the EntandoPluginSidecar Docker Image \n Overview \n \n Custom Resource Definition:  EntandoPlugin \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-plugin-controller \n Github Repo:  entando/entando-k8s-plugin-controller \n \n \n Deployment Details - plugin:\n \n Docker image: as provided by user \n Entando Cluster Citizen:  Plugin \n \n \n Deployment Details - EntandoPluginSidecar:\n \n Docker image:  entando/entando-plugin-sidecar \n Github Repo:  entando/entando-plugin-sidecar \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoPlugin"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-plugin"\n  namespace: "my-namespace"\nspec:\n  image: your-org/your-image:4.3.2\n  securityLevel: lenient\n  ingressPath: /my-plugin\n  healthCheckPath: /actuator/health\n  dbms: "postgresql"\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  roles:\n    - code: admin\n      name: Administrators\n    - code: user\n      name: Users\n  permissions: \n    - clientId: some-keycloak-client \n      role: some-admin\n    - clientId: another-keycloak-client \n      role: another-admin\n  parameters: \n    ENTANDO_VAR1: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.image  is the Docker image you can provide for the plugin you want to deploy. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin \nCurrently only Docker images hosting Spring Boot applications are supported. It is therefore of  utmost\nimportance to start off with our blueprint and ensure that the resulting Spring Boot application respects\nthe Spring variables to be set from the Entando Operator. \n spec.dbms  is used to select the database management of choice. If left empty, or if the value is  none , it\nis assumed that the plugin in question does not required a database. If this value matches up to\nthe  spec.dbms  property  of a previously  configured\n EntandoDatabaseService ,\nthe Entando Plugin will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the Entando Plugin to use. \n spec.ingressPath  specifies the web context where the Entando Plugin will be made available when linked to EntandoApps.\nPlease ensure this is in sync with the  server.servlet.context-path  property set on your Spring Boot application. \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure this Plugin will use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando Plugin. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. This hostname will not be used from your Widgets that you\nhave implemented for this plugin as these widgets will use the hostname of the EntandoApp they are being used from.\nThis hostname is useful for embedded web user interfaces used only on this plugin, such as admin user interfaces\nor diagnostic user interface. \n spec.roles  specifies the set of roles that this plugin expects. At deployment time, the Entando Operator ensures\nthat each of these roles are created on Keycloak for the Keycloak client representing this EntandoPlugin. It is\nup to the Plugin provider to ensure that Spring Security has been set up to enforce the access rules implied\nby the individual roles. Each role has a unique  code  and a more human readable   name  as property. \n spec.permissions  specifies the set of permissions this plugin requires on other services with known Keycloak Clients.\nAt deployment time, the Entando Operator will use the service account user of this EntandoPlugin\'s Keycloak Client\nand create the necessary role bindings on the specified client id of the service to be used.\nEach permission specifies the  clientId  in Keycloak of the target service, and the  role  that this EntandoPlugin\nshould be bound to in that Keycloak client. \n spec.parameters  is a Map of environment variables to pass to the EntandoPlugin Docker image.\nIt is entirely up to the plugin provider to determine the semantics of each variable. We strongly suggest for\nplugin provider  to use  the standard Spring Property Resolver syntax for Spring variables, as this would allow\nany of these variables to be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited\nSpring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to both containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando Plugin \n EntandoAppPluginLink \n The EntandoAppPluginLink custom resource is created when an AppBuilder user links an EntandoPlugin to the current\nEntandoApp, or deploys an EntandoPlugin for use in the current EntandoApp. The Entando Operator processes the resulting\nEntandoAppPluginLink and creates a path for the Plugin on the Ingress that exposes the EntandoApp in question. This path\nis determined by the  spec.ingressPath  property on the EntandoPlugin custom resource itself. If the EntandoPlugin\nresides in a namespace other than the namespace of the EntandoApp, the EntandoOperator creates a Kubernetes\nService in the namespace of the EntandoApp that simply delegates to the Service in the namespace of the EntandoPlugin. \n Overview \n \n Custom Resource Definition:  EntandoAppPluginLink \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-plugin-link-controller \n Github Repo:  entando/entando-k8s-app-plugin-link-controller \n Example \n ---\nkind: "EntandoAppPluginLink"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-link"\n  namespace: "my-namespace"\nspec:\n  entandoAppName: my-app\n  entandoAppNamespace: my-namespace\n  entandoPluginName: my-app\n  entandoPluginNamespace: my-namespace\n Explanation of properties \n \n spec.entandoAppName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.name \n spec.entandoAppNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.namespace \n spec.entandoPluginName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.name \n spec.entandoPluginNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.namespace \n EntandoDatabaseService \n By default, the Entando Operator deploys one of either the MySQL or PostgreSQL database Docker images for every custom\nresource that requires a database. Many customers may however have existing infrastructure for their databases which\nthey may want to leverage. The EntandoDatabaseService custom resource allows customers to deploy a Service that points\nto an external database. When deploying one of the Entando custom resources that require a database, the Entando\nOperator will look for EntandoDatabases in the same namespace, and if it finds one with the same  spec.dbms  setting\nas the database required by the custom resource , it will create a dedicated schema/username/password combination\nfor the custom resource and point the deployment emanating from custom resource to this external database. \n \n Custom Resource Definition:  EntandoDatabaseService \n Example \n ---\nkind: "EntandoDatabaseService"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-database-service"\n  namespace: "my-namespace"\nspec:\n  dbms: "osracle"\n  host: 10.0.12.41\n  port: 1521\n  databaseName: mydb \n  tablespace: \n  secretName: some-secret\n  jdbcParameters:\n    maxStatements: 300 \n    loginTimeout: 180\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof the Entando custom resource that will use it. Valid values are  oracle ,  postgresql  and  mysql . \n spec.host  can either be a valid IPv4 address, or a hostname. Where an IP address is provided, the Entando Operator\nwill create a Kubernetes Service with an associated EndPoints resource to allow for routing to this address. Where\na hostname is provided, the Entando Operator will simply create a Kubernetes Service of type  cname \n spec.port  is the port that the external database service is running on. This value is optional in which case we will\nuse the default port for the DBMS vendor in question \n spec.databaseName  is the name of the database that the Entando Operator should be creating schemas in. This property\nis only for use with PostgreSQL and Oracle, as MySQL doesn\'t distinguish between schemas and databases. \n spec.tablespace  is only required for Oracle so that Schemas can be created in different tablespaces. \n spec.secretName  should be the name ( Secret.metadata.name ) of a Kubernetes Secret in the same namespace that has\na  username  key and a  password  key that will provide the Entando Operator with the necessary access and permissions\nto create Schemas and users on the database in question. \n spec.jdbcParameters  is a map of name/value pairs that will be appended to the JDBC connection string to allow for\nfurther customization of the actual connection to the database. \n EntandoCompositeApp \n The EntandoCompositeApp custom resource can be used to package a collection of Entando Core Custom Resources in a\nsingle YAML file for sequential deployment. Keep in mind that one can already use standard YAML syntax to package\na set of Kubernetes resources in a single file, separating each resource with a triple dash ( --- ). The purpose\nof this custom resource is therefor specifically to ensure that the deployment of the previous \'component\' has\ncompleted, and that  the resulting Pod is up and running before commencing deploying on the \'component\'. \n The primary use case of this custom resource is to package a full Entando App and all its supporting service and\nplugins for easy installation as is often required for demos and POCs. Creating this kind of dependency for typical\nproduction deployments is not advised, as it will inevitably result in a violation of pipeline isolation. The\nmore commonly recommended approach is for your Entando Apps and Plugins to be fully deployable in isolation. Use this\ncustom resource with care. \n Overview \n \n Custom Resource Definition:  EntandoCompositeApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-composite-app-controller \n Github Repo:  entando/entando-k8s-composite-app-controller \n Example \n ---\nkind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-composite-app"\n  namespace: "my-namespace"\nspec:\n  components:\n    - kind: "EntandoKeycloakServer"\n         metadata:\n           name: "my-kc"\n         spec:\n           dbms: postgresql\n           isDefault: true\n           replicas: 1\n       - kind: "EntandoClusterInfrastructure"\n         metadata:\n           name: "my-eci"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           isDefault: true\n       - kind: "EntandoApp"\n         metadata:\n           name: "my-app"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           standardServerImage: wildfly\n           ingressPath: /entando-de-app\n       - kind: "EntandoPlugin"\n         metadata:\n           name: "my-pda"\n         spec:\n           image: "docker.io/entando/entando-process-driven-plugin:latest"\n           replicas: 1\n           dbms: "mysql"\n Explanation of properties \n \n spec.components  specifies the list of Entando Core Custom Resources to be deployed  in sequence . Please note\nthat only the Entando Custom Resources discussed in this section can be used in this list. Custom resources\nrelated to the Entando Component Repository never result in actual deployments on the Kubernetes cluster and\ntherefore do not need to be specified in any sequence. You can use the normal triple dash YAML notation to\ninclude them in the same YAML file \n \n'},{title:"Bundle and components details",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-bundle-details.html",relativePath:"v6.2/docs/ecr/ecr-bundle-details.md",key:"v-498cc790",path:"/v6.2/docs/ecr/ecr-bundle-details.html",headers:[{level:2,title:"Bundle conventions",slug:"bundle-conventions"},{level:2,title:"Descriptor File",slug:"descriptor-file"},{level:2,title:"Plugin Descriptor",slug:"plugin-descriptor"},{level:2,title:"Widget Descriptor",slug:"widget-descriptor"},{level:2,title:"Fragment Descriptor",slug:"fragment-descriptor"},{level:2,title:"Page Template Descriptor",slug:"page-template-descriptor"},{level:2,title:"Content Type Descriptor",slug:"content-type-descriptor"},{level:2,title:"Content Template Descriptor",slug:"content-template-descriptor"},{level:2,title:"Static Files",slug:"static-files"}],lastUpdated:"10/15/2020, 2:55:04 PM",content:' Bundle and components details \n In order for the entando-component-manager to read the content of a\nbundle and install components, a  descriptor.yaml  file is required at\nthe root of the bundle package. \n Here is a generic bundle structure \n .\n├ descriptor.yaml\n├ resources/\n│ └ ...\n└ ... (folders reported in descriptor.yaml file)\n Bundle conventions \n \n \n The bundle descriptor file needs to be named  descriptor.yaml \notherwise the bundle will not be recognized. \n \n \n Static resources are not defined in the  descriptor.yaml  file as\nthey are by default read from a  resources  folder. If you need to\ninstall static resources, please follow the following convention. \n Descriptor File \n The descriptor file will aggregate all components inside and has the\nfollowing structure. \n \n Warning \n Remember the file needs to be named  descriptor.yaml . \n \n Descriptor.yaml. \n code: survey_bundle # The bundle ID\ndescription: This is the survey bundle # The description of the bundle\n\ncomponents: # All components will be here\nOptional. Use if the component requires a deployment\n  plugins:\n    - folder/you/want/my_plugin_descriptor.yaml\n    - folder/you/want/another_plugin_descriptor.yaml\nTo create widgets you will need to add references to the descriptor file\'s\n  widgets:\n    - widgets/my_widget_descriptor.yaml\n    - widgets/another_widget_descriptor.yaml\nTo create fragments, you will need to add references to the descriptor file\'s\n  fragments:\n    - fragments/my_fragment.yaml\nTo create Page Templates you will need to add references to the descriptor file\'s\n  pageModels:\n    - pagemodels/my_page_model_descriptor.yaml\n    - pagemodels/another_page_model_descriptor.yaml\nTo create Content Types you will need to add references to the descriptor file\'s\n  contentTypes:\n    - contenttypes/my_content_type_descriptor.yaml\nTo create Content Templates you will need to add references to the descriptor file\'s\n  contentModels:\n    - contentmodels/my_content_model_descriptor.yaml\n    - contentmodels/another_content_model_descriptor.yaml\nLabels on the system\n  labels:\n    - key: HELLO # This is the label identifier\n      titles: # The titles on the label\n        it: Mio Titolo # The title in Italian\n        en: My Title # The title in English\n Plugin Descriptor \n Here is an example of a plugin descriptor. \n WARNING \n Note: the CRD format is deprecated as of Entando 6.3. \n \n Plugin descriptor.yaml (CRD format) \n kind: "EntandoPlugin"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "helloworld-plugin"\nspec:\n  image: entando/my-image:1.0..0 # The docker image used to create the plugin\n  replicas: 1\n  dbms: postgresql # The DMBS the plugin will use\n  parameters: {}\n  ingressPath: "/helloWorld"\n  healthCheckPath: "/management/health"\n  securityLevel: "strict"\n  connectionConfigNames: []\n  permissions: []\n  roles: # The roles the plugin will expose in keycloak\n    - name: task-list\n      code: "task-list"\n    - name: task-get\n      code: "task-get"\n Widget Descriptor \n Here is an example of a widget descriptor \n Widget descriptor.yaml. \n code: another_todomvc_widget # The Widget identification\n\ntitles: # Widget\'s Titles\n  en: TODO MVC Widget # Title in English\n  it: TODO MVC Widget # Title in Italian\n\ngroup: free # The owner group of the widget\nOptional. The UI Path, the widget.ftl file will have the customUi content\ncustomUiPath: widget.ftl\nOptional. The Custom UI\ncustomUi: >-\n    <h1>My custom widget UI</h1>\nOptional. ConfigUI\nconfigUi:\n  customElement: todomvc-config # The name of the custom-element used to render the configUI\n  resources:\n    - <bundleid>/static/js/main.js # The resources necessary to the custom element to render the configUI, like the code\n Fragment Descriptor \n Fragment descriptor.yaml. \n code: my-fragment # The fragment identification\nOptional. The fragment content\nguiCode: >-\n  "<div>Here the content</div>"\nOptional. The GuiCode Path, the fragment.ftl file will have the guiCde conent in it\nguiCodePath: fragment.ftl\n Page Template Descriptor \n Page Template descriptor.yaml. \n code: todomvc_page_template # The Page Template identification\ndescription: TODO MVC basic page template # The Page Template description\n\ntitles: # Page Template\'s Titles\n  en: TODO MVC PageTemplate # Title in English\n  it: TODO MVC PageTemplate # Title in Italian\nThe Page Template configuration\nconfiguration:\n  frames: # All frames\n    - pos: 0 # Frame position\n      description: Header # Frame description\n      sketch: # Frame sketch configuration\n        x1: 0\n        y1: 0\n        x2: 11\n        y2: 0\n      defaultWidget:\n        code: my-widget # the code of the widget to apply when using the button "apply default widgets" in the page configuration UI\nA simplified way to define a Frame\n    - pos: 1\n      description: Breadcrumb\n      sketch: { x1: 0, y1: 1, x2: 11, y2: 1 }\nOptional. Define the Page Template in a separate file or inside the descriptor file with `template`\ntemplatePath: page.ftl\nOptional. Define the Page Template this way or in a separate file with `templatePath`\ntemplate: >-\n  <#assign wp=JspTaglibs[\\"/aps-core\\"]>\n  <!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.0 Transitional//EN\\">\n  <html>\n      <head>\n          <title><@wp.currentPage param=\\"title\\" /></title>\n      </head>\n      <body>\n          <h1><@wp.currentPage param=\\"title\\" /></h1>\n          <a href=\\"<@wp.url page=\\"homepage\\"/>\\">Home</a><br>\n          <div>\n              <h1>Bundle 1 Page Template</h1>\n              <@wp.show frame=0 />\n          </div>\n      </body>\n  </html>\n Content Type Descriptor \n For more details on the properties, refer to the Content Type\ndocumentation. \n Content-type descriptor.yaml. \n code: CNG\nname: Demo\nstatus: 0\n\nattributes:\n  - code: title\n    type: Text\n    name: Title\n    roles:\n      - code: jacms:title\n        descr: The main title of a Content\n    disablingCodes: []\n    mandatory: true\n    listFilter: false\n    indexable: false\n\n    enumeratorStaticItems: string\n    enumeratorStaticItemsSeparator: string\n    enumeratorExtractorBean: string\n\n    validationRules:\n      minLength: 0\n      maxLength: 100\n      regex: string\n      rangeStartString: string\n      rangeEndString: string\n      rangeStartStringAttribute: string\n      rangeEndStringAttribute: string\n      equalString: string\n      equalStringAttribute: string\n      rangeStartDate: string\n      rangeEndDate: string\n      rangeStartDateAttribute: string\n      rangeEndDateAttribute: string\n      equalDate: string\n      equalDateAttribute: string\n      rangeStartNumber: 0\n      rangeStartNumberAttribute: string\n      rangeEndNumber: 0\n      rangeEndNumberAttribute: string\n      equalNumber: 0\n      equalNumberAttribute:\n      ognlValidation:\n        applyOnlyToFilledAttr: false\n        errorMessage: Something\n        keyForErrorMessage: some\n        keyForHelpMessage: thing\n        ognlExpression: string\n Content Template Descriptor \n Content-template descriptor.yaml. \n id: 8880003\ncontentType: CNG\ndescription: Demo Content Template\nOptional. Define the Content Template Shape in a separate file or inside descriptor file with `contentShape`\ncontentShapePath:\nOptional. Define the Content Template Shape this way or in a separate file with `contentShapePath`\ncontentShape: >-\n  <article>\n    <h1>$content.Title.text</h1>\n    <h2>Demo content template</h2>\n    #if ( $content.MainBody.text != "" )\n    $content.MainBody.text\n    #end\n  </article>\n Static Files \n In order to upload static files, you will need to create a folder called\n resources/ , all files inside this folder will be uploaded in the same\nfolder structure that is inside. \n resources/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.css\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n On the structure mentioned above, the resulting files in the Entando\narchitecture will be: \n yourbundleid/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.js\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n \n Important \n yourbundleid  is the  code  property inside  descriptor.yaml \n \n So if you need to use the file in a widget or page template, use this FTL\ntag  <@wp.resourceURL /> : \n <img src="<@wp.resourceURL />yourbundleid/images/logo.png">\n<link rel="stylesheet" href="<@wp.resourceURL />yourbundleid/css/styles.css">\n<link rel="shortcut icon" href="<@wp.resourceURL />yourbundleid/images/favicon.ico" type="image/x-icon"/>\n<script type="application/javascript" src="<@wp.resourceURL />yourbundleid/js/script.js"><\/script>\n \n '},{title:"Filtering bundles",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-bundle-filters.html",relativePath:"v6.2/docs/ecr/ecr-bundle-filters.md",key:"v-1699d844",path:"/v6.2/docs/ecr/ecr-bundle-filters.html",headers:[{level:2,title:"Filtering bundles by component",slug:"filtering-bundles-by-component"},{level:3,title:"Supported labels keys are:",slug:"supported-labels-keys-are"},{level:3,title:"Example",slug:"example"},{level:2,title:"Filtering bundles by status",slug:"filtering-bundles-by-status"},{level:2,title:"Filtering bundles by textual search",slug:"filtering-bundles-by-textual-search"},{level:2,title:"Mixing search criteria",slug:"mixing-search-criteria"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Filtering bundles \n ECR bundles are filterable by component, by status or by textual research. \n Filtering bundles by component \n ECR bundles are filterable by component from App Builder user interface. \n \n Behind the scenes, filtering is done using the label-based filtering provided out of the box from Kubernetes. \n To enable filtering of a bundle, the custom-resource representing the bundle on the Entando Cluster needs to contain the correct labels. An important note on the values to add the  labels  field, even if to correctly define a label in a k8s resource both the key and the value are required, from an Entando point of view only the key part of the label is used for filtering. The value could be set to anything, but our reccomendation is to use  "true"  for clarity and simplicity. \n Supported labels keys are: \n \n \n \n \n \n \n \n Label entry \n Description \n \n \n \n \n widget: "true" \n The bundle contains one or more microfrontends (widgets)  \n \n \n plugin: "true" \n The bundle contains one or more microservices (plugins) \n \n \n fragment: "true" \n The bundle contains one or more fragments \n \n \n pageTemplate: "true" \n The bundle contains one or more page templates \n \n \n contentType: "true" \n The bundle contains one or more content types \n \n \n contentTemplate: "true" \n The bundle contains one or more content templates \n Example \n Here is an example of the metadata for a ecr bundle containg micro-frontends, some microservices and page templates \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: demo-bundle\n  labels:\n    widget: "true"\n    plugin: "true"\n    pageTemplate: "true"\nspec:\n  details:\n  ...\n Filtering bundles by status \n ECR bundles are filterable by status from App Builder user interface. \n \n You can choose to see the full list of the bundles available in Kubernetes cluster by selecting the  Explore  tab, or the list of the currently installed bundles by clicking on the  Installed  tab. \n Filtering bundles by textual search \n You can search for bundles containing some keywords by executing a textual search. \n \n You can open the menu on the left to select which field to target. \n If you are creating a new bundle, keep in mind the textual search is performed against data extracted from the bundle CRD file. \n Mixing search criteria \n You can mix all previous search criteria to refine the scope of your search as you want.\nFor example, you could search for all available bundles ( Explore  tab) that contain  Page Templates  components\n(using the checkboxes) and the word  Login  in their name (using the textual search). \n'},{title:"How to customize bundle info shown in Entando App Builder",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-bundle-presentation-config.html",relativePath:"v6.2/docs/ecr/ecr-bundle-presentation-config.md",key:"v-76c4832a",path:"/v6.2/docs/ecr/ecr-bundle-presentation-config.html",lastUpdated:"8/10/2020, 11:11:30 AM",content:" How to customize bundle info shown in Entando App Builder \n \n In the image above you can see an example of a bundle as is displayed in the ECR user interface inside the Entando App Builder. \n The corresponding custom-resource file on Kubernetes is similar to this: \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: simple-entando-bundle\nspec:\n  details:\n    name: \"Entando Bundle\"\n    description: An example of an Entando bundle\n    dist-tags:\n      latest: v0.0.1\n    time:\n      created: '2020-05-20T15:59:21.946Z'\n      modified: '2020-05-20T15:59:21.946Z'\n      v0.0.1: '2020-05-20T15:59:21.946Z'\n    versions:\n      - v0.0.1\n    keywords:\n      - entando6\n    author: Entando\n    thumbnail: >-\n      data:image/jpeg;base64,....\n  tags:\n....\n \n In order to change the UI elements, you need to update the custom-resource in accordance with this table \n \n \n \n Field \n UI Element \n \n \n \n \n spec.details.name \n Set the bundle title \n \n \n spec.details.description \n Set the bundle description (only visible in the list presentation format) \n \n \n spec.details.thumbnail \n Set the bundle thumbnail, expressed as a base64 encoded string \n \n \n spec.details.dist-tags.latest \n Set what's the latest version of the bundle \n \n \n \n"},{title:"Bundle versions and updates - FAQ",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-bundle-versions-faq.html",relativePath:"v6.2/docs/ecr/ecr-bundle-versions-faq.md",key:"v-65ff98cc",path:"/v6.2/docs/ecr/ecr-bundle-versions-faq.html",headers:[{level:2,title:"Does the ECR support versioning?",slug:"does-the-ecr-support-versioning"},{level:2,title:"How is a bundle version defined?",slug:"how-is-a-bundle-version-defined"},{level:2,title:"What format should I use to version my bundle?",slug:"what-format-should-i-use-to-version-my-bundle"},{level:2,title:"As a bundle developer, how should I create a new version of a bundle?",slug:"as-a-bundle-developer-how-should-i-create-a-new-version-of-a-bundle"},{level:2,title:"How to prevent a particular bundle version from being visible in the ECR?",slug:"how-to-prevent-a-particular-bundle-version-from-being-visible-in-the-ecr"},{level:2,title:"My bundle contains a microservice generated with the Entando Component Generator, does the version of the microservice have to be the same as the bundle version?",slug:"my-bundle-contains-a-microservice-generated-with-the-entando-component-generator-does-the-version-of-the-microservice-have-to-be-the-same-as-the-bundle-version"},{level:2,title:"How bundle versions are installed from the ECR",slug:"how-bundle-versions-are-installed-from-the-ecr"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Bundle versions and updates - FAQ \n Does the ECR support versioning? \n A bundle, as discussed in the  overview , is a package containing one or more components.\nAs in many other packaging systems, the ECR supports bundle versioning, allowing developers to create and release improvements of their package over time. \n How is a bundle version defined? \n In the ECR, the bundle custom resource comes with a set of  tags , each one representing a version of the bundle.\nHere an example for a CMS quickstart bundle \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n    name: cms-quickstart-bundle\nspec:\n  details:\n    name: Entando Example CMS Bundle\n    description: Example Bundle containing CMS components for the Quickstart experience\n  tags:\n    - integrity: ''\n      shasum: ''\n      tarball: 'https://github.com/entando/entando-cms-quickstart-bundle.git'\n      version: v0.0.1\n    - integrity: ''\n      shasum: ''\n      tarball: 'https://github.com/entando/entando-cms-quickstart-bundle.git'\n      version: v0.0.2\n \n As you can see from the code above, the bundle  cms-quickstart-bundle  has 2 versions available.\nEach version in the  tags  object must correspond a tag in the git repository provided in the  tarball  field. \n What format should I use to version my bundle? \n The ECR requires versions to follow the  semantic versioning 2.0.0 , with the possibility to prepend a  v  to the version itself. Some valid bundle versions are: \n \n 1.0 \n v0.1.0-alpha \n 1.0.1-SNAPSHOT \n 22.109.10234-RC.1 \n As a bundle developer, how should I create a new version of a bundle? \n If you're a bundle developer and you want to release a new version of your bundle, you can simply update the content of your bundle and commit the changes to the bundle git repository.\nOnce all the required changes are committed, you can create a new tag in the git repository using the  git tag  command and publish it to the remote repository using the  git push --tags  command \n For example, let's assume my bundle already has a version  1.0.0  and I want to publish the version  2.0.0  of my bundle, here the commands I need to use to create and publish the new tag: \n     git tag -a \"2.0.0\" -m \"My new version\"\n    git push --tags\n How to prevent a particular bundle version from being visible in the ECR? \n If, for some reason, you don't want a particular version to be available for the installation, you can proceed as follows: \n \n You can edit the bundle directly using the command  kubectl edit entandodebundles.entando.org -n <namespace-of-the-bundle> <name-of-the-bundle> \n \n or if you still have the original file you can also: \n \n remove the undesired version from the tag list in your bundle Kubernetes file ( integrity ,  shasum ,  tarball  and  version ) \n delete your bundle from your cluster using a command like this  kubectl delete -f your-bundle-file.yml [-n your-cluster-namespace] \n upload your bundle again to Kubernetes using a command like this  kubectl create -f your-bundle-file.yml [-n your-cluster-namespace] \n My bundle contains a microservice generated with the Entando Component Generator, does the version of the microservice have to be the same as the bundle version? \n The version of the microservice - or to be more precise the docker image associated with the microservice - isn't bound to the version of the bundle containing the microservice itself. \n This gives the bundle developer complete control over the bundle release process, especially in those situations where the bundle contains more components and even more microservices. \n How bundle versions are installed from the ECR \n When the user decides to install a version of the bundle, the ECR checks the provided tag in the git repository and clones locally just the content of the repository for that tag. \n For this reason it's important that for each provided tag in the custom-resource a corresponding tag is available in the git repository, otherwise the ECR will not be able to donwload the bundle and will throw an error. Note that the ECR can only see published tags, so make sure that all the time you create a new tag in your git repository you publish it to the remote repository too. \n"},{title:"ECR: How Microservices get Connected to Entando Apps",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-how-microservices-connects-to-apps.html",relativePath:"v6.2/docs/ecr/ecr-how-microservices-connects-to-apps.md",key:"v-677a6224",path:"/v6.2/docs/ecr/ecr-how-microservices-connects-to-apps.html",headers:[{level:2,title:"How a Microservice from a Bundle gets Deployed with the ECR?",slug:"how-a-microservice-from-a-bundle-gets-deployed-with-the-ecr"},{level:2,title:"Other Options",slug:"other-options"},{level:2,title:"Kubernetes naming conventions",slug:"kubernetes-naming-conventions"}],lastUpdated:"9/14/2020, 4:10:44 AM",content:" ECR: How Microservices get Connected to Entando Apps \n In this document we will describe some of the assumptions and details related to the process of connecting a microservice part of a bundle to an Entando App. \n In order to fully understand the concepts explained in this piece of the documentation, please make sure you have familiarity with these concepts: \n \n Entando custom resources \n Entando ingresses \n How a Microservice from a Bundle gets Deployed with the ECR? \n When a bundle containing a microservice is installed using the ECR, behind the scenes some actions take place. \n \n To begin, an  EntandoPlugin custom resource  is generated starting from the PluginDescriptor. Some fields will be automatically generated from the provided image. \n \n \n From the  image  field in the PluginDescriptor, we will extract the  organization ,  name  and  version  of the image. \n organization ,  name  and  version  are then converted to valid characters and composed to form the plugin name ( metadata.name ), the labels ( metadata.labels ) and the ingressPath ( spec.ingressPath ) of the custom resource. \n \n NOTE : Two PluginDescriptors having images with the same organization, name and version will generate a custom resource with the same  metadata.name  and  spec.ingressPath . \n \n Next, a check for a microservice with the same name is performed to verify if a new deployment is required for the microservice. \n If a microservice with the same name is not available in the namespace where the Entando App has been deployed, a new EntandoPlugin custom resource is created and deployed in the namespace using the details defined in the bundle. \n At the same time, an EntandoAppPluginLink custom resource is deployed in the namespace in order to expose the microservice ingress path on the EntandoApp ingress. \n If both the EntandoPlugin custom resource and the EntandoAppPluginLink are deployed correctly, the APIs of the microservice will be available from the same domain of the EntandoApp, making it possible reach those APIs from the EntandoApp using relative urls. \n \n This is the standard flow when no other micorservice with a given name is already available in the EntandoApp namespace. \n If there is an existing microservice with the same name as the one generated from the PluginDescriptor, the ECR will connect the EntandoApp to\nthe existing microservice by generating and deploying the required EntandoAppPluginLink per step 3 above.\nThis way, plugins can be reused by many applications at the same time. \n Other Options \n The naming convention recommendations above are accurate for creating bundles and for self contained applications where the Entando operator is managing the lifecycle of your microservices. If you have a substantial API infrastructure or you intend to deploy a large number of versioned microservices you can also utilize Entando with API management infrastructure like API gateways. If you are using an API gateway or other API abstraction layer you will need to manually manage the ingress for your micro frontends in your application to point to the API gateway deployment. \n In cases where conflicts occur bundles can easily be renamed by updating metdata. \n Kubernetes naming conventions \n Here some rules about naming conventions extracted from the  Kubernetes documentation on object names and ids \n \n Most resource types require a name that can be used as a DNS subdomain name as defined in RFC 1123. This means the name must: \n \n contain no more than 253 characters \n contain only lowercase alphanumeric characters, '-' or '.' \n start with an alphanumeric character \n end with an alphanumeric character \n \n \n"},{title:"Overview",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-overview.html",relativePath:"v6.2/docs/ecr/ecr-overview.md",key:"v-4a485be8",path:"/v6.2/docs/ecr/ecr-overview.html",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Glossary",slug:"glossary"},{level:3,title:"Component",slug:"component"},{level:3,title:"ECR Bundle",slug:"ecr-bundle"},{level:3,title:"EntandoDeBundle custom resource",slug:"entandodebundle-custom-resource"},{level:3,title:"Entando-component-manager",slug:"entando-component-manager"},{level:3,title:"Entando-K8S-service",slug:"entando-k8s-service"},{level:2,title:"Architecture",slug:"architecture"},{level:2,title:"Example flow",slug:"example-flow"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Overview \n Introduction \n The Entando Component Repository (ECR) is meant to be a repository to\nshare reusable components among different Entando instances. \n The following glossary relates to the ECR and related concepts: \n Glossary \n Component \n An Entando component - simply referred to as component - is a piece of\nreusable code/resource to be used in an Entando widget, page or\napplication. Examples of components are widgets, microfrontends,\ncontent-types, labels, plugins, and static resources \n ECR Bundle \n An ECR bundle - is a package containing one or more components and a\n'descriptor.yaml' file providing information about the bundle. The\nbundle is published on an Git registry and is shared with an Entando\napplication using the EntandoDeBundle custom resource. \n EntandoDeBundle custom resource \n The EntandoDeBundle custom resource is a Kubernetes custom resource\nreadable by the Entando6 operator. It’s used to provide information\nabout an ECR bundle and make the bundle available in kubernetes for the\nentando-component-manager. \n Entando-component-manager \n The entando-component-manager - a.k.a component-manager is part of the\nEntando6 app and dialogs both with the Kubernetes cluster via the\nentando-k8s-service and with the entando-core. The\nentando-component-manager reads the bundles from the cluster and exposes\nthem via an API accessible from AppBuilder. The component-manager is\nalso responsible of the installation/removal of components from\nentando-core \n Entando-K8S-service \n The Entando-K8S-Service is part of the Entando infrastructure and is\nresponsible for the low-level communication with the K8S cluster API. \n Architecture \n \n From an architectural point of view, the ECR is composed of \n \n The EntandoDeBundles which contain the metadata associated with a bundle \n The Entando-k8s-service which reads the bundles from the\ncluster/namspace(s) and serves them via a consumable API \n The Component-manager which creates the connection between the EntandoApp\nand the K8S-service. \n Example flow \n \n \n The user lands on the ECR page in app-builder and wants to see the\nlist of bundles shared with that EntandoApp \n \n \n AppBuilder asks the component-manager for the list of available\nbundles \n \n \n Component-manager queries the k8s-service to get the available\nbundles \n \n \n The k8s-service queries the cluster/namespace(s) it is able to read\nfrom for available bundles and returns the list to the\ncomponent-manager \n \n \n Component-manager returns a list to App-Builder \n \n \n The user is able to see the available bundles and is able to install\none or more of them \n \n \n"},{title:"Troubleshooting ECR",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-troubleshooting-guide.html",relativePath:"v6.2/docs/ecr/ecr-troubleshooting-guide.md",key:"v-1e6c858c",path:"/v6.2/docs/ecr/ecr-troubleshooting-guide.html",headers:[{level:2,title:"A bundle installation/removal has failed, how to access the logs?",slug:"a-bundle-installation-removal-has-failed-how-to-access-the-logs"},{level:3,title:"Overview",slug:"overview"},{level:3,title:"Solution",slug:"solution"},{level:2,title:"My bundle has an issue, how should I publish a new version of the bundle?",slug:"my-bundle-has-an-issue-how-should-i-publish-a-new-version-of-the-bundle"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Solution",slug:"solution-2"},{level:2,title:"Bundle installation fails because a file has not been found in the bundle",slug:"bundle-installation-fails-because-a-file-has-not-been-found-in-the-bundle"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Solution",slug:"solution-3"},{level:2,title:"Bundle installation failed due to plugin(s) images not reachable",slug:"bundle-installation-failed-due-to-plugin-s-images-not-reachable"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Solution",slug:"solution-4"},{level:2,title:"I can't uninstall a bundle because some components are in use",slug:"i-can-t-uninstall-a-bundle-because-some-components-are-in-use"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Solution",slug:"solution-5"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Troubleshooting ECR \n A bundle installation/removal has failed, how to access the logs? \n Overview \n Currently the Entando component manager logs are available in kubernetes via dashboard (openshift) or cli tools (k9s or kubectl).\nIf in you Entando cluster you have more than one Entando App custom resource, you will need to know what's the correct component-manager to check using the corresponding Entando App name and namespace where the app has been deployed. \n Solution \n Using  kubectl  and assuming for simplicity that you have only one Entando App named  quickstart  and your Entando cluster is only composed of one namespace, also named  quickstart ,\nyou can get the component-manager logs using the command \n kubectl logs -f deployment/quickstart-server-deployment --namespace quickstart -c de-container\n \n Note : the  -f  flag is optional and could be used to follow the logs for debugging purposes \n My bundle has an issue, how should I publish a new version of the bundle? \n Overview \n Sometimes a bundle could have some issues: typos in the  descriptor.yaml  file, wrong references of components or to not available docker images are just a few of the possible errors. \n Solution \n \n If the bundle is shared using a git repository, you can make the required changes to your project and publish the new version to git and generate a new tag for it. \n Once the new tag is published, update the bundle costum-resource avaialble in you Entando Cluster by adding the new tag to the  tags  objects  and replacing the latest  dist-tags  to point to this new version. \n Proceed with the new installation \n \n If you're actively working on your bundle and you simply want to verify things are working correctly, instead of generating a new tag for each release of the bundle you can try to keep overriding a specific tag using the git command  git tag -f . We suggest you to follow this practice only during development and not in production. \n Bundle installation fails because a file has not been found in the bundle \n Overview \n When a component that is referenced in the  descriptor.yaml  is missing in the bundle or not correctly referenced, the bundle installation fails and in the logs is reported which file has not been found. \n ERROR - File with name {filename} not found in the bundle\n Solution \n When such a problem happens, verify that the component referenced in the descriptor file are actually present in the bundle and that the reference is properly typed. \n Publish a new version of your bundle as described in the\n \"My bundle has an issue\"  section \n Bundle installation failed due to plugin(s) images not reachable \n Overview \n Plugin included in a bundle are referenced using their docker image. Sometime the image is not available - maybe has not yet be published or is in a private docker registry - and plugin installation can't happen and the entire bundle installation process can't finish successfully \n Solution \n Verify that the docker image you are referencing is correct and publicly available. \n \"My bundle has an issue\"  section \n I can't uninstall a bundle because some components are in use \n Overview \n When removing an installed bundle, the Entando component manager verfies that the bundle components\nare not in use by any other component. Removing such components would cause an error during removal\nas in certain case the deleting a component in use is not permitted. \n Solution \n In order to prevent such errors, the user is alerted and required to manually decouple the bundle\ncomponents before beign able to completely remove the bundle from the system. \n"},{title:"Bundle uninstall",frontmatter:{},regularPath:"/v6.2/docs/ecr/ecr-uninstall-flow.html",relativePath:"v6.2/docs/ecr/ecr-uninstall-flow.md",key:"v-492826e8",path:"/v6.2/docs/ecr/ecr-uninstall-flow.html",headers:[{level:2,title:"Uninstall process",slug:"uninstall-process"},{level:2,title:"Troubleshooting",slug:"troubleshooting"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Bundle uninstall \n Uninstall process \n To uninstall a bundle that was previously installed on an Entando App Engine, from Entando App builder UI go to\nthe  Component Repository  tab and select the bundle you want to uninstall \n \n An initial check is made to verify none of the bundle components are in use.\nIf any of the components are in use, a popup will alert you.\nNote that you can't force the removal of a bundle if its components are in use. \n Once the removal process starts: \n \n Bundle resources are deleted from the Entando App Engine \n Components included in the bundle are removed from the Entando App Engine \n Plugins are unlinked \n Troubleshooting \n If any error happens during the uninstall process and you don't know what to do,\ncheck out the  Troubleshooting guide  or the  Entando Forum \n"},{title:"Quick Reference",frontmatter:{},regularPath:"/v6.2/docs/getting-started/quick-reference.html",relativePath:"v6.2/docs/getting-started/quick-reference.md",key:"v-0f23bca8",path:"/v6.2/docs/getting-started/quick-reference.html",headers:[{level:2,title:"Quick Reference",slug:"quick-reference"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Quick Reference \n Just the steps, for advanced users. \n \n Install  Multipass \n Launch VM \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n Open Ubuntu shell \n multipass shell ubuntu-lts\n \n Install k3s \n curl  -sfL https://get.k3s.io  |   sh  -\n \n Check for node ready \n sudo  kubectl get node\n \n Download custom resource definitions \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n Create custom resources \n sudo  kubectl create -f dist/crd\n \n Create namespace \n sudo  kubectl create namespace entando\n \n Download Helm chart (or  generate your own ) \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/entando.yaml\n \n Configure external access to your cluster with your VM IP \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n \n Deploy Entando \n sudo  kubectl create -f entando.yaml\n \n Check for quickstart-composite-app-deployer  Completed \n sudo  kubectl get pods -n entando --watch\n \n Get URL to access Entando App Builder from your browser \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n "},{title:"Get Started with Entando in 3 Easy Steps",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/docs/getting-started/",relativePath:"v6.2/docs/getting-started/README.md",key:"v-7e970e22",path:"/v6.2/docs/getting-started/",headers:[{level:2,title:"Install Kubernetes",slug:"install-kubernetes"},{level:3,title:"Enable Hypervisor",slug:"enable-hypervisor"},{level:3,title:"Launch Ubuntu VM",slug:"launch-ubuntu-vm"},{level:3,title:"Run Kubernetes",slug:"run-kubernetes"},{level:2,title:"Prepare Kubernetes Environment",slug:"prepare-kubernetes-environment"},{level:3,title:"Add Custom Resources",slug:"add-custom-resources"},{level:3,title:"Create Namespace",slug:"create-namespace"},{level:3,title:"Download Helm Chart",slug:"download-helm-chart"},{level:3,title:"EntandoCompositeApp",slug:"entandocompositeapp"},{level:3,title:"Configure Access to Your Cluster",slug:"configure-access-to-your-cluster"},{level:2,title:"Deploy Entando",slug:"deploy-entando"}],lastUpdated:"9/22/2020, 4:28:19 PM",content:" Get Started with Entando in 3 Easy Steps \n New to Kubernetes, hypervisors, and Helm charts? \n This in-depth guide takes a learn-as-you-go approach, and will give you a working knowledge of Kubernetes as you get Entando up and running in a local environment. \n \n Install Kubernetes \n Prepare Kubernetes Environment \n Deploy Entando \n \n Note: For advanced or long-time Entando users, check out our  Quick Reference  install guide with just the steps. \n Install Kubernetes \n Since Entando is designed to run on Kubernetes, let's get started by installing our own instance of Kubernetes locally. \n We've tested a variety of Kubernetes implementations including Minikube, Minishift, CodeReady Containers, K3s, and Microk8s to find the best combination of low cpu/memory usage, fast startup times, and minimal configuration so we can get started quickly. After downloading the necessary files, we'll have our own instance of Kubernetes up and running in < 60 seconds. \n What's Needed to Run Kubernetes \n Kubernetes is a container orchestrator designed to manage a server cluster. It requires at least one master node running a Linux OS. We'll be using Multipass to create a lightweight Ubuntu VM in seconds that runs on a bare metal hypervisor for speed and performance. \n Enable Hypervisor \n TIP \n Hypervisors allow you to create and run virtual machines. Virtualization software that run on top of your operating system like VirtualBox or VMWare Workstation are Type 2 hypervisors. Type 1 hypervisors run on bare metal. \n \n Let's install a bare metal hypervisor for optimal performance. \n Mac:  Install  hyperkit . \n brew  install  hyperkit\n \n Windows:   Install Hyper-V \n \n What if my machine doesn't support hyperkit or Hyper-V? \n Use a Type 2 hypervisor that runs on top of your operating system: \n \n Install Virtual Box:\n Mac \n Windows \n Launch Ubuntu VM \n TIP \n Multipass is a tool developed by the publishers of Ubuntu to create lightweight Ubuntu VMs in seconds. \n \n \n \n Install  Multipass \n \n \n Launch VM \n \n \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n \n Open a shell \n \n multipass shell ubuntu-lts\n Run Kubernetes \n TIP \n K3s is a certified Kubernetes distribution designed for production workloads in resource-constrained environments. \n It's packaged as a single <40MB binary that reduces the dependencies and steps needed to install, run and auto-update a production Kubernetes cluster. \n \n \n Install  k3s \n \n curl  -sfL https://get.k3s.io  |   sh  -\n \n \n Check for  Ready   STATUS . \n \n sudo  kubectl get node\n \n \n What's running out of the box? \n sudo  kubectl get pods -A\n \n \n \n Congratulations! \n You now have a local instance of Kubernetes up and running. \n Prepare Kubernetes Environment \n To install Entando, we'll add  Custom Resources , create a  Namespace , download a  Helm  chart, and configure external access to our cluster. \n Add Custom Resources \n TIP \n Standard resources in Kubernetes include things like  Pods , which are a group of one or more containers,  Services , the way to call or access your pods, and  Ingresses , for managing external access to your cluster. \n Custom resources let you store and retrieve structured data.  Combining a custom resource with a custom controller allows you to define a desired state to automate the running of your applications or services in a Kubernetes cluster. \n \n Examples of custom resources in Entando are: \n \n Entando App Engine \n Entando Identity Management System \n \n From your Ubuntu shell: \n \n Download custom resource definitions. \n \n wget  -c https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/custom-resources.tar.gz -O -  |   tar  -xz\n \n \n Create custom resources \n \n sudo  kubectl create -f dist/crd\n Create Namespace \n TIP \n Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual clusters are called namespaces. \n You can use namespaces to allocate resources and set cpu/memory limits for individual projects or teams. They can also encapsulate projects from one another. \n \n sudo  kubectl create namespace entando\n Download Helm Chart \n TIP \n Helm is a package manager for Kubernetes that helps you define, install, and upgrade Kubernetes applications.\nThis  Getting Started  guide uses a Helm-generated file with a number of default values to help get you started faster,\ne.g. use embedded databases, don't include OpenShift support, don't include PDA widgets, etc. If you want to\nchange any of those defaults please see  https://github.com/entando-k8s/entando-helm-quickstart . \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/entando.yaml\n EntandoCompositeApp \n To quickly deploy an application, Entando uses a Kubernetes Custom Resource named  EntandoCompositeApp . It's composed of 3 parts: \n \n EntandoKeycloakServer  (authentication manager) \n EntandoClusterInfrastructure  (interface between Entando app and Kubernetes) \n EntandoApp  (core logic application) \n \n To speed up the  Getting Started  environment, embedded databases are used by default for these components.\nSee  this tutorial  for more information on how to change your\ndatabase connection. \n Configure Access to Your Cluster \n TIP \n Entando sets up  Ingresses  in Kubernetes to access services from outside your server cluster.\nWe'll use this to access Entando from a local browser. \n If you run into network issues during startup or if you are using Windows for your local development instance, please see  the tips . Symptoms can include having Entando fail to completely start the first time or a working Entando installation may fail to restart later. \n \n To set up external access to your cluster, you'll need to replace the value of\n ENTANDO_DEFAULT_ROUTING_SUFFIX  with your Ubuntu IP. You can look up your Ubuntu IP, and edit the\nYAML file manaully, but running the below commands will automatically update the IP address for you. \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n Deploy Entando \n Deploying the Helm chart will deploy all of the Kubernetes resources required for Entando to run. \n sudo  kubectl create -f entando.yaml\n \n sudo  kubectl get pods -n entando --watch\n \n \n What does a successful startup look like? \n \n First, you'll see the Entando operator:  ContainerCreating  >  Running \n Next, the Entando composite app deployer:  Pending  >  ContainerCreating  >  Running \n Then, Keycloak:  kc-deployer  >  kc-db-deployment \n \n Jobs / Deployments \n \n Jobs, like  kc-db-preparation-job  run once, and are  Completed :  0/1 \n Database deployments, like  kc-db-deployment , should end up as  Running :  1/1 \n The Keycloak server deployment  kc-server-deployment , should end up as  Running :  1/1 \n The  quickstart-server-deployment  should end up as  3/3 \n \n Lifecycle Events \n \n Each line represents an event:  Pending ,  ContainerCreating ,  Running  or  Completed \n Restarts should ideally be  0 ; otherwise, there was a problem with your cluster, and Kubernetes is trying to self-heal \n \n ubuntu@test-vm : ~ $   sudo  kubectl get pods -n entando --watch \n NAME                                   READY   STATUS              RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg   0/1     ContainerCreating   0          3s\nquickstart-operator-8556c9c6f8-9ghwg   0/1     Running             0          49s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     ContainerCreating   0          0s\nquickstart-composite-app-deployer-picaju7bf0   1/1     Running             0          20s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     ContainerCreating   0          0s\nquickstart-operator-8556c9c6f8-9ghwg           1/1     Running             0          88s\nquickstart-kc-deployer-mx7ms3sc2l              1/1     Running             0          19s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          0s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     ContainerCreating   0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Running             0          77s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    1/1     Running             0          87s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          13s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     PodInitializing     0          15s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Completed           0          17s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     ContainerCreating   0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Running             0          3m\nquickstart-kc-server-deployment-66484d596d-qr78q   1/1     Running             0          4m36s\nquickstart-kc-deployer-mx7ms3sc2l                  0/1     Completed           0          6m50s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     ContainerCreating   0          0s\nquickstart-eci-deployer-kx9nhop22g                 1/1     Running             0          5s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     ContainerCreating   0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Running             0          97s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running             0          2m7s\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed           0          2m15s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     ContainerCreating   0          1s\nquickstart-deployer-os19rw3eto                       1/1     Running             0          6s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          0s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     ContainerCreating   0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Running             0          7s\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running             0          19s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          4s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          5s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          8s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          9s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          6m42s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m20s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m22s\nquickstart-db-preparation-job-5a55b267-6             0/1     PodInitializing     0          7m23s\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed           0          7m25s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          0s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     ContainerCreating   0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     Running             0          2m35s\nquickstart-server-deployment-5597597575-gtptz        1/3     Running             0          2m37s\nquickstart-server-deployment-5597597575-gtptz        2/3     Running             0          2m38s\nquickstart-server-deployment-5597597575-gtptz        3/3     Running             0          3m5s\nquickstart-deployer-os19rw3eto                       0/1     Completed           0          11m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed           0          20m\n \n \n \n Press  Ctrl-C  to exit the watch command once everything is up and running. \n \n What pods come out of the box? \n sudo  kubectl get pods -n entando\n \n NAME                                                 READY   STATUS      RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg                 1/1     Running     0          132m\nquickstart-kc-db-deployment-c57f75d7f-wxmqr          1/1     Running     0          130m\nquickstart-kc-db-preparation-job-1d6ab9b6-7          0/1     Completed   0          129m\nquickstart-kc-server-deployment-66484d596d-qr78q     1/1     Running     0          128m\nquickstart-kc-deployer-mx7ms3sc2l                    0/1     Completed   0          130m\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running     0          123m\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed   0          124m\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running     0          121m\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed   0          121m\nquickstart-server-deployment-5597597575-gtptz        3/3     Running     0          113m\nquickstart-deployer-os19rw3eto                       0/1     Completed   0          121m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed   0          131m\n Log in to Entando \n Now that we've installed Entando, let's log in to  Entando App Builder . \n TIP \n Ingress exposes HTTP routes from outside the cluster to services within the cluster. \n \n Get the URL to access Entando from your local browser. \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n \n Example URL: \n \n quickstart-entando.192.168.64.33.nip.io/app-builder/\n \n \n \n \n Username: admin \n Password: adminadmin \n \n After login, change your password to activate your account. \n \n Note: If the login process hangs for more than 5 seconds, refresh the browser. \n \n \n The App Builder is where we'll compose our micro frontends alongside CMS pages and content. \n Congratulations! \n We now have Entando up and running on Kubernetes in our local environment. \n \n \n For Developers: Learn how Ingresses work behind the scenes. \n\n``` bash\nsudo kubectl describe ingress -n entando\n```\n\n``` shell-session\nName:             quickstart-kc-ingress\nNamespace:        entando\nAddress:          192.168.64.33\nDefault backend:  default-http-backend:80 ( )\nRules:\n  Host                                        Path  Backends\n  ----                                        ----  --------\n  quickstart-kc-entando.192.168.64.33.nip.io\n                                              /auth   quickstart-kc-server-service:8080 (10.42.0.14:8080)\n```\n\nThe Ingress provides the `Host` and `Path` to access our `Services`.\n\n#### Identity Management\n\n1. Find the URL to the Keycloak server.\n\n``` shell-session\n  Host                                        Path  Backends\n  ----                                        ----  --------\n  quickstart-kc-entando.192.168.64.33.nip.io\n                                              /auth   quickstart-kc-server-service:8080 (10.42.0.14:8080)\n```\n\n- Example URL:\n\n``` bash\nhttp://quickstart-kc-entando.192.168.64.33.nip.io/auth/\n```\n\nNote: Replace the first part of the URL with the value of your `Host`\n\n2. Get the Kubernetes `Secret` for the login and password.\n\n``` bash\nsudo kubectl get secrets -n entando\n```\n\nWe're interested in the `keycloak-admin-secret`:\n\n``` shell-session\nNAME                                                 TYPE                                  DATA   AGE\nquickstart-kc-db-admin-secret                        Opaque                                2      78m\nquickstart-kc-db-secret                              Opaque                                2      76m\nquickstart-kc-admin-secret                           Opaque                                2      76m\nquickstart-kc-realm                                  Opaque                                1      76m\nkeycloak-admin-secret                                Opaque                                3      70m\n```\n\n3. Decode the secret.\n\n``` bash\nsudo kubectl get secret keycloak-admin-secret -n entando -o jsonpath=\\\n'{\"\\n Username: \"}{.data.username | base64decode}{\"\\n Password: \"}{.data.password | base64decode}{\"\\n\"}'\n\"{{println}}Username: {{.data.username | base64decode}}{{println}}Password: {{.data.password | base64decode}}{{println}}{{println}}\"\n```\n\n- Example Username and Password:\n\n``` shell-session\nUsername: entando_keycloak_admin\nPassword: MZ8bY4phMd\n```\n\n4. In your Keycloak browser, click `Administration Console`\n\nEnter the Username and Password from your shell.\n\n#### Entando App Builder\n\n``` bash\nsudo kubectl describe ingress -n entando\n```\n\n``` shell-session\nName:             quickstart-ingress\nNamespace:        entando\nAddress:          192.168.64.33\nDefault backend:  default-http-backend:80 ( )\nRules:\n  Host                                     Path  Backends\n  ----                                     ----  --------\n  quickstart-entando.192.168.64.33.nip.io\n                                           /entando-de-app     quickstart-server-service:8080 (10.42.0.22:8080)\n                                           /digital-exchange   quickstart-server-service:8083 (10.42.0.22:8083)\n                                           /app-builder/       quickstart-server-service:8081 (10.42.0.22:8081)\n                                           /pda                quickstart-pda-server-service:8081 (10.42.0.28:8081)\n```\n\n- Example URL:\n\n``` bash\nhttp://quickstart-entando.192.168.64.33.nip.io/app-builder/\n```\n\n \n\n--- --\x3e\n"},{title:"Add a New Datasource in EAP Server",frontmatter:{},regularPath:"/v6.2/docs/reference/add_datasource_to_eap_image.html",relativePath:"v6.2/docs/reference/add_datasource_to_eap_image.md",key:"v-26ff67a8",path:"/v6.2/docs/reference/add_datasource_to_eap_image.html",headers:[{level:2,title:"Other resources",slug:"other-resources"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Add a New Datasource in EAP Server \n With EAP should be enough to add a set of parameters the EntandoApp\ncustom resource. \n \n \n Set the standardServerImage to eap \n \n \n Add a  parameters  object \n \n \n \n Parameters environment variables reference \n \n \n \n \n \n \n \n Env variable \n Value \n Example with PortDB \n \n \n \n \n DATASOURCES \n "PORTDB,SERVDB, <YOUR-DS-PREFIX>" \n \n \n \n <YOUR-DS-PREFIX>_NONXA \n Defines the datasource as a non-XA datasource. Defaults to  false \n PORTDB_NONXA="true" \n \n \n <YOUR-DS-PREFIX>_JTA \n Defines Java Transaction API (JTA) option for the non-XA datasource. The XA datasources are already JTA capable by default Defaults to  true \n PORTDB_JTA="false" \n \n \n <YOUR-DS-PREFIX>_URL \n Defines connection URL for the datasource. \n PORTDB_URL="jdbc:derby:/entando-data/databases/entandoPort;create=true" \n \n \n <YOUR-DS-PREFIX>_JNDI \n Defines the JNDI name for the datasource. This setting is useful if you want to override the default generated JNDI name \n PORTDB_JNDI="java:jboss/datasources/entandoPortDataSource" \n \n \n <YOUR-DS-PREFIX>_DRIVER \n Defines Java database driver for the datasource \n PORTDB_DRIVER="derby" \n \n \n <YOUR-DS-PREFIX>_USERNAME \n Defines the username for the datasource \n PORTDB_USERNAME="agile" \n \n \n <YOUR-DS-PREFIX>_PASSWORD \n Defines the password for the datasource \n PORTDB_PASSWORD="agile" \n \n \n <YOUR-DS-PREFIX>_SERVICE_HOST \n Defines the database server’s host name or IP address to be used in the datasource’s connection-url property. \n PORTDB_SERVICE_HOST="dummy" \n \n \n <YOUR-DS-PREFIX>_SERVICE_PORT \n Defines the database server’s port for the datasource. \n PORTDB_SERVICE_PORT="1527" \n \n \n \n \n Note \n For more details on other standard variables check the  EAP\ndocumentation \n \n Here a potential example \n apiVersion: entando.org/v1\nkind: "EntandoApp"\nmetadata:\n  annotations: {}\n  labels: {}\n  name: "quickstart"\nspec:\n  dbms: #tbd\n  replicas: 1\n  standardServerImage: eap\n  ingressPath: /entando-de-app\n  parameters:\n    DATASOURCES: "PORTDB,SERVDB,MYDATASOURCE"\n    MYDATASOURCE_NONXA: "true"\n    MYDATASOURCE_JTA: "false"\n    ...\n Other resources \n \n EAP Official Documentation: Runtime\nArtifacts/Datasources \n \n'},{title:"Cluster Resource Limits",frontmatter:{},regularPath:"/v6.2/docs/reference/cluster-resource-limits.html",relativePath:"v6.2/docs/reference/cluster-resource-limits.md",key:"v-3118c32c",path:"/v6.2/docs/reference/cluster-resource-limits.html",headers:[{level:3,title:"Cluster Resource Limits",slug:"cluster-resource-limits"},{level:3,title:"Bundle size limitations",slug:"bundle-size-limitations"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Cluster Resource Limits \n Entando needs a well-defined amount of resources in order to start and Kubernetes takes care of using only the needed amount of them.\nHowever, you can choose to impose boundaries on the minimum and maximum used/allocated resources by updating the downloaded  entando.yaml  file and setting the  ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS  property to true.\nIn this way, Entando will allocate a predefined amount of resources and Kubernetes will act more strictly checking for resource availability. See  Kubernetes resources  for more information. \n By not imposing limits you can minimize initial needed resources and startup time, leaving Kubernetes free to manage its resources as he wants.\nBy imposing limits you can obtain a better-balanced system. \n It's important to note that, accordingly to the Kubernetes documentation, in order to deploy on a namespace with a\n ResourceQuotas  on memory and cpu, \n \n every Container must have a memory request, memory limit, cpu request, and cpu limit \n \n so, in that case, you will need to set  ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS  to true, otherwise your deploy will fail. \n Here you can see the detailed resource requests/limits per container: \n \n \n \n Component \n Mem requests \n CPU requests \n Mem limits \n CPU limits \n \n \n \n \n AppBuilderDeployableContainer \n 128Mi \n 125m \n 512Mi \n 500m \n \n \n EntandoAppDeployableContainer \n 448Mi \n 375m \n 1792Mi \n 1500m \n \n \n ComponentManagerDeployableContainer \n 192Mi \n 188m \n 768Mi \n 750m \n \n \n EntandoPluginSidecarDeployableContainer \n 192Mi \n 188m \n 768Mi \n 750m \n \n \n EntandoPluginDeployableContainer \n 256Mi \n 250m \n 1024Mi \n 1000m \n \n \n EntandoK8SServiceDeployableContainer \n 192Mi \n 250m \n 768Mi \n 1000m \n \n \n KeycloakDeployableContainer \n 192Mi \n 250m \n 768Mi \n 1000m \n Bundle size limitations \n Entando supports bundles without size limitations, you can install as many bundles as you want and bundles as big as you desire. \n The only thing you have to check is the  <YOUR-APP-NAME>-de-pvc  volume size. Each bundle is installed in that volume, so when it reaches its maximum capacity you will not be able to install bundles anymore. \n You can find  quickstart-de-pvc  volume inside de-container container, that is part of the pod named  <YOUR-APP-NAME>-server-deployment-*** , where asterisks should assume values based on your instance.\nFeel free to set its size accordingly to your needs. \n"},{title:"Manage Entando Databases",frontmatter:{},regularPath:"/v6.2/docs/reference/databases.html",relativePath:"v6.2/docs/reference/databases.md",key:"v-16600c28",path:"/v6.2/docs/reference/databases.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Lightweight, low-config Databases with PostgreSQL and MySQL",slug:"lightweight-low-config-databases-with-postgresql-and-mysql"},{level:2,title:"Existing External Databases",slug:"existing-external-databases"},{level:3,title:"Structure",slug:"structure"},{level:3,title:"How it works",slug:"how-it-works"},{level:3,title:"Keeping track of credentials",slug:"keeping-track-of-credentials"},{level:2,title:"Vendor specific notes",slug:"vendor-specific-notes"},{level:3,title:"Oracle",slug:"oracle"},{level:3,title:"Notes",slug:"notes"},{level:3,title:"MySQL",slug:"mysql"},{level:3,title:"Resulting Connection String",slug:"resulting-connection-string-2"},{level:3,title:"Notes",slug:"notes-2"},{level:3,title:"PostgreSQL",slug:"postgresql"},{level:2,title:"Skipping database preparation",slug:"skipping-database-preparation"},{level:3,title:"How it works",slug:"how-it-works-2"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Manage Entando Databases \n Overview \n Entando’s Docker images currently support three different relational\ndatabase management systems: PostgreSQL, MySQL and Oracle. With\nPostgreSQL and MySQL, by default, Entando’s will automatically create a\nKubernetes Deployment hosting the database management systems. However,\nfor Oracle, and also for other scenarios that may require it, Entando\nsupports connectivity to existing external databases. This document\nprovides the user with the necessary information to decide how to manage\nEntando’s databases. \n Lightweight, low-config Databases with PostgreSQL and MySQL \n When deploying Entando Custom Resources that require databases to a new\nNamespace, the default behavior for Entando is to create a Kubernetes\nDeployment. It uses the standard Openshift compliant images: \n \n \n centos/mysql-57-centos7 and \n \n \n centos/postgresql-96-centos7) \n \n \n This is a fairly low-configuration approach, as Entando will create and\ninitialize the databases transparently. Persistent data is stored on any\nPersistent Volume that meets our Persistent Volume Claim requirements.\nWhen an Entando Custom Resource is redeployed, the Persistent Volumes\nremain in tact. Since the subsequent data initialization is idempotent,\nthe supporting Deployments will scale up and behave as expected. \n Generally our services encapsulate the database they use entirely, and\nprovide facilities to import and export the data without needing any\nknowledge of the internal workings of the underlying data store. For\nmost simple Entando Apps the database doesn’t grow too large and is\nfairly easy to manage. This state of affairs allowed us to keep our\ndatabases isolated from each other, thus allowing for isolated\ndeployments without needing complex coordination of database migration\nfor the different deployment pipelines. \n It is worth noting that these database Deployments are not clustered.\nThe customer is therefore strongly advised to provide redundancy and\nclustering in the form of clustered storage. These database deployments\ndo specify a restartPolicy of \'Always\', so in the event of a\nnon-corrupting failure, the database Pod should therefore restart in\nabout 30 seconds. This by no means offers the features of a full\ndatabase cluster, but may suffice for many scenarios. \n However, in more advanced use cases, such as the use of our CMS\nfunctionality, this simplistic approach may not scale. And where there\nis a a centralized database admin team, or where there is a requirement\nto comply to strict organizational governance w.r.t. databases, this\napproach does result in a multitude of databases that may be difficult\nfor the database admin team to manage. \n Existing External Databases \n For this reason, Entando can also be configured to use an existing\ndatabase service provided by the customer. In these scenarios, the\ncustomer is expected to take responbility for the lower level database\noperations such as tablespace creation, permissions and clustering.\nEntando will however still be responsible for creating and populating\nthe tables, indices and foreing keys. Entando will also create all of\nthese in the appropriate table \'container\' for the DBMS in question such\nas a schema (Oracle/PostgreSQL) or a database (MySQL). In order to\nachieve this, Entando installs a dedicated CustomResourceDefinition in\nKubernetes, called an \'EntandoDatabaseService\' \n The idea is for EntandoDatabaseService custom resources to be created in\nthe namespace the EntandoApps and EntandoPlugin that should use them\nwill be created. The EntandoDatabaseService is usually created along\nwith a secret that carries admin credentials to the database in\nquestion. \n Structure \n The EntandoDatabaseService custom resource looks like this: \n  EntandoDatabaseService\nmetadata:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\nspec:\n  dbms: string, one of oracle, postgresql or mysql\n  host: string, either an ip address or hostname where the database service is hosted\n  port: integer, the port on which the database service is hosted\n  databaseName: string, the name of the database, only required for PostgreSQL and Oracle\n  secretName: the name of the Secret in the same namespace carrying admin credentials to the database service\n  tablespace: (Oracle only)  the tablespace to use to create the required schemas in\n  jdbcParameters: a map containing name-value pairs for any additional parameters required for the JDBC driver to connect to the database.\n \n The Secret that will provide the admin credentials, identified by the\nabove  secretName  should look like this: \n Secret:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\n  stringData:\n    username: string, name of an admin user that can create schemas and other users\n    password: string, password of the above user\n How it works \n In order for the EntandoApp and EntandoPlugin deployer to pick up the\ncorrect database service, the EntandoDatabaseService needs to be created\nBEFORE the EntandoApps and EntandoPlugins are created. There can be\nmultiple EntandoDatabaseServices in the namespace, but they need to\npoint to database services of different vendors, i.e. PostgreSQL, Oracle\nand MySQL. Entando currently cannot enforce any validation but if there\nare two EntandoDatabaseServices that have the same DBMS vendor, it will\nsimply pick the first one and continue. Please ensure that only one\nEntandoDatabaseService exists for each DBMS vendor you need to use. \n Once the appropriate EntandoDatabaseServices have been created, any\nEntandoApp or EntandoPlugin that is created will have to specify the\nappropriate DBMS vendor in their  spec.dbms  property. If the\nEntandoOperator detects an EntandoDatabaseService with a matching DBMS\nvendor, it will continue to create the necessary schemas on the specific\ndatabase. If the EntandoOperator does not detect an\nEntandoDatabaseService with a matching DBMS vendor, it will fall back\nonto its default behaviour which is to create a matching Deployment and\nspin up a database service from the same namespace. If the  spec.dbms \nproperty is not specified on an EntandoApp, the EntandoOperator will\ndefault to PostgreSQL. If the  spec.dbms  property is not specified on\nan EntandoPlugin, the EntandoOperator will assume that the EntandoPlugin\nin question does not require a database and hence bypass any database\nand schema creation. \n When the EntandoOperator processes your Entandoapp or EntandoPlugin with\nan appropriate  spec.dbms  specified, it will create a Schema/User pair\nfor each datasource required. A typical EntandoApp deployment requires 3\ndatasources (portdb,servdb and dedb). Plugins generally only require one\ndatasource (plugindb). \n The database schema and user created will have the same name. The name\nis derived from the name of the EntandoPlugin or EntandoApp by replacing\nall characters that are not ANSI-SQL compliant with an underscore. The\ndatasource name is then suffixed to the schema name. When defining the\nname of your app or plugin, please keep in mind that some DBMS vendors\ndo not support long schema names. Future versions of Entando will allow\nyou to override the schema prefix for an app or plugin, but for now this\nis a limitation one has to keep in mind. \n Keeping track of credentials \n The EntandoOperator generates a Kubernetes Secret for each schema/user\ncombination it creates. The name of this secret is the concatenation of\nthe name of the EntandoApp or EntandoPlugin, the datasource qualifier\nand then the suffix "-secret". For instance, for an EntandoApp called\n"my-app" the "portdb" datasource will have a corresponding Kubernetes\nSecret called "my-app-portdb-secret". The EntandoOperator will never\noverwrite or update an existing database secret. We generate a random\nstring for the password which is generally considered the safest\napproach. If you do however wish to change the password in for the\nresulting user, please remember to update the password on the Kubernetes\nSecret too. Such an operation is however error prone and could result in\nsubsequent deployments failing. \n The EntandoOperator’s schema creation logic is idempotent. If it\ntherefore finds that the generated schema/user combination found in the\nassociated Kuberentes Secret already exists, it won’t do anything.\nHowever, it will attempt to log in, and if it fails to log in, it will\nattempt to create the user. If the user already exists, but with a\ndifferent password than the one in the Kubernetes Secret, all subsequent\ndeployment operations will fail. \n Vendor specific notes \n Oracle \n Example \n   EntandoDatabaseService\n    metadata:\n      name:oracle-service\n    spec:\n      dbms: oracle\n      host: 10.0.0.13\n      port: 1521\n      databaseName: ORCLPDB1.localdomain\n      secretName: oracle-secret\n      tablespace: entando_ts\n      jdbcParameters: {}\n  Secret:\n    metadata:\n      name: oracle-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting connection string: \n jdbc:oracle:thin:@//10.0.0.13:1521/ORCLPDB1.localdomain \n Notes \n Oracle has some rather complicated rules in building the correct\nconnection string. Please note that for the sake of portability and\nlightweight image we are limited to the thin driver. The  databaseName \ncould also be an Oracle service as opposed to an Oracle  SID . Please\ncoordinate with your Oracle DB Admin to determine exactly what value to\nuse here. We strongly recommend testing your settings with some code or\na tool that constructs JDBC connection. \n When the EntandoOperator prepares the schemas for your EntandoApp or\nEntandoPlugin, it will create a user for every datasource required, and\nas is standard behaviour for Oracle, that user will have its own schema\nwith the same name. Permissions are set up to ensure that one user\ncannot access tables from another user’s schema. Please note that Oracle\nlimits schema names to 30 characters. If you intend to use Oracle,\nplease keep the name of your apps and plugins short enough. The suffixes\nthat we append to the app or plugin name to ensure the resulting schema\nname is unique are usually shorter than 8 characters, so names of about\n20 characters should be safe. \n You can specify which tablespace Entando should use to create the\nschemas in using the  spec.tablespace  property \n ORA-01704: string literal too long \n Entando requires extended datatypes to be activated in Oracle 12c and\nhigher\n( https://oracle-base.com/articles/12c/extended-data-types-12cR1 ) \n MySQL \n Example \n EntandoDatabaseService\n  metadata:\n    name:mysql-service\n  spec:\n    dbms: mysql\n    host: 10.0.0.13\n    port: 3306\n    databaseName:\n    secretName: mysql-secret\n    jdbcParameters:\n       useSSL: "true"\nSecret:\n  metadata:\n    name: mysql-secret\n  stringData:\n    username: admin\n    password: admin123\n Resulting Connection String \n jdbc:mysql://10.0.0.13:3306 \n Notes \n MySQL doesn’t really support schemas, or more accurately, it doesn’t\ndistinguish between schemas and databases. For this reason, no\ndatabaseName is required. The EntandoOperator will therefore create an\nentirely new database for each datasource your EntandoApp or\nEntandoPlugin requires. It will also create a user with the same name as\nthe database with permission set up to ensure one user cannot access the\ndatabase of another user. Please note that MySQL limits database names\nto 63 characters. Keep this in mind when defining the names of your\nEntandoApps and EntandoPlugins \n PostgreSQL \n Example \n   EntandoDatabaseService\n    metadata:\n      name:postgresql-service\n    spec:\n      dbms: postgresql\n      host: 10.0.0.13\n      port: 5432\n      databaseName: my_db\n      secretName: postgresql-secret\n      jdbcParameters: {}\n\n  Secret:\n    metadata:\n      name: postgresql-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting Connection String \n jdbc:postgresql://10.0.0.13:5432/my_db \n Notes \n PostgreSQL behaves very similar to Oracle when it comes to how it\nassociates a user with its own schema. The current username is used as a\ndefault schema/prefix to resolve tables. As with Oracle, Entando ensures\nthat two users don’t have access to each other’s schemas. \n Skipping database preparation \n When an Entando App is being deployed, there is an operator responsible for the entire deployment process. It takes care also of DB creation and preparation.\nIf you have an already prepared DB (schemas, tables, and all other stuff), you could skip schemas creation and DB preparation of the EntandoApp in order to speed up the deploy process. \n You can achieve this by specifying some properties for the EntandoApp component present in the helm generated file. Look at  this  for more info. \n For  spec.dbms  property you should choose  none , then you should add all needed DB connection parameters.\nAfter updating parameters with the one you need, you should end with a yaml like this: \n - kind: "EntandoApp"\n  metadata:\n    annotations: {}\n    labels: {}\n    name: "example-qs"\n  spec:\n    dbms: "none"\n    replicas: 1\n    standardServerImage: wildfly\n    ingressPath: /entando-de-app\n    parameters:\n      SPRING_DATASOURCE_USERNAME: "admin"\n      SPRING_DATASOURCE_PASSWORD: "adminadmin"\n      SPRING_DATASOURCE_URL: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_dedb"\n      SPRING_JPA_DATABASE_PLATFORM: "org.hibernate.dialect.PostgreSQLDialect"\n      PORTDB_URL: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_portdb"\n      PORTDB_USERNAME: "admin"\n      PORTDB_PASSWORD: "adminadmin"\n      PORTDB_CONNECTION_CHECKER: "org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"\n      PORTDB_EXCEPTION_SORTER: "org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"\n      SERVDB_URL: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_servdb"\n      SERVDB_USERNAME: "admin"\n      SERVDB_PASSWORD: "adminadmin"\n      SERVDB_CONNECTION_CHECKER: "org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"\n      SERVDB_EXCEPTION_SORTER: "org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"\n How it works \n Using  spec.dbms: "none"  will cause the operator to skip that initial schema/user creation step entirely.\nThen adding those variables under the  spec.parameters  section will supply connection parameters that will be used agnostically by EntandoApp.\nKeep in mind that all these parameters will be applied to each of the containers in the EntandoApp pod and that they will also override existing values. \n'},{title:"Entando Deployment Structure",frontmatter:{},regularPath:"/v6.2/docs/reference/deployment-structure.html",relativePath:"v6.2/docs/reference/deployment-structure.md",key:"v-3cd17670",path:"/v6.2/docs/reference/deployment-structure.html",headers:[{level:2,title:"entando-operator",slug:"entando-operator"},{level:2,title:"database init containers",slug:"database-init-containers"},{level:2,title:"entando-de-app",slug:"entando-de-app"},{level:2,title:"app-builder",slug:"app-builder"},{level:2,title:"component-manager",slug:"component-manager"},{level:2,title:"entando-k8s-service",slug:"entando-k8s-service"},{level:2,title:"keycloak",slug:"keycloak"},{level:2,title:"Other Key Repositories",slug:"other-key-repositories"},{level:3,title:"entando-core",slug:"entando-core"},{level:3,title:"entando-cms",slug:"entando-cms"},{level:3,title:"entando-components",slug:"entando-components"},{level:3,title:"Entando Kubernetes Controllers",slug:"entando-kubernetes-controllers"}],lastUpdated:"8/11/2020, 4:23:51 PM",content:" Entando Deployment Structure \n This page provides a high level overview of the key Entando GitHub repositories along with a brief description\nof how those repositories are realized in a running Entando deployment. The descriptions provided here are meant\nas a guide for identifying opportunities to dig deeper into the architecture and how things are structured\nrather than a panacea for understanding the architecture. \n entando-operator \n The Entando operator coordinates the installation and configuration of all of the components of an Entando\nCluster. The operator can be installed once per Entando Cluster and used to coordinate the plugin lifecycle for\nmultiple Entando applications across many namespaces. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-controller-coordinator/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-controller-coordinator \n Customization \n It is unlikely that the operator will be customized as part of an Entando implementation. It is not built to\nbe extended inside the codebase. The most common pattern will be to use the existing custom resources that the\noperator knows how to deploy to extend the Entando platform. \n database init containers \n During installation an Entando application needs to create several databases and also to initialize those\ndatabases with information when deploying from a backup in your images. At initialization the  entando-k8s-dbjob \nwill be run 5 times in total. Once for keycloak, twice for the entando application (port and serv dbs), once to\npopulate the Entando application database, and once to create the Component Repository database. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-dbjob \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-dbjob \n \n The screenshot below highlights the init containers for the Entando application schema creation, db\ninitialization, and component repository database. \n \n Many managed kubernetes instances like OpenShift won’t show init containers in their dashboards. So if you’re\ntroubleshooting you may need to look deeper. When fetching logs for an init container using kubectl you must\npass the container name as an argument to the call. For example, \n     kubectl logs <pod> -c <container> -n <namespace>        \n    kubectl logs quickstart-kc-db-preparation-job-ddbdbddb-a  -c quickstart-kc-db-schema-creation-job -n sprint1-rc\n Customization \n It is unlikely that the init containers will be customized as part of an Entando project. The init containers\nwill automatically restore a backup included in your application so that you can create custom images that\ninclude your application setup.\nSee  Backing Up and Restoring Your Environment . \n entando-de-app \n The  entando-de-app  is a J2EE application and is an instance of the  entando-core  (see a description of the\n entando-core  repo below). Reviewing the dependencies of this application in the pom.xml will reveal the\ndependencies on the  entando-core ,  entando-engine , and  admin-console  which encompass the core\nfunctionality in versions of Entando prior to Entando 6. In a quickstart deployment the  entando-de-app  is deployed as part of the  entando-composite-app  multi\ncontainer pod. \n \n GitHub:  https://github.com/entando-k8s/entando-de-app/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-de-app-eap , https://hub.docker.com/repository/docker/entando/entando-de-app-wildfly \n Customization \n The  entando-de-app  is very likely to be customized as part of an Entando implementation. This image can be\ncustomized with new APIs, legacy Entando plugins, new database tables, or other extensions to the  entando-core .\nIt is highly recommended that most extensions to the platform in Entando 6 occur in microservices. However, legacy\nintegrations, extensions to the CMS, and migrations from earlier Entando versions may require changes to the  entando-de-app . \n app-builder \n The  app-builder  is the front end of the  entando-de-app . It communicates with the  entando-de-app  via  REST\nAPIs . The  app-builder  is a React JS application and is served via node in the default\ndeployment. In a quickstart deployment the  app-builder  container is deployed in the  entando-composite-app \nmultiple container pod. The  app-builder  also communicates with the Component Manager via REST API to fetch\ninformation about Entando Bundles deployed to the Entando Component Repository (ECR). \n \n GitHub:  https://github.com/entando/app-builder/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/app-builder/ \n Customization \n The  app-builder  is built to be customized and will be customized as part of many Entando implementations.\nThe  app-builder  can be customized at runtime via micro frontends\n widget configuration . The  app-builder  can also be\ncustomized via the integration of custom modules that are added at\n build time . \n component-manager \n The  component-manager  provides the link between the entando-de-app (or your custom core instance) and the\nEntando Component Repository (ECR). The  component-manager  queries the entando-k8s service to fetch available\nbundles that have been deployed as custom resources inside of an Entando cluster.\nThe  component-manager  also manages the relationships between an Entando application and the\ninstalled plugins. This can be seen in the plugin link custom resources in Kubernetes. \n \n GitHub:  https://github.com/entando-k8s/entando-component-manager/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-component-manager/ \n Customization \n It is unlikely that the  component-manager  will be customized as part of an Entando implementation. \n entando-k8s-service \n The  entando-k8s-service  acts as an abstraction layer to fetch data from kubernetes APIs. The primary\nfunctionality is in discovering and making available for installation Entando plugins. The\n entando-k8s-service  is invoked by the  component-manager . \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-service/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-service/ \n Customization \n It is very unlikely that the  entando-k8s-service  will be customized as part of an Entando implementation. \n keycloak \n The  entando-keycloak  project is an extension of the base Keycloak images. The extension provides the default\nthemes for Entando, a customized realm and clients, and adds the Oracle ojdbc jars for connection to Oracle\ndatabases. \n \n GitHub:  https://github.com/entando/entando-keycloak/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-keycloak/ \n Customization \n The keycloak image will often be customized as part of an Entando implementation. Common extensions will\ninclude changing the theme, adding default connections, adding default social logins, adding default clients,\nor other changes. \n Other Key Repositories \n entando-core \n The entando-core project is a J2EE application that exposes APIs for the Entando CMS, includes the legacy\nadmin console, and includes the portal-ui project that performs the server side composition for pages\nrendered via an Entando application. Note that only the composition is performed server side.\nJavascript code is rendered on the client. The entando-core is realized via an instance that includes the\nWAR files generated from a core build as dependencies. In a default deployment this is the  entando-de-app . \n \n GitHub:  https://github.com/entando/entando-core/ \n DockerHub: None (deployed to maven central) \n Customization \n For users familiar with versions prior to Entando 6 there will be cases where the  entando-core  is customized.\nIn most cases these customizations will be delivered via WAR overlay in the instance project.\nUsing WAR overlay is a functional approach for users already  familiar with the process but it is highly\nrecommended to extend the platform using microservices for new projects. \n entando-cms \n The  entando-cms  project is the  app-builder  (React JS) side of the Entando WCMS. It is bundled into the\n app-builder  at build time and will be included in the default deployment of the  app-builder  in almost all cases. \n \n GitHub:  https://github.com/entando/entando-cms/ \n DockerHub: None (deployed to npm) \n Customization \n In some cases the  entando-cms  may be customized if new custom features are added to CMS specific\nfunctionality. However, most cases will use the more general  app-builder  extension points noted above.\nThe  entando-cms  does not expose any dedicated extension interfaces outside of those already provided by the\n app-builder . \n entando-components \n The entando-components project is a collection of legacy plugins for Entando 5 and earlier. These plugins are deployed as WAR dependencies in an entando-core instance. \n \n GitHub:  https://github.com/entando/entando-components/ \n DockerHub: None (deployed to maven central) \n Entando Kubernetes Controllers \n There are a number of controllers that are available to the Entando operator to manage installations and\ncomponents in an Entando Cluster. Those controllers are small and lightweight images that are executed as\nrun to completion pods to manage the installation flow for different parts of the infrastructure. The\ncontrollers are implemented using Quarkus. For more information on the controllers, the Entando custom\nresources, and configuring your Entando deployment see also:\n Custom Resources . \n GitHub: \n \n https://github.com/entando-k8s/entando-k8s-composite-app-controller/ \n https://github.com/entando-k8s/entando-k8s-plugin-controller/ \n https://github.com/entando-k8s/entando-k8s-cluster-infrastructure-controller/ \n https://github.com/entando-k8s/entando-k8s-app-controller/ \n https://github.com/entando-k8s/entando-k8s-app-plugin-link-controller/ \n \n DockerHub: \n \n https://hub.docker.com/repository/docker/entando/entando-k8s-composite-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-plugin-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-cluster-infrastructure-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-plugin-link-controller/ \n Customization \n It is unlikely that the controllers will be customized as part of an Entando implementation. \n"},{title:"Accessing Entando APIs",frontmatter:{sidebarDepth:0},regularPath:"/v6.2/docs/reference/entando-apis.html",relativePath:"v6.2/docs/reference/entando-apis.md",key:"v-64f145d0",path:"/v6.2/docs/reference/entando-apis.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Setup",slug:"setup"},{level:2,title:"Overview",slug:"overview"},{level:3,title:"API structure",slug:"api-structure"},{level:3,title:"Models",slug:"models"},{level:2,title:"Tutorial:",slug:"tutorial"}],lastUpdated:"9/16/2020, 10:59:31 AM",content:" Accessing Entando APIs \n Prerequisites \n \n \n Java 8 \n \n \n maven \n Setup \n \n \n Clone the Entando reference app if you don’t already have it. \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n Start the app for local execution and enable the swagger profile by\npassing  -Dspring.profiles.active=swagger  to the jetty command. Set\nthe value of  -Djetty.port  to something available on your machine\ne.g. 8085. \n  mvn clean package jetty:run-war -Pjetty-local -Pderby -Dspring.profiles.active=swagger -Djetty.port=8085 -Dorg.slf4j.simpleLogger.log.org.eclipse.jetty.annotations.AnnotationParser=error\n \n \n \n \n Note: If you don't have docker installed or running add  -DskipDocker=true  to the command above \n \n \n \n Wait for the app to start. \n \n \n Once started, navigate to the swagger ui in a browser. \n \n \n \n http://localhost:[your port]/entando-de-app/api/swagger-ui.html\n Overview \n The Entando core exposes REST APIs for every action that can be taken in\nthe App Builder and Admin Console environments. For example, you can use\nthese apis to create pages, create page templates or to add widgets to\npages. The APIs can be used to support automation, testing, or\nintegrations with external systems. \n API structure \n All of the APIs share a common top level structure. Each response will\ncontain a top level entry for  errors ,  metadata , and  payload . \n The  errors  will always contain code and a message string indicating an\nerror condition in the request. The  metadata  section is used for\npaging, sorting, filtering and data that is distinct from the body. The\nbody of each response is included in the  payload  section of the\nresponse and varies according to each API. \n Models \n All of the model classes returned by the Entando core are annotated so\nthat the model definition is included in the swagger documentation. At\nthe bottom of the swagger page all of the model classes returned by the\nAPI endpoints can be found. \n Tutorial: \n \n \n Stop the Entando instance if it is running. \n \n \n In the project open  src/main/conf/systemParams.properties . \n \n \n Change the value of this property to reflect the port you are using\nto run the app. \n \n \n applicationBaseURL \n \n \n For example if running on 8085 you would have\n applicationBaseURL=http://localhost:8085/${entando.engine.web.context}/ \n \n \n \n \n Login to the admin console at  http://localhost:8085/entando-de-app/do/login \n \n \n Once logged in go to  Administration - API Management - Consumers. \n \n \n Select the kebab button on the row labeled swagger. \n \n \n On that screen enable the button for  client_credentials . \n \n \n On that screen enter  swagger  as the value for the secret. \n \n \n Click  Save \n \n \n Return to the Swagger UI, e.g.  http://localhost:8085/entando-de-app/api/swagger-ui.html \n \n \n Click  Authorize \n \n \n Enter \n \n \n user: admin \n \n \n password: adminadmin \n \n \n client: swagger \n \n \n client_secret: swagger \n \n \n \n \n Use the  Try it out  button on the APIs \n \n \n Scroll to  widget-controller \n \n \n Select the blue GET row \n \n \n Select  Try it out \n \n \n Look at the results in the window \n \n \n \n \n"},{title:"jACMS Aps Core Tag Library",frontmatter:{},regularPath:"/v6.2/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",relativePath:"v6.2/docs/reference/freemarker-tags/freemarker-JACMS-tags.md",key:"v-a7953bc2",path:"/v6.2/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",headers:[{level:2,title:"Tag content",slug:"tag-content"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contenttag"},{level:3,title:"Description",slug:"description"},{level:3,title:"Attributes",slug:"attributes"},{level:2,title:"Tag contentInfo",slug:"tag-contentinfo"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentInfoTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentinfotag"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:2,title:"Tag contentList",slug:"tag-contentlist"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentListTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentlisttag"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:2,title:"Tag contentListFilter",slug:"tag-contentlistfilter"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistfiltertag"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Attributes",slug:"attributes-4"},{level:2,title:"Tag contentListUserFilterOption",slug:"tag-contentlistuserfilteroption"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag=",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistuserfilteroptiontag"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Attributes",slug:"attributes-5"},{level:2,title:"Tag searcher",slug:"tag-searcher"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.SearcherTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-searchertag"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Attributes",slug:"attributes-6"},{level:2,title:"Tag rowContentList",slug:"tag-rowcontentlist"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-rowcontentlisttag"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"}],lastUpdated:"11/3/2020, 4:20:16 AM",content:' jACMS Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: jacmsaps \n \n \n URI: /jacms-aps-core \n Tag  content \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentTag \n Description \n Displays the content given its ID. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content to display. It can accept "expression language". \n \n \n modelId \n false \n Id of the model to use to display the content. The model ID can be either specified explicitly (the model must match the content to serve) or the type name ("list" or "default"); in the latter case the model specified in the configuration will be used. The model must adhere to the content being returned. "Expression language" is accepted. \n \n publishExtraTitle \n false \n Toggles the insertion of the values of the titles in the Request Context. The title values are extracted from the attribute marked with the role "jacms:title". Admitted values are (true, false), default \'false\'. \n \n \n var \n false \n Inserts the rendered content in a variable of the page context with the name provided. \n \n \n attributeValuesByRoleVar \n false \n Inserts the map of the attribute values indexed by the attribute role, in a variable of the page context with the name provided. \n Tag  contentInfo \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentInfoTag \n Description \n Return information of a specified content. The content can will be extracted by id from widget parameters or from request parameter. The tag extract any specific parameter (by "param" attribute) or entire ContentAuthorizationInfo object (setting "var" attribute and anything on "param" attribute). \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content \n \n \n param \n false \n Admitted values for "param" attribute are: \'contentId\' (returns the code of content id), \'mainGroup\' (returns the code of owner group), \'authToEdit\' (returns true if the current user can edit the content, else false). \n \n \n var \n false \n Inserts the required parameter (or the entire authorization info object) in a variable of the page context with the name provided. \n Tag  contentList \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentListTag \n Description \n Loads a list of contents IDs by applying the filters (if any). Only the IDs of the contents accessible in the portal can be loaded. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the search result. \n \n \n contentType \n false \n Sets the code of the content types to search. The name must match the configured one, respecting capital letters and spaces. \n \n \n category \n false \n Identifier string of the category of the content to search. \n \n \n cacheable \n false \n Toggles the system caching usage when retrieving the list. Admitted values (true, false), default "true". \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n userFilterOptionsVar \n false \n Name of the variable in the page context that holds the user filter options \n Tag  contentListFilter \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag \n Description \n "ContentListTag" sub-tag, it creates a filter to restrict the result of the content search. Please note that the filters will be applied in the same order they are declared and the result of the search will reflect this fact. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n String used to filter and sort the contents. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "created" allows sorting by date of creation of content - "modified" allows sorting by date of modification of content. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata \n \n \n value \n false \n The filtering value. \n \n \n start \n false \n Filters the contents by attribute type or by the field specified with the key (respect the following matches): Text field -→ start Text Text attribute type -→ start Text Numeric attribute type -→ start Numeric date attribute type -→ start data If the data filter is used: - today, oggi or odierna will select all the contents with a date greater or equal to the system date - using date with the pattern "dd/MM/yyyy" will select all the contents with a date greater or equal to the one inserted. \n \n \n end \n false \n Similar the the "start" attribute but with the opposite behavior. \n \n \n order \n false \n Specifies the sorting behavior of the IDs found: "ASC"ending or "DESC"ending. By default no ordering is performed. \n \n \n likeOption \n false \n Toggles the \'like\' functionality. Admitted values: (true, false). Default: false. The option is available for metadata and on Text Content attributes. \n Tag  contentListUserFilterOption \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag = \n Description \n "ContentListTag" sub-tag, it creates a custom user filter to restrict the result of the content search by front-end user. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n The key of the filter. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "fulltext" allows filter by full-text search<br /> - "category" allows filter by a system category. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata. \n Tag  searcher \n Tag Class  com.agiletec.plugins.jacms.aps.tags.SearcherTag \n Description \n Generates a list of content IDs, restricting them to the key word contained in the "search" parameter of the http request. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n yes \n Name of the variable, stored in the page context, containing the list of content IDs. \n Tag  rowContentList \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag \n Description \n Publish a list of contents. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the contents (list of properties of key "contentId" and "modelId"). \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n \n'},{title:"Aps Core Tag Library",frontmatter:{},regularPath:"/v6.2/docs/reference/freemarker-tags/freemarker-core-tags.html",relativePath:"v6.2/docs/reference/freemarker-tags/freemarker-core-tags.md",key:"v-71f160b3",path:"/v6.2/docs/reference/freemarker-tags/freemarker-core-tags.html",headers:[{level:2,title:"Tag action",slug:"tag-action"},{level:3,title:"Description",slug:"description"},{level:3,title:"Example",slug:"example"},{level:3,title:"Attributes",slug:"attributes"},{level:3,title:"Tag class",slug:"tag-class"},{level:2,title:"Tag categories",slug:"tag-categories"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:3,title:"Tag class",slug:"tag-class-2"},{level:2,title:"Tag checkHeadInfoOuputter",slug:"tag-checkheadinfoouputter"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:3,title:"Tag class",slug:"tag-class-3"},{level:2,title:"Tag cssURL",slug:"tag-cssurl"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Attributes",slug:"attributes-4"},{level:3,title:"Tag class",slug:"tag-class-4"},{level:2,title:"Tag currentPage",slug:"tag-currentpage"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Attributes",slug:"attributes-5"},{level:3,title:"Tag class",slug:"tag-class-5"},{level:2,title:"Tag currentWidget",slug:"tag-currentwidget"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Attributes",slug:"attributes-6"},{level:3,title:"Tag class",slug:"tag-class-6"},{level:2,title:"Tag fragment",slug:"tag-fragment"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"},{level:3,title:"Tag class",slug:"tag-class-7"},{level:2,title:"Tag freemarkerTemplateParameter",slug:"tag-freemarkertemplateparameter"},{level:3,title:"Description",slug:"description-8"},{level:3,title:"Attributes",slug:"attributes-8"},{level:3,title:"Tag class",slug:"tag-class-8"},{level:2,title:"Tag headInfo",slug:"tag-headinfo"},{level:3,title:"Description",slug:"description-9"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Attributes",slug:"attributes-9"},{level:3,title:"Tag class",slug:"tag-class-9"},{level:2,title:"Tag i18n",slug:"tag-i18n"},{level:3,title:"Description",slug:"description-10"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Attributes",slug:"attributes-10"},{level:3,title:"Tag class",slug:"tag-class-10"},{level:2,title:"Tag ifauthorized",slug:"tag-ifauthorized"},{level:3,title:"Description",slug:"description-11"},{level:3,title:"Example",slug:"example-8"},{level:3,title:"Attributes",slug:"attributes-11"},{level:3,title:"Tag class",slug:"tag-class-11"},{level:2,title:"Tag imgURL",slug:"tag-imgurl"},{level:3,title:"Description",slug:"description-12"},{level:3,title:"Example",slug:"example-9"},{level:3,title:"Attributes",slug:"attributes-12"},{level:3,title:"Tag class",slug:"tag-class-12"},{level:2,title:"Tag info",slug:"tag-info"},{level:3,title:"Description",slug:"description-13"},{level:3,title:"Example",slug:"example-10"},{level:3,title:"Attributes",slug:"attributes-13"},{level:3,title:"Tag class",slug:"tag-class-13"},{level:2,title:"Tag internalServlet",slug:"tag-internalservlet"},{level:3,title:"Description",slug:"description-14"},{level:3,title:"Example",slug:"example-11"},{level:3,title:"Attributes",slug:"attributes-14"},{level:3,title:"Tag class",slug:"tag-class-14"},{level:2,title:"Tag nav",slug:"tag-nav"},{level:3,title:"Description",slug:"description-15"},{level:3,title:"Example",slug:"example-12"},{level:3,title:"Attributes",slug:"attributes-15"},{level:3,title:"Tag class",slug:"tag-class-15"},{level:2,title:"Tag outputHeadInfo",slug:"tag-outputheadinfo"},{level:3,title:"Description",slug:"description-16"},{level:3,title:"Attributes",slug:"attributes-16"},{level:3,title:"Tag class",slug:"tag-class-16"},{level:2,title:"Tag pageInfo",slug:"tag-pageinfo"},{level:3,title:"Description",slug:"description-17"},{level:3,title:"Attributes",slug:"attributes-17"},{level:3,title:"Tag class",slug:"tag-class-17"},{level:2,title:"Tag pager",slug:"tag-pager"},{level:3,title:"Description",slug:"description-18"},{level:3,title:"Example",slug:"example-13"},{level:3,title:"Attributes",slug:"attributes-18"},{level:3,title:"Tag class",slug:"tag-class-18"},{level:2,title:"Tag parameter",slug:"tag-parameter"},{level:2,title:"Tag pager",slug:"tag-pager-2"},{level:3,title:"Description",slug:"description-19"},{level:3,title:"Example",slug:"example-14"},{level:3,title:"Attributes",slug:"attributes-19"},{level:3,title:"Tag class",slug:"tag-class-19"},{level:2,title:"Tag printHeadInfo",slug:"tag-printheadinfo"},{level:3,title:"Description",slug:"description-20"},{level:3,title:"Attributes",slug:"attributes-20"},{level:3,title:"Tag class",slug:"tag-class-20"},{level:2,title:"Tag resourceURL",slug:"tag-resourceurl"},{level:3,title:"Description",slug:"description-21"},{level:3,title:"Example",slug:"example-15"},{level:3,title:"Attributes",slug:"attributes-21"},{level:3,title:"Tag class",slug:"tag-class-21"},{level:2,title:"Tag show",slug:"tag-show"},{level:3,title:"Description",slug:"description-22"},{level:3,title:"Example",slug:"example-16"},{level:3,title:"Attributes",slug:"attributes-22"},{level:3,title:"Tag class",slug:"tag-class-22"},{level:2,title:"Tag url",slug:"tag-url"},{level:3,title:"Description",slug:"description-23"},{level:3,title:"Example",slug:"example-17"},{level:3,title:"Attributes",slug:"attributes-23"},{level:3,title:"Tag class",slug:"tag-class-23"},{level:2,title:"Tag pageWithWidget",slug:"tag-pagewithwidget"},{level:3,title:"Description",slug:"description-24"},{level:3,title:"Example",slug:"example-18"},{level:3,title:"Attributes",slug:"attributes-24"},{level:3,title:"Tag class",slug:"tag-class-24"},{level:2,title:"Tag currentUserProfileAttribute",slug:"tag-currentuserprofileattribute"},{level:3,title:"Description",slug:"description-25"},{level:3,title:"Attributes",slug:"attributes-25"},{level:3,title:"Tag class",slug:"tag-class-25"},{level:2,title:"Tag userProfileAttribute",slug:"tag-userprofileattribute"},{level:3,title:"Description",slug:"description-26"},{level:3,title:"Attributes",slug:"attributes-26"},{level:3,title:"Tag class",slug:"tag-class-26"}],lastUpdated:"11/3/2020, 4:20:16 AM",content:' Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: wp \n \n \n URI: /aps-core \n Tag  action \n Description \n Build the URL to call a jsp or a functionality of a servlet defined\nwithin the system. This tag can use the ParameterTag sub-tag to add url\nparameters. \n Example \n (<@wp.action path="/do/my.action" var="myaction" />)  or\n (<@wp.action path="/JSP/my.jsp" var="my.jsp"/>) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n path \n no \n The relative path of jsp or servlet to invoke, relative to the context of web-application \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n Tag class \n com.agiletec.aps.tags.ActionURLTag \n Tag  categories \n Description \n Return the list of the system categories on SelectItem objects. \n Example \n <@wp.categories var="systemCategories" titleStyle="prettyFull" root="$\\{userFilterOptionVar.userFilterCategoryCode}" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n titleStyle \n no \n The style of the single select item. Currently it can be \'default\' (single title node), \'full\' (title with all parents) or \'prettyFull\' (title with all parents in form of \'..\'). The default when none is given is \'default\'. \n \n \n fullTitleSeparator \n no \n The separator beetwen the titles when \'titleStyle\' is \'full\' or \'prettyFull\'. \n \n \n var \n no \n Name of the page-scoped variable where to place the list of categories. \n \n \n root \n no \n The root of the categories to show. The default is the system root categories \n Tag class \n com.agiletec.aps.tags.CategoriesTag \n Tag  checkHeadInfoOuputter \n Description \n This sub-tag verifies the availability of the information to display.\nThis sub-tag can be used only in a page template, in conjunction with\n\'outputHeadInfo\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to analyse. \n Tag class \n com.agiletec.aps.tags.CheckHeadInfoOutputterTag \n Tag  cssURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the css files. \n Example \n <@wp.cssURL />href="<@wp.cssURL />myportal.css" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n Tag class \n com.agiletec.aps.tags.CssURLTag \n Tag  currentPage \n Description \n Returns the requested information held by the current page bean. \n Example \n <@wp.currentPage param="code" var="currentViewCode" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n false \n The wanted parameter: actually can be either "title", "owner" (group), "code", "hasChild" or "childOf" (with attribute "targetPage"). The default when none is given is "title". \n \n \n langCode \n no \n Code of the language to use for the page information being returned. \n \n \n var \n no \n Name of the page context variable where the information are placed. Please note that the in this case the special characters will not be escaped. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n no \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.CurrentPageTag \n Tag  currentWidget \n Description \n Returns information about the widget where the tag resides. To obtain\ninformation about a widget placed in a frame other than the current, use\nthe "frame" attribute. \n Example \n <@wp.currentWidget param="config" configParam="name" var="configName" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n yes \n The requested parameter. It can assume one of the following values: - "code" returns the code of the associated widget type (empty if none associated) - "title" returns the name of the associated widget type (empty if none associated) - "config" returns the value of the configuration parameter declared in the "configParam" attribute. The default is "title". \n \n \n configParam \n no \n Name of the configuration parameter request. This attribute is mandatory when the attribute "param" is set to "config". \n \n \n var \n no \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n frame \n false \n Id of the frame hosting the widget with the desired information. \n \n \n escapeXml \n no \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n com.agiletec.aps.tags.CurrentWidgetTag \n Tag  fragment \n Description \n Print a gui fragment by the given code. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n code \n true \n The code of the fragment to return. \n \n \n var \n false \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n escapeXml \n false \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n org.entando.entando.aps.tags.GuiFragmentTag \n Tag  freemarkerTemplateParameter \n Description \n Add a parameter into the Freemarker’s TemplateModel Map. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Name of the variable where the requested information is pushed. \n \n \n valueName \n true \n Name of the variable of the page context where extract the information. \n \n \n removeOnEndTag \n false \n Whether to remove the parameter on end of Tag. Possible entries (true, false). Default value: false. \n Tag class \n org.entando.entando.aps.tags.FreemarkerTemplateParameterTag \n Tag  headInfo \n Description \n Declares the information to insert in the header of the HTML page. The\ninformation can be passed as an attribute or, in an indirect manner,\nthrough a variable of the page context. It is mandatory to specify the\ntype of the information. \n Example \n <@wp.headInfo type="JS" info="entando-misc-bootstrap/bootstrap.min.js" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Declaration of the information type. Currently only "CSS" is currently supported. \n \n \n info \n no \n Information to declare. This is an alternative of the "var" attribute. \n \n \n var \n no \n Name of the variable holding the information to declare. This attribute is the alternative of the "info" one. This variable can be used for those types of information that cannot be held by an attribute. \n Tag class \n com.agiletec.aps.tags.HeadInfoTag \n Tag  i18n \n Description \n Return the string associated to the given key in the specified language.\nThis string is either returned (and rendered) or can be optionally\nplaced in a page context variable. This tag can use the ParameterTag\nsub-tag to add label parameters. \n Example \n <@wp.i18n key="COPYRIGHT" escapeXml="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the label to return. \n \n \n lang \n no \n Code of the language requested for the lable. \n \n \n var \n no \n Name of the variable (page scope) where to store the wanted information. In this case the special characters will not be escaped. \n \n \n escapeXml \n no \n Toggles the escape of the special characters of the returned label. Admitted values (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.I18nTag \n Tag  ifauthorized \n Description \n Toggles the visibility of the elements contained in its body, depending\non user permissions. \n Example \n <@wp.ifauthorized permission="enterBackend"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n permission \n no \n The code of the permission required. \n \n \n groupName \n no \n The name of the group membership required. \n \n \n var \n no \n The name of the (boolean) page context parameter where the result of the authorization check is placed. \n Tag class \n com.agiletec.aps.tags.CheckPermissionTag \n Tag  imgURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the images to\ndisplay as static content outside the cms. \n Example \n <@wp.imgURL />entando-logo.png" alt="Entando - Access. Build. Connect." /> \n Attributes \n Tag class \n com.agiletec.aps.tags.ImgURLTag \n Tag  info \n Description \n Returns the information of the desired system parameter. \n Example \n <@wp.info key="systemParam" paramName="applicationBaseURL" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the desired system parameter, admitted values are: "startLang" returns the code of start language of web browsing "defaultLang" returns the code of default language "currentLang" returns the code of current language "langs" returns the list of the languages defined in the system "systemParam" returns the value of the system param specified in the "paramName" attribute. \n \n \n var \n no \n Name of the variable where to store the retrieved information (page scope). In this case the special characters will not be escaped. \n \n \n paramName \n no \n Name of the wanted system parameter; it is mandatory if the "key" attribute is "systemParam", otherwise it is ignored. \n \n \n escapeXml \n no \n Toggles the escape of the special characters in the information returned. Admitted values are (true,false), the former being the default value. \n Tag class \n com.agiletec.aps.tags.InfoTag \n Tag  internalServlet \n Description \n Tag for the "Internal Servlet" functionality. Publishes a function\nserved by an internal Servlet; the servlet is invoked from a path\nspecified in the attribute "actionPath" or by the widget parameter\nsharing the same name. This tag can be used only in a widgets. \n Example \n <@wp.internalServlet actionPath="/ExtStr2/do/jpuserreg/UserReg/initRegistration" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n actionPath \n false \n The init action path. \n \n \n staticAction \n false \n Whether to execute only the given action path. Possible entries (true, false). Default value: false. \n Tag class \n com.agiletec.aps.tags.InternalServletTag \n Tag  nav \n Description \n Generates through successive iterations the so called "navigation" list.\nFor every target/page being iterated (inserted in the page context) are\nmade available the page code, the title (in the current language) and\nthe link. Is it also possible to check whether the target page is empty\n-that is, with no configured positions- or not. \n Example \n <@wp.nav var="page"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n spec \n no \n Declares the set of the pages to generate. \n \n \n var \n yes \n Name of the page context variable where the data of target being iterated are made available. \n Tag class \n com.agiletec.aps.tags.NavigatorTag \n Tag  outputHeadInfo \n Description \n Iterates over various information in HTML header displaying them; this\ntag works in conjunction with other specific sub-tags. Please note that\nthe body can contain only a sub-tag, or information, at once. This tag\nmust be used only in a page template. E.g (<@wp.outputHeadInfo\ntype="CSS">) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to return, in accordance with the sub-tag to use. \n Tag class \n com.agiletec.aps.tags.HeadInfoOutputterTag \n Tag  pageInfo \n Description \n Returns the information of the specified page. This tag can use the\nsub-tag "ParameterTag" to add url parameters if the info attribute is\nset to \'url\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n pageCode \n true \n The code of the page. \n \n \n info \n false \n Code of required page parameter. Possible entries: "code" (default value) , "title", "owner" (group), "url", "hasChild" or "childOf" (with attribute "targetPage"). \n \n \n langCode \n false \n Code of the language to use for the returned information. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. In this case, the system will not escape the special characters in the value entered in pageContext. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n false \n Whether to escape HTML. Possible entries (true, false). Default value: true. \n Tag class \n com.agiletec.aps.tags.PageInfoTag \n Tag  pager \n Description \n List pager. \n Example \n <@wp.pager listName="result" objectName="groupContent" max="10" pagerIdFromFrame="true" advanced="true" offset="5"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n max \n no \n The maximum value for each object group. \n \n \n listName \n yes \n Name of the list as found in the request. \n \n \n objectName \n yes \n Name of the object currently iterated. The following methods are exposed:  getMax, getPrevItem, getNextItem, getCurrItem, getSize, getBegin, getEnd, getMaxItem, getPagerId. \n \n \n pagerId \n no \n Sets the ID of the pager itself, it has to be used when two or more pagers exist in the same page. This attributes overrides "pagerIdFromFrame". \n \n \n pagerIdFromFrame \n no \n Sets the ID of the pager (mandatory when two or more pagers share the same page) based upon the frame where the tag is placed. Admitted values are (true, false), the latter being the default. Please note that the "pagerId" attribute takes precedence over this one. \n \n \n advanced \n no \n Toggles the pager in advanced mode. Admitted values are (true, false). the advanced mode of the tag is used when the list to iterate over is huge. \n \n \n offset \n no \n This attribute is considered only when the pager is in advanced mode. This is the numeric value of the single step increment (or decrement) when iterating over the list \n Tag class \n com.agiletec.aps.tags.PagerTag \n Tag  parameter \n Tag  pager \n Description \n This tag can be used to parameterise other tags. The parameter value can\nbe added through the \'value\' attribute or the body tag. When you declare\nthe param tag, the value can be defined in either a value attribute or\nas text between the start and the ending of the tag. \n Example \n <@wp.parameter name="resourceName"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n name \n true \n The name of the parameter. \n \n \n value \n false \n The value of the parameter. \n Tag class \n com.agiletec.aps.tags.ParameterTag \n Tag  printHeadInfo \n Description \n Returns the information to display. This sub-tag must be used only in a\npage template, in conjunction with \'outputHeadInfo\'. \n Attributes \n Tag class \n com.agiletec.aps.tags.HeadInfoPrinterTag \n Tag  resourceURL \n Description \n Returns URL of the resources. \n Example \n <@wp.resourceURL />static/js/entando-misc-html5-essentials/html5shiv.js"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n root \n no \n Declares the resource root. If not otherwise specified, the value of SystemConstants.PAR_RESOURCES_ROOT_URL is used. \n \n \n folder \n no \n Declares a specific directory for the desired resources. Unless specified, the value "" (empty string) is used in the generation of the URL. \n Tag class \n com.agiletec.aps.tags.ResourceURLTag \n Tag  show \n Description \n Defines the position of inclusion of a widget. This tag can be used only\nin a page template. \n Example \n <@wp.show frame="0" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n frame \n yes \n The positional number of the frame, starting from 0. \n Tag class \n com.agiletec.aps.tags.WidgetTag \n Tag  url \n Description \n Generates the complete URL of a portal page. The URL returned is either\nreturned (and rendered) or placed in the given variable. To insert\nparameters in the query string the sub-tag "ParameterTag" is provided. \n Example \n <@wp.url paramRepeat="true" > \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n page \n no \n Code of the destination page. The default is the current page. \n \n \n lang \n no \n Code of the language to use in the destination page. \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n \n \n paramRepeat \n no \n Repeats in the URL all the parameters of the actual request. \n \n \n excludeParameters \n no \n Sets the list of parameter names (comma separated) to exclude from repeating. By default, this attribute excludes only the password parameter of the login form. Used only when paramRepeat="true". \n Tag class \n com.agiletec.aps.tags.URLTag \n Tag  pageWithWidget \n Description \n Search and return the page (or the list of pages) with the given widget\ntype. When "filterParamName" and "filterParamValue" attributes are\npresent, the returned list will be filtered by a specific widget\nconfiguration. \n Example \n <@wp.pageWithWidget widgetTypeCode="userprofile_editCurrentUser" var="userprofileEditingPageVar" listResult="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Attribute_description: \n \n \n widgetTypeCode \n true \n The code of the widget to search \n \n \n filterParamName \n false \n Optional widget config param name \n \n \n filterParamValue \n false \n Optional widget config param value \n \n \n listResult \n false \n Optional, dafault false. When true the result is a list of pages, when false the returned page is the first occurence \n Tag class \n com.agiletec.aps.tags.PageWithWidgetTag \n Tag  currentUserProfileAttribute \n Description \n Current User Profile tag. Return a attribute value of the current user\nprofile. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.CurrentUserProfileAttributeTag \n Tag  userProfileAttribute \n Description \n User Profile tag. Return a attribute value from the profile givea an\nusername. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n username \n true \n the username \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.UserProfileAttributeTag \n'},{title:"Entando Identity Management -- Keycloak",frontmatter:{},regularPath:"/v6.2/docs/reference/identity-management.html",relativePath:"v6.2/docs/reference/identity-management.md",key:"v-7b34316c",path:"/v6.2/docs/reference/identity-management.html",headers:[{level:2,title:"Logging into your Keycloak Instance",slug:"logging-into-your-keycloak-instance"},{level:2,title:"Authentication",slug:"authentication"},{level:2,title:"Authorization",slug:"authorization"},{level:3,title:"Plugins/Microservices",slug:"plugins-microservices"},{level:3,title:"Core",slug:"core"},{level:2,title:"Social Login",slug:"social-login"},{level:2,title:"One Time Passwords",slug:"one-time-passwords"},{level:2,title:"Themes and Look and Feel",slug:"themes-and-look-and-feel"}],lastUpdated:"12/1/2020, 2:08:17 PM",content:' Entando Identity Management -- Keycloak \n Entando Identity Management is powered by Keycloak. The Keycloak instance used for your Entando apps\ncan be  externally installed  or you can use a dedicated instance on a per application basis. The sections below details the architecture and documentation required to customize your Keycloak instance. \n Logging into your Keycloak Instance \n In an Entando deployment Keycloak is protected by a Secret deployed in your Kubernetes instance. To get the default admin credentials you can query Kubernetes for the secret with this command: \n kubectl get secret <project-name>kc-admin-secret -n <namespace> -o go-template="{{println}}Username: {{.data.username | base64decode}}{{println}}Password: {{.data.password | base64decode}}{{println}}{{println}}"\n \n Replace  <project-name>  and  <namespace>  with your values. If you\'re not sure of the secret name you can run \n kubectl get secrets -n <namespace>\n \n And search for the secret that ends in  kc-admin-secret \n Authentication \n In Entando 6 all authentication goes through Keycloak. This ensures that a micro frontend can call a microservice with a token that is available on the client. \n \n By using Keycloak as a central point of authentication the Entando architecture is able to provide a single unified view of identity to the entire architecture. With this architecture Entando becomes more portable and can be integrated into other IDPs without changes to the source. Keycloak acts as an  abstraction to the underlying IDP. \n Authorization \n Plugins/Microservices \n Authorization for the microservices comes from clients and roles in keycloak. The authorizations are stored in the JWT token and are available to the services when invoked. \n Core \n Authorization for the entando-core and WCMS is provided by the Entando user management database. When a user is authenticated to the entando-core  a copy of that user is added to the Entando user management database.  That copy is made in support of the authorization flow noted below. \n As noted above when a user is authenticated to the entando-core via keycloak a copy of that user is added to the entando-core user management database in support of WCMS functionality.  Using the App Builder WCMS roles and groups can be assigned to a user for access to functions in the App Builder or for portal-ui based content access in the runtime application The code that copies the user into the entando-core can be customized to automatically create groups and roles as needed for an application but it is something that must be done on a per implementation basis. \n For more details on the code that copies users and data to the WCMS database see the  entando-keycloak-plugin . The readme in that project includes properties that are available to your Entando app. \n For a deeper look See:  KeycloakAuthorizationManager.java  in the plugin for an example of adding attributes programatically. In particular, the  processNewUser  method. \n Social Login \n Keycloak allows Entando to provide social login as an out of the box capability. See the  Keycloak Social Identity Providers  for documentation on enabling and configuring social logins in your Entando apps. \n One Time Passwords \n Keycloak enables Entando applications to provide login via One Time Passwords (OTP) as well. See the  Keycloak OTP Policies  for more details on configuring and enabling OTP in your application. \n Themes and Look and Feel \n Developers can also customize the look and feel of the login page and all of the identity management system that ships with Entando. The  Keycloak Theme Documentation  provides a lot of details on creating your own theme. \n You can also review the code for the  Entando Theme  as an example Keycloak theme to start from. \n'},{title:"Entando 6.2.0 Release Notes",frontmatter:{},regularPath:"/v6.2/docs/releases/",relativePath:"v6.2/docs/releases/README.md",key:"v-58f64e85",path:"/v6.2/docs/releases/",headers:[{level:2,title:"New Features and Major Fixes",slug:"new-features-and-major-fixes"},{level:3,title:"Infrastructure",slug:"infrastructure"},{level:3,title:"Security",slug:"security"},{level:3,title:"Quickstart:",slug:"quickstart"},{level:3,title:"Entando Component Repository (ECR)",slug:"entando-component-repository-ecr"},{level:3,title:"Entando App Builder",slug:"entando-app-builder"},{level:3,title:"Entando Component Generator",slug:"entando-component-generator"},{level:2,title:"Key Open Issues",slug:"key-open-issues"},{level:3,title:"Keycloak RCE",slug:"keycloak-rce"},{level:2,title:"Other Open Issues",slug:"other-open-issues"},{level:2,title:"Previous Releases",slug:"previous-releases"}],lastUpdated:"8/14/2020, 12:14:40 PM",content:" Entando 6.2.0 Release Notes \n New Features and Major Fixes \n Infrastructure \n \n \n Initial support for deployment on Google GKE, Azure AKS, and Amazon EKS. \n \n \n k3s 1.8.X is now the official choice for developer installations \n \n \n The only fully supported and tested production database is PostgreSQL at the moment \n \n \n Entando now fully relies on Keycloak for identity management. The previous native authentication is no longer supported. \n Security \n \n Fixed CSRF vulnerability discovered in 6.1 \n Quickstart: \n \n \n Support for embedded databases (derby) \n \n \n Now capable to reuse existing external databases created by a previous installation \n \n \n Reduced the memory footprint and improved the startup times \n \n \n Documented  two workarounds  for the IP change issue, e.g. an Entando quickstart installation fails to restart when the IP of the VM changes. A more structured solution will come with the next release. \n Entando Component Repository (ECR) \n \n \n ECR now relies only on GIT repositories for the distribution of bundles \n \n \n Enabled support for bundles with multiple versions \n \n \n Reliability improvements in the installation/uninstallation process, e.g. ability to install/uninstall a specific bundle version \n \n \n Fixes and improvements to the web interface \n \n \n Updated documentation, e.g. common use cases, uninstall flow, CRDs, ingresses and a troubleshooting guide \n \n \n Temporarily disabled support for Pages in bundles (introduced with 6.1) due to problems during uninstallation \n \n \n Added full support for composite CMS attributes \n Entando App Builder \n \n \n Fixed the role-based UX so the UI properly accounts for the current user role. \n \n \n UX improvements and nomenclature updates \n \n \n Reliability improvements and rationalization in several areas, e.g. user management, page design, content management, asset management, error messaging \n \n \n Essential plugins are now part of the base distribution, e.g. SEO, Content Versioning, Content Workflow, Content Scheduler, email. \n \n \n A new React-based UX was implemented for SEO and Content Versioning \n \n \n Included a set of additional default widgets, content types, content templates, and page templates \n Entando Component Generator \n \n \n Improved Microsoft Windows Support (specifically Windows 10 Professional) \n \n \n Support for the Italian Locale \n \n \n Added ability to skip MFE generation \n \n \n Completed support for all possible field types of an entity \n \n \n Added support for entity deletion \n \n \n Added support for missing attribute types \n \n \n Fixed support for complex attribute configurations \n \n \n Several fixes in code generation and build \n Key Open Issues \n Keycloak RCE \n \n The keycloak version used by Entando has a security vulnerability -  https://github.com/keycloak/keycloak/pull/7138 . This issue has been fixed in the latest version of keycloak and will be included in the next version of Entando. This vulnerability can only be exploited if you have a way to obtain a valid token, e.g. via a valid username/password. \n Other Open Issues \n General \n \n Support for older versions of Oracle is not yet complete \n Documentation  and  Tutorials  have been updated to reflect 6.2 but some work remains \n \n Entando App Builder \n \n There are a few visual issues with the redesigned UX/UI \n The user is unable to set their personal profile data from the  My profile  screen \n In  Content - Assets , deleting a duplicate image results in the removal of the original image \n In  Content - Management , some built-in content types will not function correctly if  Content Template = Default . Users will need to explicitly select the Content Template. \n \n Entando Component Generator \n \n Lack of support for generation of microservices with no backend \n Support of old versions of Oracle not complete yet \n Previous Releases \n Please see the  Versions  list in the main navigation menu above to access documentation and release notes for previous versions of Entando. \n"},{title:"Build and Deploy an Entando Bundle",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/backend-developers/build-and-deploy.html",relativePath:"v6.2/tutorials/backend-developers/build-and-deploy.md",key:"v-866830ac",path:"/v6.2/tutorials/backend-developers/build-and-deploy.html",headers:[{level:2,title:"Build Docker Image for Microservices",slug:"build-docker-image-for-microservices"},{level:2,title:"Build your Bundle and publish to git",slug:"build-your-bundle-and-publish-to-git"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Build and Deploy an Entando Bundle \n This page will walk you through building a docker image from your microservice, creating your Entando bundle, checking your bundle into git, and deploying it to the Entando Component Repository. \n If you haven\'t run the generator yet head to the tutorial on running the  Entando Component Generator  first and you\'ll be at the starting point for this one. \n You\'ll need: \n \n Docker \n A running Entando instance (see  Getting Started  for steps if needed) \n A bash shell \n git \n An empty git repository \n Build Docker Image for Microservices \n \n In your microservice project on a command line run  ./mvnw -Pprod clean package jib:dockerBuild \n \n \n Note \n By default the organization used to generate the docker image is  entando , but you can provide a custom value during project initialization, as well as by changing the  pom.xml  file or by providing the  -Djib.to.image=<org>/<name>:<version>  to the  jib:dockerBuild  command. \n \n \n Note \n Output image name is generated using the organization value defined during project initialization. You can override the provided values by altering the  pom.xml  file or by customizing the  -Djib.to.image  parameter used in the  ./mvnw  command \n \n \n Warning \n If you manually override the target image of the docker build, remember to update the plugin metadata in the bundle accordingly in the bundle steps. \n \n \n View your image and tag with  docker images \n \n docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nmyusername/example-app   0.0.1-SNAPSHOT      4ec7f05b2b27        33 seconds ago      213MB\n \n \n Publish the Docker image to Docker repository (DockerHub or equivalent)  docker push <name-of-the-image:tag> , e.g.  docker push myusername/example-app:0.0.1-SNAPSHOT . You may need to first login via  docker login . \n \n \n Note \n The first time your run this command it will have to push all of the layers. Subsequent runs will be much faster \n \n docker push myusername/example-app:0.0.1-SNAPSHOT\nThe push refers to repository [docker.io/myusername/example-app]\n545361404af4: Pushed\n...\nf1b5933fe4b5: Pushed\n0.0.1-SNAPSHOT: digest: sha256:804b3b91b83094c45020b4748b344f7199e3a0b027f4f6f54109cbb3b8a1f867 size: 2626\n Build your Bundle and publish to git \n \n In your microservice project populate the bundle with the generated micro frontends, run the  ./buildBundle.sh  script or use  npm run populate-bundle \n \n \n Important \nThe bundle population with the micro frontends requires some time to be processed. You should be able to follow the progress of the operation on screen. \n \n \n \n The output of your bundle will be in the top level  bundle  folder in your microservice \n \n \n Create a new git repository and name it  my-bundle  (or a name of your choice). You\'ll need the URL for this repo in the next step \n \n \n Add the /bundle/ folder to the .gitignore file of your microservice project and initialize a new and different git repository for the bundle itself. From the top of your microservices project run these commands. \n \n \n echo bundle >> .gitignore\ncd bundle/\ngit init\ngit add .\ngit commit -m "Init Git repository"\ngit remote add origin https://your/remote/repository.git\ngit push -u origin master\n\n \n \n Important \nThe file descriptor.yaml should be at the top of your repository \n \n \n \n cd  into your bundle folder (you should already be there from the step above) \n \n \n Add the files to git  git add . \n \n \n Commit the files to git  git commit -a -m "Your commit message here" \n \n \n Push the files to git  git push \n \n \n Tag your bundle  git tag -a "v0.0.1" -m "My first tag" \n \n \n Push the tags  git push --tags \n \n \n Install the  entando-bundle-cli  using  npm install -g @entando/entando-bundle-cli@6.2.0 \n \n \n Generate your bundle \n \n \n     entando-bundle from-git --name=<bundle-name> --namespace=<your namespace> --thumbnail-url=<thumbnail-url> --repository=<your-repository-url> --dry-run > example-bundle.yaml\n \n     - In the command above you must set:\n       - <bundle-name> - A name of your choice\n       - <your-namespace> - The namespace where you are going to install your bundle\n       - <thumbnail-url> - Optionally add a URL to a publicly availble image to use for your bundle in the ECR\n       - <your-repository-url> - The git url of your bundle repository\n \n \n \n Install your bundle in Kubernetes  kubectl create -f example-bundle.yaml \n \n \n Log into the  App Builder \n \n \n Select  Component Repository  in the upper right \n \n \n See your bundle and select install \n \n \n At this point the Entando platform will download and install your docker image and install the micro frontends into the Entando app. You can add those micro frontends to the page \n'},{title:"Tutorials Overview",frontmatter:{},regularPath:"/v6.2/tutorials/",relativePath:"v6.2/tutorials/README.md",key:"v-25510810",path:"/v6.2/tutorials/",headers:[{level:2,title:"How to Use This Guide",slug:"how-to-use-this-guide"},{level:2,title:"Frontend Developers",slug:"frontend-developers"},{level:2,title:"Backend Developers",slug:"backend-developers"},{level:2,title:"DevOps",slug:"devops"}],lastUpdated:"9/9/2020, 11:58:42 AM",content:" Tutorials Overview \n Entando simplifies the development of modern apps: \n \n Built using modern JavaScript frameworks \n Backed by microservices deployed in containers, and \n Orchestrated by Kubernetes for fully automated DevOps lifecycles \n \n \n Entando supports full stack micro frontend and microservice architectures for codebases that are easier to undestand, maintain, and debug across large, distributed teams, and comes with a private component repository that makes it easy for teams to share and reuse components. \n How to Use This Guide \n Use the categories on the left to find step-by-step tutorials for common tasks. Or check out our learning paths for a more structured approach. \n Frontend Developers \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Build a Basic Widget \n Add Configuration to a Widget \n Generate Micro Frontends and Microservices Based on a Database Entity \n \n \n Create a React Micro Frontend \n Enable Communication between MFEs \n \n \n \n Create an Angular Micro Frontend \n \n \n \n \n Create and Manage Content \n Backend Developers \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Generate Micro Frontends and Microservices Based on a Database Entity \n Build and Deploy an Entando Bundle \n Extend the Entando App Builder \n \n \n Run Micro Frontends and Microservices in your local env \n Use JDL Studio to Create a Complex Database Entity (Coming Soon) \n DevOps \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Set Up Entando on a Local Kubernetes Cluster \n Backing Up and Restoring Your Entando Environment \n Automate Integration Testing With a CI/CD Pipeline   (Coming Soon) \n \n \n Set Up Entando on Amazon Elastic Kubernetes Service (EKS) \n Customize the base Entando Application via a Docker Image \n \n \n \n Set Up Entando on Azure Kubernetes Service (AKS) \n Connect your Entando Application to an External Database \n \n \n \n Set Up Entando on Google Kubernetes Engine (GKE) \n \n \n \n \n Set Up Entando on Red Hat OpenShift \n \n \n \n \n \n"},{title:"Objective",frontmatter:{},regularPath:"/v6.2/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",relativePath:"v6.2/tutorials/backend-developers/generate-microservices-and-micro-frontends.md",key:"v-17045d64",path:"/v6.2/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Installation",slug:"installation"}],lastUpdated:"9/3/2020, 3:34:28 PM",content:" Objective \n This tutorial will take you through the steps to install and run the Entando Component Generator powered by JHipster. At the end of the tutorial you can continue your journey by running your components locally or creating an Entando Bundle for the Entando Component Repository. \n Prerequisites \n \n Java 1.8 \n Maven 3.0.5+ \n npm 6+ \n git \n Docker \n node 12+ (or LTS) \n A Docker Hub account or access to a docker registry \n Installation \n \n \n Install JHipster  npm install -g generator-jhipster@6.9.1 \n \n \n Install the Entando Blueprint  npm install -g generator-jhipster-entando@6.2.0 \n \n \n Create an empty directory to hold your project (this will hold your microservice and micro frontends) \n \n \n On a command line  cd  into your directory and create an Entando plugin using the blueprint  jhipster --blueprints entando \n \n \n You'll be presented with a series of prompts to configure your application. The list below provides a set of choices.  You can select the defaults in every step of the tutorial if you want to go fast through this. Just hit Enter at each step \n \n \n \n If you want to go through the choices follow this guide. Except where noted below in bold you can choose what works best for you. Base values for the tutorial are in parentheses.\n \n What is the base name of your application?  (my-app or a name of your choice) \n As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts.  (8081) \n What is your default Java package name? (Up to you) \n Which *type* of database would you like to use?  (SQL)\n \n If you pick no database here you'll be building a stateless microservice which is a valid choice but the rest of this tutorial won't work) \n \n \n Which *production* database would you like to use?  (PostgreSQL or MySQL) \n Which *development* database would you like to use?  (H2 with disk-based persistence ) \n Do you want to use the Spring cache abstraction?  (Yes, with the Caffeine implementation) \n Do you want to use Hibernate 2nd level cache?  (Yes) \n Would you like to use Maven or Gradle for building the backend?   Maven  <-- this is required for Entando and is the default \n Which other technologies would you like to use?  (Don't select any other technologies) \n What name would you give to the bundle to share on an Entando digital-exchange?  Enter a name for your Entando Bundle or accept the default \n Which is the organization name to use when publishing the docker image?   At this point enter the name of the organization where you are going to push your docker image. If you're using your own docker hub account you should enter your username here.  (this can be changed later as needed) \n Would you like to generate micro frontends when creating entities?  (Always) \n Would you like to enable internationalization support  (Up to you) \n Please choose the native language of the application  (Up to you) \n Please choose additional languages to install  (if you picked internationalization) \n Besides JUnit and Jest, which testing frameworks would you like to use?  (Up to you) \n Would you like to install other generators from the JHipster Marketplace?  (No) \n \n \n \n \n Next you will add an Entity to your microservice and create Micro Frontends. In your project run  jhipster entity Conference  where Conference is the name of the entity you want to generate \n \n \n Add Fields \n \n Do you want to add a field to your entity?  (Yes) \n What is the name of your field?  (Enter  name ) \n What is the type of your field?  (Select  String ) \n Do you want to add validation rules to your field?  (No) \n Do you want to add a field to your entity?  (Yes) \n What is the name of your field?  (Enter  location ) \n What is the type of your field?  (Select  String ) \n Do you want to add validation rules to your field?  (No) \n Do you want to add a field to your entity?  (No) \n Do you want to add a relationship to another entity?  (No) \n Do you want to use separate service class for your business logic?  (Up to you) \n Do you want to add filtering?  (Up to you or  Not Needed  if you're unsure) \n Do you want pagination on your entity?  (Yes, with infinite scroll) \n At this point the blueprint will generate controllers, repositories, services, and micro frontends for your entity generation. \n \n \n Overwrite src/main/resources/config/liquibase/master.xml?  When prompted with a conflict at this stage enter  a  for All. This will override existing files with the configuration changes needed for your new entity. \n \n \n \n \n \n At this point you have a choice: \n \n Build your Entando Bundle and deploy your microservice and micro frontends to the Entando Component Repository. \n Go to the Running Locally tutorial to run your micro frontends and microservice in your local dev environment. \n Learn about the key elements included in the Blueprint generated widgets \n \n"},{title:"Running a Blueprint Generated Microservices and Micro Frontend in Local Dev",frontmatter:{},regularPath:"/v6.2/tutorials/backend-developers/run-local.html",relativePath:"v6.2/tutorials/backend-developers/run-local.md",key:"v-6478fde6",path:"/v6.2/tutorials/backend-developers/run-local.html",headers:[{level:2,title:"Running a Blueprint Generated Microservices and Micro Frontend in Local Dev",slug:"running-a-blueprint-generated-microservices-and-micro-frontend-in-local-dev"},{level:2,title:"Start Keycloak using docker-compose",slug:"start-keycloak-using-docker-compose"},{level:3,title:"Notes:",slug:"notes"},{level:2,title:"Start the microservice",slug:"start-the-microservice"},{level:3,title:"Notes:",slug:"notes-2"},{level:2,title:"Start the table widget",slug:"start-the-table-widget"},{level:2,title:"Start the form widget",slug:"start-the-form-widget"},{level:3,title:"Form widget notes:",slug:"form-widget-notes"},{level:2,title:"Start the details widget",slug:"start-the-details-widget"},{level:3,title:"Widget Details notes:",slug:"widget-details-notes"},{level:2,title:"Notes",slug:"notes-3"},{level:3,title:"Change keycloak dev settings",slug:"change-keycloak-dev-settings"},{level:3,title:"The service-url Variable",slug:"the-service-url-variable"},{level:3,title:"User is not authenticated message",slug:"user-is-not-authenticated-message"},{level:2,title:"Open the project in an IDE",slug:"open-the-project-in-an-ide"}],lastUpdated:"9/30/2020, 11:01:17 AM",content:' Running a Blueprint Generated Microservices and Micro Frontend in Local Dev \n This tutorial will take you through running an Entando microservice and micro frontend in a local development environment. If you haven\'t generated your Entando Plugin yet start with the  Generate Microservice and Micro Frontend  tutorial and then run these steps. \n All of the steps below assume you are in the directory where you generated your Entando Plugin \n Start Keycloak using docker-compose \n \n \n Startup the Keycloak server: \n docker-compose -f src/main/docker/keycloak.yml up\n Notes: \n if you have to install docker compose you can follow this guide:\n https://docs.docker.com/compose/install/ \n Start the microservice \n \n \n Start the generated Microservice executing the command: \n ./mvnw\n Notes: \n If you want to reset the widget data (as example if you deleted all rows from the table widget) if during the generation of the microservice you selected "H2 with disk-based persistence" you can delete the target folder, restart the microservice and the data will be regenerated. \n Start the table widget \n Now you can start your generated table widget: \n \n \n Go to the table widget folder in your project: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n After the login process you’ll be redirected to the widget page and you can see the table widget with some generated data. \n Start the form widget \n Now you can start your generated form widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the form widget folder in your project: \n cd ui/widgets/<your-entity-name>/formWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Form widget notes: \n If you want to load other data you have to change the index.html file in the folder: \n cd ui/widgets/<your-entity-name>/formWidget/public\n \n and change the id attribute in this line: \n <my-entity-form service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Start the details widget \n You can also start your generated details widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the details widget folder in your project: \n cd ui/widgets/<your-entity-name>/detailsWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Widget Details notes: \n If you want to load other data you have to change the index.html file in the public folder: \n cd ui/widgets/<your-entity-name>/detailsWidget/public\n \n and change the "id" attribute in this line: \n <my-entity-details service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Notes \n Change keycloak dev settings \n If you want to change your keycloak settings to use another keycloak installation (not the docker compose pre configured one) or if you want to change the service-url of your widget you can change the parameters set in the .env.local file that was generated by the entando-blueprint in the root folder of your react widgets: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n then edit the file  .env.local \n By default this variables are set to: \n REACT_APP_SERVICE_URL=http://localhost:8081/services/<your-application-name>/api\nREACT_APP_KEYCLOAK_URL=http://localhost:9080/auth\nREACT_APP_KEYCLOAK_REALM=jhipster\nREACT_APP_KEYCLOAK_CLIENT_ID=web_app\n The service-url Variable \n The  service-url  variable is the api Microservice API URL. \n User is not authenticated message \n When you run the widgets if you see the message:  User is not authenticated . This means that probably your keycloak application is not running so please check if the docker-compose command is still in execution. \n Open the project in an IDE \n This section just walks through the anatomy of the project and the micro frontends.\nYou can skip this or review later as desired. The top level project is a normal Spring Boot application.\nYou can look through the code and configuration in src/main/java to get a view of the server side.\nThe micro frontends are in the ui folder. Each entity gets an MFE for details, table, and form. \n'},{title:"Content Templates",frontmatter:{},regularPath:"/v6.2/tutorials/cms/content-templates-tutorial.html",relativePath:"v6.2/tutorials/cms/content-templates-tutorial.md",key:"v-6e1ce060",path:"/v6.2/tutorials/cms/content-templates-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to define a Content Templates",slug:"how-to-define-a-content-templates"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Content Templates \n Objective \n This document provides a description of Content Templates and how they\nare defined and used. \n Overview \n The purpose of Content Templates is to define how the information,\nenclosed in the Content, displayed to the end user, after the content is\npublished within the pages. Simplifying the concept, Content Templates\nprovide styling and layout for the Contents Types; consequently they\nallow to show the same content in different ways. \n The Content Templates can be managed using the App Builder’s user\ninterface, in which the Web CMS has been integrated. The interface: \n \n \n displays the list of the content templates already existing, for each\nContent Types to which they refer. \n \n \n provides the tools to create a new content template; the template is\nwritten using the Velocity language. \n How to define a Content Templates \n Creating a Content Template is fairly simple. From the App Builder\napplication \n \n \n Select  Content > Templates \n \n \n Click on the  Add content template  to create a new Content\nTemplate. \n \n \n \n \n \n Access the  Add Content Template  page, where you can \n \n \n Edit the  Code . It is the unique identifier of the content template.\nYou can insert up to 10 numbers. It’s mandatory. \n \n \n Edit the  Name . It is the name or description of the content\ntemplate. \n \n \n Choose the  Content Type  in the dropdown list. \n \n \n Edit the  HTML Model  based on Velocity language \n \n \n (Optional) Define the CSS  Style Sheet  to be applied to the  HTML Model \n \n \n Press the Save button \n \n \n \n \n \n"},{title:"Hello World  Widget in the App builder",frontmatter:{},regularPath:"/v6.2/tutorials/cms/app-builder/hello-world.html",relativePath:"v6.2/tutorials/cms/app-builder/hello-world.md",key:"v-8bb9a4fe",path:"/v6.2/tutorials/cms/app-builder/hello-world.html",headers:[{level:2,title:"Basic Widget Tutorial",slug:"basic-widget-tutorial"},{level:2,title:"Simple Fragment tutorial",slug:"simple-fragment-tutorial"},{level:2,title:"Freemarker Basics in Entando",slug:"freemarker-basics-in-entando"},{level:2,title:"Useful Links",slug:"useful-links"}],lastUpdated:"9/2/2020, 8:58:49 AM",content:' Hello World  Widget in the App builder \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Basic Widget Tutorial \n For this example you will use the Entando App Builder to build and\nassign your widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. \n \n \n In the App Builder menu, go to:  Components → Micro frontends & Widgets \n \n At bottom of the page, select ADD \n \n \n \n Now create a widget with the sample HTML code.  Enter into the following fields: \n \n Code: MyHelloWorld \n en Title: Hello World \n it Title: Ciao Mondo \n Custom UI field:  <h2>Hello World</h2> \n Select SAVE \n Note: the Custom UI Field is a freemarker template where you can put raw html and include freemarker logic. This allows you to import javascript, css, or any normal HTML. \n \n \n \n Select a new Home Page \n \n Go To:  Pages → Settings \n From the “Home Page” dropdown menu, select “Home / Service” and select SAVE \n \n \n \n Place the widget on the page \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the right hand column, drag and drop the new widget into an open frame in the page \n From the top of the page, select PREVIEW \n You should see "Hello World" on the page \n \n \n \n Publish the updated page \n \n Go To:  Pages → Management \n Note for the row showing the Services page, the Status is now yellow \n Select the Kebab button and select PUBLISH \n Simple Fragment tutorial \n A fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic html,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …  tag. \n Starting from the simple widget tutorial above: \n \n \n Create a new fragment: \n \n In the App Builder Go To:  Components → UX Fragments \n At bottom of page, select ADD, and enter the following fields \n Code: test \n Gui Code:  <h2>Hello World</h2> \n Select SAVE \n \n \n \n Place the fragment in a template: \n \n Go To:  Pages → Page Templates \n On the row for service, select EDIT \n In the  Template  text box, add   <@wp.fragment code="test"/>  on a new line between the   and    tags \n SAVE the page template \n \n \n \n View the page with the new fragment: \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the top of the page, select PREVIEW \n Note: You will see the fragment  <h2> This is a fragment. </h2>  which includes the HTML tags. By default html embedded via a fragment tag is escaped so you get it rendered exactly as you enter it. You’ll need to un-escape it to get it to render correctly. \n \n \n \n Update the Fragment: \n \n Go To:  Pages → Page Templates \n On the row for service, select EDIT \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n \n View the page with the updated fragment: \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the top of the page, select PREVIEW \n See correctly rendered fragment \n Freemarker Basics in Entando \n The freemarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > … \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof freemarker. \n Useful Links \n https://freemarker.apache.org \n'},{title:"Content Creation",frontmatter:{},regularPath:"/v6.2/tutorials/cms/content-tutorial.html",relativePath:"v6.2/tutorials/cms/content-tutorial.md",key:"v-1cd37820",path:"/v6.2/tutorials/cms/content-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Creating Content",slug:"creating-content"},{level:2,title:"Finding Content",slug:"finding-content"},{level:2,title:"Content Actions",slug:"content-actions"}],lastUpdated:"9/3/2020, 10:15:11 AM",content:" Content Creation \n Objective \n This document provides an overview of Content Management and how to create Content that can be displayed in an application. \n Overview \n The App Builder is used to create, edit and position content stored in the web content management system WCMS. \n Creating Content \n To SEE/MANAGE what Content is already defined in the WCMS: \n \n Select  Content - Management . All existing\ncontent is displayed in a table list. \n \n \n To CREATE NEW Content and add it to the list \n \n Select the  Add Content  button. A drop-down list will let you\nchoose which Content Type the content will be based on. \n \n \n You will be asked to provide the following information: \n \n \n Info \n \n \n Content Type . This information is pre-defined, and lists the\ncontent type for the content. \n \n \n Description . The specific Content's name or description. This field\nis mandatory. \n \n \n \n \n Groups \n \n \n Owner Group.  Use the drop-down list to choose the\navailable user group that can manage the content.\nThis field is mandatory and may be predefined. \n \n \n Join Group.  Use the drop-down list to choose the\navailable user group to share the content with and select +. The group\nselected will only be able to share and can not\nadministrate this content. This field is not mandatory. \n \n \n Categories.  Select the category(s) and select + to add a classification to the\ncontent to use for searching and sorting.  This field is not mandatory. \n \n \n Content Attributes.  Define each required attributes field and any optional fields\ndefined by the content types used for this Content. This field is mandatory. \n \n \n \n \n \n SAVE THE NEW CONTENT added by selecting: \n \n \n Save : The content will be saved in a draft version. \n \n \n Save and Continue : The content will be saved and the editable form will be displayed. \n \n \n Save and Approve : The content will be saved, approved and published. \n Finding Content \n You can list specific Content by using the filters: \n \n \n All : All created Content is displayed (Draft, To Approve and\nApproved/Published) \n \n \n Pending Changes : All created Content that was saved by only clicking on the\n Save  or  Save and Continue  button. The content is not\napproved and therefore is not ready to be published. \n \n \n Ready for Approval : All created Content that is in  Ready  status,\nand saved by clicking on the  Save  or  Save and Continue  button.\nThe content is ready for review but has not yet been approved and\ntherefore has not been published. \n \n \n Published : All created Content that has been saved and approved\nby clicking on the  Save and Approve  button. This content has been\npublished. \n \n \n \n In the table list, contents are listed with several parameters: Name,\nCreated by, Last Edited, Type, Created Date, Owner Group, Join Group,\nStatus, Restrictions, Code, Actions. Fields can be added or deleted from view by selecting or unselecting them\nin the Columns drop-down menu. \n Content Actions \n For all Content in the list, you have access to a set of actions\nthrough the  Actions  kebab button, such as: \n \n \n Edit : update the data fields in the content definition \n \n \n Delete : remove the content \n \n \n Clone : replicate the content \n \n \n Publish : make the content visible \n \n \n Unpublish : hide the content \n \n \n \n All Content in the list can be saved to your local file system by clicking the\n Download  button and selecting either CSV or XLS format. \n \n"},{title:"Content Types",frontmatter:{},regularPath:"/v6.2/tutorials/cms/content-types-tutorial.html",relativePath:"v6.2/tutorials/cms/content-types-tutorial.md",key:"v-66e5dae0",path:"/v6.2/tutorials/cms/content-types-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to create a Content Type",slug:"how-to-create-a-content-type"}],lastUpdated:"8/10/2020, 5:33:01 PM",content:" Content Types \n Objective \n This document provides an overview of the Content Types, as well as how\nthey are created and represented. \n Overview \n The Content Type is a construct used to represent or to model a Content.\nIt is characterized by a set of  Attribute Types , each of which\ndefines the value of their properties, called Attributes. A Content is\nan instance or specialization of the Content Type. \n How to create a Content Type \n Creating Contents Types is fairly simple. The Content Types are managed\nthrough the Web CMS, its user interface is made available in the App\nBuilder application. \n \n \n From App Builder, go to  Content > Types \n \n \n Click on the  Add Content Type  button to create a new Content\nType. \n \n \n \n \n \n You be asked to provide \n \n \n Code . The code is the unique identifier of the content type,\nthat must be 3 uppercase letters, (e.g. CNN). It’s mandatory. \n \n \n Name.  The name must be max 50 characters uppercase and\nlowercase letters, including numbers and special characters,\n(e.g. Conference_News). It’s mandatory. \n \n \n \n \n \n \n \n Select the  Save  button, then you’ll see \n \n \n Content Type Information : \n \n \n Code . The value is pre-filled. \n \n \n Name . The name is pre-filled. \n \n \n \n \n Metadata \n \n \n Page for on-the-fly publishing \n \n \n Default content template \n \n \n Default content template for lists \n \n \n \n \n \n \n Default content template  and  Default content template for lists  are used\nrespectively to show the detailed view of the Content and its\nrepresentation as an element in a list. \n \n Attributes \n \n In the Attributes section, select the  Type  from the drop-down list.\nThe list contains all the available attributes types that define which\nproperties/attributes will characterize the Content. \n \n The Add button will start the configuration of the single attribute\ntype. Every attribute type has its own configuration. \n For example, to configure the  Text  Attribute Type, choose Text from\nthe Types drop-down menu and then press the Add button. \n \n \n \n You should specify the following fields \n \n \n Type:  the value is pre-filled. It represents the selected\nattribute type. \n \n \n Code : You should insert the name of the attribute. (You\ncan insert max 10 characters uppercase and lowercase letters,\nnumbers, and special characters _ ). (e.g. title) \n \n \n Name : You should insert the description of the attribute.\n(You can insert max 50 characters uppercase and lowercase letters,\nincluding numbers and special characters). (e.g. Title). \n \n \n You should declare if the attribute is  mandatory ,\n searchable , and  to be used as a filter in the list. \n \n \n The  Roles  section it is possible to assign the  jacms:title\nAttribute Role  to this attribute; in this way other plugins or\nservices will know that within the CNG entity this attribute is a\ntitle, whatever the key is; however, for sake of clarity, the Code\nof the attribute is Title. \n \n \n The remaining fields related to  Sections  and  Validation -\nOGNL  sections are not mandatory and can be left empty. \n \n \n Press the  Continue  button. The Text attribute type requires no\nadditional configuration step. \n \n \n You can add other Attributes Types. \n \n \n Press the  Save  button. The Content type will be saved and displayed\nin the table list \n \n \n"},{title:"Hello World for a Widget Using the App builder",frontmatter:{},regularPath:"/v6.2/tutorials/cms/custom-html-widgets.html",relativePath:"v6.2/tutorials/cms/custom-html-widgets.md",key:"v-cf987aa0",path:"/v6.2/tutorials/cms/custom-html-widgets.html",headers:[{level:2,title:"Basic Widget Tutorial",slug:"basic-widget-tutorial"},{level:2,title:"Simple Fragment tutorial",slug:"simple-fragment-tutorial"},{level:2,title:"Freemarker Basics in Entando",slug:"freemarker-basics-in-entando"},{level:2,title:"Useful Links",slug:"useful-links"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Hello World for a Widget Using the App builder \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Basic Widget Tutorial \n For this example you will use the Entando App Builder to build and\nassign your widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. \n \n \n In the App Builder menu, at the top, Go To: UX Patterns -→ Widgets \n \n \n Select NEW \n \n \n The Custom UI Field is a freemarker template where you can put raw\nhtml and include freemarker logic, \n \n \n It allows you to import javascript, css, or any normal HTML \n \n \n Example, put <h2>Hello World</h2> into your widget, give it\na name and save it \n \n \n \n \n Go To: Page Designer -→ Page Settings \n \n \n In the Home Page dropdown select Home / Service and select SAVE \n \n \n Now place the widget on the page \n \n \n Go To: Page Designer -→ Page Tree \n \n \n On the row that says "Service", on the far right side, select the\nKebab button and select CONFIGURE \n \n \n Find the widget created in step 5 on the right hand side \n \n \n Drag and drop the widget onto the open frame of the page \n \n \n Select PUBLISH at the bottom of the screen \n \n \n Then select GO TO HOME PAGE in the upper right \n \n \n You should see "Hello World" on the page \n Simple Fragment tutorial \n A fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic html,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …​  tag. \n Starting from the simple widget tutorial above: \n \n \n In the app builder Go To: UX Patterns -→ Fragments \n \n \n Enter the code for the fragment as  test \n \n \n In the  Gui Code  enter  <h2>This is a fragment</h2> \n \n \n Next place the fragment on a page \n \n \n Go To: Ux Patterns -→ Page Templates \n \n \n On the row for  service , select EDIT \n \n \n Use the fragment tag to place the fragment on the page\n <@wp.fragment code="test"/> \n \n \n SAVE the Page Template \n \n \n Go To: homepage (assuming you’ve set the service page to the\nhomepage) \n \n \n Note that the fragment is printed including the HTML tags. By\ndefault html embedded via a fragment tag is escaped so you get it\nrendered exactly as you enter it. You’ll need to un-escape it to get\nit to render correctly. \n \n \n Go back to your page template (UX Patterns -→ Page Templates) select\nSERVICE and EDIT \n \n \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n Go back to the homepage \n \n \n See correctly rendered fragment \n Freemarker Basics in Entando \n The freemarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > …​ \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof freemarker. \n Useful Links \n https://freemarker.apache.org \n'},{title:"Digital Assets",frontmatter:{},regularPath:"/v6.2/tutorials/cms/digital-assets-tutorial.html",relativePath:"v6.2/tutorials/cms/digital-assets-tutorial.md",key:"v-0cb4fbc8",path:"/v6.2/tutorials/cms/digital-assets-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to create a Digital Asset",slug:"how-to-create-a-digital-asset"},{level:2,title:"Editing Assets",slug:"editing-assets"},{level:3,title:"Cropping Images",slug:"cropping-images"},{level:2,title:"Embedding an Asset in a Page",slug:"embedding-an-asset-in-a-page"},{level:2,title:"Including an Asset in a Content",slug:"including-an-asset-in-a-content"},{level:2,title:"Configuring Allowed File Extensions for Upload",slug:"configuring-allowed-file-extensions-for-upload"}],lastUpdated:"8/10/2020, 5:33:01 PM",content:" Digital Assets \n Objective \n This document provides an overview of the Digital Assets and\nfunctionalities needed to manage images and documents. \n Overview \n The WEB CMS includes capabilities that let you manage contents and\ndigital assets. Digital Assets are images, documents, and other media\nfiles supported in specific format. \n Default Supported Document Formats:  The Entando CMS can be\nconfigured to allow you to load or exclude any type of file extension\nfrom being loaded to your site. For the app builder you should also include the MIME type of the asset you want to allow. The default set of extensions are: \n pdf,xls,doc,ppt,txt,rtf,sxw,sxc,odt,ods,odp,tar,gz,zip,rar,flv,swf,avi,wmv,ogg,mp3,wav,ogm,mov,iso,nrg,docx,docm,xlsx,xlsm,xlsb,pptx,pptm,ppsx,ppsm,sldx,sldm. \n Default Supported Image Formats : jpg, jpeg, png, svg,svg+xml \n How to create a Digital Asset \n To manage the Digital Assets through the Web CMS integrated with App\nBuilder application \n \n From App Builder, go to  Content > Types \n \n Add a new image or a new document file \n \n Press the  Drag and Drop or Browse your computer  button and\nchoose, from your file system, images and documents files that you\nwould like to upload \n \n \n \n From the  Add file  modal window, you must choose one of the\navailable Groups and then the  Upload  button. If categories have\nbeen defined, you can apply them to the asset in this step. \n \n \n \n \n The image file that you just uploaded is displayed in the list; a\nstatistical overview of the number of the uploaded resources (images\nand documents) is provided. The App Builder’s interface allows the\nusers to choose grid and list view; most of the time, users prefer\nto use list view when they are searching with specific requirements,\nwhile they love grid view for exploring. For every resource, image,\nor document, the list shows the following information: \n \n \n Preview \n \n \n Name \n \n \n Type \n \n \n Uploaded By \n \n \n Uploaded At \n \n \n Group \n \n \n Categories \n \n \n Actions \n \n \n \n \n Furthermore, the interface lets you perform all management actions, as: \n \n \n Edit:  update the information data related to every single\nresource (image and document) \n \n \n Duplicate:  copy identically the resource from the original \n \n \n Download:  transfer the resource to your local machine \n \n \n Delete:  remove the resource \n \n \n \n You can list the contents by filtering with: \n \n \n All : All added files are displayed, images and documents both. \n \n \n Images : All added images are displayed \n \n \n Documents : All added documents are displayed. \n Editing Assets \n Once you have a digital asset in place, you have several editing and viewing options. Click the asset's  Actions  button and select  Edit  to update the asset's name/description, categories, and the file represented. \n Cropping Images \n You can crop images newly uploaded via Digital Assets. You can either crop the image dynamically or by using pre-configured crop ratios. \n To set pre-configured crop ratios: \n \n Select  CMS > Content Settings \n Under  Settings Image Crop Dimensions,  click  Add crop dimension . \n Enter a crop ratio, using numeric values separated by a colon. \n Click  Save . \n \n To dynamically crop an image: \n \n Edit the asset by opening  Actions  menu > Edit.\n \n Buttons representing your pre-defined crop ratios are below the image. Clicking any of those buttons changes the selected crop area based on the chosen ratio. \n You can create multiple crops of a single image as part of the upload process. The right side of the screen displays the list of crops created during the current session. \n \n \n \n \n \n Use your mouse or the buttons below the image to move or change the crop area, then click  Save  to crop the selected area. Repeat the process as many times as needed.\n \n Click  Close  to return to the Digital Assets screen. \n Embedding an Asset in a Page \n The uploaded asset can be embedded in a page by using  <@wp.resourceUrl path/to/asset . The path can be found in the CMS Configuration > File Browser page. \n \n Example usage:\n <img src=\"<@wp.resourceUrl cms/images/butterfly_d0_d3.jpg\" \n Including an Asset in a Content \n The asset can be included in a content of a type that has an  Attach  or  Image  attribute. \n \n Create a content type with an image attribute.\n \n Create a content based on the created  type.\n \n Under the  Content Attributes  section at the bottom of the page, click the  Add  button beside the image attribute. It will then open a modal that allows you to select an asset by clicking the  Use  action.\n Configuring Allowed File Extensions for Upload \n The types of files that can be uploaded to an Entando application are controlled by\nconfiguration in the server side of the app builder. If you're using the quickstart this will be the\n entando-de-app . \n There are two properties that control these settings and they are set in  src/main/conf/systemParams.properties  and are a comma delimitted list of values. The property keys are \n \n jacms.imageResource.allowedExtensions= \n jacms.attachResource.allowedExtensions= \n \n If you are configuring the upload for both the App Builder and the legacy Admin Console you should include\nboth the MIME type of the asset and the file extension. The APIs that support resources will check MIME type of the uploaded asset. \n An example configuration for images. \n \n jacms.imageResource.allowedExtensions=jpg,jpeg,png,svg,svg+xml \n \n Where  svg+xml  is the MIME type for an svg image. \n The  systemParams.properties  file is bundled into the WAR and the image for the application so you will need to create and deploy image to reflect changes for these properties in your application. \n"},{title:"List of Attribute Types",frontmatter:{},regularPath:"/v6.2/tutorials/cms/list-of-Content-attributes.html",relativePath:"v6.2/tutorials/cms/list-of-Content-attributes.md",key:"v-737fcee0",path:"/v6.2/tutorials/cms/list-of-Content-attributes.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Simple Attribute Types",slug:"simple-attribute-types"},{level:2,title:"Composed attribute types",slug:"composed-attribute-types"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" List of Attribute Types \n Objective \n This document provides a list and an overview of all available attribute\ntypes. \n Overview \n Attributes can be seen as the smallest elements that compose a Content\nType. In other words, a Content Type is just a collection of different\nattributes. Attributes are responsible for carrying the actual\ninformation inside a Content in Entando and could be of different types.\nIn this chapter, we will review and describe the different attribute\ntypes. \n Firstly, we can distinguish simple attribute types from composite\nattribute types. In the first case, the attribute type carries a single\npiece of information (for example, an image), while the latter is an\naggregation of simple attribute types (for example, a set of images). \n Simple Attribute Types \n Attach \n This represents the information carried by a file, which is attached to\nthe content. \n It consists of an URL corresponding to the desired file present in the\nsystem’s resources, and a text which can either indicate the description\nor the name of the file. \n This attribute type is rendered as a button named “Add”. By pushing that\nbutton, the user is prompted to select a desired file present in the\nsystem’s Digital Assets Attachments list. \n Boolean \n This attribute type represents a boolean value which can either be true\nor false. This attribute type is rendered as two radio buttons labeled\n“Yes” and “No”. \n Checkbox \n This attribute type behaves in the same way as a Boolean does – it is\nactually an alternative to the Boolean attribute type - but it is\nrendered with a checkbox labeled “Yes” or “No”. \n Date \n This attribute type represents a date, tracking time within a content;\nit is often used to filter contents appearing in lists by publication\ndate, etc. \n It is rendered as a datepicker. \n Timestamp \n This attribute type is specialized for the Date attribute, allowing you\nto also specify the hour, minute and second. \n It is rendered as a datepicker for the date, and a select for hours,\nminutes and seconds. \n Enumerator \n The enumerator attribute type represents textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements which are mandatory and declares the set of available\nchoices; \n \n \n Separator, which is optional and declares the character to use to\nseparate the arguments of the enumerator. By default the comma “,”\nis used. \n \n \n ExtractorBean: this parameter represents the name of the Spring bean\nto use to process the values of the enumerator. The name must\nexactly match the id of the bean as defined in the Spring\nconfiguration file. \n \n \n It is rendered as a select list. \n Enumerator Map \n The enumerator map attribute type represent textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements in the form of a separated list of key=value pairs, (i.e.\nkey1=value1,key2=value2) \n \n \n Separator, which is optional and declares the character to use to\nseparate the key, values pairs. By default the comma is used. \n \n \n It is rendered as a select list which shows the available values. \n Hypertext \n This attribute type holds HTML tagged text; it retains a single value\nfor all languages. \n Even if this attribute type could support all HTML tags, we strongly\nrecommend using only tags which provide meaning and avoid those which\ndecorate or add graphics. \n Hypertext attributes are rendered as a text area in the content edit\npage; if the CKEditor is active, the user has access to a set of\nadditional functionalities from a dedicated editor’s toolbar. Such as\ntable insertion and table manipulation, special characters insertion,\nstring formatting, links creation. \n Image \n This attribute type binds an image resource to the content. \n The image is always taken from the Digital Assets images list. The user\nwill need to specify the description accompanying the image. \n Usually attributes of type Image are not indexed and are not used to\nfilter contents. \n It is rendered as a button named “Add” that, when pushed, allows the\nuser to select an image from the Digital Assets images list. Once\nselected the user is presented with a preview, as a thumbnail, of the\nimage and has the possibility to define some parameters: \n \n \n Text which is mandatory and by default takes the name of the\nselected image \n \n \n legend (optional) \n \n \n alt (optional) \n \n \n description (optional) \n \n \n title (optional) \n \n \n Link \n This attribute type represents an hypertext link; it is normally used to\ninclude a link in your content: it is possible to define up to three\ndifferent types of links: \n \n \n external links: a link pointing to a location external to the Entando\nportal \n \n \n link to page: a link which points to a page of the portal \n \n \n link to a content: a link to another content \n \n \n It is rendered as a button named “Add” that when pushed opens up a modal\nwindow from which the user can select the link type. \n Longtext \n This attribute type represents a simple unformatted text; it supports\nseveral languages and is normally used for small descriptions, when a\nshort string won’t suffice. \n It supports minimum length , maximal length and regular expressions as\noptional parameters. \n It is rendered as a textarea. \n Monotext \n Monotext represents the information in textual form, but supports only a\nlanguage; it is used for all \n those fields which do not require localization. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n Number \n This attribute type holds an integer number; it retains a single value\nfor all languages. \n Supports the optional parameters: From, To, and Equal to. \n It is rendered as a textfield. \n Text \n This attribute type holds a string; it retains a single value for all\nlanguages. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n ThreeState \n Conceptually similar to the Boolean attribute, this attribute type\nallows a third status “Both” to be present. \n It is rendered as a radio button with “Yes”, “No”, “Both” options. \n Composed attribute types \n All the attributes types of the previous chapter can only retain a\nsingle type of information, but sometimes it is desirable to aggregate\ndifferent types of attributes into one attribute: this is where composed\nattributes are used. \n From a functional point of view, it would be perfectly legal to build a\ncontent type specifying all the attributes back to back: the content\nwould be formally complete, but from a logical point of view the\nattributes would appear mutually unrelated and, worse, the relationship\nbetween them would not be explicit. \n Entando offers three types of composed attributes: List, Monolist,\nComposite. \n List \n This Attribute Type represents a set of independent and homogeneous\nelementary Attribute types, each associated with one of the languages\ndefined in the system. \n An immediate consequence is that this kind of list can handle only\nmono-language basic attributes. \n It is rendered with a button named “Add” that if pushed presents the\nuser a prompt to select or define the single elements which compose the\nlist. \n Monolist \n This attribute type is a list that is common to all the system\nlanguages; this kind of list handles multi-language and mono-language\nattributes. \n It is rendered with a button named “Add” that, if pushed, presents the\nuser with a prompt to select or define the single elements that compose\nthe monolist. \n Composite \n This attribute type is an aggregate of different, non-homogeneous,\nsimple attributes types. The aggregation of different types is treated\nas a single unit. \n It is rendered as a combination of the elementary attribute types, where\neach attribute type presents the proper rendering. \n"},{title:"Publish A Content",frontmatter:{},regularPath:"/v6.2/tutorials/cms/publish-a-content-tutorial.html",relativePath:"v6.2/tutorials/cms/publish-a-content-tutorial.md",key:"v-413a89a0",path:"/v6.2/tutorials/cms/publish-a-content-tutorial.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"How to publish a Content",slug:"how-to-publish-a-content"}],lastUpdated:"8/11/2020, 4:23:51 PM",content:" Publish A Content \n Objective \n This document provides an overview of how to publish a Content in your\napplication page. \n Overview \n The App Builder application provides the capabilities to publish\nContent in your application page to the final user. \n How to publish a Content \n To publish a Content, through the App Builder application, in your page \n \n Go to  Pages > Management \n Click  Add \n \n \n A page must have a title, a code, a placement in the page tree, an owner\ngroup, a join group and a page template. When you create a new page, you\nmust to \n \n \n Provide a title and a code in the Info section. \n \n \n Provide, selecting them from the dropdown menus, an Owner Group and\na Join Group in the Page Groups section, \n \n \n Select a Page Template from the available templates. \n \n \n \n \n Click the green  Save and Configure  button. This brings you to\nthe configuration section, which lists all the frames defined in the\npage template you associated with that page. \n \n \n \n Add widgets by dragging them from the right column on to the desired frame. \n If you select the  Content  widget, its corresponding settings page will be shown. \n \n \n \n Click  Change content  to bring up the Content selection view. \n \n \n \n \n In the Search field, you can type the name of the content that you\nwould like to publish. Remember\nthat in order to publish the content on your page, it must first be saved\nand approved. \n \n \n Select the appropriate content item from the list. \n \n \n Press the  Save  button. \n \n \n \n \n \n The title of the selected content item will now be displayed in the widget settings. \n \n \n Press the  Save  button. \n \n \n \n \n \n Click on the  Preview  button to show the page preview with the updated settings. \n \n \n Finally, click on the  Publish  button to publish the page. \n \n \n \n"},{title:"Adding a new API to the core app",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/add-rest-api.html",relativePath:"v6.2/tutorials/customize-the-platform/add-rest-api.md",key:"v-2bc8a194",path:"/v6.2/tutorials/customize-the-platform/add-rest-api.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Adding a new API to the core app \n Prerequisites \n \n \n Java 8 \n \n \n maven \n Overview \n This guide will take you through adding a new REST API to the Entando\ncore app. In some cases it is better to add new APIs to the core rather\nthan creating a new microservice. Some example cases where adding new\nAPIs to the core is recommended are: \n \n \n When extending or adding functionality to the WCMS \n \n \n When you have a simple use case requiring persistence that is\nspecific to only the application you’re working within \n \n \n When exposing configurations that are needed by the portal-ui during\npage rendering \n \n \n For small changes that don’t warrant a full stand-alone microservice \n \n \n You can build widgets and micro frontends that take advantage of these\nAPIs in the same way that your micro-frontends can invoke APIs exposed\nby other services. \n Tutorial \n Creating a controller and services \n \n \n Create a new java package in the project using your favorite IDE at\nthe path  org.entando.training . \n \n \n Under that package add packages for  controllers  and  services . \n \n \n Create a class called  DemoController.java  from the\ntraining package into the controllers package. \n \n This is a normal Spring rest controller and it will be\ndiscovered by annotations. \n \n \n \n Copy  DemoService.java  from the\ntraining package into the services package. \n \n This is a normal Spring service that will be autowired into the\ncontroller. The data in this service is hardcoded but this is\nwhere you can wire in external services or other parts of the\nEntando architecture to fetch the data. \n \n \n \n Copy  commonConfig.xml  to\n src/main/resources/spring/aps/managers . \n \n \n The goal is to enable package scanning for annotation driven\nspring services. This includes the package scan for your package\ndefined above. If you want to scan another package, then you\nneed to add another path to this file. This is the only spring\nXML you will need to change if you want to build annotation\ndriven beans in Entando. \n \n \n See also web.xml for deeper details. \n \n \n \n \n Review the code and annotations in the controller to understand how\nthe APIs are protected and integrated. \n \n \n @RestAccessControl  is a custom Entando annotation that can be used\nto restrict APIs by role. \n \n The rest of the annotations are normal Spring annotations. \n \n \n \n Restart your app using jetty. \n \n \n if you get an error add the entries below to\n src/main/conf/systemParams.properties  This is temporary \nParameters for Argon2 algorithm encryption\nalgo.argon2.type=ARGON2i\nalgo.argon2.hash.length=32\nalgo.argon2.salt.length=16\nalgo.argon2.iterations=4\nalgo.argon2.memory=65536\nalgo.argon2.parallelism=4\nalgo.default.key=changeit\n \n \n \n \n \n Go to Swagger \n \n \n Find the demo-controller and try your new endpoints out using\nswagger \n \n \n"},{title:"Add a New Datasource in EAP Server",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/add_datasource_to_eap_image.html",relativePath:"v6.2/tutorials/customize-the-platform/add_datasource_to_eap_image.md",key:"v-1c9022e6",path:"/v6.2/tutorials/customize-the-platform/add_datasource_to_eap_image.html",headers:[{level:2,title:"Other resources",slug:"other-resources"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Add a New Datasource in EAP Server \n With EAP should be enough to add a set of parameters the EntandoApp\ncustom resource. \n \n \n Set the standardServerImage to eap \n \n \n Add a  parameters  object \n \n \n \n Parameters environment variables reference \n \n \n \n \n \n \n \n Env variable \n Value \n Example with PortDB \n \n \n \n \n DATASOURCES \n "PORTDB,SERVDB, <YOUR-DS-PREFIX>" \n \n \n \n <YOUR-DS-PREFIX>_NONXA \n Defines the datasource as a non-XA datasource. Defaults to  false \n PORTDB_NONXA="true" \n \n \n <YOUR-DS-PREFIX>_JTA \n Defines Java Transaction API (JTA) option for the non-XA datasource. The XA datasources are already JTA capable by default Defaults to  true \n PORTDB_JTA="false" \n \n \n <YOUR-DS-PREFIX>_URL \n Defines connection URL for the datasource. \n PORTDB_URL="jdbc:derby:/entando-data/databases/entandoPort;create=true" \n \n \n <YOUR-DS-PREFIX>_JNDI \n Defines the JNDI name for the datasource. This setting is useful if you want to override the default generated JNDI name \n PORTDB_JNDI="java:jboss/datasources/entandoPortDataSource" \n \n \n <YOUR-DS-PREFIX>_DRIVER \n Defines Java database driver for the datasource \n PORTDB_DRIVER="derby" \n \n \n <YOUR-DS-PREFIX>_USERNAME \n Defines the username for the datasource \n PORTDB_USERNAME="agile" \n \n \n <YOUR-DS-PREFIX>_PASSWORD \n Defines the password for the datasource \n PORTDB_PASSWORD="agile" \n \n \n <YOUR-DS-PREFIX>_SERVICE_HOST \n Defines the database server’s host name or IP address to be used in the datasource’s connection-url property. \n PORTDB_SERVICE_HOST="dummy" \n \n \n <YOUR-DS-PREFIX>_SERVICE_PORT \n Defines the database server’s port for the datasource. \n PORTDB_SERVICE_PORT="1527" \n \n \n \n \n Note \n For more details on other standard variables check the  EAP\ndocumentation \n \n Here a potential example \n apiVersion: entando.org/v1\nkind: "EntandoApp"\nmetadata:\n  annotations: {}\n  labels: {}\n  name: "quickstart"\nspec:\n  dbms: #tbd\n  replicas: 1\n  standardServerImage: eap\n  ingressPath: /entando-de-app\n  parameters:\n    DATASOURCES: "PORTDB,SERVDB,MYDATASOURCE"\n    MYDATASOURCE_NONXA: "true"\n    MYDATASOURCE_JTA: "false"\n    ...\n Other resources \n \n EAP Official Documentation: Runtime\nArtifacts/Datasources \n \n'},{title:"Hello World for a Widget Using the App builder",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/app-builder/hello-world.html",relativePath:"v6.2/tutorials/customize-the-platform/app-builder/hello-world.md",key:"v-c350580e",path:"/v6.2/tutorials/customize-the-platform/app-builder/hello-world.html",headers:[{level:2,title:"Basic Widget Tutorial",slug:"basic-widget-tutorial"},{level:2,title:"Simple Fragment tutorial",slug:"simple-fragment-tutorial"},{level:2,title:"Freemarker Basics in Entando",slug:"freemarker-basics-in-entando"},{level:2,title:"Useful Links",slug:"useful-links"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Hello World for a Widget Using the App builder \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Basic Widget Tutorial \n For this example you will use the Entando App Builder to build and\nassign your widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. \n \n \n In the App Builder menu, at the top, Go To: UX Patterns -→ Widgets \n \n \n Select Add \n \n \n The Custom UI Field is a freemarker template where you can put raw\nhtml and include freemarker logic, \n \n \n It allows you to import javascript, css, or any normal HTML \n \n \n Example, put <h2>Hello World</h2> into your widget, give it\na name and save it \n \n \n \n \n Go To: Page Designer -→ Page Settings \n \n \n In the Home Page dropdown select Home / Service and select SAVE \n \n \n Now place the widget on the page \n \n \n Go To: Page Designer -→ Page Tree \n \n \n On the row that says "Service", on the far right side, select the\nKebab button and select CONFIGURE \n \n \n Find the widget created in step 5 on the right hand side \n \n \n Drag and drop the widget onto the open frame of the page \n \n \n Select PUBLISH at the bottom of the screen \n \n \n Then select GO TO HOME PAGE in the upper right \n \n \n You should see "Hello World" on the page \n Simple Fragment tutorial \n A fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic html,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …​  tag. \n Starting from the simple widget tutorial above: \n \n \n In the app builder Go To: UX Patterns -→ Fragments \n \n \n Enter the code for the fragment as  test \n \n \n In the  Gui Code  enter  <h2>This is a fragment</h2> \n \n \n Next place the fragment on a page \n \n \n Go To: Ux Patterns -→ Page Templates \n \n \n On the row for  service , select EDIT \n \n \n Use the fragment tag to place the fragment on the page\n <@wp.fragment code="test"/> \n \n \n SAVE the page template \n \n \n Go To: homepage (assuming you’ve set the service page to the\nhomepage) \n \n \n Note that the fragment is printed including the HTML tags. By\ndefault html embedded via a fragment tag is escaped so you get it\nrendered exactly as you enter it. You’ll need to un-escape it to get\nit to render correctly. \n \n \n Go back to your page template (UX Patterns -→ Page Templates) select\nSERVICE and EDIT \n \n \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n Go back to the homepage \n \n \n See correctly rendered fragment \n Freemarker Basics in Entando \n The freemarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > …​ \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof freemarker. \n Useful Links \n https://freemarker.apache.org \n'},{title:"Building a Docker Image for the Entando Core",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/app-engine/build-core-image.html",relativePath:"v6.2/tutorials/customize-the-platform/app-engine/build-core-image.md",key:"v-19281c9a",path:"/v6.2/tutorials/customize-the-platform/app-engine/build-core-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Building a Docker Image for the Entando Core \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will take you through the basic steps to create a docker\nimage from an Entando core application. A more detailed guide with\nadditional commands and configuration can be found here: \n https://github.com/entando-k8s/entando-de-app \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Build a docker image from the core app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n"},{title:"Building a Docker Image and Deploying a Pre-Packaged App",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/app-engine/building-prepackaged-image.html",relativePath:"v6.2/tutorials/customize-the-platform/app-engine/building-prepackaged-image.md",key:"v-8585111a",path:"/v6.2/tutorials/customize-the-platform/app-engine/building-prepackaged-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"9/22/2020, 4:28:19 PM",content:' Building a Docker Image and Deploying a Pre-Packaged App \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will show you how you can use an Entando application that\nyou have built as a launching point for creating new applications. \n In this lab you’ll take a demo application previously built, install the\nbackups in a blank application, build an image from the updated app, and\ndeploy it as a new application. \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Take the provide zip file and unzip it in a location of your choice. \n \n \n This zip contains all of the assets, content, and metadata\nneeded to launch an Entando application. We are going to package\nthem the assets and DB an image and \n \n \n Entando will automatically instantiate and populate the app from\nthe most recent backup \n \n \n \n \n Move the resources and protected folders from the zip file into your\n entando-de-app  in  src/main/webapp  replacing any content that is\nalready there \n \n \n Build a docker image from the app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n Note that the "derby" option here is only for the initialization\nphase of the DB when deploying. It isn’t the final database\nchoice \n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO_NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO_NAME>:latest\n \n \n \n Now we need to generate a new application for deployment to\nKubernetes using the Helm chart \n \n \n If you have an output from helm from before you can re-use it\nand just apply the changes to the config map. \n \n \n Or you can re-run helm and change the output \n \n \n \n \n Re-run the helm command for your environment. \n \n \n Open the output yaml file from the helm command in the text editor\nof your choice \n \n For example:  vi training-alpha.yaml \n \n \n \n In that file look for the  ConfigMap \n \n \n The config map defines all of the images that are available as\npart of the deployment. They aren’t all used concurrently. \n \n \n You can also view this config map in kubernetes/OpenShift \n \n \n \n \n Now you need to update the deployment to use your customized Wildfly\nimage. Find  entando-de-app-wildfly  in the config map \n \n Note that we are changing the de-app but you could create a\ncustom version of any of the included images \n \n \n \n Change the version to match the version you used for your image \n \n \n Change the "organization" to the name of your main image repository\norganization and if you aren’t using docker.io (DockerHub) then\nchange the registry as well. \n \n \n Save the file \n \n \n Follow the deployment steps you went through when you originally\ndeployed your Entando application to your Kubernetes instance \n \n \n Once deployed go to the app builder in your app \n \n \n Click Go To Homepage \n \n \n'},{title:"The Entando Core APIs",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/app-engine/core-swagger.html",relativePath:"v6.2/tutorials/customize-the-platform/app-engine/core-swagger.md",key:"v-e4d3f29a",path:"/v6.2/tutorials/customize-the-platform/app-engine/core-swagger.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Setup",slug:"setup"},{level:2,title:"Overview",slug:"overview"},{level:3,title:"API structure",slug:"api-structure"},{level:3,title:"Models",slug:"models"},{level:2,title:"Tutorial:",slug:"tutorial"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" The Entando Core APIs \n Prerequisites \n \n \n Java 8 \n \n \n maven \n Setup \n \n \n Clone the Entando sample app if you don’t already have it. \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n Start the app for local execution and enable the swagger profile by\npassing  -Dspring.profiles.active=swagger  to the jetty command. Set\nthe value of  -Djetty.port  to something available on your machine\ne.g. 8081. \n mvn clean package jetty:run-war -Pjetty-local -Pderby -Dspring.profiles.active=swagger -Djetty.port=8085 -Dorg.slf4j.simpleLogger.log.org.eclipse.jetty.annotations.AnnotationParser=error \n \n \n \n Note: If you don't have docker installed or running add  -DskipDocker=true  to the command above \n \n \n \n Wait for the app to start. \n \n \n Once started, navigate to the swagger ui in a browser. \n \n \n \n http://localhost:[your port]/entando-de-app/api/swagger-ui.html\n Overview \n The Entando core exposes REST APIs for every action that can be taken in\nthe App Builder and Admin Console environments. For example, you can use\nthese apis to create pages, create page templates or to add widgets to\npages. The APIs can be used to support automation, testing, or\nintegrations with external systems. \n API structure \n All of the APIs share a common top level structure. Each response will\ncontain a top level entry for  errors ,  metadata , and  payload . \n The  errors  will always contain code and a message string indicating an\nerror condition in the request. The  metadata  section is used for\npaging, sorting, filtering and data that is distinct from the body. The\nbody of each response is included in the  payload  section of the\nresponse and varies according to each API. \n Models \n All of the model classes returned by the Entando core are annotated so\nthat the model definition is included in the swagger documentation. At\nthe bottom of the swagger page all of the model classes returned by the\nAPI endpoints can be found. \n Tutorial: \n \n \n Stop the Entando instance if it is running. \n \n \n In the project open  src/main/conf/systemParams.properties . \n \n \n Change the value of this property to reflect the port you are using\nto run the app. \n \n \n applicationBaseURL \n \n \n For example if running on 8085 you would have\n applicationBaseURL=http://localhost:8085/${entando.engine.web.context}/ \n \n \n \n \n Login to the admin console at\n http://localhost:8085/entando-de-app/do/login . \n \n \n Once logged in go to Integration -→ API Management -→ Consumers. \n \n \n Select the kebab button on the row labeled swagger. \n \n \n On that screen enable the button for  client_credentials . \n \n \n On that screen enter  swagger  as the value for the secret. \n \n \n Hit save \n \n \n Return to swagger  your\nport /entando-de-app/api/swagger-ui.html \n \n \n Hit authorize \n \n \n Enter \n \n \n User: admin \n \n \n PW: adminadmin \n \n \n client: swagger \n \n \n client_secret: swagger \n \n \n \n \n Use the  Try it out  button on the APIs \n \n \n Scroll to  widget-controller \n \n \n Select the blue GET row \n \n \n Select  Try it out \n \n \n Look at the results in the window \n \n \n \n \n"},{title:"Change Default Datasources and Connections",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/",relativePath:"v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/README.md",key:"v-5503dfd0",path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a Docker project for your own base image to Entando's standard base image(s)",slug:"_1-create-a-docker-project-for-your-own-base-image-to-entando-s-standard-base-image-s"},{level:3,title:"2. Customize the standalone.xml/standalone-openshift.xml file using environment variables.",slug:"_2-customize-the-standalone-xml-standalone-openshift-xml-file-using-environment-variables"},{level:3,title:"3. Build your own Docker base image",slug:"_3-build-your-own-docker-base-image"},{level:3,title:"4. Modify your Entando App project to use the new Docker base image",slug:"_4-modify-your-entando-app-project-to-use-the-new-docker-base-image"},{level:3,title:"5. Build and push your custom Docker image",slug:"_5-build-and-push-your-custom-docker-image"},{level:3,title:"6. Deploy your EntandoApp with the correct environment variables",slug:"_6-deploy-your-entandoapp-with-the-correct-environment-variables"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Change Default Datasources and Connections \n Purpose \n This tutorial explains how to customize our EAP and Wildfly base Docker images, and then configure the EntandoApp\ncustom resource to use these customizations \n Requirements \n \n \n The Entando Operator is running in the target names \n \n \n Keycloak and the Entando Cluster Infrastructure have been deployed \n \n \n The required external databases and other services are up and running. \n \n \n Your own custom project as described in  the tutorial \n Steps \n 1. Create a Docker project for your own base image to Entando\'s standard base image(s) \n Create a project, ideally in Git repository, and put the following files in the folder \n 1.1. The standalone.xml/standalone-openshift.xml file of choice \n It is essential for your custom Docker image to use a file from one of the official Entando Docker base images. \n If you intend to use provide your own EAP based image, please use this\n standalone-openshift.xml \nfile. \n If you intend to use provide your own Wildfly based image, please use this\n standalone.xml \nfile. \n Please note that if you create your own base image with a different version of EAP or Wildfly, using these files\nmay have unintended consequences. \n 1.2. Any modules that may be required for your datasource or other connection resource \n If the resource you need to connect to requires some custom classes, such as JDBC drivers, please add these as \na module to Wildfly/EAP. As an example, you can look at our\n Derby database module \nthat Entando uses for embedded databases. Please ensure that the path of the folder containing the jar files reflects\nthe fully qualified name of the module in the module.xml file. \n 1.3 Dockerfile \n In your Dockerfile, please be sure to extend the correct base image, and add the correct configuration file to\nthe correct location in the target image. \n For EAP, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=185:0 ./standalone-openshift.xml /opt/eap/standalone/configuration\n \n For Wildfly, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=1001:0 ./standalone.xml /wildfly/standalone/configuration\n \n Please take note of the user ownership in these different Dockerfiles. This is quite important as Openshift will\nexpect the user/group ownership to be respected. \n 2. Customize the standalone.xml/standalone-openshift.xml file using environment variables. \n You can now modify your Wildfly/EAP configuration to meet your requirements. Where the configuration could differ\nfrom one environment to a next, we strongly advise using environment variable expressions ( ${env.VAR_NAME} ). The most likely change\nthat would be required in this file is the addition of a datasource. Here is an example of how to add a datasource\nto the datasources subsystem. All the environment variables starting with \'YOURDB\' can be specified from the Docker\ncontainer. \n    ...\n    <subsystem xmlns="urn:jboss:domain:datasources:5.0">\n      <datasources>\n        <datasource jndi-name="${env.YOURDB_JNDI}" enabled="true" use-java-context="true" pool-name="yourDbDataSource" use-ccm="true">\n          <connection-url>${env.YOURDB_URL}</connection-url>\n          <driver>${env.YOURDB_DRIVER}</driver>\n          <security>\n            <user-name>${env.YOURDB_USERNAME}</user-name>\n            <password>${env.YOURDB_PASSWORD}</password>\n          </security>\n        </datasource>\n \n Please take extra care not to remove any lines from these files. This is of particular importance in the case of the\nEAP image as, on startup, scripts in the official EAP look for certain placeholders in this file and populates them\nfrom other environment variables. \n 3. Build your own Docker base image \n You can now build your Docker base image. It is highly recommended that you consider using a dedicated CI/CD build\ntool such as Jenkins X to build the base image and maintain traceability between your source code and the resulting\nDocker image. One possible build command could look like this: \n docker build . -t your-docker-registry.com/your-org/your-base-image:1.0.0 \n 4. Modify your Entando App project to use the new Docker base image \n You can now modify your Entando App project that you have forked as described in the\n relevant tutorial . You would require two changes to the pom.xml file\nof the sample project. \n \n Firstly, you would need to change the variable  server.base.image  to reflect the fully\nqualified URI of your Docker image for EAP and/or Wildfly. For example, if you decided to extend the Wildfly image,\ngo to the Maven profile with the id  wildfly  and change the   server.base.image  to look like this: \n \n <server.base.image>your-docker-registry.com/your-org/your-base-image:1.0.0</server.base.image> \n \n Then you need to change the  <from>  element in the Fabric8 Maven Docker Plugin to reflect this variable.\nNavigate to the first  <image>  element in the pom.xml file. You have found the correct one\nif it contains the following xml: \n \n <from>entando/${server.base.image}:${entando.version}</from> \n Delete the  entando/  prefix and the  :${entando.version}  suffix: \n <from>${server.base.image}</from> \n Please note that, should you still require support for both Wildfly and EAP in your Maven pom, you may need to\nrepeat this exercise for both the  eap  and  wildfly  profiles. \n 5. Build and push your custom Docker image \n Before building your Docker image, it would be a good idea to change the name of the image you want to build. Navigate\nto the previously modified  <image>  element in the Fabric8 Maven Docker Plugin.You can change the  <name>  element\nto reflect your preferred name, e.g. \n <name>your-docker-registry.com/your-org/your-entando-app:1.0.0</name> \n Run: \n mvn clean package -Pwildfly -Pderby \n A new Docker image should now be available named  your-docker-registry.com/your-org/your-entando-app:1.0.0 \n Log into the Docker registry in question and then push the image: \n docker push your-docker-registry.com/your-org/your-entando-app:1.0.0 \n You are now ready to deploy this image. \n 6. Deploy your EntandoApp with the correct environment variables \n The final step is to configure your EntandoApp deployment with the correct environment variables. As is the case with\nall the Entando Custom Resources that result in actual deployments, the property  spec.parameters  will be translated\ninto environment variables on each of the Containers in the Deployment\'s Pod. For an EntandoApp named \'my-app\',\nthe new state of the EntandoApp would could be placed in a file named  my-app.yaml  that would look something like this: \n       kind: "EntandoApp"\n      metadata:\n        name: "my-app"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        customServerImage: your-docker-registry.com/your-org/your-entando-app:1.0.0\n        ingressPath: /your-entando-app\n        parameters:\n          YOURDB_JNDI: java/your-ds\n          YOURDB_URL: jdbc:postgresql://somehost.com:5432/mydb\n          YOURDB_DRIVER: postgresql\n          YOURDB_USERNAME: my_user\n          YOURDB_PASSWORD: mypassword\n      entandoStatus:\n        entandoDeploymentPhase: requested\n\n \n Notice how this Custom Resource specifies a  parameter  for each environment variable that was referenced from the\n standalone.xml  file referenced earlier. \n To apply the changes to your deployment, change the  entandoStatus.entandoDeploymentPhase  property to requested and\napply the file: \n kubectl apply -f my-app.yaml\n \n '},{title:"Tutorial: How to connect Entando 6 to an external Keycloak instance",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.html",relativePath:"v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.md",key:"v-65da4ddc",path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-connect-to-external-keycloak.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Get keycloak information",slug:"_1-get-keycloak-information"},{level:3,title:"2. Generate the secret",slug:"_2-generate-the-secret"},{level:3,title:"3. Upload the secret",slug:"_3-upload-the-secret"},{level:3,title:"4. Deploy the Entando6 application",slug:"_4-deploy-the-entando6-application"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Tutorial: How to connect Entando 6 to an external Keycloak instance \n Purpose \n This tutorial enables the Entando administrator to leverage an existing\nKeycloak instance. \n Requirements \n \n \n A Keycloak instance \n \n \n A realm named "entando" on that instance \n \n \n An admin user for the "entando" realm \n Steps \n 1. Get keycloak information \n Retrieve the relevant information from the Keycloak instance you want to\nuse. \n Specifically you will need: \n \n \n The username of the Keycloak admin that has admin rights to the\n"entando" realm, e.g entando-keycloak-admin \n \n \n The Keycloak admin password, e.g. password123 \n \n \n The base url for the Keycloak server, including the auth value, e.g.\n https://my-keycloak-instance.com/auth \n 2. Generate the secret \n You now need to generate a secret with name  keycloak-admin-secret \nusing the information retrieved from step 1. The Entando administrator\nwill automatically detect this secret by name, and use it to log onto\nthe provided Keycloak server. \n Here is an example of the secret you will need to construct: \n ---\napiVersion: v1\nstringData:\n    username: <the username of the Keycloak admin user for the "entando" realm>\n    password: <the password of this Keycloak admin user>\n    url: <the base url of the Keycloak service, typically ending with the path /auth>\nkind: Secret\nmetadata\n    name: keycloak-admin-secret\n    namespace: <your-app-namespace>\ntype: Opaque\n \n \n Note \n To encode your values, in bash, you can do\n echo <your-value> | base64 \n 3. Upload the secret \n Next upload the secret to the namespace where you want to deploy your\nEntando 6 instance. \n oc create -f my-secret.yaml -n <my-app-namespace>\n 4. Deploy the Entando6 application \n Now you are ready to deploy your Entando 6 application and the\nadministrator will reuse the  keycloak-admin-secret  secret to populate\nthe environment correctly. \n Conclusion \n You should now have a working Entando 6 instance using an external\nKeycloak server. \n'},{title:"Tutorial: how to configure custom datasources and connections for Entando Apps on EAP and Wildfly",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.html",relativePath:"v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.md",key:"v-1bf60ac0",path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/tutorials/how-to-configure-custom-datasource.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a Docker project for your own base image to Entando's standard base image(s)",slug:"_1-create-a-docker-project-for-your-own-base-image-to-entando-s-standard-base-image-s"},{level:3,title:"2. Customize the standalone.xml/standalone-openshift.xml file using environment variables.",slug:"_2-customize-the-standalone-xml-standalone-openshift-xml-file-using-environment-variables"},{level:3,title:"3. Build your own Docker base image",slug:"_3-build-your-own-docker-base-image"},{level:3,title:"4. Modify your Entando App project to use the new Docker base image",slug:"_4-modify-your-entando-app-project-to-use-the-new-docker-base-image"},{level:3,title:"5. Build and push your custom Docker image",slug:"_5-build-and-push-your-custom-docker-image"},{level:3,title:"6. Deploy your EntandoApp with the correct environment variables",slug:"_6-deploy-your-entandoapp-with-the-correct-environment-variables"}],lastUpdated:"12/15/2020, 3:24:13 PM",content:' Tutorial: how to configure custom datasources and connections for Entando Apps on EAP and Wildfly \n Purpose \n This tutorial explains how to customize our EAP and Wildfly base Docker images, and then configure the EntandoApp\ncustom resource to use these customizations \n Requirements \n \n \n The Entando Operator is running in the target names \n \n \n Keycloak and the Entando Cluster Infrastructure have been deployed \n \n \n The required external databases and other services are up and running. \n \n \n Your own custom project as described in  the tutorial \n Steps \n 1. Create a Docker project for your own base image to Entando\'s standard base image(s) \n Create a project, ideally in Git repository, and put the following files in the folder \n 1.1. The standalone.xml/standalone-openshift.xml file of choice \n It is essential for your custom Docker image to use a file from one of the official Entando Docker base images. \n If you intend to use provide your own EAP based image, please use this\n standalone-openshift.xml \nfile. \n If you intend to use provide your own Wildfly based image, please use this\n standalone.xml \nfile. \n Please note that if you create your own base image with a different version of EAP or Wildfly, using these files\nmay have unintended consequences. \n 1.2. Any modules that may be required for your datasource or other connection resource \n If the resource you need to connect to requires some custom classes, such as JDBC drivers, please add these as \na module to Wildfly/EAP. As an example, you can look at our\n Derby database module \nthat Entando uses for embedded databases. Please ensure that the path of the folder containing the jar files reflects\nthe fully qualified name of the module in the module.xml file. \n 1.3 Dockerfile \n In your Dockerfile, please be sure to extend the correct base image, and add the correct configuration file to\nthe correct location in the target image. \n For EAP, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=185:0 ./standalone-openshift.xml /opt/eap/standalone/configuration\n \n For Wildfly, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=1001:0 ./standalone.xml /wildfly/standalone/configuration\n \n Please take note of the user ownership in these different Dockerfiles. This is quite important as Openshift will\nexpect the user/group ownership to be respected. \n 2. Customize the standalone.xml/standalone-openshift.xml file using environment variables. \n You can now modify your Wildfly/EAP configuration to meet your requirements. Where the configuration could differ\nfrom one environment to a next, we strongly advise using environment variable expressions ( ${env.VAR_NAME} ). The most likely change\nthat would be required in this file is the addition of a datasource. Here is an example of how to add a datasource\nto the datasources subsystem. All the environment variables starting with \'YOURDB\' can be specified from the Docker\ncontainer. \n    ...\n    <subsystem xmlns="urn:jboss:domain:datasources:5.0">\n      <datasources>\n        <datasource jndi-name="${env.YOURDB_JNDI}" enabled="true" use-java-context="true" pool-name="yourDbDataSource" use-ccm="true">\n          <connection-url>${env.YOURDB_URL}</connection-url>\n          <driver>${env.YOURDB_DRIVER}</driver>\n          <security>\n            <user-name>${env.YOURDB_USERNAME}</user-name>\n            <password>${env.YOURDB_PASSWORD}</password>\n          </security>\n        </datasource>\n \n Please take extra care not to remove any lines from these files. This is of particular importance in the case of the\nEAP image as, on startup, scripts in the official EAP look for certain placeholders in this file and populates them\nfrom other environment variables. \n 3. Build your own Docker base image \n You can now build your Docker base image. It is highly recommended that you consider using a dedicated CI/CD build\ntool such as Jenkins X to build the base image and maintain traceability between your source code and the resulting\nDocker image. One possible build command could look like this: \n docker build . -t your-docker-registry.com/your-org/your-base-image:1.0.0 \n 4. Modify your Entando App project to use the new Docker base image \n You can now modify your Entando App project that you have forked as described in the\n relevant tutorial . You would require two changes to the pom.xml file\nof the sample project. \n \n Firstly, you would need to change the variable  server.base.image  to reflect the fully\nqualified URI of your Docker image for EAP and/or Wildfly. For example, if you decided to extend the Wildfly image,\ngo to the Maven profile with the id  wildfly  and change the   server.base.image  to look like this: \n \n <server.base.image>your-docker-registry.com/your-org/your-base-image:1.0.0</server.base.image> \n \n Then you need to change the  <from>  element in the Fabric8 Maven Docker Plugin to reflect this variable.\nNavigate to the first  <image>  element in the pom.xml file. You have found the correct one\nif it contains the following xml: \n \n <from>entando/${server.base.image}:${entando.version}</from> \n Delete the  entando/  prefix and the  :${entando.version}  suffix: \n <from>${server.base.image}</from> \n Please note that, should you still require support for both Wildfly and EAP in your Maven pom, you may need to\nrepeat this exercise for both the  eap  and  wildfly  profiles. \n 5. Build and push your custom Docker image \n Before building your Docker image, it would be a good idea to change the name of the image you want to build. Navigate\nto the previously modified  <image>  element in the Fabric8 Maven Docker Plugin.You can change the  <name>  element\nto reflect your preferred name, e.g. \n <name>your-docker-registry.com/your-org/your-entando-app:1.0.0</name> \n Run: \n mvn clean package -Pwildfly -Pderby \n A new Docker image should now be available named  your-docker-registry.com/your-org/your-entando-app:1.0.0 \n Log into the Docker registry in question and then push the image: \n docker push your-docker-registry.com/your-org/your-entando-app:1.0.0 \n You are now ready to deploy this image. \n 6. Deploy your EntandoApp with the correct environment variables \n The final step is to configure your EntandoApp deployment with the correct environment variables. As is the case with\nall the Entando Custom Resources that result in actual deployments, the property  spec.parameters  will be translated\ninto environment variables on each of the Containers in the Deployment\'s Pod. For an EntandoApp named \'my-app\',\nthe new state of the EntandoApp would could be placed in a file named  my-app.yaml  that would look something like this: \n       kind: "EntandoApp"\n      metadata:\n        name: "my-app"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        customServerImage: your-docker-registry.com/your-org/your-entando-app:1.0.0\n        ingressPath: /your-entando-app\n        parameters:\n          YOURDB_JNDI: java/your-ds\n          YOURDB_URL: jdbc:postgresql://somehost.com:5432/mydb\n          YOURDB_DRIVER: postgresql\n          YOURDB_USERNAME: my_user\n          YOURDB_PASSWORD: mypassword\n      entandoStatus:\n        entandoDeploymentPhase: requested\n\n \n Notice how this Custom Resource specifies a  parameter  for each environment variable that was referenced from the\n standalone.xml  file referenced earlier. \n To apply the changes to your deployment, change the  entandoStatus.entandoDeploymentPhase  property to requested and\napply the file: \n kubectl apply -f my-app.yaml\n \n '},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/connecting-external-db.html",relativePath:"v6.2/tutorials/customize-the-platform/connecting-external-db.md",key:"v-012cd40c",path:"/v6.2/tutorials/customize-the-platform/connecting-external-db.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando applicaiton is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n See  Databases  for other details on Entando databases. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Tutorial: Extending the App Builder",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/extend-app-builder.html",relativePath:"v6.2/tutorials/customize-the-platform/extend-app-builder.md",key:"v-46bd5ad0",path:"/v6.2/tutorials/customize-the-platform/extend-app-builder.html",headers:[{level:2,title:"Creating a Basic Application",slug:"creating-a-basic-application"},{level:2,title:"Understanding the Stand Alone Environment",slug:"understanding-the-stand-alone-environment"},{level:2,title:"Customizing the Menu",slug:"customizing-the-menu"},{level:2,title:"Customizing the menu labels",slug:"customizing-the-menu-labels"},{level:2,title:"Customizing the Routes",slug:"customizing-the-routes"},{level:2,title:"state",slug:"state"},{level:2,title:"Customizing the Reducers",slug:"customizing-the-reducers"},{level:2,title:"userList",slug:"userlist"},{level:3,title:"connecting to the store",slug:"connecting-to-the-store"},{level:2,title:"Page Models",slug:"page-models"},{level:3,title:"Connecting to the Store",slug:"connecting-to-the-store-2"},{level:2,title:"Adding the API Calls",slug:"adding-the-api-calls"},{level:2,title:"Creating the Thunk",slug:"creating-the-thunk"},{level:2,title:"changing the mapDispatchToProps in the containers",slug:"changing-the-mapdispatchtoprops-in-the-containers"},{level:2,title:"Updating the List components",slug:"updating-the-list-components"},{level:2,title:"clear the default value of the reducer",slug:"clear-the-default-value-of-the-reducer"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Tutorial: Extending the App Builder \n Apps for the Entando App Builder are developed as standalone\napplications which can be run using  npm start  in standalone mode. \n Each application should be deployed in npm using the  @entando \nnamespace and will export into their dist folder several items used by\nthe App Builder when integrating it into the full application. \n Creating a Basic Application \n To create a basic application, use the  entando\nfpg  running the\n npx @entando/fpg ab-app <appName>  command. \n the  appName  should only contain alphanumeric characters and\nunderscores, and should begin with a letter. \n This will create inside the working directory, a boilerplate app-builder\napp in a directory named  <appName>  argument. \n i.e. \n using the command  npm @entando/fpg ab-app testing  inside your home\ndirectory, a directory named  testing  will be created containing the\napp. \n All dependencies will already be installed allowing you to  cd  inside\nthe project directory and run  npm start  to start the app running. \n Understanding the Stand Alone Environment \n Each app for the App Builder, can run in both a stand alone mode and an\nintegrated mode. Using  npm start  will use standalone mode. \n In this environment you’ll be looking at the user interface of the app\ninside a default page. This page, which includes a default menu, will\nnot be exported and therefore can be customized. \n To better understand which elements and components are being exported to\nApp Builder, it is best to understand the anatomy of the app. \n Exports \n Each app will have a  babel.js  export file similar to: \n      import  menu  from   'ui/common/LinkMenu' ; \n     import   {  cms  as  state  }   from   'state/rootReducer' ; \n     import   {  routes ,  routesDir  }   from   'ui/App' ; \n     import  en  from   'locales/en' ; \n     import  it  from   'locales/it' ; \n\n     const  testing  =   { \n      id :   'testing' , \n      menu , \n      state , \n      routes , \n      routesDir , \n      locales :   { \n        en , \n        it , \n       } , \n     } ; \n\n     export   default  testing ; \n id: is the app id. \n This parameter is used by App Builder to differentiate all integrated\napps. \n menu: is a React component containing all the menu elements. \n These elements are used inside the standalone environment and inside the\nintegrated environment as a second level menu. The boilerplate app\ncontains a basic menu. \n      import  React  from   'react' ; \n     import   {  LinkMenuItem  }   from   '@entando/menu' ; \n     import   {  FormattedMessage  }   from   'react-intl' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-SECTION_ID\" \n          label = { < FormattedMessage id = \"testing.menu.SECTION_NAME\"  defaultMessage = \"SECTION_NAME\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n\n     export   default  LinkMenu ; \n Customizing the Menu \n For this exercise, we will create two links inside the menu. The first\nwill link to a page listing all the users inside the entando instance.\nThe second will list all the existing page templates inside the Entando\ninstance. \n For this example we’re using existing APIs from the Entando core just\nfor simplicity, you can instead call any API or data source. \n In your app project, open  src/ui/common/LinkMenu.js  and update the\nconst to the code below. \n      const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"testing.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"testing.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n \n it is important that both the  <LinkMenuItem>  id property and the\n`<FormattedMessage>`properties inside label have the correct values\nassigned, i.e.: \n the LinkMenuItem id will be  menu-userList  while the FormattedMessage\nid will be  testing.menu.userList  and the defaultMessage will be\n User List . \n locales \n The locales files are objects that contain all of the i18n locales of\nthe app. \n By default the boilerplate contains both the english and italian i18n\nfiles. \n In your app project in  src/locales/en.js  and  src/locales/it.js  you\ncan see your labels. \n      export   default   { \n      locale :   'en' , \n      messages :   { \n         'testing.title' :   '' , \n         'testing.label.errors' :   '' , \n         'testing.label.cancel' :   '' , \n         'testing.chooseAnOption' :   '' , \n         'testing.tip' :   '' , \n         'testing.new' :   '' , \n         'testing.save' :   '' , \n         'testing.saveAndApprove' :   '' , \n         'testing.unpublish' :   '' , \n         'testing.setContentAs' :   '' , \n         'testing.cancel' :   '' , \n         'testing.saveAndContinue' :   '' , \n         'testing.stickySave.status' :   '' , \n         'testing.stickySave.lastAutoSave' :   '' , \n       } , \n     } ; \n \n While running in standalone mode the boilerplate does not offer a way\nfor the user pick a locale, but both will be loaded inside app-builder\nand will be consumed as intended by it, using the correct one based on\nthe user-picked language. \n It is of course possible to change the standalone app to give the user\nthe option to choose the locale in here as well, but this is not\nsomething will be covering in this tutorial. \n Customizing the menu labels \n To customize the existing menu labels, we’ll add the new label ids\ninside both the english and Italian locale files: \n \n Note \n If you named your app something besides  testing  you’ll need to fix\nthese tags to match the name of your app. \n \n      ... \n    messages :   { \n         ... \n         'testing.menu.userList' :   'List of Users' , \n         'testing.menu.pageModelList' :   'Page Models' , \n         ... \n     } , \n     ... \n \n The key in the messages object matches the id of the\n`<FormattedMessage>`component we placed inside the menu, while its\nvalue is the actual string that will be displayed depending on the\ncurrently active language. \n Routes and RoutesDir \n Both of these elements are imported from  src/ui/App.js . The first one\nis a collection of actual  <Route>  components, and the second one is an\nobject containing each route data, i.e.: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n     ] ; \n \n The constant  ROUTE_TESTING  is imported from  src/app-init/routes.js \n Customizing the Routes \n Next we will create the two routes for the two links we have created by\ncreating first the two constants needed. \n In your IDE open  src/app-init/routes.js \n      export   const   ROUTE_TESTING   =   '/testing' ; \n     export   const   ROUTE_USER_LIST   =   '/testing/user-list' ; \n     export   const   ROUTE_PAGE_MODELS   =   '/testing/page-models' ; \n \n \n Note \n Change the value of  testing  to what you selected for the name of\nyour App extension. \n \n The value of each constant will be the path of the route. It is\nimportant that each route is a subroute of the id of the app itself,\notherwise this may cause name collision when running inside the\nintegrated environment of app-builder. \n Both routes are next imported inside  App.js : \n Update the imports with your new ROUTE tags. \n      import   { \n       ROUTE_TESTING , \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n \n and then add to the  routesDir  constant: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n       { \n        path :   ROUTE_USER_LIST , \n         render :   ( )   =>   < > user list < / > , \n       } , \n       { \n        path :   ROUTE_PAGE_MODELS , \n         render :   ( )   =>   < > page models < / > , \n       } , \n     ] ; \n \n Next, import the routes constants inside  LinkMenu.js  and change\naccordingly the  to  property of the  <LinkMenuItem>  component: \n      ... \n     import   { \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"tatata.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = { ROUTE_USER_LIST } \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"tatata.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = { ROUTE_PAGE_MODELS } \n         / > \n       < / > \n     ) ; \n     ... \n \n Next clicks on the links in the menu will change the routes and display\nthe content defined in the  App.js  file. \n state \n The state in src/babel.js is the combined reducer of the app, the\nrootReducer.js contains the combined reducer of the app and exports it,\nbut also contains the entire reducer of the app when running in\nstandalone mode. \n      export   const  testing  =   combineReducers ( { \n       // implement here your app specific reducers \n     } ) ; \n\n     export   default   combineReducers ( { \n      apps :   combineReducers ( {  testing  } ) , \n      api , \n      currentUser , \n      form , \n      loading , \n      locale , \n      messages , \n      modal , \n      pagination , \n     } ) ; \n \n The app specific reducers are stored inside the  apps  object, this is\ndone to avoid possible name collisions with any reducer stored inside\napp-builder when running the app in integrated mode. \n Customizing the Reducers \n Next we will be creating the two reducers for the user list and page\nmodels. They will be created inside two new directories\n src/state/apps/testing/userList/  and\n src/state/apps/testing/pageModels . The  types.js  files will contain\nthe two action types that we’ll need. \n userList/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_USERS = 'apps/testing/add-users';\n \n pageModels/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_PAGE_MODELS = 'apps/testing/page-models/add-page-models';\n \n The value of both constants contain the whole namespace\n apps/testing/REDUCER  this is done to avoid any possible name collision\nwhen running the app in integrated mode. \n Next create both actions files: \n userList/actions.js \n      import   { \n       ADD_USERS , \n     }   from   'state/apps/testing/userList/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addUsers   =   users   =>   ( { \n      type :   ADD_USERS , \n      payload :  users , \n     } ) ; \n \n pageModels/actions.js \n      import   { \n       ADD_PAGE_MODELS , \n     }   from   'state/apps/testing/pageModels/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addPageModels   =   pageModels   =>   ( { \n      type :   ADD_PAGE_MODELS , \n      payload :  pageModels , \n     } ) ; \n \n then the selectors: \n userList/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getUserList   =   state   =>  state . apps . testing . userList ; \n     export   const  getList  =   createSelector ( getUserList ,   userList   =>  userList . list ) ; \n \n pageModels/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getPageModels   =   state   =>  state . apps . testing . pageModels ; \n     export   const  getList  =   createSelector ( getPageModels ,   pageModels   =>  pageModels . list ) ; \n \n And finally the reducers. The default state is going to contain some\nsample data for us to display. \n userList/reducer.js \n      import   {   ADD_USERS   }   from   'state/apps/testing/userList/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'active' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'admin' , \n            email :   'admin@entando.com' , \n           } , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'disabled' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'User Name' , \n            email :   'user1@entando.com' , \n           } , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_USERS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n pageModels/reducer.js \n      import   {   ADD_PAGE_MODELS   }   from   'state/apps/testing/pageModels/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          code :   'home' , \n          descr :   'Home Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n         { \n          code :   'service' , \n          descr :   'Service Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_PAGE_MODELS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n Last, we can add the two reducers just created to the\n src/state/rootReducer.js \n      ... \n     import  userList  from   'state/apps/testing/userList/reducer' ; \n     import  pageModels  from   'state/apps/testing/pageModels/reducer' ; \n\n     export   const  testing  =   combineReducers ( { \n      pageModels , \n      userList , \n     } ) ; \n     ... \n \n we will now be able to see with the  reduxDevTools  in our browser. To\nview this state in your reduxDevTools go to: \n State -→ apps -→ testing -→ pageModels  and\n State -→ apps -→ testing -→ userList \n Creating the UI Components \n At this point, both routes created should be rendering a simple string.\nWe will next create the actual component that will be rendered inside\nthe page. \n userList \n Inside  src/ui/userList/  create the  List  component. Create the\n userList  directory and  List.js  file in that directory. \n      import  React  from   'react' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( )   =>   { \n       const  data  =   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n       ] ; \n\n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n               < tr > \n                 < td > username < / td > \n                 < td > registration < / td > \n               < / tr > \n             < / thead > \n             < tbody > \n               { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Next, change the route inside  src/ui/App.js . Add the import below and\nupdate the component to reference the List component created in the\nprior step. \n      ... \n     import  List  from   'ui/userList/List' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  List , \n       } , \n     ... \n \n The table will now display correctly when clicking on the menu item. \n connecting to the store \n Next let’s connect the component to the store to get the data from the\nreducer. \n The first step is creating the  ListContainer.js  next to the  List \ncomponent file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/userList/selectors' ; \n\n     import  List  from   'ui/userList/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The List\nfile should now look like this: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Make sure that you remove the predefined  data  const since the data\nwill now be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js .\nUpdate the import to the container and update the component in\n ROUTE_USER_LIST  to the new ListContainer. \n      ... \n     import  ListContainer  from   'ui/userList/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  ListContainer , \n       } , \n     ... \n \n Go back to your app. We will now see the data inside the table\nreflecting the content of the storage. \n Page Models \n inside  src/ui/pageModels/  we are going to create the  List  component \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n\n     export   default  List ; \n \n Next change the route inside  src/ui/App.js \n      ... \n     import  ListPageModels  from   'ui/pageModels/List' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  ListPageModels , \n       } , \n     ... \n \n The table will now be displayed correctly when clicking on the menu\nitem. \n Connecting to the Store \n Next, connect the component to the store to get the data from the\nreducer. \n The very first thing we’ll do is create the  ListContainer.js  next to\nthe  List  component file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/pageModels/selectors' ; \n\n     import  List  from   'ui/pageModels/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The whole\nList component will have this content: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . code } < / td > \n           < td > { row . descr } < / td > \n         < / tr > \n       ) ) ; \n\n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > code < / td > \n               < td > descr < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n     export   default  List ; \n \n Next make sure that you remove the predefined  data  const since the\ndata will be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js \n      ... \n     import  PageModelsListContainer  from   'ui/pageModels/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  PageModelsListContainer , \n       } , \n     ... \n \n You will now see the data inside the table reflecting the content of the\nstorage. \n Connecting the app to an Entando core instance \n By default the app is using mocks and not connecting to any Entando core\ninstance. \n Because the app is making use of  @entando/apimanager  we can easily\nchange this by setting up two  .env  variables inside the  .env  file in\nthe project root: \n     REACT_APP_DOMAIN=http://localhost:8080/entando-app\n    REACT_APP_USE_MOCKS=false\n \n The  REACT_APP_DOMAIN  must pointing towards the domain and container\nwhere the Entando instance is running and  must not  contain trailing\nslashes. \n Once this is done to make the change happen we will have to stop the app\nusing  ctrl + c  and re run it with  npm start . \n Now the toast stating  This application is using mocks  won’t be popping\nup anymore. \n You can make sure that the configuration is correct by looking at the\nnetwork section in the browser dev tools. By default the app\nautomatically makes an admin login against a plain Entando instance to\nauthenticate the user and to be able to consume any protected api. \n This is not an ideal scenario and it is meant to be used only for\ndebugging purposes for many reasons: \n \n \n the username and password should never be hardcoded in your app \n \n \n if authentication is required the user should be the one performing\nthe login action \n \n \n the plain default passwords in use won’t be useful against a proper\nproduction instance of Entando \n Adding the API Calls \n We are now going to add api calls for both users and page models to\nretrieve the data live instead of relying on our store’s default state. \n Inside  src/api  create the  users.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   ( \n       makeRequest ( \n         { \n          uri :   ` /api/users ${ params } ` , \n          method :   METHODS . GET , \n          mockResponse :   { } , \n          useAuthentication :   true , \n         } , \n        page , \n       ) \n     ) ; \n \n and then create the  pageModels.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   makeRequest ( { \n      uri :   ` /api/pageModels ${ params } ` , \n      method :   METHODS . GET , \n      mockResponse :   { } , \n      useAuthentication :   true , \n     } ,  page ) ; \n Creating the Thunk \n In order to use the api call we next create a thunk action, which is a\nredux action with side effects, like an API call. \n inside the  src/state/apps/testing/userList/actions.js  file we are\ngoing to add the new action: \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getUsers , \n     }   from   'api/users' ; \n     ... \n\n     // thunks \n\n     export   const  fetchUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getUsers ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( json )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addUsers ( json . payload ) ) ; \n             }   else   { \n               dispatch ( addErrors ( json . errors . map ( err   =>  err . message ) ) ) ; \n             } \n             resolve ( ) ; \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Next do the same inside  src/state/apps/testing/pageModels/actions.js : \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getPageModels , \n     }   from   'api/pageModels' ; \n     ... \n\n     // thunks \n\n     export   const  fetchPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getPageModels ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( data )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addPageModels ( data . payload ) ) ; \n               resolve ( ) ; \n             }   else   { \n               dispatch ( addErrors ( data . errors . map ( err   =>  err . message ) ) ) ; \n               resolve ( ) ; \n             } \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Now with two exports, it is safe to remove the\n eslint-disable-next-line  comment on line 5 of both files. \n changing the mapDispatchToProps in the containers \n Next, in order to pass the newly created thunk to both List components,\nwe’ll update the containers accordingly, as: \n src/ui/userList/ListContainer.js \n      ... \n     import   {  fetchUsers  }   from   'state/apps/testing/userList/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchUsers ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n \n src/ui/pageModels/ListContainer.js \n      ... \n     import   {  fetchPageModels  }   from   'state/apps/testing/pageModels/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchPageModels ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n Updating the List components \n Both List components were simple components with only a  render  method,\ntherefore could be declared as simple constants. \n Next we will fetch data during the  componentDidMount  life cycle event\nwhich will require we turn the constant into a class on top of changing\nthe PropTypes to add the new fetch method passed down to the component. \n src/ui/userList/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . username } < / td > \n             < td > { row . registration } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > username < / td > \n                   < td > registration < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n \n src/ui/pageModels/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . code } < / td > \n             < td > { row . descr } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > code < / td > \n                   < td > descr < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n clear the default value of the reducer \n Now we should be fetching data from the server, therefore we can safely\nmake the list key in the  defaultState  object an empty array: \n src/state/apps/testing/userList/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n \n src/state/apps/testing/pageModels/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n adding additional dependencies \n It may be necessary to set additional dependencies for your project. If\nthe need arises, it is important to remember a few rules: \n Only actual dependencies that are not already included in  app-builder \ncan be added as pure dependencies. Every other dependency must either be\na  devDependency  or  peerDependency . \n If you are not careful you may end up with duplicated dependencies that\n will  result in errors manifesting themselves when running the app\ninside App Builder. \n running the app in integrated mode within App Builder \n After running  npm install  in the App Builder, the user can run the\n npm run app-install <appId>  command to install the app. \n This command will trigger a download of the app from npm and the\ninstallation of its component within App Builder. After the installation\nprocess is complete, it will be possible to either  npm start  or\n npm build  App Builder. \n To install a dev app, like the one developed in this tutorial which have\nnot been previously published on npm, you will need to use additional\nflags and will have to run a few additional commands. \n Before running the Install command  make sure that you have\nuninstalled all existing peer and dev dependencies to avoid collision\nwith app builder. To do so, from the app builder app directory\n( testing , in this tutorial) just run in the correct order the\nfollowing commands: \n npm run babel \n npm i --only=production \n The first will create the dist directory that will be needed by App\nBuilder while the second one will uninstall anything but production\ndependencies. \n Next, from the App Builder directory, run the install command with these\nadditional flags: \n \n \n -d  specify the relative path where the app is installed. When\nusing this flag the appId should be the normalized app name, without\nthe  @entando/  prefix. \n \n \n -p  specify the package name if it is different from the appId \n \n \n to use flags you will have to use the double dash in the command: \n npm run app-install —  cms -d ../testing -p @entando/testing \n the value in the  -p  flag should always match the actual name of the\napp that is going to be installed inside App Builder . You can check\nyour app name inside the  package.json  file of your app. \n If you experience problems after running the build command delete the\n node_modules  directory before running the second command. \n"},{title:"Tutorial: Invoking Entando Core APIs",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/invoking-api.html",relativePath:"v6.2/tutorials/customize-the-platform/invoking-api.md",key:"v-69b9a4cc",path:"/v6.2/tutorials/customize-the-platform/invoking-api.html",headers:[{level:2,title:"General Overview",slug:"general-overview"},{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Set up a Postman environment",slug:"_1-set-up-a-postman-environment"},{level:3,title:"2. Get an access token",slug:"_2-get-an-access-token"},{level:3,title:"2. Prepare a generic API request",slug:"_2-prepare-a-generic-api-request"},{level:2,title:"QE ready APIs",slug:"qe-ready-apis"},{level:2,title:"Notes on QE requests collections structure",slug:"notes-on-qe-requests-collections-structure"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Tutorial: Invoking Entando Core APIs \n General Overview \n Entando supports Swagger and it is accessible, if activated, from its\nweb interface from the base application URL at /api/swagger-ui.html. A\ncomplete list of all available core APIs can be obtained from Swagger. \n Core APIs can be invoked directly from Swagger or from any other\nsuitable tool, i.e., curl or Postman are two common ones. Postman has\nbeen extensively used in API testing and automated API testing because\nof the possibilities it offers and it is the suggested tool. \n All Entando core APIs are accessible from the base URL, for example:\nlocalhost:8080/entando-de-app/api. For example, the Page Controller will\nbe available under /pages from the Base URL (i.e.\nlocalhost:8080/entando-de-app/api/pages), or the Page Template Controller\nwill available under /pageModels (i.e.\nlocalhost:8080/entando-de-app/api/pageModels) and so on. \n Before being able to perform any API request, we will first need to\nobtain an  authorization token , that is achieved with a specific POST\nrequest sent to the oauth/token endpoint, after successful\nauthentication, an access token is returned which grants access to all\nAPI endpoints and actions for which the authenticated user has defined\nprivileges. \n (Refer to User Management Roles for details) \n The best way to proceed in case of extensive testing with APIs with\nPostman, is to set up an environment and define a variable that will\nkeep the access token saved from the POST request to /oauth/token. \n Purpose \n Set up an environment ready to invoke Entando core APIs \n Requirements \n To complete this tutorial you will need: \n \n \n Postman \n \n \n A running Entando 6 instance \n Steps \n 1. Set up a Postman environment \n Create a new Postman environment and define the following variables: \n access_token: (no value)\nrefresh_token: (no value)\nurl: URL of your application (i.e. http://localhost:8080/entando-de-app)\n \n Be careful with the URL variable and make sure you do not have a\ntrailing slash. \n Set Postman to use this environment. \n 2. Get an access token \n Getting an access token is a prerequisite to be able to invoke any API.\nThe following is the required activity. \n \n \n create a Postman collection, name it for example "Access Token" \n \n \n create a new POST request with the following parameters: \n \n \n \n URL field\n{{url}}/api/oauth/token\n \n Note that we are calling the "url" environmental variable for\nconvenience. \n Autorization section\n   Type: Basic Auth\n   Username: (a valid Entando consumer must be defined in Entando) (Refer to appropriate documentation on how to do that) (i.e. appbuilder)\n   Password: (password of the defined consumer) (i.e. appbuilder_secret)\n\nHeaders section\n    Content-Type: application/x-www-form-urlencoded\n\nBody section\nSelect from the radio button the option: x-www-form-urlencoded\n    username: (valid Entando user (i.e. admin))\n    password: (password of the valid user)\n    grant_type: password\n \n The tests section is convenient as we can then set any new API request\nin such a way to make use of that access token. The first line of code\ndefines a variable called "data", which hosts the JSON parsed\nresponseBody from the POST request just sent to /oauth/token; The second\nline sets the environment variable "access_token" to the value returned\nby the POST request. \n Tests section\n    var data = JSON.parse(responseBody);\n    postman.setEnvironmentVariable("access_token", data.access_token);\n \n Launch the POST request to test it, and if successful, you should get a\nresponse like this: \n {\n    "access_token": "b96096493a40b1a7364bd54a6ffb609b",\n    "token_type": "bearer",\n    "refresh_token": "79ff84062b5dc13663961a833b0788f9",\n    "expires_in": 3599\n}\n \n also if you open in edit the Postman environment, you should see that\nthe access_token and the refresh_token variables values have been\nupdated. \n 2. Prepare a generic API request \n Create a new request with the following parameters: \n Authorization section: Inherit auth from parent\n\nHeaders section:\n create the key Authorization with Value: Bearer{{access_token}}\n create the key Content-Type with Value: application/json\n \n Select the appropriate method (GET, DELETE, POST etc.) for your request\nand fill up the URL with appropriate values i.e.\n(localhost:8080/entando-de-app/api/pages) then add to the Body section,\nif needed, the appropriate payload in JSON format, remember to select\nraw and JSON (application/json). \n QE ready APIs \n QE has developed a set of collection requests to automate API testing,\nexamples of that are available on github at\n https://github.com/entando/entando-QE/tree/master/postman_API . \n To use them ,first git clone the project and use the built in Postman\nimporting features. \n Import first the Postman Environment file which can be found under the\nenvironment folder. When imported, from Postman, open in edit that\nenvironment and change the "url" variable to the appropriate value for\nyour specific installation, i.e  http://localhost:8080/entando-de-app/ \nand save it. \n Import from Postman the collections you would like to use and they will\nbecome available in the Postman collections Panel ready to be run. \n Notes on QE requests collections structure \n Each collection is so designed to test a particular use case i.e.\n"Delete an existent page", "Delete a page which has children" etc. \n By design each QE Postman collection is: \n \n \n indipendent (does not require other collections) \n \n \n general (does not make any assumption on the specific Entando\napplication) \n \n \n can be run automatically, with newman, please refer to\n https://github.com/entando/entando-QE  for details \n \n \n Following those requirements, each collection will need to "prepare" the\nenvironment for the actual test. That is achieved by using specific\nrequests, called "helpers", and their only purpose is to create/delete\nall the needed objects. \n Another class of helpers is used to check the persistence of the actions\nperformed by the APIs, i.e. check that after a DELETE, something really\nhas been deleted. \n The request that implements the use case, we can call it main request,\ndoes not contain the word "HELPER" in its name, and it is the only one\ninside a given collection. \n Because collections are designed primarily to run automatically, we have\ndone extensive use of collection variables, so variables like the API\nURL, object names, object codes or payloads are usually defined as a\ncollection variable and can be accessed by all requests inside the\ncollection. \n Conclusion \n This guide let you start invoking Entando 6 APIs \n'},{title:"Backing Up and Restoring an Entando Application",frontmatter:{},regularPath:"/v6.2/tutorials/devops/backing-up-and-restoring-your-environment.html",relativePath:"v6.2/tutorials/devops/backing-up-and-restoring-your-environment.md",key:"v-5d8b05c6",path:"/v6.2/tutorials/devops/backing-up-and-restoring-your-environment.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Create a Backup",slug:"create-a-backup"},{level:2,title:"Restore a Backup",slug:"restore-a-backup"}],lastUpdated:"9/22/2020, 9:00:39 AM",content:' Backing Up and Restoring an Entando Application \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n \n \n This tutorial will show you how you can use an Entando application that\nyou have built as a launching point for creating new applications. \n Create a Backup \n This step requires using a running Entando environment to take an application backup.\nThe output of this step is a local directory with the files (database and static assets) you can use to restore the application later. \n \n \n Log into  App Builder \n \n \n Go to  Configuration -> Database \n \n \n Click on  Create A Backup  and wait for the process to complete. All of the static assets and database backups are persisted to a PVC in /entando-data on the server pod. \n \n \n Transfer the files from the server-container. The details will vary depending on your kubernetes environment. \n \n \n \n \n \n kubectl \n OpenShift \n \n \n \n \n kubectl cp <pod>:<path> <local-path> \n oc rsync <pod>:<path> <localPath> \n \n \n e.g. kubectl cp quickstart-server-deployment-7b8c699599-f84zq:/entando-data backup \n e.g. oc rsync app-entando-server-deployment-67fd5b9954-s72mb:/entando-data \n \n \n \n \n You should see 3 directories -  databases ,  protected , and  resources .\nThe  protected  directory contains the timestamped backup you triggered from the  App Builder . \n Restore a Backup \n In this lab you’ll take a previously built demo application, install the\nbackup files, build a Docker image from the updated app, and deploy it as a new application. \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the  entando-de-app  you just cloned: \n cd entando-de-app\n \n \n \n Take the backup file and unzip it in a location of your choice. \n \n \n This zip contains all of the assets, content, and metadata\nneeded to launch an Entando application. We are going to package\nthe static assets and database backup into a Docker image. \n \n \n Entando will automatically instantiate and populate the app from\nthe most recent backup \n \n \n \n \n Move the resources and protected folders from your Entando backup into your\n entando-de-app  application under  src/main/webapp  replacing any content that is\nalready there. \n \n \n Build a docker image from the app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n Note that the "derby" option here is only for the initialization\nphase of the DB when deploying. It isn’t the final database\nchoice \n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for the following: \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker account to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Now we need to generate a new application for deployment to\nKubernetes using the helm chart \n \n \n If you have an output from helm from before you can re-use it\nand just apply the changes to the config map. In this case skip to step 12. \n \n \n Or you can re-run helm and change the output \n \n \n \n \n Re-run the helm command for your environment \n \n \n Open the output yaml file from the helm command in the text editor\nof your choice \n \n For example:  vi training-alpha.yaml \n \n \n \n In that file look for the  ConfigMap \n \n \n The config map defines all of the images that are available as\npart of the deployment. They aren’t all used concurrently. \n \n \n You can also view this config map in  kubernetes/OpenShift \n \n \n \n \n Now you need to update the deployment to use your customized Wildfly\nimage. Find  entando-de-app-wildfly  in the config map \n \n Note that we are changing the de-app but you could create a\ncustom version of any of the included images \n \n \n \n Change the version to match the version you used for your image \n \n \n Change the "organization" to the name of your main image repository\norganization and if you aren’t using docker.io (DockerHub) then\nchange the registry as well. \n \n \n Save the file \n \n \n Follow the deployment steps you went through when you originally\ndeployed your Entando application to your Kubernetes instance \n \n \n Once deployed go to the  App Builder  in your app \n \n \n Click  Go To Homepage  and you should see your restored application. \n \n \n'},{title:"Building a Docker Image for the Entando Core",frontmatter:{},regularPath:"/v6.2/tutorials/devops/build-core-image.html",relativePath:"v6.2/tutorials/devops/build-core-image.md",key:"v-2659ff40",path:"/v6.2/tutorials/devops/build-core-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Building a Docker Image for the Entando Core \n Prerequisites \n \n \n Java 8 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will take you through the basic steps to create a docker\nimage from an Entando core application. A more detailed guide with\nadditional commands and configuration can be found here: \n https://github.com/entando-k8s/entando-de-app \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Build a docker image from the core app \n mvn clean package -Pwildfly -Pderby docker:build\n \n \n \n View the images installed on your local docker instance \n docker images\n \n Look for \n entando/entando-de-app:latest\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Re-tag the image you just built with your repo \n  docker tag entando/entando-de-app:latest <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:latest\n \n \n \n"},{title:"Business Objective",frontmatter:{},regularPath:"/v6.2/tutorials/customize-the-platform/pda-tutorial.html",relativePath:"v6.2/tutorials/customize-the-platform/pda-tutorial.md",key:"v-102cf958",path:"/v6.2/tutorials/customize-the-platform/pda-tutorial.html",headers:[{level:2,title:"Micro Frontend",slug:"micro-frontend"},{level:2,title:"Process Automation Manager (PAM)",slug:"process-automation-manager-pam"},{level:2,title:"Business Process Modeling Notation (bpmn)",slug:"business-process-modeling-notation-bpmn"},{level:2,title:"Decision Model and Notation (dmn)",slug:"decision-model-and-notation-dmn"},{level:2,title:"Back End for Front End (BFF)",slug:"back-end-for-front-end-bff"},{level:2,title:"Task List",slug:"task-list"},{level:3,title:"PAM Implementation",slug:"pam-implementation"},{level:2,title:"Task Details",slug:"task-details"},{level:3,title:"PAM Implementation",slug:"pam-implementation-2"},{level:2,title:"Task Comments",slug:"task-comments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-3"},{level:2,title:"Task Forms",slug:"task-forms"},{level:3,title:"PAM Implementation",slug:"pam-implementation-4"},{level:2,title:"Attachments",slug:"attachments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-5"},{level:2,title:"New Process Form",slug:"new-process-form"},{level:2,title:"Summary Card",slug:"summary-card"},{level:3,title:"PAM Implementation",slug:"pam-implementation-6"},{level:2,title:"Totals Over Time",slug:"totals-over-time"},{level:3,title:"PAM Implementation",slug:"pam-implementation-7"},{level:2,title:"Styling",slug:"styling"},{level:2,title:"Implementing a New Engine or Integrating a New Task Source",slug:"implementing-a-new-engine-or-integrating-a-new-task-source"},{level:2,title:"Page Templates and Layout",slug:"page-templates-and-layout"},{level:2,title:"Creating a new PDA MFE",slug:"creating-a-new-pda-mfe"},{level:2,title:"Communication between MFEs",slug:"communication-between-mfes"},{level:2,title:"Micro Frontend Overview",slug:"micro-frontend-overview"},{level:3,title:"Task forms",slug:"task-forms-2"},{level:2,title:"Widgets",slug:"widgets"},{level:2,title:"Building From source",slug:"building-from-source"},{level:2,title:"Code Style",slug:"code-style"},{level:2,title:"Sonar",slug:"sonar"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Business Objective \n The Entando Process Driven Applications plugin is built to provide a\nrich and full featured user experience to allow for the management and\ncompletion of business processes and automation. The UX is delivered a\ngeneral purpose UX layer built using micro frontends that can be\nutilized for any business process or task engine. Customers drive the UX\nlayer by utilizing a pre-developed Entando integration or by\nimplementing a set of interfaces on the server side. The backend is a\nSpring Boot microservice that provides a pluggable interface allowing\nfor the injection of any underlying process or automation toolkit. The\ninterfaces and steps for creating a new PDA backend implementation are\nprovided below. This document provides an overview of the Entando\nProcess Driven Apps (PDA) plugin. The initial section covers the\nbusiness functionality and user facing micro frontends. The second\nsection covers the architecture and the points of extension for the PDA\nplugin. The third provides a detailed technical overview for developers\nto add new functionality to a PDA implementation. \n Terminology \n Micro Frontend \n A Micro frontend architecture is an approach to developing web\napplication as a composition of small frontend apps. Instead of writing\na large monolith frontend application, the application is broken down\ninto domain specific micro frontends, which are self-contained and can\nbe developed and deployed independently. \n Process Automation Manager (PAM) \n A business process automation engine built and maintained by Red Hat \n Business Process Modeling Notation (bpmn) \n Business Process Model and Notation (BPMN) is a graphical representation\nfor specifying business processes in a business process model. \n Decision Model and Notation (dmn) \n Decision Model and Notation is a standard published by the Object\nManagement Group. It is a standard approach for describing and modeling\nrepeatable decisions within organizations to ensure that decision models\nare interchangeable across organizations. \n Back End for Front End (BFF) \n A microservice architecture allows teams to iterate quickly and to\ndevelop technology to scale rapidly. The Backend for Frontend (BFF)\narchitecture is a type of pattern built with microservices. The key\ncomponent of this pattern is an application that connects the front-end\nof your application with the backend. This BFF Code Pattern will help\nyou build that component according to IBM’s best practices. \n PDA Micro Frontends \n This section provides an overview of each of the micro frontends (MFE)\nthat are available as part of the Entando PDA plugin. In cases below\nwhere there are details specific to the PAM implementation they are\nprovided for that MFE. When extending the integration layer to other\nengines or custom implementations it will be up to the integrating team\nto define behavior and datasource for each MFE. \n Task List \n The task list MFE provides a user with a list of visible tasks that are\neither assigned to that user or that are potentially ownable by that\nuser. In the default implementation the visible tasks are limited to a\nsingle process instance. At configuration time the application designer\nis given the option to select a set of columns that will be visible in\nthe task list for that page. \n PAM Implementation \n The default PAM implementation makes the top level task fields available\nin the task list for selection. It is possible to fetch task and process\nvariables for rendering in the task list but these values are excluded\nby default due to the additional API call overhead required. \n Task Details \n The task details MFE renders detailed information about a given task.\nThe task details widget is intended to give the final user processing a\ntask the information necessary to complete the task at hand. The task\ndetails are rendered in a read only grid. See the styling section below\nfor changing and customizing the layout. \n PAM Implementation \n The PAM integration renders task variables in the task details widget. \n Task Comments \n The task comments MFE gives the user the ability to view notes attached\nto a given task and to add new notes to a task. \n PAM Implementation \n The PAM implementation reads and publishes notes to the comments\nendpoint \n Task Forms \n The task form implementation renders a form specific to a task and gives\nthe user the ability to complete that form. The form implementation is a\nwrapper around a JSON schema that describes the layout, style and\ncontent of the form. It is up to the backend implementation to transform\nto the schema and default ux layout needed to render the form. See the\ntechnical documentation below for more on the JSON schema based\nimplementation. \n PAM Implementation \n The PAM implementation of forms depends on the presence of a form\ndefinition being present on the PAM task. The Entando PAM engine\nimplementation transforms from the PAM format to the JSON schema to\nrender the form. And it transforms the API format back to the PAM format\nbased on the form definition in PAM. There are some limitations on form\ncustomization due to the format required to return data to PAM. See the\nforms section in the technical documentation for more information. \n Attachments \n The attachments MFE gives the user to view documents attached to a\ntask/case/process and to add new documents to a task/case/process. \n PAM Implementation \n The PAM implementation posts the documents to the PAM endpoints for\nstorage. Future features will include using Entando document storage for\nstoring documents and a pluggable document management interface. \n New Process Form \n The new process form renders a form that allows the final user to\nprovide the information necessary to instantiate a new business process\ninstance. The technology for generating the process form is the same as\nthe JSON schema definition used for task forms. === PAM Implementation\nThe PAM implementation depends on a form definition being attached to\nthe process definition. Entando transforms the PAM representation into a\nJSON schema form that can be rendered to the final user. \n Summary Card \n The summary card MFE provides a view into aggregate data for the process\nimplementation. The rendered information includes a total value, a trend\nvalue, and a selector for timeframe. The summary card allows the\napplication developer to select a request for rendering the requested\ninformation which maps to a call in the underlying engine to provide the\nsummarized data. \n PAM Implementation \n The PAM implementation of the summary card widget relies on the PAM\ncustom query functionality. The PAM PDA engine exposes configuration\nthat allows users/developers to define a custom query in a config file\nthat will be executed to render the summary card. This implementation\nallows the data rendered on the summary cards to be changed via\nconfiguration. In the application there is a properties file that allows\nthe implementer to provide a custom query for each of the cards. \n Totals Over Time \n The totals over time MFE provides a dual axis line/bar graph providing\ntrend information about the process environment. The MFE also provides\nthree summary values for comparison over the same time period. \n PAM Implementation \n The PAM implementation of the totals over time MFE utilizes custom\nqueries to fetch the summary data rendered in the chart. The queries\nused in the implementation are defined in configuration files in the MFE\nand can be updated to render data specific to a given implementation. \n Customizing the Process Driven Application \n Styling \n The Entando PDA MFEs are styled via a material UI theme. That theme can\nbe downloaded and updated here:\n https://github.com/entando/frontend-libraries/tree/master/packages/entando-ui \n Implementing a New Engine or Integrating a New Task Source \n Implementing a new Engine for Process Driven Applications means to\ncreate a new Java Project and implement the interfaces defined in the\npda-core-engine project. So, the new project should include the\npda-core-engine as a dependency. To see an implementation in action,\ntake a look at the pda-redhatpam-engine project, which implements the\nRed Hat PAM engine integration. After the engine is implemented, the JAR\nfile resulting from the implementation should be available in the\nclasspath for entando-process-driven-plugin, which is the project that\nis ultimately executed and exposes the Rest APIs for the frontend\napplication. One way to do that is by publishing the engine\nimplementation to a Maven repository and adding it as a dependency to\nthe entando-process-driven-plugin project. Below are the descriptions of\nthe key classes and interfaces in the pda-core-engine project that need\nto be inherited or implemented when creating a new engine\nimplementation: \n \n \n Engine: This class represents a BPM engine and exposes the services\nthat are available for that specific implementation. It is intended\nto be inherited and the subclass should provide the real\nimplementation for each service by calling the superclass\nconstructor with the service implementations as arguments. If any\nservice is not supported, a null value should be passed to the\ncorresponding constructor argument. The engine can provide\nimplementations for the the following service interfaces: \n \n \n TaskService: defines service methods for task retrieval from the\nBPM engine. \n \n \n TaskDefinitionService: defines service methods related to task\ndefinition. A task definition specifies which fields or columns\nare available for all task instances. \n \n \n TaskCommentService: defines service methods related to task\ncomment manipulation. It should be implemented if the task\ncomment is supported by the engine. \n \n \n TaskAttachmentService: defines service methods to operate on\ntask attachments. It should be implemented if the engine\nsupports file attachment on the task. \n \n \n TaskFormService: defines service methods for task form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n TaskLifecycleService: defines service methods related to the\ntask lifecycle. The lifecycle operations move the task from one\nstate to another. \n \n \n TaskLifecycleBulkService: defines methods for bulk lifecycle\noperations. Like the TaskLifecycleService, methods here move the\ntask from one state to another, but this interface works with\nmultiple tasks at a time. \n \n \n ProcessService: defines service methods for process definitions\noperations. \n \n \n ProcessFormService: defines service methods for process form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n GroupService: define service methods related to groups from the\nBPM engine. \n Page Templates and Layout \n Page templates are page templates that facilitate rapid development of\npages and allow adding pre-made components - widgets - just by drag &\ndropping. Templating language used in page templates is parsed by Apache\nFreeMarker template engine. To create a new page model, go to the Admin\npanel and select UX Pattern > Page Templates. Press “Add” and you will be\nredirected to the page template creation screen. Add the page template code\nand page template name. Depending on the version you are using you will\nneed to provide a XML or JSON schema. This schema is used to generate\nthe page layout in page configuration screen - it’s used to drag & drop\nwidgets on the page and helps users visualize where each widget will be\nplaced on the page. Basic schema could look like this \n {\n  "frames": [\n    {\n      "pos": 0,\n      "descr": "Widget description",\n      "mainFrame": false,\n      "defaultWidget": null,\n      "sketch": {\n        "x2": 1,\n        "y2": 0,\n        "x1": 0,\n        "y1": 0\n      }\n    }\n  ]\n}\n \n Each item in the frames array represents a widget frame (slot). \n \n \n pos - a position index (starts from zero); this value is used in\nAPIs to address specific widget on the page \n \n \n descr - widget frame description that is displayed in page\nconfiguration screen \n \n \n mainFrame - The primary frame on the page template \n \n \n defaultWidget - widget code for a default widget to use in this\nframe; page template developer can help out users and suggest the\ndefault widgets to use (e.g., header and footer widgets) \n \n \n sketch - an object with 4 coordinates on x and y axises; this allows\nthe developer to place the widgets on the visual representation of\nthe page template’s frames. \n \n \n Sketch’s x and y values go from 0 to 11 (similar to columns in\nBootstrap), so if you want to place a 2x2 frame at the top left corner\nof the page, the values would be x1: 0, x2: 1 y1: 0 y2: 1. \n After you create the JSON/XML schema for the widgets, you can start\nworking on the page template itself. It’s a HTML template that contains\nreferences to the frames you have added in schema. To add a frame in a\nspecific place of the page, just add  <@wp.show frame=0 /> , where frame\nis the pos variable from the schema. Do not forget to add\n <#assign wp=JspTaglibs["/aps-core"]>  at the top of your template, it\nwill provide access to wp variable. \n After you are done with your page template, go to Page designer > Page\ntree and create a new page by pressing “Add”. Fill the needed\ninformation and under Settings > Page Template select your newly created\npage template. Press “Save and Configure” and you will be redirected to the\npage configuration screen where you will be able to drag & drop the\navailable widgets onto the free frames. Set up your widgets (not all\nframes need to be filled) and publish the page. To see your page you can\npress “Preview” or go to\n `<YOUR_ENVIRONMENT_URL>/<LOCALE>/<PAGE_CODE>.page . If your pages\nshare common parts such as GTM scripts, consider using fragments.\nFragments are like shared code snippets - just add <@wp.fragment\ncode="<FRAGMENT_CODE>" escapeXml=false /> to your page template and\nthe code inside the fragment will be added to your page. \n Creating a new PDA MFE \n There are no limitations on the stack that could be used to create PDA\nMFEs. Custom Elements are a great way to hide implementation details\nwhile providing a neutral interface to others. To create a simple PDA\nMFE, implement your solution using technologies you are familiar with\nand wrap it in a custom element. Build your solution with a custom\nelement and upload the built files (Settings > File Browser) in\n/public/ folder. Go to  UX Pattern > Widget  section of the admin panel\nand press “Add” to add a new widget. Enter widget code, titles, select\ngroup (for free access to everybody, select “Free Access”), and fill the\nCustom UI: \n <#assign wp=JspTaglibs["/aps-core"]>\n<script src="<@wp.resourceURL />path/from/static/bundle.js"><\/script>\n<your-custom-element parameter=”value” />\n \n <#assign wp=JspTaglibs["/aps-core"]>  - provides access to wp variable\nthat is used to get resource URL. After you add the widget, go to the\npage tree, select a page where you would like to use the widget and\nconfigure it. Drag and drop the widget into a frame and publish the\npage. \n Communication between MFEs \n Communication between MFEs can be achieved using Custom Events. Each\nwidget can define events that it will emit and register to events that\nare important to it. \n const createWidgetEvent = eventType => {\n  return payload => {\n    const widgetEvent = new CustomEvent(eventType, { payload });\n    window.dispatchEvent(widgetEvent);\n  };\n};\n\n\nconst subscribeToWidgetEvent = (eventType, eventHandler) => {\n  window.addEventListener(eventType, eventHandler);\n  return () => {\n    window.removeEventListener(eventType, eventHandler);\n  };\n};\n \n Custom element then creates the events it emits and registers to the\nevents that it wants to react to \n constructor(props) {\n  super(props);\n\n  // other code\n\n  this.onClickSubmit = createWidgetEvent(‘myWidget.onSubmit’);\n}\n\nconnectedCallback() {\n\n  // other code\n\n  this.unsubscribeFromWidgetEvents = subscribeToWidgetEvent(\n    ‘otherWidget.onClickClear’,\n    () => {\n      // callback function when otherWidget fires the onClickClear custom event\n    }\n  }\n}\n Technical Documentation \n Micro Frontend Overview \n Task forms \n Widgets containing form (e.g., task completion form widget) use JSON\nschema to dynamically create forms. Widget implementation uses\nreact-jsonshema-form library that converts forms’ JSON schemas into\nReact components. Our initial implementation uses Material UI components\nvia Material UI theme library rjsf-material-ui as baseline and has\nEntando specific templates, widgets and fields (which are\nreact-jsonshema-form terms for parts of forms). In this section you will\nlearn about basic setup of the form, but if you would like to learn\nmore, please refer to react-jsonshema-form documentation. Themed JSON\nform is created using the withTheme() method from the\nreact-jsonschema-form package \n import { withTheme } from \'react-jsonschema-form\';\nimport { Theme as MuiRJSForm } from \'rjsf-material-ui\';\n\nconst JSONForm = props => {\n\n  const ThemedForm = withTheme(MuiRJSForm);\n\n  // ...\n\n  return (\n    <ThemedForm\n    schema={formSchema}\n    uiSchema={uiSchema}\n    {...customTemplates}\n    widgets={customWidgets}\n    formData={formData}\n    onSubmit={e => onSubmitForm(e)}\n    >\n  );\n};\n\nexport default JSONForm;\n \n For JSON Form to work, the form schema is mandatory. It’s a JSON\ndefinition of the form’s structure. Users can also provide form data via\nformData variable, which should follow the structure of JSON schema; and\nUI schema using uiSchema variable, which allows users to customise the\nform’s UI (components, rules, types, etc.) To test JSON schema, UI\nschema and form data, you can use react-jsonschema-form sandbox\nenvironment. Custom Entando templates, widgets, and fields provide a\npossibility to customise the layout of the form using Grid components.\nTo specify what area a field or subform should fill, users can provide\nsize parameter in UI schema’s ui:options object. Size refers to Material\nUI’s grid column widths (Material UI documentation) where the area the\nfrom can take up is divided into 12 columns and value 12 (a default\nvalue if size is not provided) means the field or subform should take up\nall 12 columns. That means that size should be a value from 1 to 12. If\ntwo fields that are next to each other have size values 8 and 4\nrespectively - they will fit into one row, first field being 2 times\nwider than the second field. User can also provide innerSize parameter\nto size the input inside the field. This helps with formatting - if user\nwants a two column layout and have smaller input fields inside these\ncolumns. Multicolumn layout can also be achieved using\ngenerateColumnedOFT(columnSize) functionality, basically providing the\ndefault columnSize to the created form. generateColumnedOFT returns an\nObjectFieldTemplate that is used as a template for all object fields\n(fields that contain properties inside of them). To help us understand\nthe mapping between JSON schema and UI schema lets define an example\nschema: \n {\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "$id": "http://entando.org/schemas/pda-form.json",\n  "title": "Mortgage Application Form",\n  "type": "object",\n  "properties": {\n    "Application": {\n      "title": "Application",\n    "type": "object",\n    "required": [],\n    "properties": {\n        "mortgageamount": {\n          "type": "integer",\n          "title": "Mortgage amount",\n          "description": "Mortgage amount"\n        },\n        "downpayment": {\n          "type": "integer",\n          "title": "Down Payment",\n          "description": "Down Payment"\n        },\n        "applicant": {\n          "title": "Applicant",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "name": {\n              "type": "string",\n              "title": "Name",\n              "description": "Name",\n              "maxLength": 100\n            },\n            "annualincome": {\n              "type": "integer",\n              "title": "Annual Income",\n              "description": "Annual Income"\n            }\n          }\n        },\n        "property": {\n          "title": "Property",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "age": {\n              "type": "integer",\n              "title": "Age of property",\n              "description": "Age of property"\n            },\n            "address": {\n              "type": "string",\n              "title": "Address of property",\n              "description": "Address of property",\n              "maxLength": 100\n               }\n          }\n        }\n      }\n    },\n    "inlimit": {\n      "type": "boolean",\n    "title": "Is mortgage application in limit?"\n    }\n  }\n}\n \n From this JSON (you can copy & paste it into the react-jsonschema-form\nsandbox) we can see that there is a main form with a title “Mortgage\nApplication Form”. Root “Mortgage Application Form” form has two\nproperties - one is a subform  Application  and the second one is just a\ncheckbox field (field ID is inlimit). Application subform contains 2\nfields: Mortgage amount (field ID is mortgageamount) and Down Payment\n(field ID is downpayment); and two subforms - Applicant (field ID is\napplicant) and Property (field ID is property). Applicant subform\ncontains 2 fields - Name (field ID is name) and Annual Income (field ID\nis annualincome). Property subform contains 2 fields - Age of property\n(field ID is age) and Address of property (field ID is address) By\ndefault (without providing UI schema) they are all listed one field per\nrow. To use Entando’s implementation of Grid layout, users have to\nprovide UI schema with details about each field. For example, if we\nwould like to have a layout that looks like this (fields are marked\n [ field name ] ): \n +----------------------------------------------------------------------------+\n| Mortgage Application Form                                                  |\n+----------------------------------------------------------------------------+\n| Application                                                                |\n+----------------------------------+-----------------------------------------+\n| [Mortgage amount]                | [Down Payment]                          |\n+----------------------------------+-----------------+-----------------------+\n| Applicant                                          | Property              |\n+----------------------------------+-----------------+-----------------------+\n| [Name]                           | [Annual Income] | [Age of property]     |\n+----------------------------------+-----------------+-----------------------+\n|                                                    | [Address of property] |\n+----------------------------------------------------+-----------------------+\n \n To set up the UI schema you have to define each field you want to\ncustomise by addressing using the field IDs - to add options to\nApplicant’s Name field, you will have to create an object tree going\nfrom root object through Application —> Applicant —> Name (using IDs\nit’s Application.applicant.name). UI schema for the table layout defined\nabove would look like this: \n {\n  Application: {\n    \'ui:options\': {\n      size: 12, // <-- this value is not mandatory as size is 12 columns-wide by default\n    },\n    mortgageamount: {\n      \'ui:disabled\': true, // <-- user can define fields disabled at UI schema level\n      \'ui:options\': {\n        size: 6, // <-- Mortgage amount field should take up half of the row\n      },\n    },\n    downpayment: {\n      \'ui:options\': {\n        size: 4, // <-- Down payment field should take up the other half of the row\n      },\n    },\n    applicant: {\n      \'ui:options\': {\n        size: 8, // <-- Applicant subform should take up 8 out of 12 columns\n      },\n      name: {\n        \'ui:options\': {\n          size: 8, // <-- Applicant name field should take up 8 columns in the 8 columns that Applicant subform occupies\n        },\n      },\n      annualincome: {\n        \'ui:options\': {\n          size: 4, // <-- Annual Income field taking up the remaining 4 columns\n        },\n      },\n    },\n    property: {\n      \'ui:options\': {\n        size: 4, // <-- Property subform should take up the remaining 4 out of 12 columns\n      },\n      // note that property\'s fields are not mentioned - defaulting them to 12 columns in are that is available to them\n    },\n  },\n};\n\nAs Material UI components are used for field templates, there might be a need to pass some Material UI options into the field. You can do that by adding muiProps object to the ui:options.\nFor example, if you would like to make the Down payment field resizable, you can add multiline: true to muiProps option. If you want to make the field take up multiple rows by default, add rows and rowsMax fields. The latter limits how many rows should be added until the scroll bar is shown.\ndownpayment: {\n  \'ui:options\': {\n    size: 4,\n    muiProps: {\n      multiline: true,\n      rows: 2,\n      rowsMax: 4\n    }\n  }\n}\n Widgets \n Different types of widgets can be applied by passing the type via\n"ui:widget". Property tells the form which UI widget should be used to\nrender a field. You can read about react-jsonschema-form supported\nwidgets here. \n Building From source \n Reference the component projects for instructions to build from source.\n https://github.com/entando/entando-process-driven-plugin \n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n https://github.com/entando/pda-redhatpam-engine \n https://github.com/entando/pda-core-engine \n Code Style \n See:  https://github.com/entando/entando-code-style \n Sonar \n https://sonarcloud.io/organizations/entando/projects \n'},{title:"Tutorial: Selecting the default databases",frontmatter:{},regularPath:"/v6.2/tutorials/devops/default-database.html",relativePath:"v6.2/tutorials/devops/default-database.md",key:"v-6fa3d88a",path:"/v6.2/tutorials/devops/default-database.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Tutorial: Selecting the default databases \n Overview \n This document provides a guide to changing an Entando environment by selecting the default databases used.\nSee  External Database  to connect to a database outside of the cluster. \n Prerequisites \n \n An environment to install your Entando applicaiton \n Network access from your Kubernetes cluster to your database \n Tutorial \n If needed you can set the desired component to use a specific DBMS by updating the Helm-generated yaml file (e.g. 'entando.yaml' from  Getting Started  as follows: \n \n open the chosen file and search for  EntandoCompositeApp  custom resource \n identify the component to update in the related list \n update the  spec.dbms  property with the desired value (you can specify different DBMS for different components) \n \n Repeat previous steps for all components you need to change used DBMS on. \n Valid values for  spec.dbms  property are:  none ,  postgresql ,  mysql ,  oracle . \n none  value will result in using an embedded database with in-file persistence strategy. \n Please note that using embedded databases into distributed systems forces to have only 1 replica per pod.\nThis happens because the volume claimed by each replica points to the same files,\nso the first container locking the files will prevent next replicas to obtain access to the DB files.\nNote that this affects also deployments rolling updates \n If you need to update your deployment, there is a known workaround consisting in setting the replicas number to 0, waiting for pod shutdown completion, update the deployment yaml file, then updating again to 1 the replicas value. In this way, the newly created containers will be able to startup correctly and access the embedded database files on the filesystem. \n These considerations lead us to discourage embedded database use into production environments. \n"},{title:"Connect to an External Keycloak Instance",frontmatter:{},regularPath:"/v6.2/tutorials/devops/external-keycloak/",relativePath:"v6.2/tutorials/devops/external-keycloak/README.md",key:"v-73e5ec98",path:"/v6.2/tutorials/devops/external-keycloak/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Get keycloak information",slug:"_1-get-keycloak-information"},{level:3,title:"2. Generate the secret",slug:"_2-generate-the-secret"},{level:3,title:"3. Upload the secret",slug:"_3-upload-the-secret"},{level:3,title:"4. Deploy the Entando6 application",slug:"_4-deploy-the-entando6-application"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Connect to an External Keycloak Instance \n Purpose \n This tutorial enables the Entando administrator to leverage an existing\nKeycloak instance. \n Requirements \n \n \n A Keycloak instance \n \n \n A realm named "entando" on that instance \n \n \n An admin user for the "entando" realm \n Steps \n 1. Get keycloak information \n Retrieve the relevant information from the Keycloak instance you want to\nuse. \n Specifically you will need: \n \n \n The username of the Keycloak admin that has admin rights to the\n"entando" realm, e.g entando-keycloak-admin \n \n \n The Keycloak admin password, e.g. password123 \n \n \n The base url for the Keycloak server, including the auth value, e.g.\n https://my-keycloak-instance.com/auth \n 2. Generate the secret \n You now need to generate a secret with name  keycloak-admin-secret \nusing the information retrieved from step 1. The Entando administrator\nwill automatically detect this secret by name, and use it to log onto\nthe provided Keycloak server. \n Here is an example of the secret you will need to construct: \n ---\napiVersion: v1\nstringData:\n    username: <the username of the Keycloak admin user for the "entando" realm>\n    password: <the password of this Keycloak admin user>\n    url: <the base url of the Keycloak service, typically ending with the path /auth>\nkind: Secret\nmetadata\n    name: keycloak-admin-secret\n    namespace: <your-app-namespace>\ntype: Opaque\n \n \n Note \n To encode your values, in bash, you can do\n echo <your-value> | base64 \n 3. Upload the secret \n Next upload the secret to the namespace where you want to deploy your\nEntando 6 instance. \n oc create -f my-secret.yaml -n <my-app-namespace>\n 4. Deploy the Entando6 application \n Now you are ready to deploy your Entando 6 application and the\nadministrator will reuse the  keycloak-admin-secret  secret to populate\nthe environment correctly. \n Conclusion \n You should now have a working Entando 6 instance using an external\nKeycloak server. \n'},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/v6.2/tutorials/devops/external-database/",relativePath:"v6.2/tutorials/devops/external-database/README.md",key:"v-75704160",path:"/v6.2/tutorials/devops/external-database/",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando application is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Installation on Amazon Elastic Kubernetes Service (EKS)",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",relativePath:"v6.2/tutorials/devops/installation/elastic-kubernetes-service/eks-install.md",key:"v-536a5526",path:"/v6.2/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Install the NGINX Ingress Controller",slug:"install-the-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress Install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:2,title:"Appendix A - Troubleshooting",slug:"appendix-a-troubleshooting"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Installation on Amazon Elastic Kubernetes Service (EKS) \n Prerequisites \n \n AWS CLI \n AWS account \n kubectl \n A domain or the ability to purchase one. Can use route 53 for this inside AWS if doing it all inline \n helm2 client \n Overview \n The steps below walk you though installing the Entando platform in an EKS cluster. Generally the steps are: \n \n Configure an IAM role to allow kubernetes to manage the cluster \n Create an EKS cluster with 5 nodes (to allow expansion for microservices) \n Install nginx as an ingress controller in the cluster \n Register a domain (if you don\'t already have one) and configure it for wildcard subdomains. \n Install Entando \n \n If you\'re already comfortable setting up an EKS cluster and installing nginx then you may be able to skip to  setting up Entando . \n Cluster Setup \n These steps will use the AWS console to create the cluster. If you’re already familiar with creating an EKS cluster and assigning nodes to it via the AWS cli then you can use the cli process for cluster creation as well. \n Setup and Connect to the Cluster \n \n \n Login to AWS as a non-super admin user \n \n If you don’t have a user besides the super admin it is recommended that you create one. Clusters created using the super admin for your account will have some restrictions that may complicate your installation. \n Your user will need access to EKS and at least the ability to create a cluster. You may need additional policies for Route53 and other services depending on your exact configuration. \n \n \n \n Create an IAM role for the cluster so that AWS can provision assets. See  https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html  for more details. \n \n Select  IAM  from services \n Select  Create role \n Select  AWS Service  box at the top for the type of trusted entity \n Click  EKS  from the main list \n Click  EKS - Cluster  under  Select your use case \n Click  Next:Permissions \n A Policy of  AmazonEKSClusterPolicy  should already be present \n Click  Next: Tags \n (Optional) Add tags if you want \n Click  Next: Review \n Name your role (you’ll need this later), e.g.  my-eks-role \n \n \n \n Refine the role to enable Nodegroup management and to add ELB access so that the cluster can deploy a load balancer for nginx. \n \n Go to  IAM -> Roles -> your role . \n Under permissions click  Attach policies \n Add a policy of  AmazonEKSWorkerNodePolicy \n Add a policy of  AmazonEKS_CNI_Policy \n Add a policy of  AmazonEC2ContainerRegistryReadOnly \n Add a policy of  ElasticLoadBalancingFullAccess \n \n \n \n Go to  Services  and select  Elastic Kubernetes Service \n \n \n Create an EKS Cluster \n \n Add a cluster name (e.g.  cluster-1 ) and click  Create EKS cluster \n For  Cluster Service Role , select the role you created above, e.g.  my-eks-role . If you choose a different role it must have ELB permissions so the cluster can create a load balancer in  Networking  (Step 2). \n Click  Next \n Use the defaults for  Networking  (Step 2) and click  Next \n Use the defaults for  Configure Logging  (Step 3) and click  Next . \n Review your settings and then click  Create . Cluster provisioning usually takes between 10 and 15 minutes. \n See  https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html  for more information on cluster creation. \n \n \n \n Add a node group to the cluster \n \n Go to  Services  ->  Elastic Kubernetes Service  ->  Clusters  -> Click on your cluster name. \n Go to the  Compute  tab \n Click  Add Node Group \n Name : give your group a name, e.g.  node-1 \n Node IAM Role : Select the cluster role you created above. If the role doesn\'t appear, verify that you added the extra policies to the role. \n Subnets  - VPC subnets should already be setup and selected. \n Select  Allow remote access to nodes .  Follow the links to create a new SSH key pair if you don\'t already have one. \n Click  Next \n AMI type:  Amazon Linux 2 \n Instance type:  t3.medium \n Click  Next \n Set  Maximum size  to 5. This will be over-resourced for a  Getting Started  experience but will leave capacity for adding microservices to your cluster without modifying the Nodegroup. \n Click  Next \n Review your settings and then click  Create \n \n \n \n Connect  kubectl  to the cluster \n \n Note:  If this is a brand new setup you will need to login using the user you used to create your cluster in the console in the steps above. Make sure the users match.\n \n aws-configure  (and then provide the Access key, etc.) \n \n \n aws eks --region region-code update-kubeconfig --name cluster_name \n More details and troubleshooting  https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html \n Your current context should now be configured for your AWS cluster: \n \n \n \n     $  kubectl config current-context\n    arn:aws:eks:us-east-2:483173223614:cluster/cluster-1\n Install the NGINX Ingress Controller \n \n Add the NGINX controller for ingress. This depends on your role having permissions for ELB.\n \n For basic nginx ingress install run this command \n \n \n \n     kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.34.1/deploy/static/provider/aws/deploy.yaml\n \n \n See  https://kubernetes.github.io/ingress-nginx/deploy/#aws  as well as  this  for more detailed install steps. \n \n \n Get the ELB external URL for your nginx install\n \n Run:  kubectl get services -n ingress-nginx \n Get the value of the external address (EXTERNAL-IP) for the ingress-nginx-controller: \n \n \n \n NAME                                 TYPE           CLUSTER-IP       EXTERNAL-IP                        \ningress-nginx-controller             LoadBalancer   10.100.102.83    ad234bd11a1ff4dadb44639a6bbf707e-0e0a483d966405ee.elb.us-east-2.amazonaws.com\n \n \n Determine the domain to use for your cluster. The goal here is to provide a way to route wildcard DNS traffic to the different parts of the apps and this can’t be done directly on the name for the ELB.\n \n Option 1 . Use a domain you already have available. You\'ll need to route traffic on that domain to the external cluster address noted in step 9.\n \n For an existing domain you can add a wildcard subdomain via a CNAME, e.g.  CNAME *.mysubdomain.domain.com <EXTERNAL-ADDRESS> . THe details will vary depending on your DNS registry. \n \n \n Option 2 . Register a domain in route 53.\n \n Add wildcard dns resolution in route 53 to the ELB address attached to nginx above. \n Note: The value in your A record will automatically include dualstack. This allows the ELB to serve both IPV4 and IPV6 traffic \n \n \n If you register a new domain use  nslookup  or  dig  to make sure the DNS changes have propagated. This can take hours. \n Verify the NGINX Ingress Install \n We recommend setting up a test application so you can easily verify the ingress is working in your cluster. See  this page  for those steps. You can use your local  kubectl . \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs:  sudo kubectl create -f dist/crd \n Deploy Your Entando Application \n You can now deploy your application to Amazon EKS. \n \n Download and unpack the  entando-helm-quickstart release  here:\n https://github.com/entando-k8s/entando-helm-quickstart/releases \n \n See the included README file for more information on the following steps. \n \n \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.2.0.tar.gz | tar xvz\n \n \n \n Edit  values.yaml  in the root directory: \n \n Set  supportOpenshift: false \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the URL of your external domain:\n \n For example:  ENTANDO_DEFAULT_ROUTING_SUFFIX: entando-aws-test.org \n This assumes you have enabled wildcard dns address resolution  above . \n \n \n Configure nginx as the ingress controller and enable file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix B  for an example values.yaml \n \n \n \n Create the Entando namespace:  kubectl create namespace entando \n \n \n Run helm to generate the template file: \n \n \n helm template my-eks-app --namespace=entando ./ > my-eks-app.yaml\n \n \n Deploy Entando via  kubectl create -f my-eks-app.yaml \n Watch Entando startup  kubectl get pods -n entando --watch \n Check for the Entando ingresses using  kubectl describe ingress -n entando \n Access your app on the url for the ingress of the app builder, e.g.  http://quickstart-entando.mysubdomain.domain.com/entando-de-app \n Appendix A - Troubleshooting \n IAM And Roles \n \n https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html \n https://stackoverflow.com/questions/56863539/getting-error-an-error-occurred-accessdenied-when-calling-the-assumerole-oper \n \n NGINX \n \n https://docs.nginx.com/nginx/deployment-guides/amazon-web-services/ingress-controller-elastic-kubernetes-services/ \n Issue with permissions for NGINX ingress: \n \n  Warning  SyncLoadBalancerFailed   38m                 service-controller  (combined from similar events): Error syncing load balancer: failed to ensure load balancer: error creating\n Appendix B - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-DOMAIN>  with the domain you\'ve configured for your cluster. \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-DOMAIN>\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n   ENTANDO_INGRESS_CLASS: "nginx"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n\n \n '},{title:"Entando 6 Azure Kubernetes Installation Instructions",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",relativePath:"v6.2/tutorials/devops/installation/azure-kubernetes-service/azure-install.md",key:"v-a13cc134",path:"/v6.2/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Deploy NGINX Ingress Controller",slug:"deploy-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress Install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:2,title:"Appendix A - Example values.yaml file for Helm Quickstart",slug:"appendix-a-example-values-yaml-file-for-helm-quickstart"},{level:2,title:"Appendix B - Troubleshooting",slug:"appendix-b-troubleshooting"}],lastUpdated:"11/24/2020, 1:24:50 PM",content:' Entando 6 Azure Kubernetes Installation Instructions \n Prerequisites \n \n Azure account\n \n \n \n Note: If you\'re using an Azure free account, you may need to upgrade your account first to enable pay-as-you-go billing. The Azure free account default quota includes just 1-4 vCPU which is not sufficient for this tutorial. There may be a delay before the quotas are updated when you upgrade your account. \n \n \n \n \n If you\'re not using Azure Cloud Shell:\n \n Azure command line tool \n Helm2 client \n Overview \n The steps below walk you through installing the Entando platform in an Azure Kubernetes Services (AKS) cluster. Generally the steps are: \n \n Create an AKS cluster with 5 nodes (to allow expansion for microservices) \n Install nginx as an ingress controller in the cluster \n Install Entando \n \n If you\'re already comfortable setting up an AKS cluster and installing nginx then you may be able to skip to  setting up Entando . \n Cluster Setup \n Setup and Connect to the Cluster \n \n Login to Azure ( https://portal.azure.com/ ) \n Select the  Kubernetes services  icon\n \n If not listed click  More services  on the right and search for Kubernetes \n \n \n Click  Add  in upper left corner \n Select  Kubernetes cluster . You\'ll start with the  Basics  tab. \n Select a  Resource group  or create one with the  Create new  link if it you don’t have one, e.g.  resource-group-1 \n Enter a name of your choice in Kubernetes cluster name, e.g.  cluster-1 \n Pick your  Region  if it wasn\'t automatically selected for you. \n In the  Availability zones  dropdown pick  one and only one  availability zone\n \n Generally, you could pick more than one but it will result in a failure in a quickstart environment. If you chose more than one availability zone you will have to provision storage, manage node affinity, and ensure correct network configuration to ensure your application deploys. We recommend only doing this for production clusters. \n \n \n Select the default  Kubernetes version  if it\'s not already selected, e.g. 1.16.13 \n Keep the default  Node size , e.g.  Standard DS2 v2 \n Change the  Node count  to  5 \n Click  Next: Node Pools  to move to the next tab. \n Keep the default values here\n \n If you\'re familiar with AKS your can change as desired based on your objectives/knowledge \n \n \n Click  Next: Authentication \n For  Authentication method  select  System-assigned managed identity \n \n You can pick a  Service principal  instead and Azure will automatically generate one for you. If you use an existing principal it is up to you to configure it and ensure you have the access you need. \n \n \n Click  Next: Networking \n Enter a value for DNS name prefix, e.g.  cluster-1-dns \n Click  Review + Create \n \n Note: There are many other configuration options available for an AKS cluster. Generally, you can change these based on your experience and comfort level with the AKS platform. Entando uses base Kubernetes APIs so as long as you follow the Entando configuration instructions below you can tune your cluster infrastructure to meet your goals \n \n \n Select  Create \n Wait for your cluster to initialize.\n \n This may take a few minutes \n Deploy NGINX Ingress Controller \n \n Navigate to your cluster by clicking  Go to Resource  from the results page or by the top navigation  Home - Kubernetes service  and clicking on your cluster. \n Select  Connect \n Select  Bash \n Run the first two commands (e.g.  az account set...  and  az aks get-credentials...  to connect to your cluster. This should only be needed the first time you run the Azure Cloud Shell.\n \n The Cloud Shell times out after 20 minutes of inactivity. \n The following instructions assume you\'ll use the Azure Cloud Shell but you can also run the commands in a local environment if you have  kubectl \n \n \n Deploy nginx with the commands below. See  nginx instructions  for more details. \n \n kubectl create namespace ingress-basic\n \n helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo add stable https://kubernetes-charts.storage.googleapis.com/\nhelm repo update\n \n helm install nginx-ingress ingress-nginx/ingress-nginx \\\n    --namespace ingress-basic \\\n    --set controller.replicaCount=2 \\\n    --set controller.nodeSelector."beta\\.kubernetes\\.io/os"=linux \\\n  --set defaultBackend.nodeSelector."beta\\.kubernetes\\.io/os"=linux\n \n \n Get the external IP address for your ingress controller. Record the value of EXTERNAL-IP for  nginx-ingress-controller  from the command below. \n \n kubectl get service -n ingress-basic\n Verify the NGINX Ingress Install \n We recommend setting up a test application so you can easily verify the ingress is working in your cluster. See  this page  for those steps. You can use either Azure Cloud Shell or your local  kubectl . \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs: \n \n kubectl create -f dist/crd\n Deploy Your Entando Application \n You can now deploy your application to Azure Kubernetes Service. \n \n Download and unpack the entando-helm-quickstart release files with the following command or by selecting a specific release  here . See the included README file for more information on subsequent steps. \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.2.0.tar.gz | tar xvz\n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.2.0\n \n \n \n Edit the  values.yaml \n \n Set  supportOpenshift: false \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the EXTERNAL-IP of your ingress controller and add nip.io to the end\n \n For example:  ENTANDO_DEFAULT_ROUTING_SUFFIX: 52.188.177.248.nip.io \n \n \n Configure nginx as the ingress controller and enable file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix A  for an example values.yaml \n \n \n \n Create the Entando namespace: \n \n \n kubectl create namespace entando\n \n \n Run helm to generate the template file: \n \n helm template my-aks-app --namespace=entando ./ > my-aks-app.yaml\n \n \n Deploy Entando via \n \n kubectl create -f my-aks-app.yaml\n \n \n Watch Entando startup. The application will be available when the quickstart-server-deployment pod shows 3/3 in the READY column and RUNNING in the STATUS column. \n \n kubectl get pods -n entando --watch\n \n \n Check for the Entando ingresses using \n \n kubectl describe ingress -n entando\n \n \n Access your app on the url for the ingress of the app builder, e.g.  http://quickstart-entando.EXTERNAL-IP.nip.io/entando-de-app \n Appendix A - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-IP>  with the EXTERNAL-IP address of your nginx controller \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-IP>.nip.io\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n   ENTANDO_INGRESS_CLASS: "nginx"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n Appendix B - Troubleshooting \n If you get an error like:  0/5 nodes are available: 5 node(s) had volume node affinity conflict.  or if your deployment hangs in a situation like this from  kubectl get pods -n entando \n NAME                                                 READY   STATUS      RESTARTS   AGE\nmy-aks-app-operator-644697776f-sxtq2                 1/1     Running     0          13m\nquickstart-composite-app-deployer-2guz0n42pc         1/1     Running     0          13m\nquickstart-deployer-jj4njqk4bg                       1/1     Running     0          10m\nquickstart-eci-deployer-t0xktqsonk                   0/1     Completed   0          11m\nquickstart-eci-k8s-svc-deployment-78f64c8d89-7c578   1/1     Running     0          11m\nquickstart-kc-deployer-16gzv3clsj                    0/1     Completed   0          13m\nquickstart-kc-server-deployment-7c9bc65744-g52nx     1/1     Running     0          13m\nquickstart-server-deployment-55fcfc6b68-szvkl        0/3     Pending     0          10m\n \n Double check your availability zones. By default an Azure cluster will include nodes from multiple zones but it will not provision storage\nfor all of those nodes so you can\'t deploy your application. \n You can confirm this error in AKS by \n \n In your cluster select  Workloads  in the left nav \n Click on the deployment for your server application. This is  quickstart-server-deployment  by default \n Click on the deployment name inside that application. There will be one \n Click on the tab labeled  Conditions \n If you see an error that says  0/5 nodes are available: 5 node(s) had volume node affinity conflict.  Then you need to reconfigure\nyour cluster to have nodes in one zone or work with your Azure operations team to provision storage to match node affinity. \n \n'},{title:"Installation on Google Kubernetes Engine (GKE)",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/devops/installation/google-cloud-platform/",relativePath:"v6.2/tutorials/devops/installation/google-cloud-platform/README.md",key:"v-07622a2a",path:"/v6.2/tutorials/devops/installation/google-cloud-platform/",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Install the NGINX Ingress Controller",slug:"install-the-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:3,title:"Setup and Deploy",slug:"setup-and-deploy"},{level:3,title:"Quickstart with Embedded Databases",slug:"quickstart-with-embedded-databases"},{level:3,title:"External Database",slug:"external-database"},{level:2,title:"Appendix A - Cluster Sizing",slug:"appendix-a-cluster-sizing"},{level:3,title:"Updating the Nodes in Your Cluster",slug:"updating-the-nodes-in-your-cluster"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"8/17/2020, 10:59:25 AM",content:' Installation on Google Kubernetes Engine (GKE) \n Prerequisites \n \n Google Cloud account:  http://cloud.google.com/ \n Install these tools locally if you\'re not using the Google Cloud Shell steps below:\n \n Google Cloud SDK  including gcloud \n kubectl  command line tool \n Cluster Setup \n These steps only need to be completed once per cluster. \n Setup and Connect to the Cluster \n \n Login to your Google Cloud account:  https://cloud.google.com/ \n Go to  Kubernetes Engine -> Clusters  and click  Create Cluster \n Enter a name and select a  Location type \n \n The  Location type  settings are up to you. The defaults are fine for an initial test. \n \n \n Leave the  Master version  on the default (e.g.  1.14.10-gke.36 ) \n On the left menu select  default-pool \n Under  Size  set the  Number of nodes  entry to 5.  (See  Appendix A  for details.) \n Click  Create \n Wait for the cluster to initialize. This will take a few minutes. There will be a green check mark when complete. \n Click  Connect  for your new cluster. \n Click  Run in Cloud Shell \n \n Alternatively, copy the provided command and execute it in your local environment to connect your local  kubectl  to your GKE cluster. \n \n \n Run  kubectl get namespaces  to verify your connection: \n \n a_user@cs-6000-devshell-vm-c34ef644-5584-4c5d-aa14-6e41af4a5c9a:~$ kubectl get namespaces\nNAME              STATUS   AGE\ndefault           Active   6m11s\nkube-node-lease   Active   6m12s\nkube-public       Active   6m12s\nkube-system       Active   6m13s\n Install the NGINX Ingress Controller \n Entando isn’t compatible out of the box  with the default ingress controller provided in GKE.\nSee here for more if you’re interested in GKE ingress:  https://cloud.google.com/kubernetes-engine/docs/concepts/ingress \n We’re going to install the NGINX ingress controller to manage the ingresses for Entando services\ndeployed by the operator. This will be a simpler and more adaptable configuration for most users and\nenvironments. Users who really need the GKE ingress controller (rare) could integrate it following\nthe instructions provided by GKE and then customize the service definition created by the Entando\noperator. \n These are the minimal instructions to prepare NGINX ingress using the Google Cloud Shell. To install it\nusing your local  kubectl  or to vary other settings please see the more detailed documents here:\n https://cloud.google.com/community/tutorials/nginx-ingress-gke  and  https://kubernetes.github.io/ingress-nginx/deploy/#gce-gke . \n \n Initialize your user as a cluster-admin: \n \n kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin \\\n--user $(gcloud config get-value account)\n \n \n Install the ingress controller pods: \n \n kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml\n \n \n To check if the ingress controller pods have started, run the following command: \n \n    kubectl get pods -n ingress-nginx \\\n     -l app.kubernetes.io/name=ingress-nginx --watch\n \n \n Wait until the ingress-nginx-controller status changes to  Running : \n \n NAME                                        READY   STATUS      RESTARTS   AGE\ningress-nginx-admission-create-27tgt        0/1     Completed   0          65s\ningress-nginx-admission-patch-7wmgl         0/1     Completed   1          65s\ningress-nginx-controller-7656c59dc4-7xgmc   1/1     Running     0          75s\n \n \n Get the external IP address for your ingress controller. Record the value of EXTERNAL-IP for  nginx-ingress-controller  from the command below. \n \n kubectl get service -l app=nginx-ingress --namespace ingress-nginx\n Verify the NGINX Ingress install \n We recommend setting up a test application so you can easily verify the ingress is working. \n \n From the  Cloud Shell,  create a simple application by running the following command: \n \n kubectl run hello-app --generator=run-pod/v1 --image=gcr.io/google-samples/hello-app:1.0 --port=8080\n \n \n Expose the  hello-app  Pod as a Service: \n \n kubectl expose pod hello-app\n \n \n Create an  ingress-resource.yaml  file with this content: \n \n apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: ingress-resource\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/ssl-redirect: "false"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /hello\n        backend:\n          serviceName: hello-app\n          servicePort: 8080\n \n \n Now create the Ingress Resource using  kubectl apply -f ingress-resource.yaml \n Verify that the Ingress Resource has been created using  kubectl get ingress ingress-resource .\nIt may take a few minutes for the  Address  to be populated. \n Verify you can access the web application by going to the  EXTERNAL-IP/hello  address, using the\n Address  from the previous nginx-ingress-controller. You should see the following: \n \n Hello, world!\nVersion: 1.0.0\nHostname: hello-app\n \n Note the external IP address of your ingress controller since you’ll need it for the application configuration.\nThe Entando deployment exposes an environment variable to set the ingress controller to be used as part of the deployment. That variable is  ENTANDO_INGRESS_CLASS  and should be set to  nginx  in deployments to GKE (this is documented in the application instructions below as well) \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them: \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs:  kubectl create -f dist/crd \n Deploy Your Entando Application \n You can now deploy your Entando applications to GKE. \n Setup and Deploy \n \n Download and unpack the entando-helm-quickstart release you want to use from here:\n https://github.com/entando-k8s/entando-helm-quickstart/releases \n \n e.g.  curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.2.0.tar.gz | tar xvz \n See the included README file for more information on the following steps. \n \n \n Edit  values.yaml in the root directory:\n \n Set  supportOpenshift: false \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the IP value of your  nginx  controller plus .nip.io\n \n For example:  ENTANDO_DEFAULT_ROUTING_SUFFIX: 35.223.161.214.nip.io \n We’re using  https://nip.io  because we need wildcard dns address resolution however nip.io is not required. If your enterprise has a different internal dns resolution scheme for development instances you can use that or other alternative dns services like xip.io. \n \n \n If not already present, set these values to utilize nginx as the ingress controller and file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix B  for an example values.yaml \n \n \n Create the Entando namespace:  kubectl create namespace entando \n Update helm dependencies:  helm dependency update \n Run helm to generate the template file:  helm template my-app --namespace=entando ./ > my-app.yaml \n Deploy Entando via  kubectl create -f my-app.yaml \n Watch Entando startup  kubectl get pods -n entando --watch \n Check for the Entando ingresses using  kubectl describe ingress -n entando . This is a snippet: \n \n quickstart-entando.34.71.130.61.nip.io\n                                          /entando-de-app     quickstart-server-service:8080 (10.44.2.3:8080)\n                                          /digital-exchange   quickstart-server-service:8083 (10.44.2.3:8083)\n                                          /app-builder/       quickstart-server-service:8081 (10.44.2.3:8081)\n \n \n Access Entando at the listed endpoints, e.g. Entando App Builder at  quickstart-entando.34.71.130.61.nip.io/app-builder/ \n Quickstart with Embedded Databases \n The lightest weight and fastest to deploy option for evaluation and getting started uses embedded databases for the application and Keycloak.\nTo deploy quickstart with embedded databases at the top of values.yaml add  dbms: none  under the app section in the file. See Appendix B for an example. \n External Database \n You can also use an external database instance for your application.\nThis is recommended for projects that will be developed for delivery to customers or stakeholders.\nAny dbms that is reachable from the cluster can be used. \n Example: Deploy Postgres to a Namespace on Your Cluster \n These instructions will deploy a postgres instance to a namespace in your kubernetes cluster. \n https://github.com/GoogleCloudPlatform/postgresql-docker/blob/master/9/README.md#run-a-postgresql-server-kubernetes \n \n Note: If deployed this way the address you use for the database in the helm template must be a full address rather than an IP address alone. Use the database IP plus nip.io for a dev instances \n \n Once deployed you can use the  external database instructions  to\nconnect your Entando application to your instance., \n Connect CloudSQL to GKE \n \n This link describes creating a PG instances using the GCP Cloud SQL\n \n https://cloud.google.com/sql/docs/postgres/create-instance \n \n \n Connecting from GKE to Cloud SQL\n \n https://cloud.google.com/sql/docs/postgres/connect-kubernetes-engine \n Appendix A - Cluster Sizing \n In the cluster setup instructions you set the number of nodes in your cluster to 5. This setting\nassumes the default node type with a single VCPU per instance and 3.8 GB of RAM. The kubernetes\nsystem and nginx will request approximately 1 CPU in total. The Entando application will deploy\non the remaining 4. This configuration is suitable for a development team but may need to be\nexpanded as microservices are added to the architecture. \n If you’re running other applications (like a postgres instance) in your cluster you may need\nmore nodes. \n Updating the Nodes in Your Cluster \n \n Select Kubernetes Engine from the left nav in GCP \n Select Clusters \n Hit the Edit button (pencil on the right) \n Scroll to bottom \n Click the link labeled default-pool \n Edit button at the top \n Change the nodes to the number you\'d like to include \n Save \n Wait until updated on clusters page (green checkmark on cluster) \n Appendix B - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-NGINX-IP>  with the ip address where your  nginx \ninstance is exposed on your cluster. \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-NGINX-IP>.nip.io\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n   ENTANDO_INGRESS_CLASS: "nginx"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n\n \n '},{title:"Installation on OpenShift",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/devops/installation/open-shift/openshift-install.html",relativePath:"v6.2/tutorials/devops/installation/open-shift/openshift-install.md",key:"v-6e9a7bb4",path:"/v6.2/tutorials/devops/installation/open-shift/openshift-install.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Local Installation",slug:"local-installation"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:3,title:"Get your Cluster Default Ingress",slug:"get-your-cluster-default-ingress"},{level:3,title:"Setup and Deploy",slug:"setup-and-deploy"},{level:2,title:"Appendix A - Troubleshooting and Common Errors",slug:"appendix-a-troubleshooting-and-common-errors"},{level:3,title:"Permission Errors",slug:"permission-errors"},{level:3,title:"Forbidden Error installing Entando Custom Resource Definitions in Minishift or CRC",slug:"forbidden-error-installing-entando-custom-resource-definitions-in-minishift-or-crc"},{level:3,title:"Application is not available when accessing app builder",slug:"application-is-not-available-when-accessing-app-builder"},{level:3,title:"Network Issues",slug:"network-issues"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"11/12/2020, 8:49:01 AM",content:' Installation on OpenShift \n Prerequisites \n \n An OpenShift installation (3.11 or 4.x) \n oc  command line tool \n A helm 3 client \n Local Installation \n If you want to run OpenShift in your local development environment you can run Minishift (OpenShift 3.11) or Code Ready Containers (OpenShift 4). Use the local development version that matches the cluster where you intend to deploy your application. \n For Minishift:  https://docs.okd.io/3.11/minishift/getting-started/installing.html \n For CRC:  https://developers.redhat.com/products/codeready-containers/download \n Once you\'ve completed the installation above capture the local IP address of your development instance using  minishift ip  or  crc ip . You\'ll need it when configuring your Entando application. \n Login to your OpenShift environment from the command line with  oc login  using the URL and credentials for your cluster. \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . This is the only step in this guide that requires cluster level access. If you are running on Minishift or CRC make sure you are connected using the administrator login provided when you started your local instance. \n \n Download the Custom Resource Definitions (CRDs) and unpack them: \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.2.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs: \n \n oc create -f dist/crd\n Get your Cluster Default Ingress \n If you\'re deploying on a managed cluster get the default hostname from your cluster administrator. Entando uses wildcard addressing to connect different parts of your Entando application and the default route for applications exposed on your cluster is needed. You\'ll set this value in step 3 below. \n Setup and Deploy \n \n Download and unpack the entando-helm-quickstart release you want to use from here:\n https://github.com/entando-k8s/entando-helm-quickstart/releases \n \n See the included README file for more information on the following steps. \n \n \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.2.0.tar.gz | tar xvz\n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.2.0\n \n \n Edit  values.yaml in the root directory:\n \n Set  supportOpenshift: true \n If you\'re deploying to a managed cluster:\n \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the default URL of applications deployed in your OpenShift cluster. If you\'re unsure of this value, please check with your cluster administrator for this URL. \n Entando will create applications using that default URL and relies on wildcard DNS resolution. \n \n \n If you\'re using Minishift or CRC:\n \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the value from  minishift ip  or  crc ip  plus  nip.io . For example,  ENTANDO_DEFAULT_ROUTING_SUFFIX: 192.168.64.10.nip.io \n \n \n See  Appendix B  for an example values.yaml \n \n \n Create the Entando namespace: \n \n oc new-project entando\n \n \n Update helm dependencies: \n \n helm dependency update\n \n \n Run helm to generate the template file: \n \n helm template my-app --namespace=entando ./ > my-app.yaml\n \n \n If you\'re using Helm 2 instead of Helm 3, then replace  helm template my-app  with  helm template --name=my-app \n \n \n Deploy Entando via \n \n oc create -f my-app.yaml\n \n \n If you see this error  no matches for kind "Deployment" in version "extensions/v1beta1" , then you\'ll need to edit my-app.yaml and set  apiVersion: "apps/v1"  for the Deployment. \n \n \n Watch Entando startup \n \n oc get pods -n entando --watch\n \n \n This step is complete when the  quickstart-server  pod shows 3/3 running. For example, \n \n quickstart-server-deployment-6c89fb49f7-gpmqc   3/3   Running   0     72s\n \n \n The full pod name will differ but by default will start with  quickstart-server-deployment . \n \n \n Check for the Entando ingresses using  oc describe ingress -n entando . This is a snippet: \n \n Name:             quickstart-ingress\nNamespace:        entando\nAddress:          \nDefault backend:  default-http-backend:80 (<none>)\nRules:\n  Host                                 Path  Backends\n  ----                                 ----  --------\n  quickstart-entando.192.168.64.10.nip.io  \n                                       /entando-de-app     quickstart-server-service:8080 (<none>)\n                                       /digital-exchange   quickstart-server-service:8083 (<none>)\n                                       /app-builder/       quickstart-server-service:8081 (<none>)\n \n The host path in the configuration above plus  /app-builder/  (trailing slash is important) will allow you to log into your environment. For example,\n http://quickstart-entando.192.168.64.10.nip.io/app-builder/ \n Appendix A - Troubleshooting and Common Errors \n Permission Errors \n If you get OpenShift permission errors deploying your Entando application into your OpenShift namespace make sure your user has the  escalate  and  bind  verbs on Roles in the namespace you\'re deploying to. Ultimately you need this command to  oc auth can-i escalate role  to return  yes . That access is only required in the namespace where you are deploying your Entando application. No cluster level access is required. \n Check with your cluster administrator if you need help assigning these roles. Generally this requires the creation of a role with those permissions, preferably a ClusterRole, and then depending on how administrators manage security your Entando installer needs to be given that role in the target namespace. So let\'s assume the clusterRole we create is  entando-installer  and the user\'s name is john, on OpenShift creating the rolebinding would be:\n oc policy add-role-to-user entando-installer john -n <your-namespace> \n Before installing, we suggest running  oc auth can-i escalate role  with your given user in the targeted namespace. If it says "yes" you should be able to install. \n Forbidden Error installing Entando Custom Resource Definitions in Minishift or CRC \n If you get an error like the one below installing the CRDs in your local instance you need to login using the administrator role. \n /opt/ocInstallLocal$ oc create -f dist/crd/\nError from server (Forbidden): error when creating "dist/crd/EntandoAppCRD.yaml": customresourcedefinitions.apiextensions.k8s.io is forbidden: User "developer" cannot create resource "customresourcedefinitions" in API group "apiextensions.k8s.io" at the cluster scope\n \n The administrator credentials are printed when you started your local cluster in a message like this one: \n To access the cluster, first set up your environment by following \'crc oc-env\' instructions\nINFO Then you can access it by running \'oc login -u developer -p developer https://api.crc.testing:6443\'\nINFO To login as an admin, username is \'kubeadmin\' and password is xxxx-xxxx-xxxx-xxxx\n Application is not available when accessing app builder \n If you get the message "Application is not available" when accessing the app-builder make sure to include a trailing slash in the URL. For example,\nhttp://quickstart-entando.192.168.64.10.nip.io/app-builder/ \n Network Issues \n If you see errors when images are being retrieved (resulting in errors like ErrImagePull or ImagePullBackOff), you may want to start crc using  crc start -n "8.8.8.8  or configure the nameserver using  crc config set nameserver 8.8.8.8  before running  crc start . This will allow the cluster to perform DNS lookups via Google\'s public DNS server. \n If you\'re on Windows, you should also check out the notes  here  since Minishift and CRC rely on Windows Hyper-V by default. This can result in network issues when the host computer is restarted. \n Appendix B - Example values.yaml file for Helm Quickstart \n The example below includes configuration for deployment on a locally installed instance: \n app:\n  name: quickstart\n  dbms: none\n#externalDatabase:\n host: some.db.host\n port: 32432\n databaseName: sampledb\n username:\n password:\noperator:\n  supportOpenshift: true\n  env:\n    ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n    #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n    #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n    ENTANDO_DEFAULT_ROUTING_SUFFIX: 192.168.64.10.nip.io\n    ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n    ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n    ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n    ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n    ENTANDO_K8S_OPERATOR_FORCE_DB_PASSWORD_RESET: "true"\n  tls:\n    caCrt:\n    tlsCrt:\n    tlsKey:\ndeployPDA: false\n \n '},{title:"Local Development Tips and Tricks",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/devops/local-tips-and-tricks.html",relativePath:"v6.2/tutorials/devops/local-tips-and-tricks.md",key:"v-0f16da74",path:"/v6.2/tutorials/devops/local-tips-and-tricks.html",headers:[{level:2,title:"Kubernetes",slug:"kubernetes"},{level:2,title:"Network issues",slug:"network-issues"},{level:3,title:".nip.io isn't allowed",slug:"nip-io-isn-t-allowed"},{level:3,title:"The IP address changed after the initial install",slug:"the-ip-address-changed-after-the-initial-install"},{level:2,title:"Windows development",slug:"windows-development"},{level:3,title:"Hyper-V IP changes",slug:"hyper-v-ip-changes"},{level:3,title:"JHipster",slug:"jhipster"},{level:3,title:"Multipass with VirtualBox",slug:"multipass-with-virtualbox"}],lastUpdated:"9/30/2020, 11:01:17 AM",content:" Local Development Tips and Tricks \n We've collected a list of tips and tricks for optimizing your local development environment.\nWe invite you to ask questions, collaborate with the community, and share your own favorite\npractices over on the  Entando forum . \n Kubernetes \n Per the  Getting Started  guide, we've recommended using Multipass as a way to quickly spin up an Ubuntu VM to host a local Kubernetes cluster for test purposes. There are many times when a local environment is useful but most teams utilize a shared Kubernetes cluster managed by an operations team and installed either on premise or with a cloud provider for full integration testing, CI/CD, DevOps, etc. \n Network issues \n A local Entando 6.2 quickstart installation (e.g. what you'll get if you follow the  Getting Started  guide) uses a set of local domain names to enable accessing Entando services. Your IP address will vary but they will look something like this: \n quickstart-entando.192.168.99.1.nip.io\nquickstart-kc-entando.192.168.99.1.nip.io\nquickstart-eci-entando.192.168.99.1.nip.io\n \n The base domain configured via the ENTANDO_DEFAULT_ROUTING_SUFFIX (e.g. in your entando.yaml) is based on a fixed IP address and that address is configured during the initial installation. That setting is used to generate ingress routes to map incoming URLs to individual services. In production environments there's generally a dedicated network layer to manage IPs/routing (both on premise and cloud) but those options are often not readily available in a local setup. Here are a couple common issues that can prevent Entando from starting in a local environment: \n  .nip.io isn't allowed \n \n This could be because of firewall settings or corporate security policies. The simplest workaround is to manually edit your /etc/hosts file and map the necessary domains to the IP of your local virtual machine. \n \n  192.168.99.1 quickstart-kc-entando.192.168.99.1.nip.io\n 192.168.99.1 quickstart-eci-entando.192.168.99.1.nip.io\n 192.168.99.1 quickstart-entando.192.168.99.1.nip.io\n \n \n If you add microservices to your installation, you may need to add additional mappings for the new ingresses. \n See  this section below  for detailed steps on Windows. \n  The IP address changed after the initial install \n \n The workaround noted above (e.g. update your /etc/hosts file) can also be used here. Simply update the IP address in the first column to use the current IP of your virtual machine. \n On Windows this can happen simply because your laptop restarted. See  Windows Hyper-V IP Changes  below. \n Windows development \n Hyper-V IP changes \n Q:  My Entando installation stops working when I restart Windows. How can I fix this? \n A:  The basic issue is that Windows Hyper-V makes it difficult to set\na static IP for a VM. (See this  forum post  for details.) As discussed  above , Entando's ingress routes rely on an fixed IP address and will break if the IP address changes after initial installation. Here are a few options to solve this issue, short of modifying your router or network switch settings: \n Option 1: Manually update your hosts file \n The simplest option to re-enable external access to your cluster is to update your hosts file after each Windows restart. \n You need two pieces of information for this workaround and you'll need administrator access to do this. \n \n Determine the original IP used for your VM. This is included in the  ENTANDO_DEFAULT_ROUTING_SUFFIX  or you can see it included in the ingress names. Run  kubectl -n entando get ingress  and you should see something like this: \n \n NAME                          CLASS    HOSTS                                           \nquickstart-kc-ingress         <none>   quickstart-kc-entando.192.168.235.100.nip.io  \nquickstart-eci-ingress        <none>   quickstart-eci-entando.192.168.235.100.nip.io  \nquickstart-ingress            <none>   quickstart-entando.192.168.235.100.nip.io    \n \n \n Determine the current IP using  hostname -I  in the VM or by running  multipass list  from Windows: \n \n $ multipass list\nName                    State             IPv4             Image\nprimary                 Running           172.31.118.12   Ubuntu 18.04 LTS\n \n \n As a Windows administrator, edit your hosts file  (C:\\Windows\\System32\\drivers\\etc\\hosts)  to map any needed URLs from the old IP to the new IP. This will bypass .nip.io lookups. \n \n 172.31.118.12 quickstart-kc-entando.192.168.235.100.nip.io\n172.31.118.12 quickstart-eci-entando.192.168.235.100.nip.io\n172.31.118.12 quickstart-entando.192.168.235.100.nip.io\n \n \n You should now be able to access your Entando URLs via the new IP. If your Entando installation stalled during startup, it should continue starting up as soon as the external address is functional again. \n Option 2: Add a Windows route \n This option is a little more involved the first time but it means repairing your network settings can be done very easily later. In this case you'll pick a static IP, configure a Windows route to map it to the Hyper-V interface, and claim the IP in the Ubuntu VM via a netplan entry. \n You'll need to run all of these steps before installing Entando the first time but then just steps #1 and #2 after subsequent Windows restarts. \n \n \n Determine an IP that is unused on your local network. You can use ping or other tools for this but in the following steps we assume that your selected IP is 192.168.99.1. \n \n \n Determine the interface address to Hyper-V, e.g. 32 below. Use cmd  route print  and look for the Interface entry for Hyper-V: \n \n \n Interface List\n 32...00 15 5d 86 45 20 ......Hyper-V Virtual Ethernet Adapter\n \n \n Using elevated privileges, add a persistent route to map your IP to the Hyper-V interface: \n \n route -p add [YOUR-IP] mask 255.255.255.255 0.0.0.0 IF [HYPER-V-INTERFACE]\nroute -p add 192.168.99.1 mask 255.255.255.255 0.0.0.0 IF 32\n \n \n \n Verify the route was added by using  route print 192.168.99.1 . This command is useful after restart to check if the route needs to be created again. \n \n \n Next, configure your VM to claim the same address. Shell into the VM using  winpty multipass shell [YOUR-VM-NAME] . \n \n \n Change to the root user to make the following steps simpler:  sudo -i \n \n \n Determine your network adapter via  ip link , e.g. eth0. You just need the name. It's often second in the list after the loopback adapter. \n \n \n ubuntu@primary:~$  ip   link \n 1 : lo:  < LOOPBACK,UP,LOWER_UP >  mtu  65536  qdisc noqueue state UNKNOWN mode DEFAULT group default qlen  1000 \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n 2 : eth0:  < BROADCAST,MULTICAST,UP,LOWER_UP >  mtu  1500  qdisc mq state UP mode DEFAULT group default qlen  1000 \n    link/ether 00:15:5d:00:1a:0c brd ff:ff:ff:ff:ff:ff\n \n \n \n cd /etc/netplan \n \n \n Create a netplan entry starting with 0 so it's loaded first:  vi 0-entando.yaml \n \n \n network : \n   version :   2 \n   renderer :  networkd\n   ethernets : \n     [ YOUR - NETWORK - ADAPTER ] : \n       dhcp4 :  no\n       addresses :  \n         -   [ YOUR - IP ] /24\n \n Example: \n network : \n   version :   2 \n   renderer :  networkd\n   ethernets : \n     eth0 : \n       dhcp4 :  no\n       addresses :  \n         -  192.168.99.1/24\n \n \n \n Apply the changes via  netplan apply \n \n \n Verify connectivity via  ping 192.168.99.1  from the VM. You should get a response rather than a timeout. \n \n \n (Optional) Run a python server to verify you can access the VM from the host at  http://192.168.99.1:8000.  It may take a minute or so before the server is ready. \n \n \n python3 -m http.server 8000\n \n \n You should now be able to install Entando using the static IP. If your Entando installation stalled during startup and was previously configured using the static IP, it should continue starting up as soon as the external address is functional again. \n Option 3: Reinstall Entando \n We're including this option because it works and requires no additional configuration. If you plan to regularly work with Entando we recommend developing against a centralized and shared Kubernetes instance rather than running a full stack locally. If you need a cluster locally we recommend using option 1 or 2. \n JHipster \n Q:  How can I run JHipster on Windows? \n A:  JHipster requires a TTY interface for its menus to function correctly. Here are a few options to satisfy that requirement on Windows: \n \n Run  jhipster  under cmd or Powershell \n Using Git Bash, run  winpty jhipster.cmd \n Use Ubuntu bash via WSL (1 or 2) or within the Multipass VM \n Multipass with VirtualBox \n Multipass supports the use of VirtualBox on Windows as an alternative to using Hyper-V, say if you're using Windows Home. See the Multipass documentation on how to configure it to work with VirtualBox. \n In order to get Entando working correctly with this setup you will need to add a port forwarding rule so you can access Entando from your host system. \n \n \n Create your VM within Multipass. \n \n \n Go to the Oracle VM VirtualBox Manager and edit the  Network  settings for the VM. \n \n \n Go to the  Advanced  options and click  Port Forwarding Rules \n \n \n Add a new rule. \n \n Name : your choice \n Protocol : TCP \n Host IP : leave this blank \n Host Port : 80 \n Guest IP : leave this blank \n Guest Port : 80 \n Click OK \n \n \n \n At this point any requests to port 80 on your localhost should be forwarded to the VM. \n \n \n You can now identify the IP of your host and use that to configure the  ENTANDO_DEFAULT_ROUTING_SUFFIX  in your yaml file, e.g.  192.168.64.25.nip.io . You should not use the non-routable address (e.g. 10.0.2.15) identified from within the guest VM itself, but rather use the IP of the host. \n \n \n"},{title:"Deprecated: Create a local NPM registry for testing",frontmatter:{},regularPath:"/v6.2/tutorials/ecr/how-to-create-local-npm-registry.html",relativePath:"v6.2/tutorials/ecr/how-to-create-local-npm-registry.md",key:"v-ab0e5bc0",path:"/v6.2/tutorials/ecr/how-to-create-local-npm-registry.html",headers:[{level:2,title:"Start local nexus as a docker container",slug:"start-local-nexus-as-a-docker-container"},{level:2,title:"Setup a private npm registry",slug:"setup-a-private-npm-registry"},{level:2,title:"Setup npm-realm and user for publishing",slug:"setup-npm-realm-and-user-for-publishing"},{level:2,title:"Create the role",slug:"create-the-role"},{level:2,title:"Create the user",slug:"create-the-user"},{level:2,title:"Enable npm realm to support npm adduser or npm login",slug:"enable-npm-realm-to-support-npm-adduser-or-npm-login"},{level:2,title:"Configure NPM",slug:"configure-npm"},{level:2,title:"Config npm to use the local repository",slug:"config-npm-to-use-the-local-repository"},{level:2,title:"Login to the registry",slug:"login-to-the-registry"},{level:2,title:"Good to go",slug:"good-to-go"},{level:2,title:"Set the publish repository at package.json level",slug:"set-the-publish-repository-at-package-json-level"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Deprecated: Create a local NPM registry for testing \n Important \n This method is deprecated in favor of git which is the default repository mechanism for bundles as of Entando 6.2.\nSee  https://github.com/entando-k8s/entando-component-manager  for the necessary settings to use npm instead of git.\nSupport for npm registry will be discontinued in the future. \n \n As a registry you can use whatever technology you prefer. Some examples\nare the  NPM official registry ,\n Verdaccio  or\n Nexus \n For development purposes, let’s start a local Nexus repository and set\nit up as NPM registry \n Start local nexus as a docker container \n Start by creating a volume to host all the data you will build in nexus.\nThis is useful to save the content even if you will remove the docker\ncontainer. You can follow two different approaches here: 1. You create a\ndocker volume and mount it (that’s the sonatype recommanded approach) 2.\nYou create a folder, change the modification to 777 and use that as a\nvolume \n By following the first approach, here are the commands you will need to\nissue in order to run Nexus as a docker container using the docker\ncommand \n docker volume create --name nexus-data\ndocker run -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n \n With the second approach, create a directory (e.g.  nexus-data ) and set\nthe own to UID 200 \n mkdir nexus-data && chown -R 200:200 nexus-data\ndocker run -d -p 8081:8081 --name nexus -v "$(pwd)/nexus-data":/nexus-data sonatype/nexus3\n \n Nexus should be available at your localhost at port 8081 \n Now you need to sign-in as an admin to configure Nexus and make it\nusable as a private npm repository. To do so, you need to get the admin\ncredential from inside the container. \n docker exec -it nexus cat /nexus-data/admin.password\n \n Now you can use the password to access your private nexus instance as an\nadmin and change the admin password to something easier for you to work\nwith. \n Setup a private npm registry \n \n NOTE : Nexus allows you to setup both a private registry and a\nproxy to an external registry. For development purposes, having only a\nprivate registry could make sense in order to retrieve only local\nmodules and not modules available on remote registries, though feel\nfree to setup also a proxy if you want to get access to npm modules\noutside of the private registry. Check out the\n documentation \non nexus website for further details. \n \n To setup a local repository: 1. Go to the\n Server administration and configuration  page 2. Go to repositories 3.\nCreate a new repository 4. Choose the  npm (hosted)  5. Provide a name\nand save \n \n NOTE : If you want you can also create a group repository to\nsupport search from multiple sources (local/proxies) at the same time. \n Setup npm-realm and user for publishing \n In order to be able to login and publish into a repository you need to \n \n Create a role to enable user publishing 2. Create a user and assign\nroles to them 3. Enable the NPM realm to support  npm adduser  or\n npm login  commands \n Create the role \n \n \n Go to  Security > Roles > Create role > Nexus Role \n \n \n Choose a role ID and name \n \n \n In the privileges, add the one required for publishing, e.g.\n nx-repository-view-npm-<your-repo>-* \n \n \n Save \n Create the user \n \n \n Go to  Security > Users > Create local user \n \n \n Add the relevant informations for your user, set the user  Active \nand add the role you created in the previous step \n Enable npm realm to support  npm adduser  or  npm login \n \n \n Go to  Security > Realms \n \n \n Add  the npm Bearer Token Realm  to the active column \n Configure NPM \n Config npm to use the local repository \n In order to use the private repository as default repository you need to\nconfigure npm accordingly (or use the  --registry=  option with all your\ncommands) \n npm config set registry http://localhost:8081/repository/<repo-name>/\n \n \n Note A : The trailing slash at the end of the repository is\nrequired for the repository to work \n \n \n Note B : This repository will be used for all the npm methods, so\nbare in mind that changing the global repository will potentially\nbreak other projects. If you want to avoid this, continue to use the\n --registry  option. \n Login to the registry \n You should be able to login to the registry using the login command \n npm login --registry=http://localhost:8081/repository/<repo-name>/\n Good to go \n You can now publish your own npm modules to the private registry using\nthe publish command \n npm publish --registry=http://localhost:8081/repository/<repo-name>/\n Set the publish repository at package.json level \n In your npm module you can also add to the  package.json  an entry to\nmake the private repository the default for publishing. Add this to your\npackage.json file \n   "publishConfig": {\n    "registry": "http://localhost:8081/repository/<repo-name>/"\n  }\n \n '},{title:"How to setup a Nexus instance on a Kubernetes cluster",frontmatter:{},regularPath:"/v6.2/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.html",relativePath:"v6.2/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.md",key:"v-701e8b40",path:"/v6.2/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.html",headers:[{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a namespace for nexus",slug:"_1-create-a-namespace-for-nexus"},{level:3,title:"2. Create the deployment file.",slug:"_2-create-the-deployment-file"},{level:3,title:"3. Create the deployment",slug:"_3-create-the-deployment"},{level:3,title:"4. Create a service for nexus",slug:"_4-create-a-service-for-nexus"},{level:3,title:"5. Access nexus",slug:"_5-access-nexus"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' How to setup a Nexus instance on a Kubernetes cluster \n Requirements \n \n \n A kubernetes cluster (that could be minikube, minishift, microk8s,\netc.) \n \n \n A dedicated namespace for nexus (we are going to use  nexus  as\ntarget namespace) \n Steps \n 1. Create a namespace for nexus \n We are going to deploy our nexus instance on a namespace called  nexus \n kubectl create namespace nexus\n 2. Create the deployment file. \n Let’s create a  Deployment.yaml  file to describe our nexus\ndeployment. \n Here things get a little bit different between nexus 2.x and nexus 3.x.\nIn both cases though we are going to use a volume mount for nexus-data,\nremember that this is going to be removed when the pod is removed. In\nproduction you should probably use some kind of persistent data. \n Nexus 2.x \n Here we are passing a few customizable ENV variable and adding a volume\nmount for nexus data. \n Deployment.yaml. \n     apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nexus\n      namespace: nexus\n    spec:\n      replicas: 1\n      template:\n        metadata:\n          labels:\n            app: nexus-server\n        spec:\n          containers:\n            - name: nexus\n              image: sonatype/nexus:latest\n              env:\n              - name: MAX_HEAP\n                value: "800m"\n              - name: MIN_HEAP\n                value: "300m"\n              resources:\n                limits:\n                  memory: "4Gi"\n                  cpu: "1000m"\n                requests:\n                  memory: "2Gi"\n                  cpu: "500m"\n              ports:\n                - containerPort: 8081\n              volumeMounts:\n                - name: nexus-data\n                  mountPath: /sonatype-work\n          volumes:\n            - name: nexus-data\n              emptyDir: {}\n Nexus 3.x \n For Nexus 3.x we dont use any custom env variables. You can check the\nofficial docker repo for the supported env variables. \n Deployment.yaml. \n     apiVersion: extensions/v1beta1\n    kind: Deployment\n    metadata:\n      name: nexus\n      namespace: nexus\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n            app: nexus-server\n      template:\n        metadata:\n          labels:\n            app: nexus-server\n        spec:\n          containers:\n            - name: nexus\n              image: sonatype/nexus3:latest\n              resources:\n                limits:\n                  memory: "4Gi"\n                  cpu: "1000m"\n                requests:\n                  memory: "2Gi"\n                  cpu: "500m"\n              ports:\n                - containerPort: 8081\n              volumeMounts:\n                - name: nexus-data\n                  mountPath: /nexus-data\n          volumes:\n            - name: nexus-data\n              emptyDir: {}\n 3. Create the deployment \n Now let’s create the deployment \n kubectl create -f Deployment.yaml\n \n You can check the deployment pod status with \n kubectl get pod -n nexus\n 4. Create a service for nexus \n Now you need to create a  Service.yaml  file that will to expose the\nnexus endpoint using NodePort. \n \n Note \n If you are on a cloud, you can expose the service using a load\nbalancer using the service type Loadbalancer. Also, the Prometheus\nannotations will help in service endpoint monitoring by Prometheus. \n \n Service.yaml. \n apiVersion: v1\nkind: Service\nmetadata:\n  name: nexus-service\n  namespace: devops-tools\n  annotations:\n      prometheus.io/scrape: \'true\'\n      prometheus.io/path:   /\n      prometheus.io/port:   \'8081\'\nspec:\n  selector:\n    app: nexus-server\n  type: NodePort\n  ports:\n    - port: 8081\n      targetPort: 8081\n      nodePort: 32000\n \n Now you can create the service \n kubectl create -f Service.yaml\n \n Check the service configuration using kubectl. \n kubectl describe service nexus-service -n devops-tools\n 5. Access nexus \n Now you will be able to access nexus on any of the Kubernetes node IP on\nport 32000/nexus as we have exposed the node port. For example, \n \n \n \n \n \n \n \n Service \n Url \n \n \n Nexus 2 \n http://35.144.130.153:32000/nexus \n \n \n Nexus 3 \n http://35.144.130.153:32000 \n \n \n \n \n Note \n For Nexus 2.x and Nexus 3 < 3.17 the default username and password\nwill be admin & admin123, while for Nexus 3 >= 3.17 you need to get\nthe password from within the container with\n cat /nexus-data/admin.password \n \n'},{title:"Creating an Entando Component Repository (ECR) bundle using git repository",frontmatter:{},regularPath:"/v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-git.html",relativePath:"v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-git.md",key:"v-3d12ebad",path:"/v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-git.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a bundle folder",slug:"_1-create-a-bundle-folder"},{level:3,title:"2. Add a descriptor.yaml file",slug:"_2-add-a-descriptor-yaml-file"},{level:3,title:"3. Add a simple component to the bundle",slug:"_3-add-a-simple-component-to-the-bundle"},{level:3,title:"4. Initialize git and add remote repository",slug:"_4-initialize-git-and-add-remote-repository"},{level:3,title:"5. Publish a git tag",slug:"_5-publish-a-git-tag"},{level:3,title:"6. Create the EntandoDeBundle custom resource for Kubernetes",slug:"_6-create-the-entandodebundle-custom-resource-for-kubernetes"},{level:3,title:"7. Upload the bundle to Kubernetes.",slug:"_7-upload-the-bundle-to-kubernetes"},{level:2,title:"Conclusion",slug:"conclusion"},{level:2,title:"Resources",slug:"resources"}],lastUpdated:"12/15/2020, 3:24:13 PM",content:' Creating an Entando Component Repository (ECR) bundle using git repository \n Purpose \n Generate a simple Entando Component Repository (ECR) bundle shareable in an Entando 6 environment using git repository \n Requirements \n You can create the bundle using you favorite code editor. To share the bundle you will need: \n \n NodeJS,  npm , and  git \n A K8S cluster where to upload the bundle (e.g. minikube, microk8s, minishift) configured correctly for Entando 6 \n A namespace in the cluster reachable from the operator and entando-k8s-service \n The  entando-bundle-cli  command-line tool to generate the necessary metadata to share the bundle in a Kubernetes cluster \n Steps \n 1. Create a bundle folder \n To start, let’s create a new folder to host your bundle. \n mkdir example-bundle && cd example-bundle\n 2. Add a descriptor.yaml file \n For a bundle to be readable by the ECR it will need at least a  descriptor.yaml  file in the folder. Let’s create it with some minimal information. \n vim descriptor.yaml\n \n Here is some content for your base descriptor. \n code: example-bundle\ndescription: This is an example of an Entando 6 bundle\n\ncomponents:\n 3. Add a simple component to the bundle \n This bundle will contains only a simple widget. \n Let’s first create the widget metadata in a dedicated folder. \n mkdir widgets\n\nvim widgets/example-widget.yaml\n \n Now let’s populate the  example-widget.yaml  metadata with some content: \n code: example-widget\ntitles:\n  en: Example Widget\n  it: Widget d\'esempio\ngroup: free\ncustomUi: <h2>Hi from Example Widget</h2>\n \n Finally, add a reference to this widget in the bundle  descriptor.yaml  file. \n code: example-bundle\ndescription: This is an example of a Entando 6 bundle\n\ncomponents:\n    widgets:\n        - widgets/example-widget.yaml\n 4. Initialize git and add remote repository \n From the bundle root, run \n git init\ngit add .\ngit commit -m "Init Git repository"\n \n This will initialize an empty Git repository and commit files. \n Add remote repository as origin and push the bundle. \n git remote add origin https://your/remote/repository.git\ngit push -u origin master\n \n \n Important \n descriptor.yaml  file has to be at the root of repository. \n 5. Publish a git tag \n Your bundle has to have a tag. To add it, run \n git tag -a "v0.0.1" -m "My first tag"\ngit push --tags\n 6. Create the EntandoDeBundle custom resource for Kubernetes \n Assuming the "entando-bundle-cli" command-line utility is already installed and available globally on your system, you can now convert the module into an EntandoDeBundle K8S custom resource. We assume you have a namespace in a Kubernetes cluster which is readable from the Entando Operator and you have the permissions to create resources there. Let’s call this namespace  accessible-ns \n You can also provide a thumbnail for your bundle using  --thumbnail-url=<your-thumbnail-url . \n Run the  entando-bundle from-git  command providing your remote git repository link (created in step 4) as  --repository  option: \n entando-bundle from-git --name=example-bundle --namespace=accessible-ns --repository=https://your/remote/repository.git --dry-run > example-bundle.yaml\n 7. Upload the bundle to Kubernetes. \n Now you simply need to upload the bundle into Kubernetes. \n kubectl create -f example-bundle.yaml\n Conclusion \n You should now have the bundle available in your cluster and accessible from the App Builder. \n Resources \n \n Entando Bundle CLI\nproject \n \n'},{title:"Deprecated: Creating an Entando Component Repository (ECR) bundle using npm registry",frontmatter:{},regularPath:"/v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.html",relativePath:"v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.md",key:"v-43efab4d",path:"/v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-npm.html",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a bundle folder",slug:"_1-create-a-bundle-folder"},{level:3,title:"2. Add a descriptor.yaml file",slug:"_2-add-a-descriptor-yaml-file"},{level:3,title:"3. Add a simple component to the bundle",slug:"_3-add-a-simple-component-to-the-bundle"},{level:3,title:"4. Make the bundle an NPM module to be hostable on an NPM registry.",slug:"_4-make-the-bundle-an-npm-module-to-be-hostable-on-an-npm-registry"},{level:3,title:"5. Publish the bundle on an NPM registry",slug:"_5-publish-the-bundle-on-an-npm-registry"},{level:3,title:"6. Create the EntandoDeBundle custom resource for Kubernetes",slug:"_6-create-the-entandodebundle-custom-resource-for-kubernetes"},{level:3,title:"7. Upload the bundle to Kubernetes",slug:"_7-upload-the-bundle-to-kubernetes"},{level:2,title:"Conclusion",slug:"conclusion"},{level:2,title:"Resources",slug:"resources"}],lastUpdated:"12/15/2020, 3:24:13 PM",content:' Deprecated: Creating an Entando Component Repository (ECR) bundle using npm registry \n Important \n This method is deprecated in favor of git which is the default repository mechanism for bundles as of Entando 6.2.\nSee  https://github.com/entando-k8s/entando-component-manager  for the necessary settings to use npm instead of git.\nSupport for npm registry will be discontinued in the future. \n Purpose \n Generate a simple Entando Component Repository (ECR) bundle shareable in an Entando 6 environment using npm registry \n Requirements \n You can create the bundle using you favorite text/code editor. To share the bundle you will need: \n \n Node / NPM \n An NPM registry where to upload the bundle \n A K8S cluster where to upload the bundle (e.g. minikube, microk8s, minishift) configured correctly for Entando 6 \n A namespace in the cluster reachable from the operator and entando-k8s-service \n The  entando-bundle-cli  command-line tool to generate the necessary metadata to share the bundle in a Kubernetes cluster \n Steps \n 1. Create a bundle folder \n To start, let’s create a new folder to host your bundle. \n mkdir example-bundle && cd example-bundle\n 2. Add a descriptor.yaml file \n For a bundle to be readable by the ECR it will need at least a  descriptor.yaml  file in the folder. Let’s create it with some minimal information. \n vim descriptor.yaml\n \n Here is some content for your base descriptor. \n code: example-bundle\ndescription: This is an example of an Entando 6 bundle\n\ncomponents:\n 3. Add a simple component to the bundle \n This bundle will contains only a simple widget. \n Let’s first create the widget metadata in a dedicated folder. \n mkdir widgets\n\nvim widgets/example-widget.yaml\n \n Now let’s populate the  example-widget.yaml  metadata with some content: \n code: example-widget\ntitles:\n  en: Example Widget\n  it: Widget d\'esempio\ngroup: free\ncustomUi: <h2>Hi from Example Widget</h2>\n \n Finally, add a reference to this widget in the bundle  descriptor.yaml  file. \n code: example-bundle\ndescription: This is an example of a Entando 6 bundle\n\ncomponents:\n    widgets:\n        - widgets/example-widget.yaml\n 4. Make the bundle an NPM module to be hostable on an NPM registry. \n From the bundle root, initialize a  package.json  file \n npm init\n \n Follow the instructions on screen. Here is an example of a possible  package.json  file: \n {\n  "name": "example-bundle",\n  "version": "1.0.0",\n  "description": "An example of an Entando6 bundle",\n  "license": "LGPL-2.1",\n  "main": "descriptor.yaml",\n  "keywords": [\n    "entando6",\n    "digital-exchange",\n    "entando-de-bundle"\n  ]\n}\n \n \n Note \n Try to keep the name of the published bundle the same as the bundle code in the descriptor.yaml file to avoid confusion. \n 5. Publish the bundle on an NPM registry \n Now your bundle is ready to be published on an NPM registry. \n From the root of the bundle (where the package.json and descriptor.yaml files are) you can issue an  npm publish  command. \n \n Important \n It would be ideal to have a private npm registry to upload this into.\nCheck the  resources section  for more details; \n \n npm publish --registry=<your-registry>\n 6. Create the EntandoDeBundle custom resource for Kubernetes \n Assuming the "entando-bundle-cli" command-line utility is already installed and available globally on your system, you can now convert the module into an EntandoDeBundle K8S custom resource. We assume you have a namespace in a Kubernetes cluster which is readable from the Entando Operator and you have the permissions to create resources there. Let’s call this namespace  accessible-ns \n You can also provide a thumbnail for your bundle using  --thumbnail-url=<your-thumbnail-url . \n entando-bundle from-npm @entando/example-bundle --name=example-bundle --namespace=accessible-ns --dry-run > example-bundle.yaml\n 7. Upload the bundle to Kubernetes \n Now you simply need to upload the bundle into Kubernetes. \n kubectl create -f example-bundle.yaml\n Conclusion \n You should now have the bundle available in your cluster and accessible from the App Builder. \n Resources \n \n \n Setup a local npm registry for testing\npurposes \n \n \n Entando Bundle CLI\nproject \n \n \n'},{title:"Use Blueprint Generated Plugin and Micro Frontends Without a Bundle",frontmatter:{},regularPath:"/v6.2/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.html",relativePath:"v6.2/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.md",key:"v-ebd258e6",path:"/v6.2/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:2,title:"1. Generate a docker image for your microservice",slug:"_1-generate-a-docker-image-for-your-microservice"},{level:2,title:"2. Publish the Docker image to Docker registry (DockerHub or equivalent)",slug:"_2-publish-the-docker-image-to-docker-registry-dockerhub-or-equivalent"},{level:2,title:"3. Deploy the plugin into your Entando cluster",slug:"_3-deploy-the-plugin-into-your-entando-cluster"},{level:2,title:"4. Wait for your plugin to be in Running state and link the plugin with the app using an EntandoAppPluginLink custom resource",slug:"_4-wait-for-your-plugin-to-be-in-running-state-and-link-the-plugin-with-the-app-using-an-entandoapppluginlink-custom-resource"},{level:2,title:"5. Upload the micro frontends to your Entando App",slug:"_5-upload-the-micro-frontends-to-your-entando-app"},{level:2,title:"6. Use the microfrontend and microservice",slug:"_6-use-the-microfrontend-and-microservice"}],lastUpdated:"11/20/2020, 1:52:30 PM",content:' Use Blueprint Generated Plugin and Micro Frontends Without a Bundle \n Objective \n In this tutorial you will learn how to use the plugin and microfrontend generated using the Entando Blueprint\nin a running cluster without the need to include the components in a bundle. \n If you haven\'t already generated a plugin and micro frontends with the component generator go here first  Generate a Plugin \n Requirements \n \n \n An Entando Plugin built with the Entando Component Generator and populated with micro frontends \n \n \n Node and NPM are installed on your machine (use LTS version) \n \n \n Docker is installed on your machine and you are able to upload images to docker-hub or an image repository of your\nchoice \n \n \n An installed instance of the Entando platform running Kubernetes. See  Getting Started \n Steps \n 1. Generate a docker image for your microservice \n JHipster uses the JIB Maven plugin to generate a docker image for your\nmicroservice. \n The name of the output image generated with JIB will be composed by: \n \n The organization you chose during the setup wizard (by default that\'s set to  entando ) \n The name of the application \n Version  0.0.1-SNAPSHOT \n \n You can build the docker image with this command \n ./mvnw -Pprod clean package jib:dockerBuild\n \n If for example during setup wizard you chose a custom organization  myorg  and the set the application name to  jhipster  the resulting docker image is going to be  myorg/jhipster:0.0.1-SNAPSHOT \n \n Note \n The output image name can be changed in the  pom.xml  file by configuring\nthe  plugins.plugin.jib-maven-plugin.configuration.to.image  tag \n \n  <plugin>\n   <groupId>com.google.cloud.tools</groupId>\n   <artifactId>jib-maven-plugin</artifactId>\n   <configuration>\n     \x3c!-- ... --\x3e\n     <to>\n       <image>\x3c!-- use a custom value here --\x3e</image>\n     </to>\n     \x3c!-- ... --\x3e\n   </configuration>\n </plugin>\n \n \n Note \n Output image name can also be set by customizing the  ./mvnw  command using the  -Djib.to.image \nparameter. For example, if you want to build an image with organization  myneworg , name  myapp  and version  latest  you can do \n \n  ./mvnw -Pprod clean package jib:dockerBuild -Djib.to.image=myneworg/myapp:latest\n \n \n Warning \n If you change the target image of the docker build, remember to update\nthe plugin metadata in the bundle accordingly. \n 2. Publish the Docker image to Docker registry (DockerHub or equivalent) \n Let’s now publish the docker image for the microservice to make it\navailable later during bundle installation in the cluster. \n docker push <name-of-the-image:tag>\n 3. Deploy the plugin into your Entando cluster \n You can now deploy the plugin custom resource generated by the Entando Blueprint in the  bundle/plugins  folder. \n \n Warning \n As stated in step 1, if you changed the target image of your docker build, the plugin custom resource\nin the  bundle/plugins  folder needs to be updated to point to the correct image \n \n From the jhipster project root \n cd bundle/plugins\n\nkubectl create -f <plugin-file.yaml> -n entando\n 4. Wait for your plugin to be in  Running  state and link the plugin with the app using an  EntandoAppPluginLink  custom resource \n Once the plugin server deployment is up and running, you can create an  EntandoAppPluginLink custom resource \nto make the plugin API available from the EntandoApp domain. \n Here an example of a EntandoAppPluginLink custom resource. Some assumptions with this custom resource: \n \n The EntandoPlugin generated with the blueprint is  my-demo-plugin \n The EntandoApp exposing the  my-demo-plugin  APIs is  my-entando-app \n Both are deployed on the  entando  namespace. \n The link itself is named  my-entando-app-to-my-demo-plugin-link \n The name of the link yaml is  my-link.yaml \n \n \n Warning \n Remember to change the fields to match your setup. \n \n apiVersion: entando.org/v1\nkind: EntandoAppPluginLink\nmetadata:\n  name: my-entando-app-to-my-demo-plugin-link\n  namespace: entando\nspec:\n  entandoAppName: my-entando-app\n  entandoAppNamespace: entando\n  entandoPluginName: my-demo-plugin\n  entandoPluginNamespace: entando\n \n Now add this link to your environment \n kubectl create -f my-link.yaml -n entando\n \n A new link deployer will start and will work behind the scenes to add your plugin  ingressPath  (this is part of the\nplugin  spec ) to the EntandoApp ingress \n 5. Upload the micro frontends to your Entando App \n Now that the plugin and the app are linked together, you can proceed to generate the Micro Frontend from the App Builder\nand upload the static resources like  js  and  css  files. \n \n From AppBuilder go to  Configuration -> File Browser  and create a new folder inside the  public  folder and make the name of the folder the same as the name of the bundle (the value is in the  code  field available in the  /bundle/descriptor.yaml  file of the blueprint project) or using a custom name, e.g.  demo-widget \n \n \n Warning \n If you choose to use a custom folder, remember to update the references in the customUI of the widget later \n \n \n Upload all the resources available in the  /bundle/resources  folder\nof the blueprint project into the folder you created above in the App Builder file browser. \n \n \n Warning \n You can decide to recreate the folder structure to be the same as the one in  /bundle/resources  or not, but you need to update the\nreferences in the customUI / configUI of the widget later if you choose a different folder structure. \n \n \n \n Create the widget. In the App Builder go to  UX Patterns -> Widgets . \n \n \n Select  Add \n \n \n Set whatever title you want \n \n \n For the customUI copy the one created in one of the widgets you generated from the blueprint.\nAs an example, the customUI for the  detailWidget  of the conference entity is available in\n /bundle/ui/widgets/conference/detailsWidget/conference-details-widget.ftl \n \n \n \n Warning \n Remember to update all the references in the customUI to use the custom folder structure you defined \n \n \n Update the service url to match the location where you deployed the ingress for your microservice if you used a path different than the default. For example, \n \n Update the service-url value with the relative path of your service if you\'re deploying a bundle\n\t\tEx. <car-table service-url="/newBp/api"  />\n\tOr use the full path if you\'re deploying the BE and FE individually\n\t\tEx. <car-table service-url="http://newbp-plugin-entando.192.168.64.7.nip.io/newBp/api"/>\n \n \n Note \n As of Entando 6.3 your Entando application will include a keycloak_auth fragment by default that will inject the token\nand connection to Keycloak that your microfrontends need to invoke protected APIs. You can see this token at  UX Patterns -> Fragments  in the\nApp Builder and search for keycloak-auth. \n \n \n If you\'re creating a new page from scratch or your page is missing the Keycloak fragment you can add it with this freemarker snippet \n \n <@wp.fragment code="keycloak-auth" escapeXml=false />\n 6. Use the microfrontend and microservice \n You can now use your micro frontends and your microservice in your Entando App. \n'},{title:"Create an Angular Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/micro-frontends/angular.html",relativePath:"v6.2/tutorials/micro-frontends/angular.md",key:"v-6847b620",path:"/v6.2/tutorials/micro-frontends/angular.html",headers:[{level:2,title:"Create Angular App",slug:"create-angular-app"},{level:3,title:"Convert to Custom Element",slug:"convert-to-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widget",slug:"add-widget"},{level:3,title:"See It in Action",slug:"see-it-in-action"}],lastUpdated:"9/30/2020, 7:30:41 AM",content:" Create an Angular Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n \n \n Tested Versions \n node v13.8.0 → We suggest using  nvm  to handle node installations. \n Create Angular App \n Install Angular CLI. \n npm   install  -g @angular/cli\n \n Generate a new angular application. \n ng new angular-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-widget\n \n ng serve\n \n This is the expected output: \n angular-widget\n├── e2e\n│   └── src\n│       ├── app.e2e-spec.ts\n│       └── app.po.ts\n│\n├── node_modules\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   └── app.module.ts\n│   │\n│   ├── assets\n│   │   └── .gitkeep\n│   │\n│   ├── environment\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   │\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   └── test.ts\n│\n├── .editorconfig\n├── .gitignore\n├── angular.json\n├── browserlist\n├── karma.conf.js\n├── package.json\n├── README.md\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.spec.json\n└── tslint.json\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n WARNING \n Install the Angular elements package using  ng add , not with  npm install  as it runs additional steps behind the scenes like adding the  document-register-element  polyfill. \n \n TIP \n Angular elements are Angular components packaged as custom elements (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way. \n \n Open  angular-widget/src/app/app.module.ts . \n \n Here's what the initial file looks like: \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule  }   from   '@angular/core' ; \n\n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  bootstrap :   [ AppComponent ] \n } ) \n export   class   AppModule   {   } \n \n Replace the entire file with: \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-widget' ,  el ) ; \n   } \n } \n \n \n In the initial file,  AppModule  is bootstrapped directly during application launch. \n In the updated file, we booststrap our custom element using the  ngDoBootstrap()  method . \n \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Test Micro Frontend \n Now, let's check our custom element to see if it's working. \n Open  angular-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-widget /> . \n <! doctype   html > \n < html   lang = \" en \" > \n < head > \n   < meta   charset = \" utf-8 \" > \n   < title > AngularWidget </ title > \n   < base   href = \" / \" > \n   < meta   name = \" viewport \"   content = \" width=device-width, initial-scale=1 \" > \n   < link   rel = \" icon \"   type = \" image/x-icon \"   href = \" favicon.ico \" > \n </ head > \n < body > \n   < angular-widget   /> \n </ body > \n </ html > \n \n Congratulations! \n You’re now running  Angular  in a micro frontend. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate an  angular-widget/dist  directory. \n If we assume browser support for  ES6 (ECMAScript 2015) , we can focus on the following JavaScript files to publish our app: \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Generated Build Files \n --outputHashing=none  generates files without hashes so we can deploy new versions of the micro frontend without having to reconfigure our widget in Entando to point to the newly built files. \n \n If you want to use file names with content hashes to avoid potential caching issues in your browser, you can update the  Custom UI  field of your widget after building new versions of your micro frontend. Widget configuration is covered in the next section. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Administration  at the lower left hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  angular-widget \n \n \n Click  Save . \n \n \n Click  angular-widget . \n \n \n Click 'Upload Files`. \n \n \n Upload the following files from  angular-widget/dist/angular-widget : \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Add Widget \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n Click  Add  at the lower right. \n \n \n \n Enter the following: \n \n \n Code: angular_widget  → note: dashes are not allowed \n Title: Angular Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/runtime-es2015.js \" > </ script > \n\n < angular-widget   /> \n \n \n Click  Save . \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n See It in Action \n Let's see the Angular micro frontend in action on our page. \n Add Page \n Note \n If you've already configured your home page: \n \n   Next to the  Home  folder, under  Actions , click  Configure . \n   Skip to the  Add Widget  section. \n \n \n Let's add our widget to the  Home  page. \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n Add Widget \n \n \n In the Search field in right-hand sidebar, enter  Angular Widget . \n \n \n Drag and drop  Angular Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n Congratulations! \n You now have an Angular micro frontend running in Entando. \n \n"},{title:"Microfrontends",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/micro-frontends/",relativePath:"v6.2/tutorials/micro-frontends/README.md",key:"v-27be8b6a",path:"/v6.2/tutorials/micro-frontends/",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Tutorials",slug:"tutorials"}],lastUpdated:"8/11/2020, 4:23:51 PM",content:" Microfrontends \n Introduction \n \n The idea behind Micro Frontends is to think about a website or web app as  a composition of features  which are owned by  independent teams . Each team has a  distinct area of business  or  mission  it cares about and specialises in. A team is  cross functional  and develops its features  end-to-end , from database to user interface. \n —  Michael Geers,  micro-frontends.org \n \n Think of micro frontends as the implementation of a microservices architecture applied to the full web application that extends all the way to the frontend. \n Entando implements micro frontends based on  Web Components , a set of technologies that allow developers to create reusable custom elements supported by all major internet browsers. \n Web Components can work with vanilla JavaScript as well as with the most popular web frameworks (e.g., React, Angular, and Vue). \n Entando's microservice and micro frontend architecture allows developers to work with their favorite technology stack, and makes it easier for companies to integrate disparate applications. \n Tutorials \n \n \n Create a React Micro Frontend \n \n \n Create an Angular Micro Frontend \n \n \n Add an App Builder configuration screen to a\nwidget \n \n \n Display widget configuration \n \n \n The Entando Blueprint generated widgets \n \n \n Communicate Between Micro Frontends \n \n \n Widget authentication with Keycloak \n \n \n"},{title:"Authentication",frontmatter:{},regularPath:"/v6.2/tutorials/micro-frontends/authentication.html",relativePath:"v6.2/tutorials/micro-frontends/authentication.md",key:"v-4486ad80",path:"/v6.2/tutorials/micro-frontends/authentication.html",lastUpdated:"8/11/2020, 4:23:51 PM",content:" Authentication \n Keycloak is used for authentication. \n To set up keycloak server, please refer to Keycloak\n documentation . \n As all MFE widgets use the same Keycloak instance, it should be\ninitialized on a container of all widgets. \n Using Details widget generated using Entando JHipster blueprint as an\nexample, let’s get familiar with authentication implementation. \n As mentioned before, widget auth implementation assumes that Keycloak is\ninitialized outside of the widget. In Details example, it is done in\nindex.html where Keycloak server’s keycloak.js is used. \n <head>\n    <script src=\"keycloak.js\"><\/script>\n    <script>\n        var keycloak = new Keycloak();\n        keycloak\n          .init({ onLoad: 'check-sso' })\n          .success(onInit);\n    <\/script>\n</head>\n \n \n Note \n keycloak.js is provided by your Keycloak server at\n <SERVER_URL:PORT>/auth/js/keycloak.js \n \n Keycloak is initialized by passing Keycloak server path, realm and\nclient ID and calling  init({/* options */})  function. \n const keycloak = Keycloak({\n  url: 'http://localhost:9080/auth',\n  realm: 'jhipster',\n  clientId: 'jhipster-entando-react-client',\n});\n\nkeycloak\n  .init({ onLoad: 'check-sso' })\n  .success(onInit);\n \n Depending on Keycloak version you are using,  init()  function can\nreturn a Promise (newer versions support  promiseType: 'native' \noption). \n keycloak\n  .init({ onLoad: 'check-sso', promiseType: 'native' })\n  .then(authenticated => {\n    alert(authenticated ? 'Authenticated' : 'Not authenticated');\n  })\n  .catch(() => {\n    alert('Failed to initialize');\n  });\n \n All the Keycloak events are made custom events - this way widgets could\nreact to them if a need arises. \n function createKcDispatcher(payload) {\n  return () => window.dispatchEvent(new CustomEvent('keycloak', { detail: payload }));\n}\n\nkeycloak.onReady = createKcDispatcher({ eventType: 'onReady' });\nkeycloak.onAuthSuccess = createKcDispatcher({ eventType: 'onAuthSuccess' });\nkeycloak.onAuthError = createKcDispatcher({ eventType: 'onAuthError' });\nkeycloak.onAuthRefreshSuccess = createKcDispatcher({ eventType: 'onAuthRefreshSuccess' });\nkeycloak.onAuthRefreshError = createKcDispatcher({ eventType: 'onAuthRefreshError' });\nkeycloak.onAuthLogout = createKcDispatcher({ eventType: 'onAuthLogout' });\nkeycloak.onTokenExpired = createKcDispatcher({ eventType: 'onTokenExpired' });\nconst onInit = createKcDispatcher({ eventType: 'onInit' });\n \n Keycloak object is then stored into  window.entando  object for widgets\nto have access to. \n window.entando = {\n  ...(window.entando || {}),\n  keycloak,\n};\n \n On the widget side inside the custom element creation logic Keycloak\nobject is accessed and passed into the component via Keycloak context \n const getKeycloakInstance = () =>\n  (window &&\n    window.entando &&\n    window.entando.keycloak &&\n    { ...window.entando.keycloak, initialized: true }\n  ) || { initialized: false };\n\n\n// ...\n\nconstructor(...args) {\n  // ...\n  this.keycloak = getKeycloakInstance();\n}\n\nconnectedCallback() {\n  // ...\n  ReactDOM.render(\n    <KeycloakContext.Provider value={this.keycloak}>\n      <ConferenceDetailsContainer />\n    </KeycloakContext.Provider>,\n    this.mountPoint\n  );\n}\n \n And on the component side you can show different content depending on\nthe authentication status \n At  auth/KeycloakViews.js \n export const AuthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return authenticated ? children : null;\n};\n\nexport const UnauthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return !authenticated ? children : null;\n};\n \n At  components/ConferenceDetailsContainer.js \n render() {\n  const { conference, loading } = this.state;\n  const { t, keycloak } = this.props;\n\n  return (\n    <ThemeProvider theme={this.theme}>\n      <UnauthenticatedView keycloak={keycloak}>\n        {t('common.notAuthenticated')}\n      </UnauthenticatedView>\n      <AuthenticatedView keycloak={keycloak}>\n        {loading && t('common.loading')}\n        {!loading && <ConferenceDetails conference={conference} />}\n      </AuthenticatedView>\n    </ThemeProvider>\n  );\n}\n \n \n Note \n Keycloak object is accessible via props because of  withKeycloak  HOC:\n export default withKeycloak(ConferenceDetailsContainer); \n \n"},{title:"Communicate Between Micro Frontends",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/micro-frontends/communication.html",relativePath:"v6.2/tutorials/micro-frontends/communication.md",key:"v-23fbd1b8",path:"/v6.2/tutorials/micro-frontends/communication.html",headers:[{level:2,title:"Publisher",slug:"publisher"},{level:3,title:"Create Custom Event",slug:"create-custom-event"},{level:3,title:"Update React App to Dispatch Event",slug:"update-react-app-to-dispatch-event"},{level:3,title:"Test Event Dispatcher",slug:"test-event-dispatcher"},{level:2,title:"Subscriber",slug:"subscriber"},{level:3,title:"Add Event Listener",slug:"add-event-listener"},{level:3,title:"Display Custom Event",slug:"display-custom-event"},{level:3,title:"Test Event Listener",slug:"test-event-listener"},{level:2,title:"Add Widgets to App Builder",slug:"add-widgets-to-app-builder"},{level:3,title:"Create Environment File",slug:"create-environment-file"},{level:3,title:"Run npm build",slug:"run-npm-build"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widgets",slug:"add-widgets"},{level:3,title:"Add Page Template",slug:"add-page-template"},{level:3,title:"View on Homepage",slug:"view-on-homepage"},{level:2,title:"Angular to React",slug:"angular-to-react"},{level:3,title:"Create Angular Publisher",slug:"create-angular-publisher"},{level:3,title:"Add to App Builder",slug:"add-to-app-builder"}],lastUpdated:"8/11/2020, 4:23:51 PM",content:" Communicate Between Micro Frontends \n Recommended Learning \n \n Tutorial:  Create a React Micro Frontend \n Tutorial:  Create an Angular Micro Frontend \n \n \n Entando supports communication between micro frontends using  Custom Events , an established web standard. In this tutorial, we'll build: \n \n A React micro frontend that publishes an event \n A React micro frontend that listens to an event \n An Angular micro frontend that publishes an event to a React micro frontend \n Publisher \n Create a simple app to publish an event. \n npx create-react-app publisher-widget --use-npm\n \n Start the app. \n cd  publisher-widget\n \n npm  start\n Create Custom Event \n Next, add event firing logic. \n Add a new file  publisher-widget/src/PublisherWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   PublisherWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . onGreet   =   name   =>   this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App onGreet = { this . onGreet }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'publisher-widget' ,  PublisherWidgetElement ) ; \n\n export   default  PublisherWidgetElement ; \n \n \n In the  CustomEvent  constructor,  detail  is the specific name to use in the event payload, as per the  DOM specification . \n Import Custom Element \n Update  publisher-widget/src/index.js . \n import   './index.css' ; \n import   './PublisherWidgetElement' ; \n Test Custom Element \n Update  publisher-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < publisher-widget   /> \n    ...\n   </ body > \n Update React App to Dispatch Event \n Update  publisher-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n class   App   extends   React . Component   { \n   constructor ( props )   { \n     super ( props ) ; \n     this . state  =   {  name :   '' } ; \n   } \n\n   handleNameChange ( value )   { \n     this . setState ( prevState   =>   ( { \n       ... prevState , \n      name :  value , \n     } ) ) ; \n   } \n\n   render ( )   { \n     const   {  name  }   =   this . state ; \n     const   {  onGreet  }   =   this . props ; \n     return   ( \n       < div > \n         < h1 > Send a greeting < / h1 > \n         < label htmlFor = \"name\" > Name < / label > \n         < input id = \"name\"  onChange = { e   =>   this . handleNameChange ( e . target . value ) }  value = { name }   / > \n         < button onClick = { ( )   =>   onGreet ( name ) } > Say hello ! < / button > \n       < / div > \n     ) ; \n   } \n } \n\n export   default  App ; \n Test Event Dispatcher \n In the JavaScript console of your browser, enter: \n window . addEventListener ( 'greeting' ,   ( evt )   =>  console . log ( 'Hello' ,  evt . detail . name ) ) \n \n Write something in the text field. Click the \"Say hello!\" button and take a look at the JS console. It will show the event message. \n Congratulations! \n You’ve now published a custom event. \n Subscriber \n Next, let’s create the subscriber. \n npx create-react-app subscriber-widget --use-npm\n \n Start the app. \n cd  subscriber-widget\n \n npm  start\n Add Event Listener \n Add a new file  subscriber-widget/src/SubscriberWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   SubscriberWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . name  =   null ; \n     this . subscribeToWidgetEvent ( EVENTS . greeting ,   ( evt )   =>   this . onGreeting ( evt . detail . name ) ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   subscribeToWidgetEvent ( eventType ,  eventHandler )   { \n    window . addEventListener ( eventType ,  eventHandler ) ; \n   } \n\n   onGreeting ( name )   { \n     this . name  =  name ; \n     this . render ( ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App name = { this . name }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'subscriber-widget' ,  SubscriberWidgetElement ) ; \n\n export   default  SubscriberWidgetElement ; \n Import Custom Element \n Update  subscriber-widget/src/index.js . \n import   './index.css' ; \n import   './SubscriberWidgetElement' ; \n Test Micro Frontend \n Update  subscriber-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < subscriber-widget > \n    ...\n   </ body > \n Display Custom Event \n Update  subscriber-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n function   App ( {  name  } )   { \n   return  name  ?   ( < h2 > Just got a greeting  from   { name } < / h2 > ) \n     :   ( < h2 > Waiting  for  a greeting ... < / h2 > ) ; \n } \n\n export   default  App ; \n Test Event Listener \n In the JavaScript console of your browser, enter: \n const  widgetEvent  =   new   CustomEvent ( 'greeting' ,   { \n  detail :   { \n    name :   'Pippo' \n   } , \n } ) ; \nwindow . dispatchEvent ( widgetEvent ) ; \n \n The custom event should now display in the  subscriber-widget . \n Congratulations! \n You’ve now created a micro frontend that listens to custom events. \n Add Widgets to App Builder \n Now let's add the publisher and subscriber micro frontends in Entando. \n \n Note: These are the same steps as the  Create a React Micro Frontend  tutorial. \n Create Environment File \n Publisher Widget \n \n \n Create an  .env  file in the project root for the  publisher-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/publisher-widget\n \n Notes \n \n Replace  quickstart-entando.192.168.64.34.nip.io  with the ingress you use to access Entando from your local browser. \n /entando-de-app/cmsresources/  is your Resource URL. \n publisher-widget  is the public folder we'll create to host the publisher micro frontend. \n Subscriber Widget \n \n \n Create an  .env  file in the project root for the  subscriber-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n \n Use  subscriber-widget  for the name of the public folder we'll create to host the subscriber micro frontend. \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/subscriber-widget\n Run npm build \n Publisher Widget \n \n \n Open a command line, and navigate to the project root of the  publisher-widget . \n \n \n Run build. \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n Subscriber Widget \n \n Repeat steps 1-3 for the  subscriber-widget . \n Create Public Folder \n Publisher Widget \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Go to  Configuration  →   File Browser   →  public \n \n \n Click  Create Folder . \n \n \n Enter  publisher-widget . \n \n \n Click  Save . \n \n \n Click  public  →  publisher-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n publisher-widget/static/css \n publisher-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n publisher-widget/static/css/main.css \n publisher-widget/static/js/main.js \n publisher-widget/static/js/runtime.js \n publisher-widget/static/js/vendor.js \n Subscriber Widget \n \n Repeat steps 1-8 for the  subscriber-widget . \n Add Widgets \n Publisher Widget \n \n \n Go to  Entando App Builder  in your browser. \n \n \n Go to  Components  →  Micro Frontends & Widgets  at the top nav. \n \n \n Click  Add . \n \n \n Enter the following: \n \n \n \n Code: publisher_widget  → note: dashes are not allowed \n Title: Publisher Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> publisher-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/main.js \" > </ script > \n < publisher-widget   /> \n \n \n Click  Save . \n Subscriber Widget \n Repeat steps 1-5 for the subscriber widget. \n \n Code: subscriber_widget  → note: dashes are not allowed \n Title: Subscriber Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> subscriber-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/main.js \" > </ script > \n < subscriber-widget   /> \n Add Page Template \n \n \n Go to  Components  →  Pages  →  Page Templates  →  Add . \n \n \n Enter the following: \n \n \n \n Code: two_widget  → note: dashes are not allowed \n Name: Two Widget \n JSON Configuration: \n \n { \n   \"frames\" :   [ \n     { \n       \"pos\" :   0 , \n       \"descr\" :   \"Sample Frame\" , \n       \"mainFrame\" :   false , \n       \"defaultWidget\" :   null , \n       \"sketch\" :   null \n     } , \n     { \n       \"pos\" :   1 , \n       \"descr\" :   \"Sample Frame Two\" , \n       \"mainFrame\" :   false , \n       \"defaultWidget\" :   null , \n       \"sketch\" :   null \n     } \n   ] \n } \n \n \n Template: \n \n < #assign  wp = JspTaglibs [ \"/aps-core\" ] > \n <! DOCTYPE   HTML   PUBLIC   \"-//W3C//DTD HTML 4.0 Transitional//EN\" > \n < html > \n   < head > \n       < title > < @wp . currentPage param = \"title\"   /> </ title > \n   </ head > \n   < body > \n     < h1 > < @wp . currentPage param = \"title\"   /> </ h1 > \n     < div > < @wp . show frame = 0   /> </ div > \n     < div > < @wp . show frame = 1   /> </ div > \n   </ body > \n </ html > \n \n \n Click  Save . \n View on Homepage \n \n \n Go to  Pages  →  Management \n \n \n For the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n Click  Edit . \n \n \n In the  Settings  section, select: \n \n \n \n Page Template: Two Widget \n \n \n \n Click  Save and Configure . \n \n \n In the  WIDGETS  sidebar on the right: \n \n \n \n Drag  Publisher Widget  and  Subscriber Widget  into  Sample Frame  and  Sample Frame Two . \n \n \n \n Click  Publish . \n \n \n To view the home page, scroll to the top of the page, and click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n Congratulations! \n You can now communicate between micro frontends with  Custom Events . \n Angular to React \n We can also communicate between micro frontends using different JavaScript frameworks. \n In this next example, we’ll create an Angular micro frontend to publish an event, and we'll use the React micro frontend we created in the previous section to receive the event. \n Create Angular Publisher \n ng new angular-publisher-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-publisher-widget\n \n ng serve\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n Replace the contents of  angular-widget/src/app/app.module.ts . \n \n In this file, we bootstrap the custom element using the  ngDoBootstrap  method. \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n import   {  ReactiveFormsModule  }   from   '@angular/forms' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule , \n    ReactiveFormsModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-publisher-widget' ,  el ) ; \n   } \n } \n Create Custom Event \n Replace the contents of  angular-widget/src/app/app.component.ts . \n \n Here, we're adding code to dispatch the custom event. \n \n import   {  Component  }   from   '@angular/core' ; \n import   {  FormControl ,  FormGroup  }   from   '@angular/forms' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n@ Component ( { \n  selector :   'app-root' , \n  templateUrl :   './app.component.html' , \n  styleUrls :   [ './app.component.css' ] \n } ) \n export   class   AppComponent   { \n  greetingForm  =   new   FormGroup ( { \n    name :   new   FormControl ( '' ) , \n   } ) ; \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   onSubmit ( )   { \n     const  name  =   this . greetingForm . get ( 'name' ) . value ; \n     this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n } \n Add HTML Form \n Replace the contents of  angular-widget/src/app/app.component.html . \n \n In the app component html, we're adding a simple form to call our component class  app.component.ts . \n \n < h1 > Send a greeting </ h1 > \n < form   [formGroup] = \" greetingForm \"   (ngSubmit) = \" onSubmit() \" > \n   < label > \n    Name\n     < input   type = \" text \"   formControlName = \" name \" > \n   </ label > \n   < button   type = \" submit \" > Say hello! </ button > \n </ form > \n View Micro Frontend \n Open  angular-publisher-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-publisher-widget /> . \n < body > \n   < angular-publisher-widget   /> \n </ body > \n \n You can check to see if your micro frontend is working in your browser (e.g., localhost:4200) \n Add to App Builder \n Now we're ready to host our micro frontend in Entando. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate a  dist  directory. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Configuration  →   File Browser   →  public . \n \n \n Create a folder named  angular-publisher-widget . \n \n \n Click  Upload Files . \n \n \n From your generated  dist  folder, upload: \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n Add Widget \n \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n \n \n Click  Add  at the lower right. \n \n \n Enter the following: \n \n \n \n Code: angular_publisher_widget  → note: dashes are not allowed \n Title: Angular Publisher Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/runtime-es2015.js \" > </ script > \n\n < angular-publisher-widget   /> \n \n \n Click  Save . \n View on Homepage \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n In the Search field in right-hand sidebar, enter  Angular Publisher Widget . \n \n \n Drag and drop  Angular Publisher Widget  into the  Sample Frame  in the main body of the page. \n \n \n \n Replace  Publisher Widget . \n \n \n \n Click  Publish . \n \n \n In the top navigation, on the right, click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n \n Note: If you don't see an input field, refresh the page. \n \n Congratulations! \n You've now created an Angular micro frontend that can communicate with a React micro frontend. \n \n"},{title:"Tutorial: Blueprint generated widgets' overview",frontmatter:{},regularPath:"/v6.2/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",relativePath:"v6.2/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/README.md",key:"v-7bef863e",path:"/v6.2/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",headers:[{level:2,title:"Common parts",slug:"common-parts"},{level:3,title:"Authentication",slug:"authentication"},{level:3,title:"Custom events",slug:"custom-events"},{level:3,title:"Tests and mocks",slug:"tests-and-mocks"},{level:3,title:"PropTypes",slug:"proptypes"},{level:3,title:"Fetching data",slug:"fetching-data"},{level:2,title:"Form widget",slug:"form-widget"}],lastUpdated:"8/10/2020, 11:11:30 AM",content:' Tutorial: Blueprint generated widgets\' overview \n When you  create an entity using Entando blueprint , it generates a few\npremade widgets. In this section we will review them. \n We will be using  Conference  as an entity name for the examples below. \n Common parts \n Each widget contains a README file that should help you with the setup. \n All generated widgets are web components created using Custom Elements\nAPI. \n Each widget is displayed using the custom element tag - e.g., inside the\nDetails widget folder  conference/detailsWidget/public/index.html  you\ncan find\n conference-details id="1" override-edit-handler hide-edit-button /> .\nThis element  <conference-details />  is defined in the component entry\npoint at\n conference/detailsWidget/src/custom-elements/ConferenceDetailsElement.js . \n \n Note \n custom element names ( conference-details ) require a dash in them to\nbe used, e.g., (kebab-case) - they can not be single words. \n \n For more information about web components, custom elements and micro\nfrontends, please refer to "Create a react micro frontend widget"\nsection. \n Authentication \n If widget requires authentication, component is wrapped in\n KeycloakContext.Provider  and Keycloak object is fetched from\n window.entando.keycloak  variable. Entando is using Keycloak as our\nauthentication provider, but you can add any providers you like. \n ReactDOM.render(\n  <KeycloakContext.Provider value={this.keycloak}>\n    <StylesProvider jss={this.jss}>\n      <ThemeProvider theme={this.muiTheme}>{FormContainer}</ThemeProvider>\n    </StylesProvider>\n  </KeycloakContext.Provider>,\n  this.mountPoint\n);\n \n For more information about authentication implementation, please refer\nto the "Authentication" section. \n Custom events \n All widgets rely on custom events for communication which is why custom\nevent creation and removal is in each widget, as well as event listener\ncreation. Note that when an event listener is created, it should be when\nthe element is no longer needed. It should be created in the custom\nelement’s  disconnectedCallback()  function. \n To add more events to listen to the widgets, add the event types to\n INPUT_EVENT_TYPES  object at\n detailsWidget/src/custom-elements/widgetEventTypes.js  which will add\nit to the listener list (or remove the event by removing the element). \n For more information about custom events and widget communication,\nplease refer to the section on "Widget communication". \n Tests and mocks \n Each widget has tests written for it. Entando uses\n react-testing-library , but developers are free to upgrade and use any\ntool. Tests are kept at  detailsWidget/src/components/  and mocks for\nthem are at  detailsWidget/src/components/ . \n PropTypes \n PropTypes for data used across several components are shared - you can\nsee and modify them at  detailsWidget/src/components/ . This way you can\navoid repeating same propTypes in each component and just import shared\nones \n import React from \'react\';\nimport conferenceType from \'components/__types__/conference\';\n\nconst ConferenceDetails = props => {\n  // ...\n};\n\nConferenceDetails.propTypes = {\n  conference: conferenceType,\n  t: PropTypes.func.isRequired,\n};\n\nexport default ConferenceDetails;\n Fetching data \n For data fetching from widgets use Fetch API. You can find functions for\nfetching data at  detailsWidget/src/api  in different files for\ndifferent contexts. \n Form widget \n For displaying forms within a widget use\n Formik  which helps with form state\nmanagement. For data validation use\n Yup . \n'},{title:"Create a React Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/v6.2/tutorials/micro-frontends/react.html",relativePath:"v6.2/tutorials/micro-frontends/react.md",key:"v-67b9aca6",path:"/v6.2/tutorials/micro-frontends/react.html",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:3,title:"Wrap with Custom Element",slug:"wrap-with-custom-element"},{level:3,title:"Import Custom Element",slug:"import-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Get Resource URL",slug:"get-resource-url"},{level:2,title:"Build It",slug:"build-it"},{level:3,title:"npm build",slug:"npm-build"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Update Custom UI Field",slug:"update-custom-ui-field"},{level:3,title:"View in Homepage",slug:"view-in-homepage"}],lastUpdated:"9/3/2020, 3:46:44 PM",content:" Create a React Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n \n \n Tested Versions \n node v13.8.0 → We suggest using  nvm  to handle node installations. \n Create React App \n We'll use  Create React App  to create a simple app in seconds. \n npx create-react-app my-widget --use-npm\n \n This is the expected output: \n my-widget\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Start the app. \n cd  my-widget\n npm  start\n Wrap with Custom Element \n Add a new file  src/WidgetElement.js  with the custom element that will wrap the entire React app. \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n class   WidgetElement   extends   HTMLElement   { \n     connectedCallback ( )   { \n         this . mountPoint  =  document . createElement ( 'div' ) ; \n         this . appendChild ( this . mountPoint ) ; \n        ReactDOM . render ( < App  / > ,   this . mountPoint ) ; \n     } \n } \n\ncustomElements . define ( 'my-widget' ,  WidgetElement ) ; \n\n export   default  WidgetElement ; \n \n TIP \n connectedCallback  is a lifecycle hook that  runs each time the element is added to the DOM. \n \n The React  root  node is programatically generated in the  connectedCallback  method when our custom element is added to the DOM. \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Import Custom Element \n Open  src/index.js . Here's what the initial file looks like: \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import   './index.css' ; \n import  App  from   './App' ; \n import   *   as  serviceWorker  from   './serviceWorker' ; \n\nReactDOM . render ( < App  / > ,  document . getElementById ( 'root' ) ) ; \n\n // If you want your app to work offline and load faster, you can change \n // unregister() to register() below. Note this comes with some pitfalls. \n // Learn more about service workers: https://bit.ly/CRA-PWA \nserviceWorker . unregister ( ) ; \n \n Replace the entire file with these two lines. \n import   './index.css' ; \n import   './WidgetElement' ; \n Test Micro Frontend \n \n \n Open  public/index.html . \n \n \n Replace  <div id=\"root\"></div>  with the custom element  <my-widget /> . \n \n \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < my-widget   /> \n    ...\n   </ body > \n \n Congratulations! \n You’re now running  React  in a containerized micro frontend. \n Get Resource URL \n Let's add our micro frontend to Entando by adding our JavaScript and CSS files to the  public  folder. \n TIP \n Entando makes files publicly available through the  public  folder. \n Add Widget \n Initially, we'll add a widget to get the resource URL for the  public  folder. Later on, we'll use the same widget to add our micro frontend to Entando. \n \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n \n \n Click  Add  at the lower right. \n \n \n \n \n Enter the following: \n \n \n Code: my_widget  → note: dashes are not allowed \n Title: My Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < @wp . resourceURL  /> \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n \n \n Click  Save . \n Add Page \n Next, let's add our widget to a page so we can view the  Resource URL . \n If you're getting started with a new install of Entando, let's add our widget to the  Home  page: \n \n \n For Experienced Entando users: \n Add a new page → Add your widget to the page \n \n \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n \n \n In the Search field in right-hand sidebar, enter  My Widget . \n \n \n Drag and drop  My Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n This will take you to a blank home page with your widget. \n \n \n Copy the  Resource URL . \n \n /entando-de-app/cmsresources/\n Build It \n Now that we have the resource URL where we'll host our  Create React App , we're ready to build. \n \n \n Create an  .env  file in the project root of your  Create React App . \n \n \n Add the  PUBLIC_URL  where we'll be hosting our files. \n \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/my-widget\n \n \n Replace  quickstart-entando.192.168.64.34.nip.io/app-builder  with the URL for your Entando App Builder instance. →  How to find your Entando App Builder URL. \n \n Notes \n \n quickstart-entando.192.168.64.34.nip.io  represents your  Entando App Builder  instance. \n /entando-de-app/cmsresources/  is your Resource URL \n my-widget  is the public folder we'll create to host our files \n \n \n TIP \n When you run  npm run build ,  Create React App  will substitute  %PUBLIC_URL%  with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL. \n npm build \n \n \n Open a command line, and navigate to the project root of your  Create React App . \n \n \n Run the command: \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n \n \n \n Generated Build Files \n We rename the JavaScript and CSS files so we can deploy new versions of the micro frontend without having to update the  Custom UI  field of our widget to reference the new files. \n \n If you want to use the original  file names with the content hashes to avoid potential caching issues in your browser , update the  Custom UI  field of your widget when deploying new versions of your micro frontend. The  Custom UI  settings will be covered in the next section. \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Administration  at the lower left hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  my-widget . \n \n \n Click  Save . \n \n \n Click  public  →  my-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n my-widget/static/css \n my-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n my-widget/static/css/main.css \n my-widget/static/js/main.js \n my-widget/static/js/runtime.js \n my-widget/static/js/vendor.js \n \n Note: You can drag and drop the files in your browser. \n \n Upload the  React  logo. \n \n \n my-widget/static/media/logo.5d5d9eef.svg  → You don't need to rename this file. \n Update Custom UI Field \n \n \n Go to  Components  →  Micro frontends & Widgets . \n \n \n Under the  My Widgets  category → next to  My Widget  → under  Action  → select  Edit . \n \n \n Update  Custom UI  field: \n \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> my-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/main.js \" > </ script > \n < my-widget   /> \n \n \n Click  Save . \n View in Homepage \n Let's see the React micro frontend in action on our page. \n \n \n In the  Entando App Builder  dashboard, click  Go to Homepage  at the upper right. \n \n \n Go to the page that you created, and click refresh. \n \n \n \n Congratulations! \n You now have a React micro frontend running in Entando. \n \n"},{title:"Add a Configuration Screen in App Builder",frontmatter:{},regularPath:"/v6.2/tutorials/micro-frontends/widget-configuration.html",relativePath:"v6.2/tutorials/micro-frontends/widget-configuration.md",key:"v-07879720",path:"/v6.2/tutorials/micro-frontends/widget-configuration.html",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:2,title:"Add Input Field",slug:"add-input-field"},{level:2,title:"Custom Element",slug:"custom-element"},{level:2,title:"Configuration Screen",slug:"configuration-screen"},{level:2,title:"Add Attribute",slug:"add-attribute"},{level:2,title:"Display Input",slug:"display-input"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Update Widget in App Builder",slug:"update-widget-in-app-builder"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Add a Configuration Screen in App Builder \n Entando 6 widgets can be customized through an App Builder configuration\nscreen so the citizen developers can avoid writing ad-hoc additional\ncode. \n In Entando 6, the configuration screen is also a micro frontend, which\ncan also be defined as a web component. That means you can develop and\ntest it in isolation, without a running Entando instance. \n Create React App \n Let’s start with the boilerplate provided by  Create React\nApp , probably the most popular one. \n npx create-react-app my-widget-config --use-npm \n my-widget-config\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Then, type  cd my-widget-config  and  npm start  to start the app. \n Add Input Field \n Let’s start with a simple form: only an input with a label. So, let’s\nedit  App.js \n import React from \'react\';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \'\'};\n  }\n\n  handleNameChange(value) {\n    this.setState(prevState => ({\n      ...prevState,\n      name: value,\n    }));\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div>\n        <h1>Sample Entando 6 Widget Configuration</h1>\n        <label htmlFor="name">Name</label>\n        <input id="name" onChange={e => this.handleNameChange(e.target.value)} value={name} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n You are free to use your favorite form handling library e.g.,\n Formik ,\n redux-form  (that requirese redux) or others. \n In regards to styling, since this is going to be an App Builder screen,\nwe strongly suggest using  PatternFly\nv3  ( patternfly  and  patternfly-react \npackages) to keep UX coherence. \n Custom Element \n Now, let’s add the web component that will wrap the entire React app.\nLet’s name it  WidgetElement \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nclass WidgetElement extends HTMLElement {\n  constructor() {\n    super();\n    this.reactRootRef = React.createRef();\n    this.mountPoint = null;\n  }\n\n  get config() {\n    return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n  }\n\n  set config(value) {\n    return this.reactRootRef.current.setState(value);\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget-config\', WidgetElement);\n\nexport default WidgetElement;\n \n Its responsibility is rendering the react app and syncing the react app\nstate in a  config  property, that  must  be named that way. The key to\nApp builder communication is that it works in three steps: \n \n \n App Builder reads  config  property when the widget config screen is\nrendered \n \n \n config  property is mutated when a user configures the widget \n \n \n When a user saves the config, App Builder retrieves it (again, from\nthe  config  property) and persists it through Entando APIs \n \n \n This means the widget developer can focus on the configuration screens\nwithout having to call Entando APIs to read or write configuration. \n One more JS file to update:  index.js . Starting from this \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport \'./index.css\';\nimport App from \'./App\';\nimport * as serviceWorker from \'./serviceWorker\';\n\nReactDOM.render(<App />, document.getElementById(\'root\'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n You only have to import  WidgetElement  plus the css, if needed.\nSomething like \n import \'./index.css\';\nimport \'./WidgetElement\';\n \n We assume we don’t need a service worker for the widget, so we can\ndelete serviceWorker.js. \n To ensure our web component is working we have to edit\n public/index.html . Remove  <div id="root"></div>  from the  body  (we\nprogrammatically generated the react root in the  connectedCallback \nmethod of  WidgetElement ) and add our new web component tag\n <my-widget /> . \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget-config />\n  </body>\n</html>\n \n \n Note \n the web component tag name ( my-widget-config  in this tutorial)\n must  match the first parameter of the  customElements.define \nmethod. \n \n The page should auto reload and…​congrats, you’re running an Entando 6\nwidget in isolation. \n Configuration Screen \n Next, we’ll build our widget before embedding it into the Entando 6\ninstance. From the react project root, type \n npm run build \n and a  build/static  directory will be generated. Copy it into the\nEntando 6 instance under\n src\\main\\webapp\\cmsresources\\my-widget-config , then rename \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n Now go to  Components  →  Micro frontends & Widgets  and find the original widget we\'re creating the configuration screen for. Edit the widget and update the\n configUI  field. \n {\n  "customElement": "my-widget-config",\n  "resources": [\n    "my-widget-config/static/js/runtime.js",\n    "my-widget-config/static/js/vendor.js",\n    "my-widget-config/static/js/main.js"\n  ]\n}\n \n \n Note \n \n \n It is possible to keep the original names in order to avoid\npotential caching issues, but then you will have to update the\n Config UI  field in the App Builder widget screen each time a new\nversion of the widget is deployed. \n \n \n configUI  is a JSON object, so pay attention to save a\nwell-formed one (the integrated JSON editor will help you) \n \n \n value for  customElement  must match the name of custom tag in\n index.html  and the one passed as parameter to\n customElements.define  in  WidgetElement \n \n \n \n Last step: configure a page in App Builder, drag our widget into the\npage template slot and you’ll see the configuration screen we just built. \n Display Widget Configuration \n So, we already created a react micro frontend widget and configuration\nscreen to customize a  name  field. \n In this tutorial we will display that field in our micro frontend\nwidget. \n Add Attribute \n Edit  WidgetElement  to add attribute handling to the custom element,\nand make re-render our app when an attribute changes. Now, the  name \nattribute is being read from the custom element and passed as a prop to\nthe react root component ( App ). \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nconst ATTRIBUTES = {\n  name: \'name\',\n};\n\nclass WidgetElement extends HTMLElement {\n\n  static get observedAttributes() {\n    return Object.values(ATTRIBUTES);\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!Object.values(ATTRIBUTES).includes(name)) {\n      throw new Error(`Untracked changed attribute: ${name}`);\n    }\n    if (this.mountPoint && newValue !== oldValue) {\n      this.render();\n    }\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  render() {\n    const name = this.getAttribute(ATTRIBUTES.name);\n    ReactDOM.render(<App name={name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget\', WidgetElement);\n\nexport default WidgetElement;\n \n \n Note \n attributeChangedCallback  is also a custom elements lifecycle hook\nmethod. \n Display Input \n Edit the  App  component now, to make it display the  name  prop. \n import React from \'react\';\nimport \'./App.css\';\n\nfunction App({name}) {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <p>\n          Hello, {name}!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n \n Now, to ensure our custom element is working we can edit\n public/index.html  and set a value for the  name  attribute of the\ncustom element. \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget name="Marco"/>\n  </body>\n</html>\n \n After page reload, you should be able to display a simple "Hello,\nMarco!" message. \n Build It \n From the react project root, type: \n npm run build \n and the  build/static  directory will be (re)generated. Copy it again\ninto the Entando 6 instance under\n src\\main\\webapp\\resources\\static\\my-widget , then rename \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n a file like  css/main.d1b05096.chunk.js  to  css/main.css \n(stylesheet) \n \n \n \n Note \n you could keep the original names in order to avoid potential caching\nissues, but then you will have to update the  Custom UI  field in the\nApp Builder widget screen every time a new version of the widget is\ndeployed. \n \n If the application server you’re running does not have hot deploy\nenabled, restart it. \n Update Widget in App Builder \n Open the  Entando App Builder , go to  Components  →  Micro frontends & Widgets , find the widget  My Widget  and click to edit it. \n Update the  Custom UI  field from: \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<my-widget />\n \n to \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />static/my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />static/my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />static/my-widget/static/js/main.js"><\/script>\n<@wp.currentWidget param="config" configParam="name" var="configName" />\n<my-widget name="${configName}" />\n \n We basically added a JSTL tag to extract a field (under  configParam )\nfrom the config field of the current widget and put it in a  configName \nvariable, that we pass to the custom element. \n Save the widget and reload the page that contains the widget: you’ll see\n Hello, Marco!  as expected. \n'},{title:"Entando Platform",frontmatter:{sidebarDepth:0},regularPath:"/v6.3/docs/",relativePath:"v6.3/docs/README.md",key:"v-adb93754",path:"/v6.3/docs/",headers:[{level:2,title:"Entando Architecture",slug:"entando-architecture"},{level:2,title:"Why Kubernetes?",slug:"why-kubernetes"}],lastUpdated:"1/11/2021, 4:49:35 PM",content:" Entando Platform \n Entando is a  micro frontend platform for Kubernetes  that helps enterprises innovate faster with parallel development teams that have end-to-end autonomy across the entire stack. \n With native support for Javascript app development, a micro frontend and microservices architecture, deployment of apps in containers that can be individually scaled up and down, and automated management of containers with Kubernetes, we simplify the move for enterprises looking to modernize across on-prem and cloud infrastructures. \n Entando Architecture \n \n The Entando platform includes the following major elements: \n \n Entando App Engine : assemble micro frontends & microservices and compose them on a page. \n Entando App Builder : the user interface to build and design applications. \n Entando Component Generator : provide advanced data modeling capabilities and automatically generate the corresponding microservices and micro frontends. \n Entando Component Repository : a shared, internal repository to encourage code reuse across the enterprise. \n Entando Identity Management : token-based authentication across multiple domains and connect service providers with identity providers. \n Entando WCMS : a web content management system that supports headless CMS. \n (optional)  Entando Business Automation Bundle : workflow and task automation including out of the box integration with Red Hat Process Automation Manager (PAM). \n Why Kubernetes? \n Instead of you doing the work to ensure your apps and services stay up and running, Kubernetes does the work for you. For each app or service, you can set resource limits, the number of pods you want backing each service, upgrade strategy, and auto-scaling. Kubernetes actively manages your cluster to match your defined resource utilization and ensures your site doesn't go down. \n How Google Runs Containers in Production \n Each week, Google deploys over 2 billion containers in production to run all of its services like Gmail, YouTube, and Search. Kubernetes is Google's open source solution to automate the management of containers at scale. \n \n Over 50% of Fortune 500 companies use Kubernetes with product offerings from Amazon Elastic Kubernetes Service (EKS), Google Cloud Platform (GKE), IBM (Red Hat) OpenShift, Microsoft Azure (AKS), and VMWare Pivotal (PKS). \n"},{title:"Entando Contributor Covenant Code of Conduct",frontmatter:{},regularPath:"/v6.3/docs/community/code-of-conduct.html",relativePath:"v6.3/docs/community/code-of-conduct.md",key:"v-3514fc0c",path:"/v6.3/docs/community/code-of-conduct.html",headers:[{level:2,title:"Our Pledge",slug:"our-pledge"},{level:2,title:"Our Standards",slug:"our-standards"},{level:2,title:"Enforcement Responsibilities",slug:"enforcement-responsibilities"},{level:2,title:"Scope",slug:"scope"},{level:2,title:"Enforcement",slug:"enforcement"},{level:2,title:"Enforcement Guidelines",slug:"enforcement-guidelines"},{level:3,title:"1. Correction",slug:"_1-correction"},{level:3,title:"2. Warning",slug:"_2-warning"},{level:3,title:"3. Temporary Ban",slug:"_3-temporary-ban"},{level:3,title:"4. Permanent Ban",slug:"_4-permanent-ban"},{level:2,title:"Attribution",slug:"attribution"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Entando Contributor Covenant Code of Conduct \n Our Pledge \n We as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation. \n We pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community. \n Our Standards \n Examples of behavior that contributes to a positive environment for our\ncommunity include: \n \n Demonstrating empathy and kindness toward other people \n Being respectful of differing opinions, viewpoints, and experiences \n Giving and gracefully accepting constructive feedback \n Accepting responsibility and apologizing to those affected by our mistakes,\nand learning from the experience \n Focusing on what is best not just for us as individuals, but for the\noverall community \n \n Examples of unacceptable behavior include: \n \n The use of sexualized language or imagery, and sexual attention or\nadvances of any kind \n Trolling, insulting or derogatory comments, and personal or political attacks \n Public or private harassment \n Publishing others' private information, such as a physical or email\naddress, without their explicit permission \n Other conduct which could reasonably be considered inappropriate in a\nprofessional setting \n Enforcement Responsibilities \n Community leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful. \n Community leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate. \n Scope \n This Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. \n Enforcement \n Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncommunity@entando.com. \n All complaints will be reviewed and investigated promptly and fairly. \n All community leaders are obligated to respect the privacy and security of the\nreporter of any incident. \n Enforcement Guidelines \n Community leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct: \n 1. Correction \n Community Impact : Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community. \n Consequence : A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested. \n 2. Warning \n Community Impact : A violation through a single incident or series\nof actions. \n Consequence : A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban. \n 3. Temporary Ban \n Community Impact : A serious violation of community standards, including\nsustained inappropriate behavior. \n Consequence : A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban. \n 4. Permanent Ban \n Community Impact : Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals. \n Consequence : A permanent ban from any sort of public interaction within\nthe community. \n Attribution \n This Code of Conduct is adapted from the  Contributor Covenant ,\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html. \n Community Impact Guidelines were inspired by  Mozilla's code of conduct\nenforcement ladder . \n For answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations. \n"},{title:"Customizing the Entando Component Generator",frontmatter:{},regularPath:"/v6.3/docs/component-generator/component-gen-customize.html",relativePath:"v6.3/docs/component-generator/component-gen-customize.md",key:"v-b64319e8",path:"/v6.3/docs/component-generator/component-gen-customize.html",lastUpdated:"12/15/2020, 12:52:01 PM",content:" Customizing the Entando Component Generator \n The Entando Component Generator is an instance of a JHipster blueprint that can be extended to match your team's needs and requirements. If you're interested in extending the blueprint or creating your own blueprint, contact us on the  Entando Forum  or  Community Slack  and we'll help you get started. \n The source for the Entando blueprint can be found  here . \n To learn more about creating blueprints and to see other blueprints available from JHipster checkout the  blueprint documentation  or visit  JHipster  for an overview. \n"},{title:"Contributing to Entando",frontmatter:{},regularPath:"/v6.3/docs/community/contributing.html",relativePath:"v6.3/docs/community/contributing.md",key:"v-4120e3f8",path:"/v6.3/docs/community/contributing.html",headers:[{level:2,title:"Contributing to the Source",slug:"contributing-to-the-source"},{level:2,title:"Code Style and Formatting",slug:"code-style-and-formatting"},{level:3,title:"Java",slug:"java"},{level:3,title:"Javascript",slug:"javascript"},{level:3,title:"Find the Code",slug:"find-the-code"},{level:2,title:"Get Help",slug:"get-help"},{level:2,title:"Licenses",slug:"licenses"}],lastUpdated:"2/22/2021, 4:38:05 PM",content:" Contributing to Entando \n There are many ways to contribute to Entando including participating in the  Entando Forum , opening issues on GitHub,  updating documentation , building bundles using the  Entando Component Repository , and contributing directly to the source. \n Contributing to the Source \n Entando welcomes contributions to our source code repositories. This is a brief overview of how to create a pull request for an Entando repository. \n If you're new to forks in the git world checkout this guide  Working with Forks \n \n Find the repository you want to edit on the Entando GitHub\n \n https://github.com/entando \n https://github.com/entando-k8s \n \n \n Create a fork of the repository you want to update \n Make your changes or updates on your fork. We recommend making your changes on a branch so that you can update your commits as needed before creating your PR \n Submit a PR against the main (or master) branch of the repository you're working against. If you're fixing a specific issue reference that issue number in the notes and linked issues \n Watch the automated builds to make sure everything passes \n The Entando team will merge your changes! \n Code Style and Formatting \n Most Entando repositories enforce code style rules. References and setup for the main\nsource types are provided below. \n Java \n Java rules are based on checkstyle and PMD can be found at in the  entando-code-style  project. There are configuration files for Intellij, Eclipse, and Netbeans for automated formatting. \n Javascript \n Code style and formatting rules for all Entando javascript projects are enforced by linters in every project. For a reference example see: .sass-lint.yml and .eslintrc.js in the  App builder \n In the future these rules will be replaced by Prettier. \n Find the Code \n Entando source can be found on GitHub in the following organizations. \n \n https://github.com/entando \n https://github.com/entando-k8s \n \n For an overview of the key projects in both GitHub organizations and their role in the architecture see  Entando Deployment Structure \n Get Help \n If you have questions, need help, or want to find out more about contributing join us at \n \n Entando Forum \n Community Slack \n Licenses \n The Entando Platform is 100% open source and most Entando repositories are licensed under the LGPL V3.0. The entando-docs repository is one exception with a  CC BY 4.0 license . See the LICENSE file in the root directory of a given repository for its specific license information. \n Entando libraries licensed with LGPL V3.0 that are used to build applications may be linked to proprietary applications. If linked statically, the application code must also be released as LGPL. If the application is linked dynamically to Entando, the proprietary code does not need to be released. \n A commercial open source license is provided for the Entando Platform for customers with Gold and Platinum subscriptions. This license permits freely extending or modifying Entando without requiring contribution of confidential IP back to the open source community. \n"},{title:"Component Generation Technologies",frontmatter:{},regularPath:"/v6.3/docs/component-generator/component-gen-tech.html",relativePath:"v6.3/docs/component-generator/component-gen-tech.md",key:"v-dcd8b7f4",path:"/v6.3/docs/component-generator/component-gen-tech.html",headers:[{level:2,title:"Technology in the Generated Components",slug:"technology-in-the-generated-components"},{level:2,title:"Blueprint Technology",slug:"blueprint-technology"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Component Generation Technologies \n Technology in the Generated Components \n When generating a microservice using the Entando Component Generator there are a number of technical choices that need to be made \n \n Microservice code\n \n The Component Generator currently only supports the generation of Spring Boot microservices but will support the generation of Quarkus based services soon. \n If you're interested in using Quarkus in your Entando app contact us on the  Forum  or  Community Slack  and we'll help you get started. \n \n \n Database type\n \n Entando recommends standardizing your choice of database to simplify operational maintenance but you do have the ability to use different databases for different microservices if you choose. \n Supported choices are none, MySQL, and Postgres. Enterprise customers can choose Oracle but should contact Entando Support for details. \n \n \n Development databases\n \n You can choose to utilize a full RDBMS or developers can utilize lightweight in memory or on disk databases with h2. \n \n \n Caching implementation\n \n When generating a microservice you will be presented with the type of cache to inject into the services. It is recommended that this is a standard choice for all of the microservices in your application but can be customized on a per service basis if desired. \n \n \n Build system\n \n Determines the java build tool to use when building your services \n Supports maven or gradle \n \n \n Other technologies\n \n Users of the component generator can also decide to use other technologies from JHipster or from the JHipster marketplace. \n There are many powerful technologies in the marketplace but it is up to the developer to integrate any choices from the marketplace into their Entando application. Entando doesn't provide any direct support for marketplace tech choices. \n \n \n Micro frontends\n \n Users can optionally choose to generate micro frontends for entities generated via the blueprint. \n The Entando Component Generator only provides micro frontends in React from the generation flow but developers can create and bundle micro frontends in other technologies as well. \n \n \n \n If you want to try out these choices follow the tutorial on  creating Entando microservices and micro frontends using the component generator \n Blueprint Technology \n JHipster and the Entando Blueprint are built using EJS which is a Javascript based templating language that provides powerful constructs for large scale file generation. Learn more about EJS here at  https://ejs.co/  or checkout the core  Jhipster Generator  or  Entando Blueprint  for examples of EJS in action. \n"},{title:"Overview",frontmatter:{},regularPath:"/v6.3/docs/component-generator/component-gen-overview.html",relativePath:"v6.3/docs/component-generator/component-gen-overview.md",key:"v-64ee1b00",path:"/v6.3/docs/component-generator/component-gen-overview.html",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Objectives",slug:"objectives"},{level:2,title:"Generated Component Flow",slug:"generated-component-flow"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Overview \n Introduction \n The Entando Component Generator powered by JHipster is a tool that gives developers the ability to quickly generate Entando components that can be used to extend an Entando Application. \n The component generator takes advantage of the concept of  JHipster blueprints  to provide powerful templating and standard generation patterns. \n Objectives \n The component generator has two main objectives \n \n \n Accelerate development \n \n Automate the creation of microservices and micro frontends with code that runs without changes. Start from running software. \n Code is meant to be developed on and changed by developers. Ready for customization. \n Using standard tools, technologies, and patterns that can be consumed by developers who are not familiar with the underlying blueprint \n \n \n \n Standardize microservice creation and technology choices \n \n Encode business standards for networking, monitoring, build tools, and distribution into a blueprint to ensure that developers are starting from a technical point that matches your teams requirements \n Ensure code follows standards and practices of your teams including code formatting, testing tools, static analysis tools, package structures, and other rules specific to your organization \n Enable teams to quickly recognize and adopt code from system integrators and other third parties because the patterns and standards are encoded in the starting point of your applications \n Generated Component Flow \n This section provides an overview of the component generation process. If you want to jump into the code and a tutorial start here:  Entando Component Generator Tutorial \n \n \n \n Create components \n \n The Component Generator will create a Spring Boot microservice and optionally will create React micro frontends for entities that you add to your project \n The microservice and generated micro frontends are runnable out of the box and preconfigured to connect to  Entando Identity Management \n The code is meant to be edited and enhanced by developers. JHipster provides interactive updates and merges if you need to re-run the generator or add new functionality via JHipster \n The microservice includes liquibase and integrated data mocking if you want to generate data in your API calls \n \n \n \n Define bundle and deploy assets \n \n The Entando blueprint includes scripts and tools to automatically generate a bundle ready for deployment to the ECR. The bundle will include your microservice, generated microfrontends, and any microfrontends that you have created manually under the  ui  folder \n The generated Spring Boot microservice can be built and deployed to a Docker registry using the provided maven Jib plugin \n Generated bundles can be pushed to a git repository of the users choice \n \n \n \n Deploy bundles to  Entando Component Repository (ECR) \n \n Once your Docker images are pushed to your registry and your bundle is available in Git you can generate an Entando bundle descriptor and push the bundles to the ECR \n The bundles can be versioned and updated using tags in the git repository \n \n \n \n Install in Entando Apps \n \n Once the bundles are in the ECR they are available for deployment in any Entando application that has access to the ECR in the cluster \n \n \n \n"},{title:"Entando's Custom Resources for Kubernetes",frontmatter:{},regularPath:"/v6.3/docs/concepts/custom-resources.html",relativePath:"v6.3/docs/concepts/custom-resources.md",key:"v-1450c2a6",path:"/v6.3/docs/concepts/custom-resources.html",headers:[{level:2,title:"Objective",slug:"objective"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"The Core Entando Custom Resources",slug:"the-core-entando-custom-resources"},{level:2,title:"The ResourceRequirements specification",slug:"the-resourcerequirements-specification"},{level:2,title:"EntandoKeycloakServer",slug:"entandokeycloakserver"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Example",slug:"example"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties"},{level:2,title:"EntandoClusterInfrastructure",slug:"entandoclusterinfrastructure"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-2"},{level:2,title:"EntandoApp",slug:"entandoapp"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-3"},{level:2,title:"EntandoPlugin",slug:"entandoplugin"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-4"},{level:2,title:"EntandoAppPluginLink",slug:"entandoapppluginlink"},{level:3,title:"Overview",slug:"overview-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-5"},{level:2,title:"EntandoDatabaseService",slug:"entandodatabaseservice"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-6"},{level:2,title:"EntandoCompositeApp",slug:"entandocompositeapp"},{level:3,title:"Overview",slug:"overview-7"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Explanation of properties",slug:"explanation-of-properties-7"}],lastUpdated:"3/24/2021, 9:59:27 AM",content:' Entando\'s Custom Resources for Kubernetes \n Objective \n This document provides an overview of the Entando Kubernetes Custom Resources and their semantics in Entando 6. \n Prerequisites \n \n Basic knowledge of Kubernetes and how to deploy Docker images to it \n Basic knowledge of Helm and how Helm Charts use YAML templates for parameterized deployments to Kubernetes \n Overview \n Amongst the many features it offers, Kubernetes also comes with a REST API that for dozens of different resources types.\nGenerally these API off full Create/Retrieve/Update/Delete (CRUD) access to each of the resource types. We\ntypically format these resources in YAML or JSON and use commandline tools such as\n kubectl  or  oc  to manage them. Each of these resources has a clearly defined structure\nthat is well documented in the  Kubernetes API  .\nKubernetes  also allows clients to subscribe to events generated as these resources get updated. These subscriptions\nare called \'watches\' and allow clients to be notified whenever the state of a resource changes. Kubernetes also\nenforces very strong role based access control (RBAC) support on all resources, with permissions down to the level\nof granularity of operation (Create/Retrieve/Update/Delete/Watch) per resource. \n The basic architecture for Kubernetes worked so well for the developers of Kubernetes that they decided to also make it\navailable to third  party developers. Kubernetes now offers a mechanism to allow 3rd parties to provide its own custom\nresource types that still leverage the CRUD support, event subscriptions and RBAC provided by Kubernetes out of the box.\nThis mechanism is referred to as Custom Resources. \n Custom Resources are very commonly used with Kubernetes Operators. Operators are Docker images that have been\ndeployed to Kubernetes Deployments. The generally observe a set of custom resources and perform some operations against\nthe Kubernetes API to reflect the state changes in the Custom Resource. We can say that the Custom Resources are associated\nwith specific semantics in how they are translated to \n One can introduce a new Custom Resource into Kubernetes by registering a Custom Resource Definition (CRD). This is really\njust another yaml or json resource that defines the structure of the Custom Resource to be installed using the OpenAPI\nJSON Schema format. When talking about Custom Resources, it is very important to distinguish between Custom Resource\nDefinitions and Custom Resources. CRD\'s are static type definitions provided by an Operator\nprovider such as Entando. For those familiar with programming languages, CRD\'s are like class definitions, whereas\nCustom Resources are actual instances of that class. \n Entando introduces two groups of Custom Resources. On the one hand, there are the core Entando Custom Resources required\nfor a basic installation of Entando in a Kubernetes cluster. These Custom Resources directly result in other\nKubernetes resources being deployed in the cluster. On the other hand, there are the Custom Resources specific\nto the Entando Component Repository that serve primarily as metadata for other Entando components. \n The Core Entando Custom Resources \n The Entando Operator observes all the Core Entando Custom Resources in one or more namespaces. This means that if a Core\nEntando Custom Resource is created, updated or deleted, the Entando Operator will trigger a new run-to-completion Pod\nthat will translate that state change into a state change in the actual Kubernetes Cluster. Often, this will\nresult in the Deployment of one or more Docker images, but also one or more Services and sometimes and Ingress\ntoo. We refer to the Docker Images that implement these run-to-completion Pods as Entando Kubernetes Controllers. \n The Entando Operator itself is also implemented as a Docker Image. You can have a closer look at how it works in the\n entando-k8s-controller-coordinator  project on Github.\nApart from the normal Maven, Java and Docker files one would expect, you will also notice the\n entando-k8s-controller-coordinator Helm Chart .\nThis Helm Chart is basically the entrypoint for installations of Entando 6 on Kubernetes. More detailed instructions\non how to install the Entando 6 Operator are available in our\n installation instructions \n The ResourceRequirements specification \n All of the Entando Custom Resources that result in physical Kubernetes Deployments can be configured with specific\nresource requirements. These settings can be provided under the  spec  object of the custom resource. It currently\nsupports the following attributes: \n \n spec.resourceRequirements.storageRequest  - the initial storage requested from the persistence provider. Please keep\nin mind that resizable storage is not supported by all storage providers, and that this may be the final size of the storage\nallocated. \n spec.resourceRequirements.storageLimit  - the maximum amount of storage required by the deployment. \n spec.resourceRequirements.memoryRequest  - the initial memory requested from the node the deployment\'s primary container is running on \n spec.resourceRequirements.memoryLimit  - the maximum amount of memory the deployment\'s primary container will use. If\nit exceeds this amount, the container maybe be terminated by Kubernetes. \n spec.resourceRequirements.cpuRequest  - the initial CPU allocation from the node the deployment\'s primary container is running on \n spec.resourceRequirements.cpuLimit  - the maximum CPU allocation for the deployment\'s primary container. \n spec.resourceRequirements.fileUploadLimit   - the maximum upload file size supported by the deployment \n \n All of these attributes require a number and a unit of measurement, e.g. "64Mi". Please consult the\n official Kubernetes documentation \nfor more information on how to configure these attributes. \n EntandoKeycloakServer \n The EntandoKeycloakServer Custom Resource is used to deploy and configure a Red Hat Keycloak Server instance on the\ncluster. After deploying this Keycloak instance, the Entando Operator will create a Kubernetes Secret that provides\nthe necessary information for subsequent deployment operations to access the Keycloak instance as the Admin user. This\nallows the rest of the Entando Kubernetes Controllers to create a Keycloak OIDC client for every HTTP service that\ngets deployed. If you already have a Keycloak instance that you would use, you can skip this custom resource entirely\nand simply create the `keycloak-admin-secret\' in the operator\'s namespace as specified in\n this tutorial \n Overview \n \n Entando Cluster Citizen:  Keycloak \n Custom Resource Definition:  EntandoKeycloakServer \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-keycloak-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-keycloak \n Github Repo:  entando/entando-keycloak \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoKeycloakServer"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-keycloak"\n  namespace: "keycloak-namespace"\nspec:\n  dbms: "postgresql"\n  imageName: "entando/entando-keycloak"\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  environmentVariables: \n    - name: KEYCLOAK_WELCOME_THEME\n      value: my-custom-theme\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof a previously  configured  EntandoDatabaseService ,\nthe Keycloak image will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor Keycloak to use. If left empty, or given value of \'none\', Keycloak will be deployed using its own internal\nH2 database. \n spec.imageName  is used to provide a customized image. By default, the operator will use the  entando/entando-keycloak \ndiscussed above. When using the default image, please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of this image will be calculated.\nWhen you need to customize the theme or add extensions to Keycloak, you can create your own custom image and provide\nthe value in this property. In this custom image, make sure you use the default image ( entando/entando-keycloak )\nas a base image. You can then add your customizations and build your own image. Please use a fully qualified\nDocker image name here. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for Keycloak. Please ensure that this is\naccessible using the default routing suffix of your Entando Operator Deployment, or a DNS name previously\nregistered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n keycloak-admin-secret  being replaced by a Secret connecting you to this newly created Keycloak instance.\nTheoretically one could use multiple Keycloak instances in a cluster, in which case this property should be false. \n spec.environmentVariables  is a Map of environment variables to pass to the Keycloak Docker image. For example, this could\nbe used to select a specific theme for Keycloak to use using the variable KEYCLOAK_WELCOME_THEME. These parameters\nare applied to the container\'s environment variables after all variables have been calculated. It can therefore\nalso be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Keycloak Server \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Keycloak Server container. \n EntandoClusterInfrastructure \n The EntandoClusterInfrastructure custom resource can be used to create the shared services that Entando requires in a cluster.\nAt the time of the writing of this document, there is really only one service, which is the Entando K8S Service, but this\nmay change in future. Deployments resulting from this custom resources are configured to use the default Keycloak\nServer specified in the  keycloak-admin-secret  using the  entando  realm. An Ingress will also be created as part of this\ndeployment. At this point, there is no way to customize the image in question. \n Overview \n \n Entando Cluster Citizen:  Entando Kubernetes Service \n Custom Resource Definition:  EntandoClusterInfrastructure \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-cluster-infrastructure-controller \n Github Repo:  entando-k8s/entando-k8s-keycloak-controller \n \n \n Deployment Details:\n \n Docker image:  entando/entando-k8s-service \n Github Repo:  entando-k8s/entando-k8s-service \n \n \n Possible Database Images: none \n Example \n ---\nkind: "EntandoClusterInfrastructure"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-eci"\n  namespace: "eci-namespace"\nspec:\n  keycloakSecretToUse: some-keycloak-secret\n  ingressHostName: "test-keycloak.ampie.dynu.net"\n  isDefault: true\n  environmentVariables: \n    - name: ENTANDO_NAMESPACES_TO_OBSERVE\n      value: my-namespace\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando K8S Service. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. \n spec.isDefault  is \'true\' by default and this should suffice for most conditions. This will result in the standard\n entando-cluster-infrastructure-secret  being replaced by a Secret connecting you to this newly created\nEntando K8S Service.  Theoretically one could use multiple Entando K8S Services in a cluster, in which\ncase this property should be false for new Entando K8S Services that should not override the default Secret. \n spec.environmentVariables  is a Map of environment variables to pass to the Entando K8S Service Docker image. For example, this could\nbe used to override the ENTANDO_NAMESPACES_TO_OBSERVE variable that configures the set of Kubernetes namespaces\nthis service should read EntandoDeBundles from. Also note that all of the\n Spring variables in entando-k8s-service project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando K8S Service \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Entando Kubernetes Service container. \n EntandoApp \n An EntandoApp is a Deployment of a Docker image that hosts an Entando and Java based web application. Entando offers two\nstandard images that can be used, but generally we expect our customers to provide their own images here. An EntandoApp\nDeployment packages three images into a single Pod: the Entando App Image in question, AppBuilder and Component Manager. \n Overview \n \n Custom Resource Definition:  EntandoApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-controller \n Github Repo:  entando/entando-k8s-app-controller \n \n \n Deployment Details - Entando App:\n \n Docker image:  entando/entando-de-app-wildfly   or    entando/entando-de-app-eap \n Github Repo:  entando-k8s/entando-de-app \n Entando Cluster Citizen:  Entando App \n \n \n Deployment Details - AppBuilder:\n \n Docker image:  entando/app-builder \n Github Repo:  entando/app-builder \n \n \n Deployment Details - ComponentManager:\n \n Docker image:  entando/entando-component-manager \n Github Repo:  entando-k8s/entando-component-manager \n Entando Cluster Citizen:  Component Manager \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-app"\n  namespace: "my-namespace"\nspec:\n  standardServerImage: wildfly\n  customServerImage: your-org/your-image:4.3.2\n  dbms: "postgresql"\n  ingressPath: my-app\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  environmentVariables: \n    - name: ENTANDO_VAR1\n      value: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n  ecrGitSshSecretName: my-secret\n Explanation of properties \n \n spec.standardServerImage  can be either wildfly  or  eap . This instructs the Entando Operator to use one of the\ntwo standard Entando App images.\n \n For  wildfly  it will deploy the  entando/entando-de-app-wildfly  image \n For  eap  it will deploy the  entando/entando-de-app-eap  image\nThis property and the  spec.customServerImage  are  assumed to be mutually exclusive. Only provide a value to\none of the two. Please refer to the\n relevant section \nin the README of the Entando Operator to determine how the Docker registry and version of these images will be calculated. \n \n \n spec.customServerImage  can be used to deploy the Docker image containing your own custom Entando App. Please\nfollow the instructions on how to  build your own image . \nThis property and the  spec.standardServerImage  are  assumed to be mutually exclusive. Only provide a\nvalue to one of the two. \n spec.dbms  is used to select the database management of choice. If left empty, a default value of  postgresql \nis assumed. The value  none  is not supported. If this value matches up to the  spec.dbms  property\nof a previously configured  EntandoDatabaseService ,\nthe Entando App will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the EntandoApp to use. \n spec.ingressPath  specifies the web context of the Entando App to be deployed. This is required to create a single\npath entry in the Ingress that is used to expose the Entando App. The default behaviour of Wildfly and\nJBoss EAP is to use the name of the WAR file that is deployed, but it is possible to override this in the EntandoApp\nproject itself using a  jboss-web.xml  file .\nIn the absence of the  jboss-web/xml  file, the web context  would be the the\nMaven artifactId of the Entando Opp project. It is also possible to modify this by changing the  <finalName>  element\nin the Maven  pom.xml \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure containining the Entando Component Repository for this App to use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando App. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. Keep in mind that EntandoPlugins linked to this app will\nalso be made available on this host. \n spec.environmentVariables  is a Map of environment variables to pass to the EntandoApp Docker image. For example, this could\nbe used to provide connection details for custom datasources or message queues as discussed in the\n custom datasources tutorial . Also note that all of the\n Spring variables in an Entando project \ncan also be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited Spring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to each of the three containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando App \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Entando App Engine container. \n spec.ecrGitSshSecretName  - a secret containing a private key file named  rsa_id  that matches a public key configured in the Git server. \n EntandoPlugin \n An Entando Plugin is a microservice that can be made available to one or more EntandoApps in the cluster. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin . The\nDeployment resulting from an EntandoPlugin is also a multi-container Pod deployment, and will include both the\nplugin Docker image specified and the EntandoPluginSidecar Docker Image \n Overview \n \n Custom Resource Definition:  EntandoPlugin \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-plugin-controller \n Github Repo:  entando/entando-k8s-plugin-controller \n \n \n Deployment Details - plugin:\n \n Docker image: as provided by user \n Entando Cluster Citizen:  Plugin \n \n \n Deployment Details - EntandoPluginSidecar:\n \n Docker image:  entando/entando-plugin-sidecar \n Github Repo:  entando/entando-plugin-sidecar \n \n \n Possible Database Images:\n \n MySQL:  docker.io/centos/mysql-57-centos7 \n PostgreSQL:  docker.io/centos/postgresql-96-centos7 \n Example \n ---\nkind: "EntandoPlugin"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-plugin"\n  namespace: "my-namespace"\nspec:\n  image: your-org/your-image:4.3.2\n  securityLevel: lenient\n  ingressPath: /my-plugin\n  healthCheckPath: /actuator/health\n  dbms: "postgresql"\n  keycloakSecretToUse: some-kc-secret\n  clusterInfrastructureToUse: some-eci-secret  \n  ingressHostName: "test-app.my-routing-suffix.com"\n  roles:\n    - code: admin\n      name: Administrators\n    - code: user\n      name: Users\n  permissions: \n    - clientId: some-keycloak-client \n      role: some-admin\n    - clientId: another-keycloak-client \n      role: another-admin\n  environmentVariables: \n    - name: ENTANDO_VAR1\n      value: my-var1\n  tlsSecretName: my-tls-secret\n  replicas: 1\n Explanation of properties \n \n spec.image  is the Docker image you can provide for the plugin you want to deploy. Please follow\nour instructions on using our blueprint to  build your own EntandoPlugin \nCurrently only Docker images hosting Spring Boot applications are supported. It is therefore of  utmost\nimportance to start off with our blueprint and ensure that the resulting Spring Boot application respects\nthe Spring variables to be set from the Entando Operator. \n spec.dbms  is used to select the database management of choice. If left empty, or if the value is  none , it\nis assumed that the plugin in question does not required a database. If this value matches up to\nthe  spec.dbms  property  of a previously  configured\n EntandoDatabaseService ,\nthe Entando Plugin will be configured to use this service.\nAlternatively, the Entando Operator will use this value to deploy a dedicated Database instance in this namespace\nfor the Entando Plugin to use. \n spec.ingressPath  specifies the web context where the Entando Plugin will be made available when linked to EntandoApps.\nPlease ensure this is in sync with the  server.servlet.context-path  property set on your Spring Boot application. \n spec.clusterInfrastructureToUse  is the name of the Kubernetes Secret that provides the connection details to the\nEntandoClusterInfrastructure this Plugin will use. This is only\nrequired if more than one EntandoClusterInfrastructure is available and this value can be omitted entirely under\nmost conditions. \n spec.keycloakSecretToUse  is used to determine which Kubernetes Secret to use to connect to the correct\nKeycloak instance. If not specified, the default Secret  keycloak-admin-secret  will be used. Only useful\nif you have more than one Keycloak server in your cluster. \n spec.ingressHostName  is the hostname of the Kubernetes Ingress to be created for the Entando Plugin. Please\nensure that this is accessible using the default routing suffix of your Entando Operator Deployment, or a DNS\nname previously registered with your DNS provider. This hostname will not be used from your Widgets that you\nhave implemented for this plugin as these widgets will use the hostname of the EntandoApp they are being used from.\nThis hostname is useful for embedded web user interfaces used only on this plugin, such as admin user interfaces\nor diagnostic user interface. \n spec.roles  specifies the set of roles that this plugin expects. At deployment time, the Entando Operator ensures\nthat each of these roles are created on Keycloak for the Keycloak client representing this EntandoPlugin. It is\nup to the Plugin provider to ensure that Spring Security has been set up to enforce the access rules implied\nby the individual roles. Each role has a unique  code  and a more human readable   name  as property. \n spec.permissions  specifies the set of permissions this plugin requires on other services with known Keycloak Clients.\nAt deployment time, the Entando Operator will use the service account user of this EntandoPlugin\'s Keycloak Client\nand create the necessary role bindings on the specified client id of the service to be used.\nEach permission specifies the  clientId  in Keycloak of the target service, and the  role  that this EntandoPlugin\nshould be bound to in that Keycloak client. \n spec.environmentVariables  is a Map of environment variables to pass to the EntandoPlugin Docker image.\nIt is entirely up to the plugin provider to determine the semantics of each variable. We strongly suggest for\nplugin provider  to use  the standard Spring Property Resolver syntax for Spring variables, as this would allow\nany of these variables to be overridden here by specifying the equivalent SNAKE_CASE names of the dot-delimited\nSpring properties.\nThese parameters are applied to the container\'s environment variables after all variables have been calculated.\nIt can therefore also be used as a mechanism to override any of the default environment variables that need customization.\nKeep in mind that these parameters will be passed to both containers in this Pod as environment\nvariables, and that care needs to be taken to avoid conflicting variable names. \n spec.tlsSecretName  is the name of a standard Kubernetes\n TLS Secret  that will be used for the\nresulting Ingress. This is only required if the\n globally configured TLS Secret \nfor the Operator is absent or has not been created with a wildcard hostname that supports this Keycloak instance\'s hostname. \n spec.replicas  - the number of replicas to be made available on the Deployment of this Entando Plugin \n spec.resourceRequirements  - the minimum and maximum  resource allocation  for the Entando Plugin container. \n EntandoAppPluginLink \n The EntandoAppPluginLink custom resource is created when an AppBuilder user links an EntandoPlugin to the current\nEntandoApp, or deploys an EntandoPlugin for use in the current EntandoApp. The Entando Operator processes the resulting\nEntandoAppPluginLink and creates a path for the Plugin on the Ingress that exposes the EntandoApp in question. This path\nis determined by the  spec.ingressPath  property on the EntandoPlugin custom resource itself. If the EntandoPlugin\nresides in a namespace other than the namespace of the EntandoApp, the EntandoOperator creates a Kubernetes\nService in the namespace of the EntandoApp that simply delegates to the Service in the namespace of the EntandoPlugin. \n Overview \n \n Custom Resource Definition:  EntandoAppPluginLink \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-app-plugin-link-controller \n Github Repo:  entando/entando-k8s-app-plugin-link-controller \n Example \n ---\nkind: "EntandoAppPluginLink"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-link"\n  namespace: "my-namespace"\nspec:\n  entandoAppName: my-app\n  entandoAppNamespace: my-namespace\n  entandoPluginName: my-app\n  entandoPluginNamespace: my-namespace\n Explanation of properties \n \n spec.entandoAppName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.name \n spec.entandoAppNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoApp.metadata.namespace \n spec.entandoPluginName  specifies the name of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.name \n spec.entandoPluginNamespace  specifies the namespace of the EntandoApp that requires the plugin, found in  EntandoPlugin.metadata.namespace \n EntandoDatabaseService \n By default, the Entando Operator deploys one of either the MySQL or PostgreSQL database Docker images for every custom\nresource that requires a database. Many customers may however have existing infrastructure for their databases which\nthey may want to leverage. The EntandoDatabaseService custom resource allows customers to deploy a Service that points\nto an external database. When deploying one of the Entando custom resources that require a database, the Entando\nOperator will look for EntandoDatabases in the same namespace, and if it finds one with the same  spec.dbms  setting\nas the database required by the custom resource , it will create a dedicated schema/username/password combination\nfor the custom resource and point the deployment emanating from custom resource to this external database. \n \n Custom Resource Definition:  EntandoDatabaseService \n Example \n ---\nkind: "EntandoDatabaseService"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-database-service"\n  namespace: "my-namespace"\nspec:\n  dbms: "osracle"\n  host: 10.0.12.41\n  port: 1521\n  databaseName: mydb \n  tablespace: \n  secretName: some-secret\n  jdbcParameters:\n    maxStatements: 300 \n    loginTimeout: 180\n Explanation of properties \n \n spec.dbms  is used to select the database management of choice. If this value matches up to the  spec.dbms  property\nof the Entando custom resource that will use it. Valid values are  oracle ,  postgresql  and  mysql . \n spec.host  can either be a valid IPv4 address, or a hostname. Where an IP address is provided, the Entando Operator\nwill create a Kubernetes Service with an associated EndPoints resource to allow for routing to this address. Where\na hostname is provided, the Entando Operator will simply create a Kubernetes Service of type  cname \n spec.port  is the port that the external database service is running on. This value is optional in which case we will\nuse the default port for the DBMS vendor in question \n spec.databaseName  is the name of the database that the Entando Operator should be creating schemas in. This property\nis only for use with PostgreSQL and Oracle, as MySQL doesn\'t distinguish between schemas and databases. \n spec.tablespace  is only required for Oracle so that Schemas can be created in different tablespaces. \n spec.secretName  should be the name ( Secret.metadata.name ) of a Kubernetes Secret in the same namespace that has\na  username  key and a  password  key that will provide the Entando Operator with the necessary access and permissions\nto create Schemas and users on the database in question. \n spec.jdbcParameters  is a map of name/value pairs that will be appended to the JDBC connection string to allow for\nfurther customization of the actual connection to the database. \n EntandoCompositeApp \n The EntandoCompositeApp custom resource can be used to package a collection of Entando Core Custom Resources in a\nsingle YAML file for sequential deployment. Keep in mind that one can already use standard YAML syntax to package\na set of Kubernetes resources in a single file, separating each resource with a triple dash ( --- ). The purpose\nof this custom resource is therefor specifically to ensure that the deployment of the previous \'component\' has\ncompleted, and that  the resulting Pod is up and running before commencing deploying on the \'component\'. \n The primary use case of this custom resource is to package a full Entando App and all its supporting service and\nplugins for easy installation as is often required for demos and POCs. Creating this kind of dependency for typical\nproduction deployments is not advised, as it will inevitably result in a violation of pipeline isolation. The\nmore commonly recommended approach is for your Entando Apps and Plugins to be fully deployable in isolation. Use this\ncustom resource with care. \n Overview \n \n Custom Resource Definition:  EntandoCompositeApp \n Kubernetes Controller Details:\n \n Docker image:  entando/entando-k8s-composite-app-controller \n Github Repo:  entando/entando-k8s-composite-app-controller \n Example \n ---\nkind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "test-composite-app"\n  namespace: "my-namespace"\nspec:\n  components:\n    - kind: "EntandoKeycloakServer"\n         metadata:\n           name: "my-kc"\n         spec:\n           dbms: postgresql\n           isDefault: true\n           replicas: 1\n       - kind: "EntandoClusterInfrastructure"\n         metadata:\n           name: "my-eci"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           isDefault: true\n       - kind: "EntandoApp"\n         metadata:\n           name: "my-app"\n         spec:\n           dbms: postgresql\n           replicas: 1\n           standardServerImage: wildfly\n           ingressPath: /entando-de-app\n       - kind: "EntandoPlugin"\n         metadata:\n           name: "my-pda"\n         spec:\n           image: "docker.io/entando/entando-process-driven-plugin:latest"\n           replicas: 1\n           dbms: "mysql"\n Explanation of properties \n \n spec.components  specifies the list of Entando Core Custom Resources to be deployed  in sequence . Please note\nthat only the Entando Custom Resources discussed in this section can be used in this list. Custom resources\nrelated to the Entando Component Repository never result in actual deployments on the Kubernetes cluster and\ntherefore do not need to be specified in any sequence. You can use the normal triple dash YAML notation to\ninclude them in the same YAML file \n \n'},{title:"Overview",frontmatter:{},regularPath:"/v6.3/docs/concepts/",relativePath:"v6.3/docs/concepts/README.md",key:"v-3bdbce85",path:"/v6.3/docs/concepts/",headers:[{level:2,title:"Entando App Engine",slug:"entando-app-engine"},{level:2,title:"Entando App Builder",slug:"entando-app-builder"},{level:2,title:"Entando Component Generator",slug:"entando-component-generator"},{level:2,title:"Entando Component Repository",slug:"entando-component-repository"},{level:2,title:"Entando Identity Management",slug:"entando-identity-management"},{level:2,title:"Entando WCMS",slug:"entando-wcms"},{level:2,title:"Entando Cluster Citizens",slug:"entando-cluster-citizens"},{level:3,title:"Architecture diagram",slug:"architecture-diagram"},{level:3,title:"Members of the cluster",slug:"members-of-the-cluster"},{level:2,title:"Entando Ingresses",slug:"entando-ingresses"},{level:3,title:"What is an ingress",slug:"what-is-an-ingress"},{level:3,title:"How ingresses are used in an Entando Cluster",slug:"how-ingresses-are-used-in-an-entando-cluster"},{level:3,title:"Default Ingress HTTP Routes",slug:"default-ingress-http-routes"},{level:3,title:"Exposing plugins in the EntandoApp domain",slug:"exposing-plugins-in-the-entandoapp-domain"},{level:3,title:"How to check ingresses in my cluster",slug:"how-to-check-ingresses-in-my-cluster"},{level:3,title:"Learn more",slug:"learn-more"}],lastUpdated:"1/29/2021, 10:47:17 AM",content:' Overview \n A portal, website, web app, or mobile app built with Entando is called an Entando application.\nAn Entando application is an assembly of out of the box and/or custom built components running on the\nEntando Platform. Components can be widgets, micro frontends, microservices, page templates, WCMS content or WCMS content types. \n Entando App Engine \n The Entando App Engine is the heart of the Entando Platform by providing the primary out-of-the-box services for\ndeveloping applications. Key features: \n \n Expose the APIs the Entando App Builder uses to provide the page and content management interface for your application. \n Handle the work of assembling micro frontends and microservices and combining them on specific pages as defined by the Entando App Builder. \n Provide the data access layer to persist the page and application design. \n Manage the cluster infrastructure. \n \n See also:  APIs tutorial \n Entando App Builder \n The Entando App Builder is the feature-rich management interface used to design and build pages for Entando applications. \n See also:  Widget Tutorial \n Entando Component Generator \n The Entando Component Generator is Entando\'s implementation of  JHipster  that allows users to\nquickly and efficiently generate the skeleton of an Entando Component. The Entando Component Generator provides advanced\ndata modeling capabilities including object relational mapping and automatic generation of micro frontends and microservices.\nThe generated skeleton serves as a starting point to help a development team swiftly meet the needs of the business. \n See also:  Entando JHipster Blueprint \n Entando Component Repository \n The Entando Component Repository (ECR) is used to store and retrieve shareable components so they can be used in multiple\nEntando applications across the enterprise. \n See also:  ECR Overview \n Entando Identity Management \n Entando Identity Management is the  Keycloak -based token-based authentication mechanism used by the\nEntando platform. It provides the ability to add Single Sign On capabilities across multiple domains and to connect service\nproviders with identity providers. \n See also:  Entando Authentication \n Entando WCMS \n The Entando Web Content Management System (WCMS) is a lightweight content and digital asset management system with support\nfor headless operation. It allows management of widgets and html fragments so they can be placed within an Entando application. \n See also:  Content Types  or  Content Templates \n Entando Cluster Citizens \n The purpose of this guide is to give an overview of the members of an Entando cluster and their role. \n Architecture diagram \n Let’s start with a picture of an Entando 6 cluster and how the various\nmembers interact with each other. \n Members of the cluster \n An Entando 6 cluster is composed of various citizens which interact with\neach other. Most of these citizens have a Custom Resource Definition\nfile associated with them and are deployable on Kubernetes using the\nEntando operator and controllers. \n Entando app \n An Entando application is composed of three parts: \n \n \n Entando App Builder : the user interface to customize and build an Entando application, as well as interact with the Entando Component Repository. \n \n \n Entando App Engine : the backend APIs providing access to Entando\nservices. \n \n \n Entando Component Manager : the service providing the Entando\nComponent Repository functionality, e.g. listing the available\nbundles, install/uninstall a bundle, etc. Check the  dedicated\nsection  for more details. \n \n \n The interaction between these three components (and the rest of the\nEntando cluster) use the authorization/authentication features provided\nby Keycloak. \n Entando Component Manager \n As briefly introduced before, the Entando component manager is able to\nlist the EntandoDeBundles accessible from the EntandoApp and provide the\ninstall/uninstall services to install a bundle on an Entando App. All of\nthese services are made possible by the communication with the Entando\nKubernetes service, the only service of the Entando ecosystem (other\nthan the operator itself) able to interact with the cluster and some of\nthe Entando custom resources. \n Entando Kubernetes Service \n The Entando Kubernetes Service is part of the Entando cluster\ninfrastructure custom resource, and provides an access point to some of\nthe custom resources defined by Entando, in particular: \n \n \n Entando applications \n \n \n Entando plugins \n \n \n Entando links \n \n \n Entando Component Repository bundles \n \n \n Some of the main services provided by the Entando Kubernetes Service\nare: \n \n \n Provide a list of the available EntandoDeBundles to the\ncomponent-manager \n \n \n Deploy a plugin during the installation of a bundle or discovery of\nan already available plugin and expose that to an app \n \n \n Create a link between an EntandoApp and an EntandoPlugin to expose\nthe plugin’s APIs to the EntandoApp and the micro frontends (MFEs) \n Entando Component Repository bundles \n An EntandoDeBundle - or Component Repository bundle - is a package with\na set of Entando components and resources. The Entando component manager\nis able to read these kind of packages and install the components to\nextend the functionalities of an EntandoApp. For more details on the\nEntandoDeBundle and the Entando Component Repository, check the\n component repository overview \ndocumentation \n Entando plugin \n An Entando plugin is a microservice that exposes APIs reusable by one or\nmore Entando apps. Usually the plugin services are exposed to the\nEntando developer and the end users via micro frontends. Check the\n micro frontends  tutorials for more details. You can\nquickly generate an Entando plugin using the  Entando JHipster Blueprint . The generated project\nwill be ready to work in an Entando environment providing the\nintegration with Keycloak, generating a set of default micro frontends\nand exposing the plugin’s logic via an EntandoDeBundle (check the\nreferences for details). \n Keycloak \n Keycloak in Entando 6 is responsible for authorization and\nauthentication All the members of an Entando 6 cluster interact with\nkeycloak to verify user/service authorization to perform any specific\ntask. Check out the references below for more details on keycloak. \n Entando Ingresses \n What is an ingress \n An Ingress is a Kubernetes resource which purpose is to expose HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. \n How ingresses are used in an Entando Cluster \n When deploying an Entando Cluster, ingresses are generated for the resources that requires to be exposed to the outside world. The process of creating an ingress, setup the correct routes and the certificates is done by the via the Entando Operator and the entando custom resource controllers. \n Keycloak ingress \n An dedicated ingress is created for keycloak to expose the authentication and authorization functionalities. Having a dedicated ingress is required to guarantee that both token issuing and token validation work correctly, even when the services using the keycloak instance are on different namespaces. \n Cluster infrastructure ingress \n Another ingress is created for the cluster infrastructure services in order to expose the api endpoint to interact with the cluster correctly \n Entando App ingress \n Another ingress is automatically created to expose App builder, App engine and the Entando component manager, a service part of the ECR.\nThe three containers are served under the same domain, and this is beneficial as they are able to interact without cross-origin issues. \n The Entando App ingress is also used when linking an Entando Plugin with and Entando App, operation that usually happens when a bundle containing an Entando Plugin is installed via the ECR in an Entando App. Check out the dedicated section for details. \n Entando Plugin ingress \n Also Entando Plugins are automatically exposed via an ingress when deployed in an Entando Cluster. \n Default Ingress HTTP Routes \n In this table you can see what are the default routes that are exposed for each ingress\n \n \n \n \n \n \n \n Ingress \n Ingress Http route \n Application \n \n \n \n \n Keycloak ingress \n /auth \n Keycloak \n \n \n Entando cluster infrastructure ingress \n /k8s \n Entando K8S service \n \n \n Entando App ingress \n /entando-de-app \n App engine \n \n \n /app-builder/ \n App builder \n \n \n /digital-exchange \n Entando component manager \n \n \n /<plugin-ingressPath> \n Entando plugin linked to the app \n \n \n Entando plugin ingress \n /<plugin-ingressPath> \n Entando plugin \n \n \n \n Note : The Entando plugin  ingressPath  variable is defined in the Entando Plugin custom resource under the  spec  element. The plugin ingress path is also used to expose the plugin under the Entando App domain \n Exposing plugins in the EntandoApp domain \n The process of exposing an Entando Plugin under the same domain (ingress) of the Entando App is made possible from the creation of an  EntandoAppPluginLink  custom resource and the corresponding controller. \n Once the link between the Entando App and the Entando Plugin is created, the controller reads the specification of such link and automatically creates the HTTP routes in the Entando App so that the plugin is exposed on the same domain as the App builder, App engine and Component manager. \n This allows the Microfrontend developers that need to access the plugin to not worry about CORS policy or knowing what is the full path where the plugin is exposed. The plugin is referencable using relative urls. \n How to check ingresses in my cluster \n Using the Openshift dashboard \n On the Openshift dashboard, Ingresses are not exposed directly as pods and deployments. The dashbaord provides direct access to the Ingress Routes (or simply routes) under the  Applications > Routes  menu. \n \n To see the ingress resources, you need to access them from the  Resources > Other resources  menu. From the dropdown you should select the  Ingress  resource and therefore you should be able to see the ingress available on that specific project/namespace \n Using kubectl from the command line \n From the command line, getting the ingress is very easy. Once you know the namespace(s) where your Entando Cluster is deployed, you simply need to use the \n kubect get ingresses.extensions -n <namespace>\n \n Here an example of the result in a test namespace \n > kubectl get ingresses.extensions -n local\n\nNAME               CLASS    HOSTS                               ADDRESS     PORTS   AGE\nqst-eci-ingress   <none>   qst-eci-local.192.168.1.9.nip.io   127.0.0.1   80      2d1h\nqst-ingress       <none>   qst-local.192.168.1.9.nip.io       127.0.0.1   80      2d1h\nqst-kc-ingress    <none>   qst-kc-local.192.168.1.9.nip.io    127.0.0.1   80      2d1h\n \n To get more details about a specific ingress, you can use the  get  command specifing the ingress name you want to check and the  yaml  output format \n > kubectl get ingresses.extensions -n local qst-ingress -o yaml\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  creationTimestamp: "2020-05-13T15:27:08Z"\n  generation: 1\n  labels:\n    EntandoApp: qst\n  managedFields:\n  - apiVersion: extensions/v1beta1\n    fieldsType: FieldsV1\n    fieldsV1:\n      f:status:\n        f:loadBalancer:\n          f:ingress: {}\n    manager: nginx-ingress-controller\n    operation: Update\n    time: "2020-05-13T15:27:08Z"\n  name: qst-ingress\n  namespace: local\n  ownerReferences:\n  - apiVersion: entando.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: EntandoApp\n    name: qst\n    uid: aa7053e1-fd8b-419f-bdee-df3018c013fa\n  resourceVersion: "16802097"\n  selfLink: /apis/extensions/v1beta1/namespaces/local/ingresses/qst-ingress\n  uid: e9b6f027-369a-4b84-b4b1-736a6e49f180\nspec:\n  rules:\n  - host: qst-local.192.168.1.9.nip.io\n    http:\n      paths:\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8080\n        path: /entando-de-app\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8083\n        path: /digital-exchange\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8081\n        path: /app-builder/\n        pathType: ImplementationSpecific\nstatus:\n  loadBalancer:\n    ingress:\n    - ip: 127.0.0.1\n Learn more \n For more details about ingress concept in Kubernetes please refer to the official documentation: \n \n Kubernetes Ingress documentation \n Openshift Routes documentation \n \n'},{title:"PDA Architecture",frontmatter:{},regularPath:"/v6.3/docs/concepts/pda-architecture.html",relativePath:"v6.3/docs/concepts/pda-architecture.md",key:"v-258a5de6",path:"/v6.3/docs/concepts/pda-architecture.html",headers:[{level:2,title:"PDA MFEs",slug:"pda-mfes"},{level:2,title:"PDA API",slug:"pda-api"},{level:2,title:"Sidecar",slug:"sidecar"},{level:2,title:"PDA Core",slug:"pda-core"},{level:2,title:"PAM Impl",slug:"pam-impl"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" PDA Architecture \n The objective of this document is to provide an explanation for the components\nthat compose the Process Driven Applications plugin (PDA) architecture from a\ndeployment perspective as well as how they interact with each other. \n The image below shows the components in high level: \n PDA MFEs \n The PDA Micro Frontends run on the browser and they render the UI custom\ncomponents the user interacts with. These components are written in React and\nthey fetch data from the PDA API, passing the Keycloak token for authentication.\nThe MFEs also make calls to the Entando Core API in order to retrieve the\nsettings required for the configuration UI. These components will be available\non Entando App Builder after the PDA plugin bundle is installed and the user\ncan create pages with them. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n PDA API \n The Spring Boot application that communicates with the engine and make its data\navailable in a Rest API. It interacts with Keycloak to validate the token and\nwith the sidecar to retrieve the connections/sensitive data, depending on how it\nwas deployed. The application shouldn't call specific engine classes directly,\ninstead it always calls the abstractions defined in PDA Core library. The engine\nimplementation to use is decided at runtime based on the connection details\nprovided. It is important to note that the PDA API application is stateless,\nsince it doesn't have a database. All data available on the API is retrieved\nfrom the BPM engine. After bundle installation, it will be deployed as a\nmicroservice in the Kubernetes infrastructure and an Ingress will be created to\nmake the API available to the MFEs, as described by the Entando Plugin custom\nresource. \n The source code for this component:\n https://github.com/entando/entando-process-driven-plugin \n Sidecar \n The sidecar is another application (docker container) deployed in the same Pod\nas the PDA API. It exposes services to manage connection details, which will be\nstored as secrets in Kubernetes. The PDA API communicates with the sidecar to\nmanage BPM engine connection details. \n The source code for this component:\n https://github.com/entando/entando-plugin-sidecar \n PDA Core \n This is the library that defines the interfaces and abstractions that should be\nimplemented to interact with specific BPM engines. This way it is possible to\nhave multiple engine implementations at the same time. \n The source code for this component:\n https://github.com/entando/pda-core-engine \n PAM Impl \n The Red Hat PAM implementation for the PDA Core library. If the connection maps\nto a PAM engine, these are the classes that are going to be executed when the\nPDA API requests for engine operations. This implementation communicates with\nthe Kie Server, which executes the defined process operations. \n The source code for this component:\n https://github.com/entando/pda-redhatpam-engine \n"},{title:"Bundle and Component Descriptors",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/docs/ecr/ecr-bundle-details.html",relativePath:"v6.3/docs/ecr/ecr-bundle-details.md",key:"v-80e62764",path:"/v6.3/docs/ecr/ecr-bundle-details.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:3,title:"Bundle Conventions",slug:"bundle-conventions"},{level:3,title:"Bundle Descriptor",slug:"bundle-descriptor"},{level:2,title:"Plugin",slug:"plugin"},{level:3,title:"Kubernetes pod names",slug:"kubernetes-pod-names"},{level:3,title:"Permissions",slug:"permissions"},{level:2,title:"Widget",slug:"widget"},{level:2,title:"Fragment",slug:"fragment"},{level:2,title:"Page Template",slug:"page-template"},{level:2,title:"Page",slug:"page"},{level:2,title:"CMS Asset",slug:"cms-asset"},{level:2,title:"Content Template",slug:"content-template"},{level:2,title:"Content Type",slug:"content-type"},{level:2,title:"Content",slug:"content"},{level:2,title:"Categories",slug:"categories"},{level:2,title:"Groups",slug:"groups"},{level:2,title:"Labels",slug:"labels"},{level:2,title:"Languages",slug:"languages"},{level:2,title:"Static Resources",slug:"static-resources"}],lastUpdated:"3/22/2021, 1:51:51 PM",content:' Bundle and Component Descriptors \n Overview \n The Entando Component Manager reads the  descriptor.yaml  file from the root of the bundle package and uses it to install any components and resources included in the bundle. Here is the basic bundle structure: \n .\n├ descriptor.yaml\n├ resources/\n│ └ ...\n└ ... (folders reported in descriptor.yaml file)\n Bundle Conventions \n \n \n The bundle descriptor file needs to be named  descriptor.yaml  or the bundle will not be recognized. \n \n \n Static resources should be placed in a  resources  folder. They are not explicitly referenced in the  descriptor.yaml  file itself. \n Bundle Descriptor \n The bundle descriptor file aggregates all included components and has the following structure: \n \n Warning \n Remember the file needs to be named  descriptor.yaml . \n \n descriptor.yaml. \n code: survey_bundle # The bundle ID\ndescription: This is the survey bundle # The description of the bundle\n\ncomponents: # All components will be here\nOptional. Use if the component requires a deployment\n  plugins:\n    - folder/you/want/my_plugin_descriptor.yaml\n    - folder/you/want/another_plugin_descriptor.yaml\nTo create widgets you will need to add references to the descriptor file\'s\n  widgets:\n    - widgets/my_widget_descriptor.yaml\n    - widgets/another_widget_descriptor.yaml\nTo create fragments, you will need to add references to the descriptor file\'s\n  fragments:\n    - fragments/my_fragment.yaml\nTo create Page Templates you will need to add references to the descriptor file\'s\n  pageModels:\n    - pageModels/my_page_model_descriptor.yaml\n    - pageModels/another_page_model_descriptor.yaml\nTo create and publish pages you will need to add references to the descriptor file\'s\n  pages:\n    - page/my_page_descriptor.yaml\n    - page/another_page_descriptor.yaml\nTo create a CMS Asset you will need to add a reference to the descriptor file and put on the same location the image or file you want to upload.\n  assets:\n    - assets/my-asset/my_asset_descriptor.yaml\n    - assets/my-asset/my_image.jpg\nTo create Content Types you will need to add references to the descriptor file\'s\n  contentTypes:\n    - contentTypes/my_content_type_descriptor.yaml\nTo create Content Templates you will need to add references to the descriptor file\'s\n  contentModels:\n    - contentModels/my_content_model_descriptor.yaml\n    - contentModels/another_content_model_descriptor.yaml\nTo create and publish Contents you will need to add references to the descriptor file\'s\n  contents:\n    - contents/my_content_descriptor.yaml\n    - contents/another_content_descriptor.yaml\nTo create categories you will need to add references to the descriptor file\'s\n  categories:\n    - categories/my_categories.yaml\nTo create groups you will need to add references to the descriptor file\'s\n  groups:\n    - groups/my_groups.yaml\nTo create labels you will need to add references to the descriptor file\'s\n  labels:\n    - labels/my_labels.yaml\nTo enable labels you will need to add references to the descriptor file\'s\n  languages:\n    - languages/languages.yaml\n Plugin \n Here is an example of a plugin descriptor: \n Plugin descriptor.yaml \n image: "entando/my-image:1.0.0" # The docker image used to create the plugin\ndeploymentBaseName: "myplugin" # The base name to assign to the pods that have to be created in Kubernetes\ndbms: "postgresql" # The DBMS the plugin will use\nroles: # The roles the plugin will expose in keycloak\n  - "task-list"\n  - "task-get"\n  - "connection-list"\n  - "connection-get"\n  - "connection-create"\n  - "connection-delete"\n  - "connection-edit"\nhealthCheckPath: "/actuator/health" # The health check path that kubernetes will use to check status of the plugin deployment\ningressPath: "/myhostname.io/entando-plugin" # the ingress path to assign to the plugin deployment\npermissions: # a list of keycloak clientId / role to bind each to the other\n  - clientId: realm-management\n    role: manage-users\n  - clientId: realm-management\n    role: view-users\n Kubernetes pod names \n Each plugin is deployed onto Kubernetes using composite names. The first part is created reading the descriptor file, the second one is appended autonomously by Kubernetes.\nThis second part is 31 char long and each Kubernetes pod name length must be at most 63: longer name will result in the fail of the deployment. \n deploymentBaseName \n Initially, the first part of the pod name was generated concatenating and manipulating the  image  field value, however sometimes this approach could lead to a pod name longer than 63.\nTo solve this problem, another (optional) property is available:  deploymentBaseName . \n It accepts a string not longer than 32 and, if present, its value will be used as the first part for the pod\'s names, instead of the  image  one. \n In the previous example of the descriptor a possible resulting pod name will be this one in case the  deploymentBaseName  property is not present: \n entando-my-image-1-0-0-server-deployment-6f86f459wj9k \n and this one if the  deploymentBaseName  property is present: \n myplugin-server-deployment-6f86f459wj9k \n Please note that if you are using the  deploymentBaseName  property and you want to install more versions of the same plugin at the same time, you need to specify different values for  deploymentBaseName , maybe including the plugin version. \n Permissions \n The  permissions  property specifies a list of coupled clientId and roles that will be bound in Keycloak. \n To find them you can open the Keycloak console and then navigate to  clients  →  awesomeplugin-server  →  Service Account Roles . \n Currently using a non-existing clientId or role will be ignored and the plugin deployment will succeed without errors. \n TIP \n The more verbose CRD plugin descriptor format is deprecated as of Entando 6.3 but is documented  here . \n Widget \n Here is an example of a widget descriptor: \n Widget descriptor.yaml. \n code: another_todomvc_widget # The Widget identification\n\ntitles: # Widget\'s Titles\n  en: TODO MVC Widget # Title in English\n  it: TODO MVC Widget # Title in Italian\n\ngroup: free # The owner group of the widget\nOptional. The UI Path, the widget.ftl file will have the customUi content\ncustomUiPath: widget.ftl\nOptional. The Custom UI\ncustomUi: >-\n    <h1>My custom widget UI</h1>\nOptional. ConfigUI\nconfigUi:\n  customElement: todomvc-config # The name of the custom-element used to render the configUI\n  resources:\n    - <bundleid>/static/js/main.js # The resources necessary to the custom element to render the configUI, like the code\n Fragment \n Fragment descriptor.yaml. \n code: my_fragment # The unique id\nOptional. The fragment content\nguiCode: >-\n  "<div>Here the content</div>"\nOptional. A path to a FreeMarker file containing the fragment content.\nguiCodePath: fragment.ftl\n Page Template \n Page Template descriptor.yaml. \n code: todomvc_page_template # The Page Template identification\ndescription: TODO MVC basic page template # The Page Template description\n\ntitles: # Page Template\'s Titles\n  en: TODO MVC PageTemplate # Title in English\n  it: TODO MVC PageTemplate # Title in Italian\nThe Page Template configuration\nconfiguration:\n  frames: # All frames\n    - pos: 0 # Frame position\n      description: Header # Frame description\n      sketch: # Frame sketch configuration\n        x1: 0\n        y1: 0\n        x2: 11\n        y2: 1\n      defaultWidget:\n        code: my-widget # the code of the widget to apply when using the button "apply default widgets" in the page configuration UI\nA simplified way to define a Frame\n    - pos: 1\n      description: Breadcrumb\n      sketch: { x1: 0, y1: 0, x2: 11, y2: 1 }\nOptional. Define the Page Template in a separate file or inside the descriptor file with `template`\ntemplatePath: page.ftl\nOptional. Define the Page Template this way or in a separate file with `templatePath`\ntemplate: >-\n  <#assign wp=JspTaglibs[\\"/aps-core\\"]>\n  <!DOCTYPE HTML PUBLIC \\"-//W3C//DTD HTML 4.0 Transitional//EN\\">\n  <html>\n      <head>\n          <title><@wp.currentPage param=\\"title\\" /></title>\n      </head>\n      <body>\n          <h1><@wp.currentPage param=\\"title\\" /></h1>\n          <a href=\\"<@wp.url page=\\"homepage\\"/>\\">Home</a><br>\n          <div>\n              <h1>Bundle 1 Page Template</h1>\n              <@wp.show frame=0 />\n          </div>\n      </body>\n  </html>\n Page \n This descriptor enables a page to be created and published via a bundle. Status can be  published  or  draft . The widgets section can be used to fully configure a page layout. \n Page descriptor.yaml. \n code: dashboard\nparentCode: homepage\ntitles:\n  en: My dashboard\n  it: La mia Dashboard\npageModel: dashboard\nownerGroup: free\njoinGroups: []\ndisplayedInMenu: true\nseo: false\ncharset: utf-8\nECR will publish the page according to this property\nstatus: published|draft\nPage Configuration\nwidgets:\n  - code: Brand-Logo\n    config: null\n    pos: 0\n  - code: Login_buttons\n    config: null\n    pos: 2\n  - code: seeds_card\n    config:\n      cardname: creditcard\n    pos: 6\n  - code: list_item\n    config:\n      icon: managealerts\n      count: \'0\'\n      title: Alerts\n    pos: 7\n  - code: list_item\n    config:\n      icon: viewstatements\n      count: \'0\'\n      title: View Statements\n    pos: 11\n  - code: seedscard-transaction-table\n    config: null\n    pos: 13\n CMS Asset \n This descriptor contains the metadata required for uploading and updating a CMS Asset. \n Asset descriptor.yaml. \n correlationCode: \'my-reference-code\'\ntype: image\nThis file should be placed on same folder as the descriptor.yaml\nname: 113f4437cac3b3f3d4db7229f12287a4_d3.png\ndescription: 113f4437cac3b3f3d4db7229f12287a4_d3.png\ngroup: free\ncategories: []\n Content Template \n Content-template descriptor.yaml. \n id: 8880003\ncontentType: CNG\ndescription: Demo Content Template\nOptional. Define the Content Template Shape in a separate file or inside descriptor file with `contentShape`\ncontentShapePath:\nOptional. Define the Content Template Shape this way or in a separate file with `contentShapePath`\ncontentShape: >-\n  <article>\n    <h1>$content.Title.text</h1>\n    <h2>Demo content template</h2>\n    #if ( $content.MainBody.text != "" )\n    $content.MainBody.text\n    #end\n  </article>\n\n\nwidgets:\n  - code: Brand-Logo\n    config: null\n    pos: 0\n  - code: Login_buttons\n    config: null\n    pos: 2\n  - code: seeds_card\n    config:\n      cardname: creditcard\n    pos: 6\n  - code: list_item\n    config:\n      icon: managealerts\n      count: \'0\'\n      title: Alerts\n    pos: 7\n  - code: list_item\n    config:\n      icon: viewstatements\n      count: \'0\'\n      title: View Statements\n    pos: 11\n  - code: seedscard-transaction-table\n    config: null\n    pos: 13\n Content Type \n For more details on the Content Type properties, refer to the  Content Type\ndocumentation . \n Content-type descriptor.yaml. \n code: CNG\nname: Demo\nstatus: 0\n\nattributes:\n  - code: title\n    type: Text\n    name: Title\n    roles:\n      - code: jacms:title\n        descr: The main title of a Content\n    disablingCodes: []\n    mandatory: true\n    listFilter: false\n    indexable: false\n\n    enumeratorStaticItems: string\n    enumeratorStaticItemsSeparator: string\n    enumeratorExtractorBean: string\n\n    validationRules:\n      minLength: 0\n      maxLength: 100\n      regex: string\n      rangeStartString: string\n      rangeEndString: string\n      rangeStartStringAttribute: string\n      rangeEndStringAttribute: string\n      equalString: string\n      equalStringAttribute: string\n      rangeStartDate: string\n      rangeEndDate: string\n      rangeStartDateAttribute: string\n      rangeEndDateAttribute: string\n      equalDate: string\n      equalDateAttribute: string\n      rangeStartNumber: 0\n      rangeStartNumberAttribute: string\n      rangeEndNumber: 0\n      rangeEndNumberAttribute: string\n      equalNumber: 0\n      equalNumberAttribute:\n      ognlValidation:\n        applyOnlyToFilledAttr: false\n        errorMessage: Something\n        keyForErrorMessage: some\n        keyForHelpMessage: thing\n        ognlExpression: string\n Content \n This descriptor enables a content to be created and optionally published via a bundle, according to the  status  property. The content id is optional and can be auto generated or explicitly declared for linking from other components, like Content Widget. \n Content descriptor.yaml. \n id: NWS650\ntypeCode: NWS\ndescription: Dealing with a financial emergency\nmainGroup: free\nstatus: PUBLIC\nattributes:\n  - code: title\n    values:\n      en: Dealing with a financial emergency\n  - code: subtitle\n    values:\n      en: |\n        <p>How to tackle financial stress</p>\n  - code: body\n    values:\n      en: |\n        <p>For many Americans, financial concerns are their number-one stress point. Here are 6 ways to help reduce your money stress and get motivated to take control of your finances.</p>\n  - code: img\n    values:\n      en:\n        correlationCode: \'651\'\n        name: bank_750xx684385064_d0.jpg\n  - code: links\n    elements:\n      - code: links\n        value:\n          symbolicDestination: \'#!U;http://www.mysite.com/!#\'\n          destType: 1\n          urlDest: \'http://www.mysite.com/\'\n          pageDest: null\n          contentDest: null\n          resourceDest: null\n        values:\n          en: mio sito\n      - code: links\n        value:\n          symbolicDestination: \'#!U;http://www.mysite.com/!#\'\n          destType: 1\n          urlDest: \'http://www.mysite.com/\'\n        values:\n          en: mio sito 2\n  - code: attaches\n    elements:\n      - code: attaches\n        values:\n          en:\n            correlationCode: \'205\'\n            name: Entando_Admin_Console_Overview_4.3.3_EN.pdf\n Categories \n This descriptor contains a  list  of Categories. \n Category descriptor.yaml. \n - code: new-category # Identifies the category\n  parentCode: home # The parent category, home is the base category\n  titles:\n    it: "Una nuova categoria" # Category name in Italian\n    en: "New category" # Category name in English\n Groups \n This descriptor contains a  list  of Groups. \n Group descriptor.yaml. \n - code: my_group # Identifies the group\n  name: "My group" # The name of the group\n Labels \n This descriptor contains a  list  of Labels. \n Label descriptor.yaml. \n - key: MY-FIRST-LABEL # Identifies the label\n  titles: # The titles on the label\n    it: Mio Titolo # The title in Italian\n    en: My Title # The title in English\n Languages \n This descriptor contains a  list  of Languages to enable during the installation process. \n Language descriptor.yaml. \n- code: en\ndescription: English\n- code: it\ndescription: Italian \n Static Resources \n In order to upload static files, you will need to create a folder called\n resources . All files inside this folder will be uploaded into Entando using the same\nfolder structure. \n resources/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.css\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n On the structure mentioned above, the resulting files in the Entando\narchitecture will be: \n yourbundleid/\n├ css/\n│ └ styles.css\n├ js/\n│ └ script.js\n├ images/\n│ ├ favicon.ico\n│ └ logo.png\n└ page.html\n \n \n Important \n yourbundleid  is the  code  property inside  descriptor.yaml \n \n If you need to use one of these static files in a widget or page template, use this FTL\ntag  <@wp.resourceURL /> : \n <img src="<@wp.resourceURL />yourbundleid/images/logo.png">\n<link rel="stylesheet" href="<@wp.resourceURL />yourbundleid/css/styles.css">\n<link rel="shortcut icon" href="<@wp.resourceURL />yourbundleid/images/favicon.ico" type="image/x-icon"/>\n<script type="application/javascript" src="<@wp.resourceURL />yourbundleid/js/script.js"><\/script>\n \n '},{title:"Filtering bundles",frontmatter:{},regularPath:"/v6.3/docs/ecr/ecr-bundle-filters.html",relativePath:"v6.3/docs/ecr/ecr-bundle-filters.md",key:"v-6ab3389c",path:"/v6.3/docs/ecr/ecr-bundle-filters.html",headers:[{level:2,title:"Filtering bundles by component",slug:"filtering-bundles-by-component"},{level:3,title:"Supported labels keys are:",slug:"supported-labels-keys-are"},{level:3,title:"Example",slug:"example"},{level:2,title:"Filtering bundles by status",slug:"filtering-bundles-by-status"},{level:2,title:"Filtering bundles by textual search",slug:"filtering-bundles-by-textual-search"},{level:2,title:"Mixing search criteria",slug:"mixing-search-criteria"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Filtering bundles \n ECR bundles are filterable by component, by status or by textual research. \n Filtering bundles by component \n ECR bundles are filterable by component from App Builder user interface. \n \n Behind the scenes, filtering is done using the label-based filtering provided out of the box from Kubernetes. \n To enable filtering of a bundle, the custom-resource representing the bundle on the Entando Cluster needs to contain the correct labels. An important note on the values to add the  labels  field, even if to correctly define a label in a k8s resource both the key and the value are required, from an Entando point of view only the key part of the label is used for filtering. The value could be set to anything, but our reccomendation is to use  "true"  for clarity and simplicity. \n Supported labels keys are: \n \n \n \n \n \n \n \n Label entry \n Description \n \n \n \n \n widget: "true" \n The bundle contains one or more microfrontends (widgets)  \n \n \n plugin: "true" \n The bundle contains one or more microservices (plugins) \n \n \n fragment: "true" \n The bundle contains one or more fragments \n \n \n pageTemplate: "true" \n The bundle contains one or more page templates \n \n \n contentType: "true" \n The bundle contains one or more content types \n \n \n contentTemplate: "true" \n The bundle contains one or more content templates \n Example \n Here is an example of the metadata for a ecr bundle containg micro-frontends, some microservices and page templates \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: demo-bundle\n  labels:\n    widget: "true"\n    plugin: "true"\n    pageTemplate: "true"\nspec:\n  details:\n  ...\n Filtering bundles by status \n ECR bundles are filterable by status from App Builder user interface. \n \n You can choose to see the full list of the bundles available in Kubernetes cluster by selecting the  Explore  tab, or the list of the currently installed bundles by clicking on the  Installed  tab. \n Filtering bundles by textual search \n You can search for bundles containing some keywords by executing a textual search. \n \n You can open the menu on the left to select which field to target. \n If you are creating a new bundle, keep in mind the textual search is performed against data extracted from the bundle CRD file. \n Mixing search criteria \n You can mix all previous search criteria to refine the scope of your search as you want.\nFor example, you could search for all available bundles ( Explore  tab) that contain  Page Templates  components\n(using the checkboxes) and the word  Login  in their name (using the textual search). \n'},{title:"How to customize bundle info shown in Entando App Builder",frontmatter:{},regularPath:"/v6.3/docs/ecr/ecr-bundle-presentation-config.html",relativePath:"v6.3/docs/ecr/ecr-bundle-presentation-config.md",key:"v-00077730",path:"/v6.3/docs/ecr/ecr-bundle-presentation-config.html",lastUpdated:"12/15/2020, 12:52:01 PM",content:" How to customize bundle info shown in Entando App Builder \n \n In the image above you can see an example of a bundle as is displayed in the ECR user interface inside the Entando App Builder. \n The corresponding custom-resource file on Kubernetes is similar to this: \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n  name: simple-entando-bundle\nspec:\n  details:\n    name: \"Entando Bundle\"\n    description: An example of an Entando bundle\n    dist-tags:\n      latest: v0.0.1\n    time:\n      created: '2020-05-20T15:59:21.946Z'\n      modified: '2020-05-20T15:59:21.946Z'\n      v0.0.1: '2020-05-20T15:59:21.946Z'\n    versions:\n      - v0.0.1\n    keywords:\n      - entando6\n    author: Entando\n    thumbnail: >-\n      data:image/jpeg;base64,....\n  tags:\n....\n \n In order to change the UI elements, you need to update the custom-resource in accordance with this table \n \n \n \n Field \n UI Element \n \n \n \n \n spec.details.name \n Set the bundle title \n \n \n spec.details.description \n Set the bundle description (only visible in the list presentation format) \n \n \n spec.details.thumbnail \n Set the bundle thumbnail, expressed as a base64 encoded string \n \n \n spec.details.dist-tags.latest \n Set what's the latest version of the bundle \n \n \n \n"},{title:"Bundle versions and updates - FAQ",frontmatter:{},regularPath:"/v6.3/docs/ecr/ecr-bundle-versions-faq.html",relativePath:"v6.3/docs/ecr/ecr-bundle-versions-faq.md",key:"v-0cf3f5ec",path:"/v6.3/docs/ecr/ecr-bundle-versions-faq.html",headers:[{level:2,title:"Does the ECR support versioning?",slug:"does-the-ecr-support-versioning"},{level:2,title:"How is a bundle version defined?",slug:"how-is-a-bundle-version-defined"},{level:2,title:"What format should I use to version my bundle?",slug:"what-format-should-i-use-to-version-my-bundle"},{level:2,title:"As a bundle developer, how should I create a new version of a bundle?",slug:"as-a-bundle-developer-how-should-i-create-a-new-version-of-a-bundle"},{level:2,title:"How to prevent a particular bundle version from being visible in the ECR?",slug:"how-to-prevent-a-particular-bundle-version-from-being-visible-in-the-ecr"},{level:2,title:"My bundle contains a microservice generated with the Entando Component Generator, does the version of the microservice have to be the same as the bundle version?",slug:"my-bundle-contains-a-microservice-generated-with-the-entando-component-generator-does-the-version-of-the-microservice-have-to-be-the-same-as-the-bundle-version"},{level:2,title:"How bundle versions are installed from the ECR",slug:"how-bundle-versions-are-installed-from-the-ecr"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Bundle versions and updates - FAQ \n Does the ECR support versioning? \n A bundle, as discussed in the  overview , is a package containing one or more components.\nAs in many other packaging systems, the ECR supports bundle versioning, allowing developers to create and release improvements of their package over time. \n How is a bundle version defined? \n In the ECR, the bundle custom resource comes with a set of  tags , each one representing a version of the bundle.\nHere an example for a CMS quickstart bundle \n apiVersion: entando.org/v1\nkind: EntandoDeBundle\nmetadata:\n    name: cms-quickstart-bundle\nspec:\n  details:\n    name: Entando Example CMS Bundle\n    description: Example Bundle containing CMS components for the Quickstart experience\n  tags:\n    - integrity: ''\n      shasum: ''\n      tarball: 'https://github.com/entando/entando-cms-quickstart-bundle.git'\n      version: v0.0.1\n    - integrity: ''\n      shasum: ''\n      tarball: 'https://github.com/entando/entando-cms-quickstart-bundle.git'\n      version: v0.0.2\n \n As you can see from the code above, the bundle  cms-quickstart-bundle  has 2 versions available.\nEach version in the  tags  object must correspond a tag in the git repository provided in the  tarball  field. \n What format should I use to version my bundle? \n The ECR requires versions to follow the  semantic versioning 2.0.0 , with the possibility to prepend a  v  to the version itself. Some valid bundle versions are: \n \n 1.0 \n v0.1.0-alpha \n 1.0.1-SNAPSHOT \n 22.109.10234-RC.1 \n As a bundle developer, how should I create a new version of a bundle? \n If you're a bundle developer and you want to release a new version of your bundle, you can simply update the content of your bundle and commit the changes to the bundle git repository.\nOnce all the required changes are committed, you can create a new tag in the git repository using the  git tag  command and publish it to the remote repository using the  git push --tags  command \n For example, let's assume my bundle already has a version  1.0.0  and I want to publish the version  2.0.0  of my bundle, here the commands I need to use to create and publish the new tag: \n     git tag -a \"2.0.0\" -m \"My new version\"\n    git push --tags\n How to prevent a particular bundle version from being visible in the ECR? \n If, for some reason, you don't want a particular version to be available for the installation, you can proceed as follows: \n \n You can edit the bundle directly using the command  kubectl edit entandodebundles.entando.org -n <namespace-of-the-bundle> <name-of-the-bundle> \n \n or if you still have the original file you can also: \n \n remove the undesired version from the tag list in your bundle Kubernetes file ( integrity ,  shasum ,  tarball  and  version ) \n delete your bundle from your cluster using a command like this  kubectl delete -f your-bundle-file.yml [-n your-cluster-namespace] \n upload your bundle again to Kubernetes using a command like this  kubectl create -f your-bundle-file.yml [-n your-cluster-namespace] \n My bundle contains a microservice generated with the Entando Component Generator, does the version of the microservice have to be the same as the bundle version? \n The version of the microservice - or to be more precise the docker image associated with the microservice - isn't bound to the version of the bundle containing the microservice itself. \n This gives the bundle developer complete control over the bundle release process, especially in those situations where the bundle contains more components and even more microservices. \n How bundle versions are installed from the ECR \n When the user decides to install a version of the bundle, the ECR checks the provided tag in the git repository and clones locally just the content of the repository for that tag. \n For this reason it's important that for each provided tag in the custom-resource a corresponding tag is available in the git repository, otherwise the ECR will not be able to donwload the bundle and will throw an error. Note that the ECR can only see published tags, so make sure that all the time you create a new tag in your git repository you publish it to the remote repository too. \n"},{title:"How Microservices get Connected to Entando Apps",frontmatter:{},regularPath:"/v6.3/docs/ecr/ecr-how-microservices-connect-to-apps.html",relativePath:"v6.3/docs/ecr/ecr-how-microservices-connect-to-apps.md",key:"v-65aa6b28",path:"/v6.3/docs/ecr/ecr-how-microservices-connect-to-apps.html",headers:[{level:2,title:"How a Microservice from a Bundle gets Deployed with the ECR?",slug:"how-a-microservice-from-a-bundle-gets-deployed-with-the-ecr"},{level:2,title:"Other Options",slug:"other-options"},{level:2,title:"Kubernetes naming conventions",slug:"kubernetes-naming-conventions"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" How Microservices get Connected to Entando Apps \n In this document we will describe some of the assumptions and details related to the process of connecting a microservice part of a bundle to an Entando App. \n In order to fully understand the concepts explained in this piece of the documentation, please make sure you have familiarity with these concepts: \n \n Entando custom resources \n Entando ingresses \n How a Microservice from a Bundle gets Deployed with the ECR? \n When a bundle containing a microservice is installed using the ECR, behind the scenes some actions take place. \n \n To begin, an  EntandoPlugin custom resource  is generated starting from the PluginDescriptor. Some fields will be automatically generated from the provided image. \n \n \n From the  image  field in the PluginDescriptor, we will extract the  organization ,  name  and  version  of the image. \n organization ,  name  and  version  are then converted to valid characters and composed to form the plugin name ( metadata.name ), the labels ( metadata.labels ) and the ingressPath ( spec.ingressPath ) of the custom resource. \n \n NOTE : Two PluginDescriptors having images with the same organization, name and version will generate a custom resource with the same  metadata.name  and  spec.ingressPath . \n \n Next, a check for a microservice with the same name is performed to verify if a new deployment is required for the microservice. \n If a microservice with the same name is not available in the namespace where the Entando App has been deployed, a new EntandoPlugin custom resource is created and deployed in the namespace using the details defined in the bundle. \n At the same time, an EntandoAppPluginLink custom resource is deployed in the namespace in order to expose the microservice ingress path on the EntandoApp ingress. \n If both the EntandoPlugin custom resource and the EntandoAppPluginLink are deployed correctly, the APIs of the microservice will be available from the same domain of the EntandoApp, making it possible reach those APIs from the EntandoApp using relative urls. \n \n This is the standard flow when no other micorservice with a given name is already available in the EntandoApp namespace. \n If there is an existing microservice with the same name as the one generated from the PluginDescriptor, the ECR will connect the EntandoApp to\nthe existing microservice by generating and deploying the required EntandoAppPluginLink per step 3 above.\nThis way, plugins can be reused by many applications at the same time. \n Other Options \n The naming convention recommendations above are accurate for creating bundles and for self contained applications where the Entando operator is managing the lifecycle of your microservices. If you have a substantial API infrastructure or you intend to deploy a large number of versioned microservices you can also utilize Entando with API management infrastructure like API gateways. If you are using an API gateway or other API abstraction layer you will need to manually manage the ingress for your micro frontends in your application to point to the API gateway deployment. \n In cases where conflicts occur bundles can easily be renamed by updating metdata. \n Kubernetes naming conventions \n Here some rules about naming conventions extracted from the  Kubernetes documentation on object names and ids \n \n Most resource types require a name that can be used as a DNS subdomain name as defined in RFC 1123. This means the name must: \n \n contain no more than 253 characters \n contain only lowercase alphanumeric characters, '-' or '.' \n start with an alphanumeric character \n end with an alphanumeric character \n \n \n"},{title:"Overview",frontmatter:{},regularPath:"/v6.3/docs/ecr/ecr-overview.html",relativePath:"v6.3/docs/ecr/ecr-overview.md",key:"v-5899f08a",path:"/v6.3/docs/ecr/ecr-overview.html",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Glossary",slug:"glossary"},{level:3,title:"Component",slug:"component"},{level:3,title:"ECR Bundle",slug:"ecr-bundle"},{level:3,title:"EntandoDeBundle custom resource",slug:"entandodebundle-custom-resource"},{level:3,title:"Entando-component-manager",slug:"entando-component-manager"},{level:3,title:"Entando-K8S-service",slug:"entando-k8s-service"},{level:2,title:"Architecture",slug:"architecture"},{level:2,title:"Example flow",slug:"example-flow"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Overview \n Introduction \n The Entando Component Repository (ECR) is meant to be a repository to\nshare reusable components among different Entando instances. \n The following glossary relates to the ECR and related concepts: \n Glossary \n Component \n An Entando component - simply referred to as component - is a piece of\nreusable code/resource to be used in an Entando widget, page or\napplication. Examples of components are widgets, microfrontends,\ncontent-types, labels, plugins, and static resources \n ECR Bundle \n An ECR bundle - is a package containing one or more components and a\n'descriptor.yaml' file providing information about the bundle. The\nbundle is published on an Git registry and is shared with an Entando\napplication using the EntandoDeBundle custom resource. \n EntandoDeBundle custom resource \n The EntandoDeBundle custom resource is a Kubernetes custom resource\nreadable by the Entando6 operator. It’s used to provide information\nabout an ECR bundle and make the bundle available in kubernetes for the\nentando-component-manager. \n Entando-component-manager \n The entando-component-manager - a.k.a component-manager is part of the\nEntando6 app and dialogs both with the Kubernetes cluster via the\nentando-k8s-service and with the entando-core. The\nentando-component-manager reads the bundles from the cluster and exposes\nthem via an API accessible from AppBuilder. The component-manager is\nalso responsible of the installation/removal of components from\nentando-core \n Entando-K8S-service \n The Entando-K8S-Service is part of the Entando infrastructure and is\nresponsible for the low-level communication with the K8S cluster API. \n Architecture \n \n From an architectural point of view, the ECR is composed of \n \n The EntandoDeBundles which contain the metadata associated with a bundle \n The Entando-k8s-service which reads the bundles from the\ncluster/namspace(s) and serves them via a consumable API \n The Component-manager which creates the connection between the EntandoApp\nand the K8S-service. \n Example flow \n \n \n The user lands on the ECR page in app-builder and wants to see the\nlist of bundles shared with that EntandoApp \n \n \n AppBuilder asks the component-manager for the list of available\nbundles \n \n \n Component-manager queries the k8s-service to get the available\nbundles \n \n \n The k8s-service queries the cluster/namespace(s) it is able to read\nfrom for available bundles and returns the list to the\ncomponent-manager \n \n \n Component-manager returns a list to App-Builder \n \n \n The user is able to see the available bundles and is able to install\none or more of them \n \n \n"},{title:"Troubleshooting ECR",frontmatter:{},regularPath:"/v6.3/docs/ecr/ecr-troubleshooting-guide.html",relativePath:"v6.3/docs/ecr/ecr-troubleshooting-guide.md",key:"v-19e7e228",path:"/v6.3/docs/ecr/ecr-troubleshooting-guide.html",headers:[{level:2,title:"A bundle installation/removal has failed, how to access the logs?",slug:"a-bundle-installation-removal-has-failed-how-to-access-the-logs"},{level:3,title:"Overview",slug:"overview"},{level:3,title:"Solution",slug:"solution"},{level:2,title:"My bundle has an issue, how should I publish a new version of the bundle?",slug:"my-bundle-has-an-issue-how-should-i-publish-a-new-version-of-the-bundle"},{level:3,title:"Overview",slug:"overview-2"},{level:3,title:"Solution",slug:"solution-2"},{level:2,title:"Bundle installation fails because a file has not been found in the bundle",slug:"bundle-installation-fails-because-a-file-has-not-been-found-in-the-bundle"},{level:3,title:"Overview",slug:"overview-3"},{level:3,title:"Solution",slug:"solution-3"},{level:2,title:"Bundle installation failed due to plugin(s) images not reachable",slug:"bundle-installation-failed-due-to-plugin-s-images-not-reachable"},{level:3,title:"Overview",slug:"overview-4"},{level:3,title:"Solution",slug:"solution-4"},{level:2,title:"I can't uninstall a bundle because some components are in use",slug:"i-can-t-uninstall-a-bundle-because-some-components-are-in-use"},{level:3,title:"Overview",slug:"overview-5"},{level:3,title:"Solution",slug:"solution-5"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Troubleshooting ECR \n A bundle installation/removal has failed, how to access the logs? \n Overview \n Currently the Entando component manager logs are available in kubernetes via dashboard (openshift) or cli tools (k9s or kubectl).\nIf in you Entando cluster you have more than one Entando App custom resource, you will need to know what's the correct component-manager to check using the corresponding Entando App name and namespace where the app has been deployed. \n Solution \n Using  kubectl  and assuming for simplicity that you have only one Entando App named  quickstart  and your Entando cluster is only composed of one namespace, also named  quickstart ,\nyou can get the component-manager logs using the command \n kubectl logs -f deployment/quickstart-server-deployment --namespace quickstart -c de-container\n \n Note : the  -f  flag is optional and could be used to follow the logs for debugging purposes \n My bundle has an issue, how should I publish a new version of the bundle? \n Overview \n Sometimes a bundle could have some issues: typos in the  descriptor.yaml  file, wrong references of components or to not available docker images are just a few of the possible errors. \n Solution \n \n If the bundle is shared using a git repository, you can make the required changes to your project and publish the new version to git and generate a new tag for it. \n Once the new tag is published, update the bundle costum-resource avaialble in you Entando Cluster by adding the new tag to the  tags  objects  and replacing the latest  dist-tags  to point to this new version. \n Proceed with the new installation \n \n If you're actively working on your bundle and you simply want to verify things are working correctly, instead of generating a new tag for each release of the bundle you can try to keep overriding a specific tag using the git command  git tag -f . We suggest you to follow this practice only during development and not in production. \n Bundle installation fails because a file has not been found in the bundle \n Overview \n When a component that is referenced in the  descriptor.yaml  is missing in the bundle or not correctly referenced, the bundle installation fails and in the logs is reported which file has not been found. \n ERROR - File with name {filename} not found in the bundle\n Solution \n When such a problem happens, verify that the component referenced in the descriptor file are actually present in the bundle and that the reference is properly typed. \n Publish a new version of your bundle as described in the\n \"My bundle has an issue\"  section \n Bundle installation failed due to plugin(s) images not reachable \n Overview \n Plugin included in a bundle are referenced using their docker image. Sometime the image is not available - maybe has not yet be published or is in a private docker registry - and plugin installation can't happen and the entire bundle installation process can't finish successfully \n Solution \n Verify that the docker image you are referencing is correct and publicly available. \n \"My bundle has an issue\"  section \n I can't uninstall a bundle because some components are in use \n Overview \n When removing an installed bundle, the Entando component manager verfies that the bundle components\nare not in use by any other component. Removing such components would cause an error during removal\nas in certain case the deleting a component in use is not permitted. \n Solution \n In order to prevent such errors, the user is alerted and required to manually decouple the bundle\ncomponents before beign able to completely remove the bundle from the system. \n"},{title:"Getting Started with Entando",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/docs/getting-started/",relativePath:"v6.3/docs/getting-started/README.md",key:"v-1b9bdef1",path:"/v6.3/docs/getting-started/",headers:[{level:2,title:"Automatic Install",slug:"automatic-install"},{level:2,title:"Manual Install",slug:"manual-install"},{level:3,title:"Install Kubernetes",slug:"install-kubernetes"},{level:3,title:"Prepare Kubernetes",slug:"prepare-kubernetes"},{level:3,title:"Deploy Entando",slug:"deploy-entando"},{level:2,title:"Log in to Entando",slug:"log-in-to-entando"},{level:2,title:"Next Steps",slug:"next-steps"}],lastUpdated:"3/11/2021, 5:55:10 AM",content:" Getting Started with Entando \n You have two options for getting started with Entando. \n \n Automatically install Entando via the Entando command-line interface (CLI) . This is the fastest way to start up an Entando application in Kubernetes. \n Manually install Entando step by step . This is useful if you're preparing a shared cluster rather than a local developer environment, the CLI defaults don't meet your specific needs, or if you want to customize the deploy itself. \n Automatic Install \n The following steps will launch an Ubuntu VM via Multipass, install Kubernetes, and then deploy Entando to it. \n \n Install  Multipass \n \n https: //multipass.run/#install\n \n \n Install Entando into Kubernetes on Ubuntu using the  Entando CLI \n \n curl  -sfL https://get.entando.org  |   bash \n \n \n The progress of the install will be displayed on the console and can take 10 minutes or so depending on the time needed to download the Docker images. The sequence of steps matches the manual steps below. It can be useful to review those steps to help understand what the CLI is doing. \n Once complete, the installer will give you the URL to access the  Entando App Builder . \n Login with username: admin  and password:  adminadmin . See the  Log in to Entando  section for more information and next steps. \n Manual Install \n This in-depth guide takes a learn-as-you-go approach, and will give you a working knowledge of Kubernetes as you get Entando up and running in a local environment. \n \n Install Kubernetes \n Prepare Kubernetes Environment \n Deploy Entando \n \n Note: For advanced or long-time Entando users, check out our  Quick Reference  install guide with just the steps. \n Since Entando is designed to run on Kubernetes, let's get started by installing our own instance of Kubernetes locally. \n We've tested a variety of Kubernetes implementations including Minikube, Minishift, CodeReady Containers, K3s, and Microk8s to find the best combination of low cpu/memory usage, fast startup times, and minimal configuration so we can get started quickly. After downloading the necessary files, we'll have our own instance of Kubernetes up and running in < 60 seconds. \n What's Needed to Run Kubernetes? \n Kubernetes is a container orchestrator designed to manage a server cluster. It requires at least one master node running a Linux OS. We'll be using Multipass to create a lightweight Ubuntu VM in seconds that runs on a bare metal hypervisor for speed and performance. \n Install Kubernetes \n Enable Hypervisor \n Why a Hypervisor? \n Hypervisors allow you to create and run virtual machines. Virtualization software that run on top of your operating system like VirtualBox or VMWare Workstation are Type 2 hypervisors. Type 1 hypervisors run on bare metal. \n \n Let's install a bare metal hypervisor for optimal performance. \n Mac:  Install  hyperkit . \n brew  install  hyperkit\n \n Windows:   Install Hyper-V \n \n What if my machine doesn't support hyperkit or Hyper-V? \n Use a Type 2 hypervisor that runs on top of your operating system: \n \n Install Virtual Box:\n Mac \n Windows \n Launch Ubuntu VM \n Why Multipass? \n Multipass is a cross-platform tool developed by the publishers of Ubuntu to create lightweight Ubuntu VMs in seconds. \n \n \n \n Install  Multipass \n \n \n Launch VM \n \n \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n \n Open a shell \n \n multipass shell ubuntu-lts\n Run Kubernetes \n Why K3s? \n K3s is a certified Kubernetes distribution designed for production workloads in resource-constrained environments. \n It's packaged as a single <40MB binary that reduces the dependencies and steps needed to install, run and auto-update a production Kubernetes cluster. \n \n \n Install  k3s \n \n curl  -sfL https://get.k3s.io  |   sh  -\n \n \n Check for  Ready   STATUS . \n \n sudo  kubectl get node\n \n \n What's running out of the box? \n sudo  kubectl get pods -A\n \n \n \n Congratulations! \n You now have a local instance of Kubernetes up and running. \n \n Now that Kubernetes is running, you can setup kubectl to send commands directly to k3s from the host machine rather than from within the VM. See the instructions  here . \n Prepare Kubernetes \n To install Entando, we'll add  Custom Resources , create a  Namespace , download a  Helm  chart, and configure external access to our cluster. \n Add Custom Resources \n Why Custom Resources? \n Standard resources in Kubernetes include things like  Pods , which are a group of one or more containers,  Services , the way to call or access your pods, and  Ingresses , for managing external access to your cluster. \n Custom resources  let you store and retrieve structured data. Combining a custom resource with a custom controller allows you to define a desired state to automate the running of your applications or services in a Kubernetes cluster. \n \n Examples of custom resources in Entando are: \n \n Entando App Engine \n Entando Identity Management System \n \n From your Ubuntu shell: \n \n Download custom resource definitions. \n \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n \n Create custom resources \n \n sudo  kubectl create -f dist/crd\n Create Namespace \n What are Namespaces? \n Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual clusters are called  namespaces. \n You can use namespaces to allocate resources and set cpu/memory limits for individual projects or teams. They can also encapsulate projects from one another. \n \n sudo  kubectl create namespace entando\n Download Helm Chart \n What is Helm? \n Helm is a package manager for Kubernetes that helps you define, install, and upgrade Kubernetes applications.\nThis  Getting Started  guide uses a Helm-generated file with a number of default values to help get you started faster,\ne.g. use embedded databases, don't include OpenShift support, don't include PDA widgets, etc. If you want to\nchange any of those defaults please see  https://github.com/entando-k8s/entando-helm-quickstart . \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/entando.yaml\n EntandoCompositeApp \n To quickly deploy an application, Entando uses a Kubernetes Custom Resource named  EntandoCompositeApp . It's composed of 3 parts: \n \n EntandoKeycloakServer  (authentication manager) \n EntandoClusterInfrastructure  (interface between Entando app and Kubernetes) \n EntandoApp  (core logic application) \n \n To speed up the  Getting Started  environment, embedded databases are used by default for these components.\nSee  this tutorial  for more information on how to change your\ndatabase connection. \n Configure Access to Your Cluster \n What about Networking? \n Entando sets up  Ingresses  in Kubernetes to expose HTTP routes from outside the cluster to services within the cluster. We'll use this to access Entando from a local browser. \n If you run into network issues during startup or if you are using Windows for your local development instance, please see  the tips . Symptoms can include having Entando fail to completely start the first time or a working Entando installation may fail to restart later. \n \n To set up external access to your cluster, you'll need to replace the value of\n ENTANDO_DEFAULT_ROUTING_SUFFIX  with your Ubuntu IP. You can look up your Ubuntu IP, and edit the\nYAML file manaully, but running the below commands will automatically update the IP address for you. \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n Deploy Entando \n Deploying the Helm chart will deploy all of the Kubernetes resources required for Entando to run. \n sudo  kubectl create -f entando.yaml\n \n sudo  kubectl get pods -n entando --watch\n \n \n What does a successful startup look like? \n \n First, you'll see the Entando operator:  ContainerCreating  >  Running \n Next, the Entando composite app deployer:  Pending  >  ContainerCreating  >  Running \n Then, Keycloak:  kc-deployer  >  kc-db-deployment \n \n Jobs / Deployments \n \n Jobs, like  kc-db-preparation-job  run once, and are  Completed :  0/1 \n Database deployments, like  kc-db-deployment , should end up as  Running :  1/1 \n The Keycloak server deployment  kc-server-deployment , should end up as  Running :  1/1 \n The  quickstart-server-deployment  should end up as  3/3 \n \n Lifecycle Events \n \n Each line represents an event:  Pending ,  ContainerCreating ,  Running  or  Completed \n Restarts should ideally be  0 ; otherwise, there was a problem with your cluster, and Kubernetes is trying to self-heal \n \n ubuntu@test-vm : ~ $   sudo  kubectl get pods -n entando --watch \n NAME                                   READY   STATUS              RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg   0/1     ContainerCreating   0          3s\nquickstart-operator-8556c9c6f8-9ghwg   0/1     Running             0          49s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     Pending             0          0s\nquickstart-composite-app-deployer-picaju7bf0   0/1     ContainerCreating   0          0s\nquickstart-composite-app-deployer-picaju7bf0   1/1     Running             0          20s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     Pending             0          0s\nquickstart-kc-deployer-mx7ms3sc2l              0/1     ContainerCreating   0          0s\nquickstart-operator-8556c9c6f8-9ghwg           1/1     Running             0          88s\nquickstart-kc-deployer-mx7ms3sc2l              1/1     Running             0          19s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          0s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Pending             0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     ContainerCreating   0          7s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    0/1     Running             0          77s\nquickstart-kc-db-deployment-c57f75d7f-wxmqr    1/1     Running             0          87s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Pending             0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          0s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Init:0/1            0          13s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     PodInitializing     0          15s\nquickstart-kc-db-preparation-job-1d6ab9b6-7    0/1     Completed           0          17s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Pending             0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     ContainerCreating   0          0s\nquickstart-kc-server-deployment-66484d596d-qr78q   0/1     Running             0          3m\nquickstart-kc-server-deployment-66484d596d-qr78q   1/1     Running             0          4m36s\nquickstart-kc-deployer-mx7ms3sc2l                  0/1     Completed           0          6m50s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     Pending             0          0s\nquickstart-eci-deployer-kx9nhop22g                 0/1     ContainerCreating   0          0s\nquickstart-eci-deployer-kx9nhop22g                 1/1     Running             0          5s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Pending             0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     ContainerCreating   0          0s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   0/1     Running             0          97s\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running             0          2m7s\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed           0          2m15s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     Pending             0          0s\nquickstart-deployer-os19rw3eto                       0/1     ContainerCreating   0          1s\nquickstart-deployer-os19rw3eto                       1/1     Running             0          6s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          0s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Pending             0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     ContainerCreating   0          4s\nquickstart-db-deployment-7fff4c8479-qf469            0/1     Running             0          7s\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running             0          19s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Pending             0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          0s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:0/4            0          4s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          5s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:1/4            0          8s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          9s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:2/4            0          6m42s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m20s\nquickstart-db-preparation-job-5a55b267-6             0/1     Init:3/4            0          7m22s\nquickstart-db-preparation-job-5a55b267-6             0/1     PodInitializing     0          7m23s\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed           0          7m25s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          0s\nquickstart-server-deployment-5597597575-gtptz        0/3     Pending             0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     ContainerCreating   0          4s\nquickstart-server-deployment-5597597575-gtptz        0/3     Running             0          2m35s\nquickstart-server-deployment-5597597575-gtptz        1/3     Running             0          2m37s\nquickstart-server-deployment-5597597575-gtptz        2/3     Running             0          2m38s\nquickstart-server-deployment-5597597575-gtptz        3/3     Running             0          3m5s\nquickstart-deployer-os19rw3eto                       0/1     Completed           0          11m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed           0          20m\n \n \n \n Press  Ctrl-C  to exit the watch command once everything is up and running. \n \n What pods come out of the box? \n sudo  kubectl get pods -n entando\n \n NAME                                                 READY   STATUS      RESTARTS   AGE\nquickstart-operator-8556c9c6f8-9ghwg                 1/1     Running     0          132m\nquickstart-kc-db-deployment-c57f75d7f-wxmqr          1/1     Running     0          130m\nquickstart-kc-db-preparation-job-1d6ab9b6-7          0/1     Completed   0          129m\nquickstart-kc-server-deployment-66484d596d-qr78q     1/1     Running     0          128m\nquickstart-kc-deployer-mx7ms3sc2l                    0/1     Completed   0          130m\nquickstart-eci-k8s-svc-deployment-7c58c78b55-z52xj   1/1     Running     0          123m\nquickstart-eci-deployer-kx9nhop22g                   0/1     Completed   0          124m\nquickstart-db-deployment-7fff4c8479-qf469            1/1     Running     0          121m\nquickstart-db-preparation-job-5a55b267-6             0/1     Completed   0          121m\nquickstart-server-deployment-5597597575-gtptz        3/3     Running     0          113m\nquickstart-deployer-os19rw3eto                       0/1     Completed   0          121m\nquickstart-composite-app-deployer-picaju7bf0         0/1     Completed   0          131m\n \n \n \n Get the URL to access Entando from your local browser. \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n \n Example URL: \n \n quickstart-entando.192.168.64.33.nip.io/app-builder/\n Log in to Entando \n Now that we've installed Entando, let's log in to the  Entando App Builder . \n \n \n Username:  admin \n Password:  adminadmin \n \n After login, change your password to activate your account. \n \n Note: If the login process hangs for more than 5 seconds, refresh the browser. \n \n \n The App Builder is where we'll compose our micro frontends alongside CMS pages and content. \n Congratulations! \n We now have Entando up and running on Kubernetes in our local environment. \n Next Steps \n Choose one of the following actions to continue your journey with Entando! \n \n \n Build Your First Application:  Use the  Welcome Wizard  to build your first application via guided prompts. \n \n \n Try a Tutorial:  Take advantage of the  Learning Paths  which organize a few of the most popular tutorials by user type. \n \n \n Dig Deeper into Entando Concepts:  Review the  Docs  sections to more deeply understand the Entando building blocks. \n \n \n Learn about the Quickstart Environment:  See the  Quickstart Tips  for more information on how to manage your Getting Started or quickstart environment. \n \n \n \n"},{title:"Bundle uninstall",frontmatter:{},regularPath:"/v6.3/docs/ecr/ecr-uninstall-flow.html",relativePath:"v6.3/docs/ecr/ecr-uninstall-flow.md",key:"v-516c114a",path:"/v6.3/docs/ecr/ecr-uninstall-flow.html",headers:[{level:2,title:"Uninstall process",slug:"uninstall-process"},{level:2,title:"Troubleshooting",slug:"troubleshooting"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Bundle uninstall \n Uninstall process \n To uninstall a bundle that was previously installed on an Entando App Engine, from Entando App builder UI go to\nthe  Component Repository  tab and select the bundle you want to uninstall \n \n An initial check is made to verify none of the bundle components are in use.\nIf any of the components are in use, a popup will alert you.\nNote that you can't force the removal of a bundle if its components are in use. \n Once the removal process starts: \n \n Bundle resources are deleted from the Entando App Engine \n Components included in the bundle are removed from the Entando App Engine \n Plugins are unlinked \n Troubleshooting \n If any error happens during the uninstall process and you don't know what to do,\ncheck out the  Troubleshooting guide  or the  Entando Forum \n"},{title:"Quick Reference",frontmatter:{},regularPath:"/v6.3/docs/getting-started/quick-reference.html",relativePath:"v6.3/docs/getting-started/quick-reference.md",key:"v-400aa74c",path:"/v6.3/docs/getting-started/quick-reference.html",headers:[{level:2,title:"Quick Reference",slug:"quick-reference"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Quick Reference \n Just the steps, for advanced users. \n \n Install  Multipass \n Launch VM \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n Open Ubuntu shell \n multipass shell ubuntu-lts\n \n Install k3s \n curl  -sfL https://get.k3s.io  |   sh  -\n \n Check for node ready \n sudo  kubectl get node\n \n Download custom resource definitions \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n Create custom resources \n sudo  kubectl create -f dist/crd\n \n Create namespace \n sudo  kubectl create namespace entando\n \n Download Helm chart (or  generate your own ) \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/entando.yaml\n \n Configure external access to your cluster with your VM IP \n IP = $( hostname  -I  |   awk   '{print  $1 }' ) \n \n sed  -i  \"s/192.168.64.25/ $IP /\"  entando.yaml\n \n Deploy Entando \n sudo  kubectl create -f entando.yaml\n \n Check for quickstart-composite-app-deployer  Completed \n sudo  kubectl get pods -n entando --watch\n \n Get URL to access Entando App Builder from your browser \n sudo  kubectl get ingress -n entando -o  jsonpath = \\ \n '{.items[2].spec.rules[*].host}{.items[2].spec.rules[*].http.paths[2].path}{\" \\n \"}' \n \n "},{title:"Caching and Clustering in an Entando Application",frontmatter:{},regularPath:"/v6.3/docs/reference/caching-and-clustering.html",relativePath:"v6.3/docs/reference/caching-and-clustering.md",key:"v-3723c578",path:"/v6.3/docs/reference/caching-and-clustering.html",headers:[{level:2,title:"App Engine Clustering and High Availability",slug:"app-engine-clustering-and-high-availability"},{level:2,title:"Caching",slug:"caching"},{level:3,title:"Data Management",slug:"data-management"},{level:2,title:"Infinispan Implementation (Default)",slug:"infinispan-implementation-default"},{level:2,title:"Redis Implementation",slug:"redis-implementation"},{level:2,title:"Performance",slug:"performance"},{level:3,title:"Cache Management",slug:"cache-management"}],lastUpdated:"1/12/2021, 11:06:14 AM",content:" Caching and Clustering in an Entando Application \n App Engine Clustering and High Availability \n The Entando App Engine can be deployed as a clustered set of instances using the clustering and replication ability of Kubernetes. The App Engine is\nbacked by a shared cache with two chioices of implementation out of the box. \n See this tutorial for configuring and testing a clustered instance of the App Engine. \n The clustering of microservices built to add functionality to an Entando application is separate from the clustering used by the App Engine. The microservices\nhave a separate clustering configuration and setup depending on the implementation and choices made in creating those microservices. See the documentation\nfor your microservices caching implementation for details on configuring and deploying clustered microservices. \n Caching \n Data Management \n At startup time the App Engine will load all database data into the shared cache. When a page is rendered or content is fetched that content will be served from the cache. In the event of a write to the cache the cache and database will both be updated. \n The following objects are cached in the base App Engine implementation \n \n Pages \n Page templates \n Categories \n Widgets \n Configuration (application level configuration) \n Roles \n Groups \n Languages \n Labels (i18n) \n User profiles \n API Catalog (legacy API metadata separate from swagger) \n Data models and data types (deprecated) \n Infinispan Implementation (Default) \n The default implementation, included in the quickstart and base images of the release, of the cache for the App Engine utilizes  Infinispan in Library Mode  and it is managed via configuration in the app server hosting the Entando App Engine. \n \n To utilize this implementation you can add replicas of the app engine (entando-de-app) to your deployment. New pods will automatically join the cluster. Ensuring a high availability deployment distributed across nodes depends on the underlying Kubernetes implementation and goals of the deployment. It is up to the implementor of the cluster and the application to ensure that the applications are scheduled to nodes and deployed in a fashion that meets the uptime and performance goals of the Entando Application. \n Read more here  for tutorials and step by step instructions on using the Infinispan cache in an Entando App. \n Redis Implementation \n An Entando App can also be configured to utilize an external  Redis  cache. In a Redis implementation of an Entando App the cache is deployed separately from the App Engine and the App Engine is configured to connect to the deployed instance. \n \n The Redis cache is not deployed by the Entando Operator and must be managed by the implementing teams dev ops or Kubernetes cluster administrators. \n Read more here  for tutorials and step by step instructions on using a Redis cache in an Entando App. \n Performance \n As you design your Entando App Engine cluster there are a couple of things to keep in mind: \n \n In a read only implementation, or an implementation with infrequent writes to the cached objects listed above, the network latency between pods on different nodes will not be a major driver of runtime performance. Each pod will have a fully replicated copy of the cache \n In write heavy implementations network latency between nodes can be a factor in performance\n \n The overall performance impact of network latency will vary depending on the implementation. The performance depends on the types of objects being written, the size of those objects, and whether the writes invalidate single objects or entire lists of objects in the cache. \n \n \n \n In general, it is recommended that performance testing on clustered instances matches the expected runtime traffic pattern of a live application. Every application will have a unique performance profile. \n Cache Management \n When a new replica of an Entando App joins a cluster of applications the cache is replicated to that node. If the cache is very large or the network is slow this may add to the total startup time of the new instance. Existing instances will continue to function. \n"},{title:"Welcome Wizard",frontmatter:{},regularPath:"/v6.3/docs/getting-started/welcome-wizard.html",relativePath:"v6.3/docs/getting-started/welcome-wizard.md",key:"v-8852b36c",path:"/v6.3/docs/getting-started/welcome-wizard.html",lastUpdated:"12/15/2020, 12:52:01 PM",content:" Welcome Wizard \n The Welcome Wizard is displayed when you first log in to the Application Builder. You can also start it later by going to the top navigation bar in the Application Builder, click on the information icon, and click  Begin Welcome Wizard . You can disable it from the wizard popup by selecting  Don't show next time  and then  Close , or by going to  My Profile → Preferences  and setting the  Welcome Wizard  preference to  Off . \n \n The Wizard will guide you through the key steps in designing and publishing a page in your application: \n \n Create a Page by setting its title, code, location, group, and template. \n Design the Page by placing a set of pre-configured widgets on the page. \n Preview the Page \n Publish the Page \n \n For more information see the following tutorials: \n \n Page Management \n Widgets and Fragments \n Content Creation \n Digital Assets \n \n"},{title:"Cluster Resource Limits",frontmatter:{},regularPath:"/v6.3/docs/reference/cluster-resource-limits.html",relativePath:"v6.3/docs/reference/cluster-resource-limits.md",key:"v-6a3fd5e8",path:"/v6.3/docs/reference/cluster-resource-limits.html",headers:[{level:3,title:"Cluster Resource Limits",slug:"cluster-resource-limits"},{level:3,title:"Bundle size limitations",slug:"bundle-size-limitations"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Cluster Resource Limits \n Entando needs a well-defined amount of resources in order to start and Kubernetes takes care of using only the needed amount of them.\nHowever, you can choose to impose boundaries on the minimum and maximum used/allocated resources by updating the downloaded  entando.yaml  file and setting the  ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS  property to true.\nIn this way, Entando will allocate a predefined amount of resources and Kubernetes will act more strictly checking for resource availability. See  Kubernetes resources  for more information. \n By not imposing limits you can minimize initial needed resources and startup time, leaving Kubernetes free to manage its resources as he wants.\nBy imposing limits you can obtain a better-balanced system. \n It's important to note that, accordingly to the Kubernetes documentation, in order to deploy on a namespace with a\n ResourceQuotas  on memory and cpu, \n \n every Container must have a memory request, memory limit, cpu request, and cpu limit \n \n so, in that case, you will need to set  ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS  to true, otherwise your deploy will fail. \n Here you can see the detailed resource requests/limits per container: \n \n \n \n Component \n Mem requests \n CPU requests \n Mem limits \n CPU limits \n \n \n \n \n AppBuilderDeployableContainer \n 128Mi \n 125m \n 512Mi \n 500m \n \n \n EntandoAppDeployableContainer \n 448Mi \n 375m \n 1792Mi \n 1500m \n \n \n ComponentManagerDeployableContainer \n 192Mi \n 188m \n 768Mi \n 750m \n \n \n EntandoPluginSidecarDeployableContainer \n 192Mi \n 188m \n 768Mi \n 750m \n \n \n EntandoPluginDeployableContainer \n 256Mi \n 250m \n 1024Mi \n 1000m \n \n \n EntandoK8SServiceDeployableContainer \n 192Mi \n 250m \n 768Mi \n 1000m \n \n \n KeycloakDeployableContainer \n 192Mi \n 250m \n 768Mi \n 1000m \n Bundle size limitations \n Entando supports bundles without size limitations, you can install as many bundles as you want and bundles as big as you desire. \n The only thing you have to check is the  <YOUR-APP-NAME>-de-pvc  volume size. Each bundle is installed in that volume, so when it reaches its maximum capacity you will not be able to install bundles anymore. \n You can find  quickstart-de-pvc  volume inside de-container container, that is part of the pod named  <YOUR-APP-NAME>-server-deployment-*** , where asterisks should assume values based on your instance.\nFeel free to set its size accordingly to your needs. \n"},{title:"Manage Entando Databases",frontmatter:{},regularPath:"/v6.3/docs/reference/databases.html",relativePath:"v6.3/docs/reference/databases.md",key:"v-efcc73e8",path:"/v6.3/docs/reference/databases.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Lightweight, low-config Databases with PostgreSQL and MySQL",slug:"lightweight-low-config-databases-with-postgresql-and-mysql"},{level:2,title:"Existing External Databases",slug:"existing-external-databases"},{level:3,title:"Structure",slug:"structure"},{level:3,title:"How it works",slug:"how-it-works"},{level:3,title:"Keeping track of credentials",slug:"keeping-track-of-credentials"},{level:2,title:"Vendor specific notes",slug:"vendor-specific-notes"},{level:3,title:"Oracle",slug:"oracle"},{level:3,title:"Notes",slug:"notes"},{level:3,title:"MySQL",slug:"mysql"},{level:3,title:"Resulting Connection String",slug:"resulting-connection-string-2"},{level:3,title:"Notes",slug:"notes-2"},{level:3,title:"PostgreSQL",slug:"postgresql"},{level:2,title:"Skipping database preparation",slug:"skipping-database-preparation"},{level:3,title:"How it works",slug:"how-it-works-2"}],lastUpdated:"3/24/2021, 9:59:27 AM",content:' Manage Entando Databases \n Overview \n Entando’s Docker images currently support three different relational\ndatabase management systems: PostgreSQL, MySQL and Oracle. With\nPostgreSQL and MySQL, by default, Entando’s will automatically create a\nKubernetes Deployment hosting the database management systems. However,\nfor Oracle, and also for other scenarios that may require it, Entando\nsupports connectivity to existing external databases. This document\nprovides the user with the necessary information to decide how to manage\nEntando’s databases. \n Lightweight, low-config Databases with PostgreSQL and MySQL \n When deploying Entando Custom Resources that require databases to a new\nNamespace, the default behavior for Entando is to create a Kubernetes\nDeployment. It uses the standard Openshift compliant images: \n \n \n centos/mysql-57-centos7 and \n \n \n centos/postgresql-96-centos7) \n \n \n This is a fairly low-configuration approach, as Entando will create and\ninitialize the databases transparently. Persistent data is stored on any\nPersistent Volume that meets our Persistent Volume Claim requirements.\nWhen an Entando Custom Resource is redeployed, the Persistent Volumes\nremain in tact. Since the subsequent data initialization is idempotent,\nthe supporting Deployments will scale up and behave as expected. \n Generally our services encapsulate the database they use entirely, and\nprovide facilities to import and export the data without needing any\nknowledge of the internal workings of the underlying data store. For\nmost simple Entando Apps the database doesn’t grow too large and is\nfairly easy to manage. This state of affairs allowed us to keep our\ndatabases isolated from each other, thus allowing for isolated\ndeployments without needing complex coordination of database migration\nfor the different deployment pipelines. \n It is worth noting that these database Deployments are not clustered.\nThe customer is therefore strongly advised to provide redundancy and\nclustering in the form of clustered storage. These database deployments\ndo specify a restartPolicy of \'Always\', so in the event of a\nnon-corrupting failure, the database Pod should therefore restart in\nabout 30 seconds. This by no means offers the features of a full\ndatabase cluster, but may suffice for many scenarios. \n However, in more advanced use cases, such as the use of our CMS\nfunctionality, this simplistic approach may not scale. And where there\nis a a centralized database admin team, or where there is a requirement\nto comply to strict organizational governance w.r.t. databases, this\napproach does result in a multitude of databases that may be difficult\nfor the database admin team to manage. \n Existing External Databases \n For this reason, Entando can also be configured to use an existing\ndatabase service provided by the customer. In these scenarios, the\ncustomer is expected to take responbility for the lower level database\noperations such as tablespace creation, permissions and clustering.\nEntando will however still be responsible for creating and populating\nthe tables, indices and foreing keys. Entando will also create all of\nthese in the appropriate table \'container\' for the DBMS in question such\nas a schema (Oracle/PostgreSQL) or a database (MySQL). In order to\nachieve this, Entando installs a dedicated CustomResourceDefinition in\nKubernetes, called an \'EntandoDatabaseService\' \n The idea is for EntandoDatabaseService custom resources to be created in\nthe namespace the EntandoApps and EntandoPlugin that should use them\nwill be created. The EntandoDatabaseService is usually created along\nwith a secret that carries admin credentials to the database in\nquestion. \n Structure \n The EntandoDatabaseService custom resource looks like this: \n  EntandoDatabaseService\nmetadata:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\nspec:\n  dbms: string, one of oracle, postgresql or mysql\n  host: string, either an ip address or hostname where the database service is hosted\n  port: integer, the port on which the database service is hosted\n  databaseName: string, the name of the database, only required for PostgreSQL and Oracle\n  secretName: the name of the Secret in the same namespace carrying admin credentials to the database service\n  tablespace: (Oracle only)  the tablespace to use to create the required schemas in\n  jdbcParameters: a map containing name-value pairs for any additional parameters required for the JDBC driver to connect to the database.\n \n The Secret that will provide the admin credentials, identified by the\nabove  secretName  should look like this: \n Secret:\n  name: string, any K8S compliant name\n  namespace: string, the namespace this will be created in\n  stringData:\n    username: string, name of an admin user that can create schemas and other users\n    password: string, password of the above user\n How it works \n In order for the EntandoApp and EntandoPlugin deployer to pick up the\ncorrect database service, the EntandoDatabaseService needs to be created\nBEFORE the EntandoApps and EntandoPlugins are created. There can be\nmultiple EntandoDatabaseServices in the namespace, but they need to\npoint to database services of different vendors, i.e. PostgreSQL, Oracle\nand MySQL. Entando currently cannot enforce any validation but if there\nare two EntandoDatabaseServices that have the same DBMS vendor, it will\nsimply pick the first one and continue. Please ensure that only one\nEntandoDatabaseService exists for each DBMS vendor you need to use. \n Once the appropriate EntandoDatabaseServices have been created, any\nEntandoApp or EntandoPlugin that is created will have to specify the\nappropriate DBMS vendor in their  spec.dbms  property. If the\nEntandoOperator detects an EntandoDatabaseService with a matching DBMS\nvendor, it will continue to create the necessary schemas on the specific\ndatabase. If the EntandoOperator does not detect an\nEntandoDatabaseService with a matching DBMS vendor, it will fall back\nonto its default behaviour which is to create a matching Deployment and\nspin up a database service from the same namespace. If the  spec.dbms \nproperty is not specified on an EntandoApp, the EntandoOperator will\ndefault to PostgreSQL. If the  spec.dbms  property is not specified on\nan EntandoPlugin, the EntandoOperator will assume that the EntandoPlugin\nin question does not require a database and hence bypass any database\nand schema creation. \n When the EntandoOperator processes your Entandoapp or EntandoPlugin with\nan appropriate  spec.dbms  specified, it will create a Schema/User pair\nfor each datasource required. A typical EntandoApp deployment requires 3\ndatasources (portdb,servdb and dedb). Plugins generally only require one\ndatasource (plugindb). \n The database schema and user created will have the same name. The name\nis derived from the name of the EntandoPlugin or EntandoApp by replacing\nall characters that are not ANSI-SQL compliant with an underscore. The\ndatasource name is then suffixed to the schema name. When defining the\nname of your app or plugin, please keep in mind that some DBMS vendors\ndo not support long schema names. Future versions of Entando will allow\nyou to override the schema prefix for an app or plugin, but for now this\nis a limitation one has to keep in mind. \n Keeping track of credentials \n The EntandoOperator generates a Kubernetes Secret for each schema/user\ncombination it creates. The name of this secret is the concatenation of\nthe name of the EntandoApp or EntandoPlugin, the datasource qualifier\nand then the suffix "-secret". For instance, for an EntandoApp called\n"my-app" the "portdb" datasource will have a corresponding Kubernetes\nSecret called "my-app-portdb-secret". The EntandoOperator will never\noverwrite or update an existing database secret. We generate a random\nstring for the password which is generally considered the safest\napproach. If you do however wish to change the password in for the\nresulting user, please remember to update the password on the Kubernetes\nSecret too. Such an operation is however error prone and could result in\nsubsequent deployments failing. \n The EntandoOperator’s schema creation logic is idempotent. If it\ntherefore finds that the generated schema/user combination found in the\nassociated Kuberentes Secret already exists, it won’t do anything.\nHowever, it will attempt to log in, and if it fails to log in, it will\nattempt to create the user. If the user already exists, but with a\ndifferent password than the one in the Kubernetes Secret, all subsequent\ndeployment operations will fail. \n Vendor specific notes \n Oracle \n Example \n   EntandoDatabaseService\n    metadata:\n      name:oracle-service\n    spec:\n      dbms: oracle\n      host: 10.0.0.13\n      port: 1521\n      databaseName: ORCLPDB1.localdomain\n      secretName: oracle-secret\n      tablespace: entando_ts\n      jdbcParameters: {}\n  Secret:\n    metadata:\n      name: oracle-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting connection string: \n jdbc:oracle:thin:@//10.0.0.13:1521/ORCLPDB1.localdomain \n Notes \n Oracle has some rather complicated rules in building the correct\nconnection string. Please note that for the sake of portability and\nlightweight image we are limited to the thin driver. The  databaseName \ncould also be an Oracle service as opposed to an Oracle  SID . Please\ncoordinate with your Oracle DB Admin to determine exactly what value to\nuse here. We strongly recommend testing your settings with some code or\na tool that constructs JDBC connection. \n When the EntandoOperator prepares the schemas for your EntandoApp or\nEntandoPlugin, it will create a user for every datasource required, and\nas is standard behaviour for Oracle, that user will have its own schema\nwith the same name. Permissions are set up to ensure that one user\ncannot access tables from another user’s schema. Please note that Oracle\nlimits schema names to 30 characters. If you intend to use Oracle,\nplease keep the name of your apps and plugins short enough. The suffixes\nthat we append to the app or plugin name to ensure the resulting schema\nname is unique are usually shorter than 8 characters, so names of about\n20 characters should be safe. \n You can specify which tablespace Entando should use to create the\nschemas in using the  spec.tablespace  property \n ORA-01704: string literal too long \n Entando requires extended datatypes to be activated in Oracle 12c and\nhigher\n( https://oracle-base.com/articles/12c/extended-data-types-12cR1 ) \n MySQL \n Example \n EntandoDatabaseService\n  metadata:\n    name:mysql-service\n  spec:\n    dbms: mysql\n    host: 10.0.0.13\n    port: 3306\n    databaseName:\n    secretName: mysql-secret\n    jdbcParameters:\n       useSSL: "true"\nSecret:\n  metadata:\n    name: mysql-secret\n  stringData:\n    username: admin\n    password: admin123\n Resulting Connection String \n jdbc:mysql://10.0.0.13:3306 \n Notes \n MySQL doesn’t really support schemas, or more accurately, it doesn’t\ndistinguish between schemas and databases. For this reason, no\ndatabaseName is required. The EntandoOperator will therefore create an\nentirely new database for each datasource your EntandoApp or\nEntandoPlugin requires. It will also create a user with the same name as\nthe database with permission set up to ensure one user cannot access the\ndatabase of another user. Please note that MySQL limits database names\nto 63 characters. Keep this in mind when defining the names of your\nEntandoApps and EntandoPlugins \n PostgreSQL \n Example \n   EntandoDatabaseService\n    metadata:\n      name:postgresql-service\n    spec:\n      dbms: postgresql\n      host: 10.0.0.13\n      port: 5432\n      databaseName: my_db\n      secretName: postgresql-secret\n      jdbcParameters: {}\n\n  Secret:\n    metadata:\n      name: postgresql-secret\n    stringData:\n      username: admin\n      password: admin123\n Resulting Connection String \n jdbc:postgresql://10.0.0.13:5432/my_db \n Notes \n PostgreSQL behaves very similar to Oracle when it comes to how it\nassociates a user with its own schema. The current username is used as a\ndefault schema/prefix to resolve tables. As with Oracle, Entando ensures\nthat two users don’t have access to each other’s schemas. \n Skipping database preparation \n When an Entando App is being deployed, there is an operator responsible for the entire deployment process. It takes care also of DB creation and preparation.\nIf you have an already prepared DB (schemas, tables, and all other stuff), you could skip schemas creation and DB preparation of the EntandoApp in order to speed up the deploy process. \n You can achieve this by specifying some properties for the EntandoApp component present in the helm generated file. Look at  this  for more info. \n For  spec.dbms  property you should choose  none , then you should add all needed DB connection parameters.\nAfter updating parameters with the one you need, you should end with a yaml like this: \n - kind: "EntandoApp"\n  metadata:\n    annotations: {}\n    labels: {}\n    name: "example-qs"\n  spec:\n    dbms: "none"\n    replicas: 1\n    standardServerImage: wildfly\n    ingressPath: /entando-de-app\n    environmentVariables:\n      - name: SPRING_DATASOURCE_USERNAME\n        value: admin\n      - name: SPRING_DATASOURCE_PASSWORD\n        value: adminadmin\n      - name: SPRING_DATASOURCE_URL\n        value: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_dedb"\n      - name: SPRING_JPA_DATABASE_PLATFORM\n        value: org.hibernate.dialect.PostgreSQLDialect\n      - name: PORTDB_URL\n        value: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_portdb"\n      - name: PORTDB_USERNAME\n        value: admin\n      - name: PORTDB_PASSWORD\n        value: adminadmin\n      - name: PORTDB_CONNECTION_CHECKER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n      - name: PORTDB_EXCEPTION_SORTER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n      - name: SERVDB_URL\n        value: "jdbc:postgresql://192.168.1.82:5432/testdb?currentSchema=admin_qs_servdb"\n      - name: SERVDB_USERNAME\n        value: admin\n      - name: SERVDB_PASSWORD\n        value: adminadmin\n      - name: SERVDB_CONNECTION_CHECKER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n      - name: SERVDB_EXCEPTION_SORTER\n        value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n How it works \n Using  spec.dbms: "none"  will cause the operator to skip that initial schema/user creation step entirely.\nThen adding those variables under the  spec.environmentVariables  section will supply connection parameters that will be used by EntandoApp.\nKeep in mind that all these parameters will be applied to each of the containers in the EntandoApp pod and that they will also override existing values. \n'},{title:"Accessing Entando APIs",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/docs/reference/entando-apis.html",relativePath:"v6.3/docs/reference/entando-apis.md",key:"v-438781d6",path:"/v6.3/docs/reference/entando-apis.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:3,title:"Enable or disable the Swagger UI in a running container",slug:"enable-or-disable-the-swagger-ui-in-a-running-container"},{level:2,title:"How to find your client secret",slug:"how-to-find-your-client-secret"},{level:2,title:"Setup in local environment",slug:"setup-in-local-environment"},{level:3,title:"Configure Keycloak",slug:"configure-keycloak"},{level:3,title:"Start the Entando Application",slug:"start-the-entando-application"},{level:2,title:"APIs Overview",slug:"apis-overview"},{level:3,title:"API structure",slug:"api-structure"},{level:3,title:"Models",slug:"models"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"2/5/2021, 4:29:16 PM",content:" Accessing Entando APIs \n Overview \n Entando includes the Swagger UI in a quickstart environment and is reachable at  /entando-de-app/api/swagger-ui.html : \n http://[your-host-name]/entando-de-app/api/swagger-ui.html\n Enable or disable the Swagger UI in a running container \n The Swagger UI can be enabled or disabled in a running container by modifying the SPRING_PROFILES_ACTIVE environment variable for the entando-de-app container. \n \n Edit the deployment. The name may be different outside of a quickstart environment. \n \n sudo kubectl -n entando edit deployment/quickstart-server-deployment\n \n \n \n (Optional) Scale the deployment  spec.replicas  to 0 before updating the deployment. This is necessary if you're using an in-memory database, e.g. the default quickstart configuration, and will prevent database errors that can happen on an immediate restart after the profile is changed. Save the deployment to apply the change. \n \n \n Find the entando-de-app env variables section under  spec.template.spec.containers.env[image: entando-de-app] \n \n \n 4a. To enable the swagger UI, add the SPRING_PROFILES_ACTIVE environment variable, if it's missing, or add  swagger  to its comma-delimited list. \n         - name: SPRING_PROFILES_ACTIVE\n          value: default,swagger\n \n 4b. To disable the swagger UI, remove  swagger  from the value. \n \n \n (Optional) Reset the deployment  spec.replicas  back to 1. \n \n \n Save the deployment to apply the change. \n How to find your client secret \n You'll need your client credentials to execute the Entando APIs. \n \n \n Login into your Keycloak instance \n \n \n Go to  Administration → Clients \n \n \n Select the desired client (e.g. in a quickstart environment this is  quickstart-server ) \n \n \n Click on the  Credentials  tab to get the secret \n Setup in local environment \n You may prefer to run a local standalone Entando application for some tasks. You'll need Java 11, maven, and Keycloak for authentication. See  these instructions  to setup a standalone Keycloak. \n Configure Keycloak \n Configure your Keycloak client in order to support Swagger UI. A quickstart environment has this pre-configured. \n \n \n Login to your Keycloak instance \n \n \n Access the Administration console \n \n \n Click on  Clients  on the left bar and select your client (e.g.  quickstart-server ) \n \n \n Update the following values under  Settings : \n \n Set  Valid Redirect URIs  to  http://localhost:[your port]/entando-de-app/*  or  *  to allow all redirect URIs. \n Set  Web Origins  to  http://localhost:[your port]  or  *  to accept all origins. \n Start the Entando Application \n \n \n Clone the Entando reference application: \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n Start the application with the following options: \n \n Enable the Swagger profile via  -Dspring.profiles.active=swagger \n Enable the Keycloak profile via  -Pkeycloak \n Configure the application connection to Keycloak itself. For simplicity this uses the same client credentials you'll use to try out the APIs.\n \n Set  -Dkeycloak.auth.url  to your Keycloak endpoint (including  /auth ), e.g.  -Dkeycloak.auth.url=http://my-keycloak-server/auth \n Set  -Dkeycloak.client.id  to your client id, e.g.  -Dkeycloak.client.id=quickstart-server \n Set  -Dkeycloak.client.secret  to your client secret, e.g.  -Dkeycloak.client.secret=my-secret . See  How to find your client secret  above. \n \n \n (Optional) Set -Djetty.port=8085  if the default port 8080 is already in use. \n (Optional) To skip the docker steps (or if you don't have docker installed/running), add  -DskipDocker=true \n \n Here's a full example: \n mvn clean package jetty:run-war -Pjetty-local -Pderby -Pkeycloak -Dspring.profiles.active=swagger -Djetty.port=8085 -Dorg.slf4j.simpleLogger.log.org.eclipse.jetty.annotations.AnnotationParser=error -Dkeycloak.auth.url=http://my-keycloak-host/auth -Dkeycloak.client.id=quickstart-server -Dkeycloak.client.secret=my-client-secret -DskipDocker=true\n \n \n \n Wait for the application to start. \n [INFO] Started ServerConnector@1355c8be{HTTP/1.1, (http/1.1)}{0.0.0.0:8085}\n[INFO] Started @66257ms\n[INFO] Started Jetty Server\n \n \n \n Navigate to the Swagger UI in a browser at  /entando-de-app/api/swagger-ui.html \n  http://localhost:[your port]/entando-de-app/api/swagger-ui.html\n APIs Overview \n The Entando core exposes REST APIs for every action that can be taken in\nthe App Builder environment. For example, you can use\nthese APIs to create pages, create page templates or to add widgets to\npages. The APIs can be used to support automation, testing, or\nintegrations with external systems. \n API structure \n All of the APIs share a common top level structure. Each response will\ncontain a top level entry for  errors ,  metadata , and  payload . \n The  errors  will always contain code and a message string indicating an\nerror condition in the request. The  metadata  section is used for\npaging, sorting, filtering and data that is distinct from the body. The\nbody of each response is included in the  payload  section of the\nresponse and varies according to each API. \n Models \n All of the model classes returned by the Entando core are annotated so that the model definition is included in the Swagger documentation. At the bottom of the Swagger page all of the model classes returned by the API endpoints can be found. \n Tutorial \n \n \n Access your application Swagger UI as discussed above \n \n \n Click on the  Authorize  button in the upper right corner \n \n \n Enter the client id and client secret in the open window and click  Authorize \n \n \n If you are redirected to the Entando login page, log in with your credentials (default are  admin / adminadmin ) \n \n \n You will be redirected to the Swagger UI page, now authenticated \n \n \n Use the  Try it out  button on the APIs \n \n \n Scroll to  widget-controller \n \n \n Select the blue GET row \n \n \n Select  Try it out \n \n \n Look at the results in the window. You should see a Server response with Code 200 and full response body. \n \n \n \n \n"},{title:"Entando Deployment Structure",frontmatter:{},regularPath:"/v6.3/docs/reference/deployment-structure.html",relativePath:"v6.3/docs/reference/deployment-structure.md",key:"v-2e9dbc86",path:"/v6.3/docs/reference/deployment-structure.html",headers:[{level:2,title:"entando-operator",slug:"entando-operator"},{level:2,title:"database init containers",slug:"database-init-containers"},{level:2,title:"entando-de-app",slug:"entando-de-app"},{level:2,title:"app-builder",slug:"app-builder"},{level:2,title:"component-manager",slug:"component-manager"},{level:2,title:"entando-k8s-service",slug:"entando-k8s-service"},{level:2,title:"keycloak",slug:"keycloak"},{level:2,title:"Other Key Repositories",slug:"other-key-repositories"},{level:3,title:"entando-core",slug:"entando-core"},{level:3,title:"entando-cms",slug:"entando-cms"},{level:3,title:"entando-components",slug:"entando-components"},{level:3,title:"Entando Kubernetes Controllers",slug:"entando-kubernetes-controllers"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Entando Deployment Structure \n This page provides a high level overview of the key Entando GitHub repositories along with a brief description\nof how those repositories are realized in a running Entando deployment. The descriptions provided here are meant\nas a guide for identifying opportunities to dig deeper into the architecture and how things are structured\nrather than a panacea for understanding the architecture. \n entando-operator \n The Entando operator coordinates the installation and configuration of all of the components of an Entando\nCluster. The operator can be installed once per Entando Cluster and used to coordinate the plugin lifecycle for\nmultiple Entando applications across many namespaces. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-controller-coordinator/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-controller-coordinator \n Customization \n It is unlikely that the operator will be customized as part of an Entando implementation. It is not built to\nbe extended inside the codebase. The most common pattern will be to use the existing custom resources that the\noperator knows how to deploy to extend the Entando platform. \n database init containers \n During installation an Entando application needs to create several databases and also to initialize those\ndatabases with information when deploying from a backup in your images. At initialization the  entando-k8s-dbjob \nwill be run 5 times in total. Once for keycloak, twice for the entando application (port and serv dbs), once to\npopulate the Entando application database, and once to create the Component Repository database. \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-dbjob \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-dbjob \n \n The screenshot below highlights the init containers for the Entando application schema creation, db\ninitialization, and component repository database. \n \n Many managed kubernetes instances like OpenShift won’t show init containers in their dashboards. So if you’re\ntroubleshooting you may need to look deeper. When fetching logs for an init container using kubectl you must\npass the container name as an argument to the call. For example, \n     kubectl logs <pod> -c <container> -n <namespace>        \n    kubectl logs quickstart-kc-db-preparation-job-ddbdbddb-a  -c quickstart-kc-db-schema-creation-job -n sprint1-rc\n Customization \n It is unlikely that the init containers will be customized as part of an Entando project. The init containers\nwill automatically restore a backup included in your application so that you can create custom images that\ninclude your application setup.\nSee  Backing Up and Restoring Your Environment . \n entando-de-app \n The  entando-de-app  is a J2EE application and is an instance of the  entando-core  (see a description of the\n entando-core  repo below). Reviewing the dependencies of this application in the pom.xml will reveal the\ndependencies on the  entando-core ,  entando-engine , and  admin-console  which encompass the core\nfunctionality in versions of Entando prior to Entando 6. In a quickstart deployment the  entando-de-app  is deployed as part of the  entando-composite-app  multi\ncontainer pod. \n \n GitHub:  https://github.com/entando-k8s/entando-de-app/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-de-app-eap , https://hub.docker.com/repository/docker/entando/entando-de-app-wildfly \n Customization \n The  entando-de-app  is very likely to be customized as part of an Entando implementation. This image can be\ncustomized with new APIs, legacy Entando plugins, new database tables, or other extensions to the  entando-core .\nIt is highly recommended that most extensions to the platform in Entando 6 occur in microservices. However, legacy\nintegrations, extensions to the CMS, and migrations from earlier Entando versions may require changes to the  entando-de-app . \n app-builder \n The  app-builder  is the front end of the  entando-de-app . It communicates with the  entando-de-app  via  REST\nAPIs . The  app-builder  is a React JS application and is served via node in the default\ndeployment. In a quickstart deployment the  app-builder  container is deployed in the  entando-composite-app \nmultiple container pod. The  app-builder  also communicates with the Component Manager via REST API to fetch\ninformation about Entando bundles deployed to the Entando Component Repository (ECR). \n \n GitHub:  https://github.com/entando/app-builder/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/app-builder/ \n Customization \n The  app-builder  is built to be customized and will be customized as part of many Entando implementations.\nThe  app-builder  can be customized at runtime via micro frontends\n widget configuration . The  app-builder  can also be\ncustomized via the integration of custom modules that are added at\n build time . \n component-manager \n The  component-manager  provides the link between the entando-de-app (or your custom core instance) and the\nEntando Component Repository (ECR). The  component-manager  queries the entando-k8s service to fetch available\nbundles that have been deployed as custom resources inside of an Entando cluster.\nThe  component-manager  also manages the relationships between an Entando application and the\ninstalled plugins. This can be seen in the plugin link custom resources in Kubernetes. \n \n GitHub:  https://github.com/entando-k8s/entando-component-manager/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-component-manager/ \n Customization \n It is unlikely that the  component-manager  will be customized as part of an Entando implementation. \n entando-k8s-service \n The  entando-k8s-service  acts as an abstraction layer to fetch data from kubernetes APIs. The primary\nfunctionality is in discovering and making available for installation Entando plugins. The\n entando-k8s-service  is invoked by the  component-manager . \n \n GitHub:  https://github.com/entando-k8s/entando-k8s-service/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-k8s-service/ \n Customization \n It is very unlikely that the  entando-k8s-service  will be customized as part of an Entando implementation. \n keycloak \n The  entando-keycloak  project is an extension of the base Keycloak images. The extension provides the default\nthemes for Entando, a customized realm and clients, and adds the Oracle ojdbc jars for connection to Oracle\ndatabases. \n \n GitHub:  https://github.com/entando/entando-keycloak/ \n DockerHub:  https://hub.docker.com/repository/docker/entando/entando-keycloak/ \n Customization \n The keycloak image will often be customized as part of an Entando implementation. Common extensions will\ninclude changing the theme, adding default connections, adding default social logins, adding default clients,\nor other changes. \n Other Key Repositories \n entando-core \n The entando-core project is a J2EE application that exposes APIs for the Entando CMS, includes the legacy\nadmin console, and includes the portal-ui project that performs the server side composition for pages\nrendered via an Entando application. Note that only the composition is performed server side.\nJavascript code is rendered on the client. The entando-core is realized via an instance that includes the\nWAR files generated from a core build as dependencies. In a default deployment this is the  entando-de-app . \n \n GitHub:  https://github.com/entando/entando-core/ \n DockerHub: None (deployed to maven central) \n Customization \n For users familiar with versions prior to Entando 6 there will be cases where the  entando-core  is customized.\nIn most cases these customizations will be delivered via WAR overlay in the instance project.\nUsing WAR overlay is a functional approach for users already  familiar with the process but it is highly\nrecommended to extend the platform using microservices for new projects. \n entando-cms \n The  entando-cms  project is the  app-builder  (React JS) side of the Entando WCMS. It is bundled into the\n app-builder  at build time and will be included in the default deployment of the  app-builder  in almost all cases. \n \n GitHub:  https://github.com/entando/entando-cms/ \n DockerHub: None (deployed to npm) \n Customization \n In some cases the  entando-cms  may be customized if new custom features are added to CMS specific\nfunctionality. However, most cases will use the more general  app-builder  extension points noted above.\nThe  entando-cms  does not expose any dedicated extension interfaces outside of those already provided by the\n app-builder . \n entando-components \n The entando-components project is a collection of legacy plugins for Entando 5 and earlier. These plugins are deployed as WAR dependencies in an entando-core instance. \n \n GitHub:  https://github.com/entando/entando-components/ \n DockerHub: None (deployed to maven central) \n Entando Kubernetes Controllers \n There are a number of controllers that are available to the Entando operator to manage installations and\ncomponents in an Entando Cluster. Those controllers are small and lightweight images that are executed as\nrun to completion pods to manage the installation flow for different parts of the infrastructure. The\ncontrollers are implemented using Quarkus. For more information on the controllers, the Entando custom\nresources, and configuring your Entando deployment see also:\n Custom Resources . \n GitHub: \n \n https://github.com/entando-k8s/entando-k8s-composite-app-controller/ \n https://github.com/entando-k8s/entando-k8s-plugin-controller/ \n https://github.com/entando-k8s/entando-k8s-cluster-infrastructure-controller/ \n https://github.com/entando-k8s/entando-k8s-app-controller/ \n https://github.com/entando-k8s/entando-k8s-app-plugin-link-controller/ \n \n DockerHub: \n \n https://hub.docker.com/repository/docker/entando/entando-k8s-composite-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-plugin-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-cluster-infrastructure-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-controller/ \n https://hub.docker.com/repository/docker/entando/entando-k8s-app-plugin-link-controller/ \n Customization \n It is unlikely that the controllers will be customized as part of an Entando implementation. \n"},{title:"Entando CLI",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/docs/reference/entando-cli.html",relativePath:"v6.3/docs/reference/entando-cli.md",key:"v-98694d68",path:"/v6.3/docs/reference/entando-cli.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Installation",slug:"installation"},{level:3,title:"Prerequisites",slug:"prerequisites"},{level:3,title:"Install the CLI",slug:"install-the-cli"},{level:3,title:"Check Environment",slug:"check-environment"},{level:3,title:"Update the CLI",slug:"update-the-cli"},{level:2,title:"Available Commands",slug:"available-commands"},{level:2,title:"Project Management",slug:"project-management"},{level:3,title:"Project Setup",slug:"project-setup"},{level:3,title:"Prepare and Publish a Bundle",slug:"prepare-and-publish-a-bundle"},{level:3,title:"Run a Project locally",slug:"run-a-project-locally"},{level:2,title:"Bundle Commands",slug:"bundle-commands"},{level:2,title:"Diagnostic Commands",slug:"diagnostic-commands"},{level:2,title:"Reference",slug:"reference"}],lastUpdated:"3/11/2021, 5:55:10 AM",content:' Entando CLI \n Overview \n The Entando Command Line Interface (CLI) provides a set of commands that accelerate the developer experience by assisting the developer with common tasks such as quickly installing a new copy of Entando, generating an Entando project via JHipster, deploying an Entando Bundle, etc. \n Installation \n Prerequisites \n The basic requirements for the CLI vary depending on the category of developer tasks. The Entando CLI is able to install secondary dependencies using the  ent check-env  command as described  here . \n \n \n \n Category \n Prerequisite \n \n \n \n \n Basic Development \n git or  git for windows \n \n \n \n nvm or  nvm for windows \n \n \n Install Entando in a local VM \n multipass \n \n \n Build and publish Entando Bundles \n docker and docker-compose \n \n \n \n a git repository for the bundle artifacts \n \n \n \n a Docker Hub account (or organization) for microservice Docker images \n \n \n Deploy an Entando Bundle \n a Kubernetes cluster with admin access. This could be a local cluster (created via the CLI or manually) or a shared remote cluster. \n \n \n \n TIP \n If you follow the automated option in  Getting Started , then the CLI will be  installed for you along with an Ubuntu VM containing k3s Kubernetes and a quickstart Entando application. \n Install the CLI \n Install the current offical release of the CLI via the following command. \n curl  -L https://get.entando.org/cli  |   bash \n Check Environment \n Use the  check-env  command to prepare your environment for development. This will verify the presence of additional dependencies (such as git, curl, java, JHipster, etc.) as well as the appropriate versions for your specific Entando instance. In most cases  check-env  will automatically install those dependencies and will prompt the developer for guidance or approval as needed. \n ent check-env develop\n Update the CLI \n The CLI can be updated to the latest version (corresponding to your Entando version) using the following command. You should run  ent check-env develop  after updating the CLI in case any dependency versions have changed. \n bash   < ( curl  -L  "https://get.entando.org/cli" )  --update\n Available Commands \n Use  ent help  to review the list of available commands. \n ~~~~~~~~~~~~~~~~~~~\n Entando CLI\n~~~~~~~~~~~~~~~~~~~\n\n> Essentials:\n  - Activate using:  ~/.entando/ent/quickstart/cli/v6.3.0/activate\n  - Dectivate using: ~/.entando/ent/quickstart/cli/v6.3.0/deactivate\n\n> Available commands:\n  - app                  => Helps managing an EntandoApp\n  - app-info             => Displays information about an entando app\n  - bundler              => Wrapper for the ENT private installation of the entando bundle tool.\n  - check-env            => Checks the environment for required dependencies and settings\n  - diag                 => Runs some diagnostic and collects the related info in a tgz file\n  - help                 => Helps in having help\n  - host                 => Helps managing the system that hosts the quickstart VM\n  - jhipster             => Wrapper for the ENT private installation of jhipster.\n  - kubectl              => Helper for using kubectl in ent managed scenarios\n  - npm                  => Wrapper for the ENT private installation of npm. This is mostly for internal use\n  - pod                  => Displays information related to a set of pods\n  - prj                  => Helps managing Entando bundle projects\n  - quickstart           => Helps locally installing entando instances\n  - run-tests            => Run the internal tests\n\n> Further info about entando:\n  - ~/.entando/ent/quickstart/cli/v6.3.0/README.md\n  - https://www.entando.com/\n  - https://dev.entando.org/\n\n> ⚠ RECOMMENDED FIRST STEP ⚠ :\n  - Check the dependencies (ent check-env --help)\n \n Check the help text ( --help ) for any command to see its specific options, e.g.  ent check-env --help . \n Project Management \n These are common sequences for an Entando project. \n Project Setup \n \n Setup a project directory \n \n mkdir  testProject  &&   cd  testProject\n \n \n Generate the project skeleton using the JHipster-based Entando Blueprint. \n \n ent jhipster --blueprints entando\n \n \n Generate an entity and MFEs. \n \n ent jhipster entity Conference\n \n \n Build the new project. Using the  ent-prj  wrapper saves having to build each part of the project individually. The first run can be slower due to node downloads for any MFEs. \n \n ent prj build\n \n See  this tutorial  for more details. \n Prepare and Publish a Bundle \n Use the publication system (pbs) to assemble your Entando project into a bundle that can be loaded into Kubernetes. You\'ll need your github credentials, a github repository to hold your bundle artifacts, and a Docker Hub account or organization. \n \n Initialize the bundle directory \n \n ent prj pbs-init\n \n \n Publish the build artifacts to github and Docker Hub \n \n ent prj pbs-publish\n \n \n Create a Kubernetes Custom Resource and apply it to your Entando instance. You can modify the target namespace parameter ( -n ) if you changed it from the default. \n \n ent prj generate-cr  |  ent kubectl apply -n entando -f -\n \n See  this tutorial  for more details. \n Run a Project locally \n \n Startup Keycloak. This uses docker-compose under the hood. \n \n ent prj ext-keycloak start\n \n \n Startup the backend microservices \n \n ent prj be-test-run\n \n \n Startup one or more of the frontend widgets, each from its own shell. \n \n ent prj fe-test-run\n \n See  this tutorial  for more details. \n Alternatively, you can perform a completely clean install of the CLI by removing your  ~/.entando  directory and then reinstalling the CLI per the instructions above. This will also remove the private copies of JHipster, Entando Blueprint, etc. \n rm  -rf ~/.entando.\n Bundle Commands \n Use the  ent bundler  command to prepare a bundle for publication or extract a bundle from an application. \n \n Prepare a bundle custom resource from a Git repository. The project command ( ent prj generate-cr ) provides a wrapped version of this command. See the help for options including the bundle name, description, repository, etc. The output of this command is a yaml file which can be piped to a file or directly to  ent kubectl  for application to Kubernetes. \n \n   ent bundler from-git\n \n See  this tutorial  for an example using this command. \n \n Point the bundler to an existing Entando application and extract its components (pages, content, etc.) and static assets into a custom bundle. You can use this bundle to migrate Entando components from one environment to another (e.g. Dev to QA), to provide a template for building a new Entando application, or as the skeleton of an Entando solution. The bundler provides an interactive mode which allows you to identify the components to be exported from the application. The output of this command is the same bundle folder structure created by an Entando project including a top-level descriptor file. \n \n   ent bundler from-env  \n \n You will need to provide an  env.json  file in the same directory where the bundler is run. This is used to configure the application URLs and client credentials. \n { \n    "coreBaseApi" :   "http://<YOUR-DOMAIN-OR-IP>/entando-de-app" , \n    "k8ssvcApi" :   "http://<YOUR-DOMAIN-OR-IP>/k8s" , \n    "clientId" :   "<YOUR-CLIENT-ID>" , \n    "clientSecret" :   "<YOUR-CLIENT-SECRET>" \n } \n \n See  this tutorial  for more instructions on exporting a bundle including how to setup your  env.json . \n Diagnostic Commands \n The following commands can be useful to more quickly understand what is happening with an Entando Application. If you followed the Getting Started steps to setup Entando then the CLI was automatically installed in the Multipass VM and you can run these commands from there. \n \n ent app-info  display basic information about Kubernetes and the Entando resources (e.g. namespace, pods, ingresses) \n \n ent app-info\n \n \n ent pod-info  display the  kubectl describe  and  kubectl logs  for each of the major Entando pods in a given namespace. \n \n ent pod-info\n \n \n ent diag  list the current pods in a given Entando namespace and prepare a diagnostic tar.gz containing  kubectl describe  and  kubectl logs  for each of the major Entando pods. This can be highly useful when working with Entando Support. \n \n ent diag\n \n Output: \n ubuntu@entando:~$ ent diag\nPlease provide the namespace (entando):\n## DNS rebinding protection TEST\n## LOCAL INFO\n## K8S INFO\n> POD: quickstart-kc-deployer-pbyjdp1dom\n>       CONTAINER: deployer\n> POD: quickstart-eci-deployer-smectg3hxy\n>       CONTAINER: deployer\n> POD: quickstart-deployer-9ul8cyjtiq\n>       CONTAINER: deployer\n> POD: quickstart-composite-app-deployer-nlz9lxc6do\n>       CONTAINER: deployer\n> POD: quickstart-eci-k8s-svc-deployment-79c4894767-5p85d\n>       CONTAINER: k8s-svc-container\n> POD: quickstart-kc-server-deployment-85987fc84c-flrlw\n>       CONTAINER: server-container\n> POD: quickstart-operator-7bfd7fc8cd-gd774\n>       CONTAINER: operator\n> POD: quickstart-server-deployment-f69f84798-g6lx5\n>       CONTAINER: server-container\n>       CONTAINER: de-container\n>       CONTAINER: appbuilder-container\n> Collected diagdata available under "~/.entando/reports/entando-diagdata-2020-11-19T02:58:47+0000" for consultation\n> Collected diagdata available in archive "~/.entando/reports/entando-diagdata-2020-11-19T02:58:47+0000.tgz"\n Reference \n \n Source repository:  https://github.com/entando/entando-cli/tree/develop \n \n'},{title:"Aps Core Tag Library",frontmatter:{},regularPath:"/v6.3/docs/reference/freemarker-tags/freemarker-core-tags.html",relativePath:"v6.3/docs/reference/freemarker-tags/freemarker-core-tags.md",key:"v-47f57e71",path:"/v6.3/docs/reference/freemarker-tags/freemarker-core-tags.html",headers:[{level:2,title:"Tag action",slug:"tag-action"},{level:3,title:"Description",slug:"description"},{level:3,title:"Example",slug:"example"},{level:3,title:"Attributes",slug:"attributes"},{level:3,title:"Tag class",slug:"tag-class"},{level:2,title:"Tag categories",slug:"tag-categories"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Example",slug:"example-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:3,title:"Tag class",slug:"tag-class-2"},{level:2,title:"Tag checkHeadInfoOuputter",slug:"tag-checkheadinfoouputter"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:3,title:"Tag class",slug:"tag-class-3"},{level:2,title:"Tag cssURL",slug:"tag-cssurl"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Example",slug:"example-3"},{level:3,title:"Attributes",slug:"attributes-4"},{level:3,title:"Tag class",slug:"tag-class-4"},{level:2,title:"Tag currentPage",slug:"tag-currentpage"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Example",slug:"example-4"},{level:3,title:"Attributes",slug:"attributes-5"},{level:3,title:"Tag class",slug:"tag-class-5"},{level:2,title:"Tag currentWidget",slug:"tag-currentwidget"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Example",slug:"example-5"},{level:3,title:"Attributes",slug:"attributes-6"},{level:3,title:"Tag class",slug:"tag-class-6"},{level:2,title:"Tag fragment",slug:"tag-fragment"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"},{level:3,title:"Tag class",slug:"tag-class-7"},{level:2,title:"Tag freemarkerTemplateParameter",slug:"tag-freemarkertemplateparameter"},{level:3,title:"Description",slug:"description-8"},{level:3,title:"Attributes",slug:"attributes-8"},{level:3,title:"Tag class",slug:"tag-class-8"},{level:2,title:"Tag headInfo",slug:"tag-headinfo"},{level:3,title:"Description",slug:"description-9"},{level:3,title:"Example",slug:"example-6"},{level:3,title:"Attributes",slug:"attributes-9"},{level:3,title:"Tag class",slug:"tag-class-9"},{level:2,title:"Tag i18n",slug:"tag-i18n"},{level:3,title:"Description",slug:"description-10"},{level:3,title:"Example",slug:"example-7"},{level:3,title:"Attributes",slug:"attributes-10"},{level:3,title:"Tag class",slug:"tag-class-10"},{level:2,title:"Tag ifauthorized",slug:"tag-ifauthorized"},{level:3,title:"Description",slug:"description-11"},{level:3,title:"Example",slug:"example-8"},{level:3,title:"Attributes",slug:"attributes-11"},{level:3,title:"Tag class",slug:"tag-class-11"},{level:2,title:"Tag imgURL",slug:"tag-imgurl"},{level:3,title:"Description",slug:"description-12"},{level:3,title:"Example",slug:"example-9"},{level:3,title:"Attributes",slug:"attributes-12"},{level:3,title:"Tag class",slug:"tag-class-12"},{level:2,title:"Tag info",slug:"tag-info"},{level:3,title:"Description",slug:"description-13"},{level:3,title:"Example",slug:"example-10"},{level:3,title:"Attributes",slug:"attributes-13"},{level:3,title:"Tag class",slug:"tag-class-13"},{level:2,title:"Tag internalServlet",slug:"tag-internalservlet"},{level:3,title:"Description",slug:"description-14"},{level:3,title:"Example",slug:"example-11"},{level:3,title:"Attributes",slug:"attributes-14"},{level:3,title:"Tag class",slug:"tag-class-14"},{level:2,title:"Tag nav",slug:"tag-nav"},{level:3,title:"Description",slug:"description-15"},{level:3,title:"Example",slug:"example-12"},{level:3,title:"Attributes",slug:"attributes-15"},{level:3,title:"Tag class",slug:"tag-class-15"},{level:2,title:"Tag outputHeadInfo",slug:"tag-outputheadinfo"},{level:3,title:"Description",slug:"description-16"},{level:3,title:"Attributes",slug:"attributes-16"},{level:3,title:"Tag class",slug:"tag-class-16"},{level:2,title:"Tag pageInfo",slug:"tag-pageinfo"},{level:3,title:"Description",slug:"description-17"},{level:3,title:"Attributes",slug:"attributes-17"},{level:3,title:"Tag class",slug:"tag-class-17"},{level:2,title:"Tag pager",slug:"tag-pager"},{level:3,title:"Description",slug:"description-18"},{level:3,title:"Example",slug:"example-13"},{level:3,title:"Attributes",slug:"attributes-18"},{level:3,title:"Tag class",slug:"tag-class-18"},{level:2,title:"Tag parameter",slug:"tag-parameter"},{level:2,title:"Tag pager",slug:"tag-pager-2"},{level:3,title:"Description",slug:"description-19"},{level:3,title:"Example",slug:"example-14"},{level:3,title:"Attributes",slug:"attributes-19"},{level:3,title:"Tag class",slug:"tag-class-19"},{level:2,title:"Tag printHeadInfo",slug:"tag-printheadinfo"},{level:3,title:"Description",slug:"description-20"},{level:3,title:"Attributes",slug:"attributes-20"},{level:3,title:"Tag class",slug:"tag-class-20"},{level:2,title:"Tag resourceURL",slug:"tag-resourceurl"},{level:3,title:"Description",slug:"description-21"},{level:3,title:"Example",slug:"example-15"},{level:3,title:"Attributes",slug:"attributes-21"},{level:3,title:"Tag class",slug:"tag-class-21"},{level:2,title:"Tag show",slug:"tag-show"},{level:3,title:"Description",slug:"description-22"},{level:3,title:"Example",slug:"example-16"},{level:3,title:"Attributes",slug:"attributes-22"},{level:3,title:"Tag class",slug:"tag-class-22"},{level:2,title:"Tag url",slug:"tag-url"},{level:3,title:"Description",slug:"description-23"},{level:3,title:"Example",slug:"example-17"},{level:3,title:"Attributes",slug:"attributes-23"},{level:3,title:"Tag class",slug:"tag-class-23"},{level:2,title:"Tag pageWithWidget",slug:"tag-pagewithwidget"},{level:3,title:"Description",slug:"description-24"},{level:3,title:"Example",slug:"example-18"},{level:3,title:"Attributes",slug:"attributes-24"},{level:3,title:"Tag class",slug:"tag-class-24"},{level:2,title:"Tag currentUserProfileAttribute",slug:"tag-currentuserprofileattribute"},{level:3,title:"Description",slug:"description-25"},{level:3,title:"Attributes",slug:"attributes-25"},{level:3,title:"Tag class",slug:"tag-class-25"},{level:2,title:"Tag userProfileAttribute",slug:"tag-userprofileattribute"},{level:3,title:"Description",slug:"description-26"},{level:3,title:"Attributes",slug:"attributes-26"},{level:3,title:"Tag class",slug:"tag-class-26"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: wp \n \n \n URI: /aps-core \n Tag  action \n Description \n Build the URL to call a jsp or a functionality of a servlet defined\nwithin the system. This tag can use the ParameterTag sub-tag to add url\nparameters. \n Example \n (<@wp.action path="/do/my.action" var="myaction" />)  or\n (<@wp.action path="/JSP/my.jsp" var="my.jsp"/>) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n path \n no \n The relative path of jsp or servlet to invoke, relative to the context of web-application \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n Tag class \n com.agiletec.aps.tags.ActionURLTag \n Tag  categories \n Description \n Return the list of the system categories on SelectItem objects. \n Example \n <@wp.categories var="systemCategories" titleStyle="prettyFull" root="$\\{userFilterOptionVar.userFilterCategoryCode}" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n titleStyle \n no \n The style of the single select item. Currently it can be \'default\' (single title node), \'full\' (title with all parents) or \'prettyFull\' (title with all parents in form of \'..\'). The default when none is given is \'default\'. \n \n \n fullTitleSeparator \n no \n The separator beetwen the titles when \'titleStyle\' is \'full\' or \'prettyFull\'. \n \n \n var \n no \n Name of the page-scoped variable where to place the list of categories. \n \n \n root \n no \n The root of the categories to show. The default is the system root categories \n Tag class \n com.agiletec.aps.tags.CategoriesTag \n Tag  checkHeadInfoOuputter \n Description \n This sub-tag verifies the availability of the information to display.\nThis sub-tag can be used only in a page template, in conjunction with\n\'outputHeadInfo\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to analyse. \n Tag class \n com.agiletec.aps.tags.CheckHeadInfoOutputterTag \n Tag  cssURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the css files. \n Example \n <@wp.cssURL />href="<@wp.cssURL />myportal.css" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n Tag class \n com.agiletec.aps.tags.CssURLTag \n Tag  currentPage \n Description \n Returns the requested information held by the current page bean. \n Example \n <@wp.currentPage param="code" var="currentViewCode" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n false \n The wanted parameter: actually can be either "title", "owner" (group), "code", "hasChild" or "childOf" (with attribute "targetPage"). The default when none is given is "title". \n \n \n langCode \n no \n Code of the language to use for the page information being returned. \n \n \n var \n no \n Name of the page context variable where the information are placed. Please note that the in this case the special characters will not be escaped. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n no \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.CurrentPageTag \n Tag  currentWidget \n Description \n Returns information about the widget where the tag resides. To obtain\ninformation about a widget placed in a frame other than the current, use\nthe "frame" attribute. \n Example \n <@wp.currentWidget param="config" configParam="name" var="configName" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n param \n yes \n The requested parameter. It can assume one of the following values: - "code" returns the code of the associated widget type (empty if none associated) - "title" returns the name of the associated widget type (empty if none associated) - "config" returns the value of the configuration parameter declared in the "configParam" attribute. The default is "title". \n \n \n configParam \n no \n Name of the configuration parameter request. This attribute is mandatory when the attribute "param" is set to "config". \n \n \n var \n no \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n frame \n false \n Id of the frame hosting the widget with the desired information. \n \n \n escapeXml \n no \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n com.agiletec.aps.tags.CurrentWidgetTag \n Tag  fragment \n Description \n Print a gui fragment by the given code. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n code \n true \n The code of the fragment to return. \n \n \n var \n false \n Name of the page context variable where the requested information is pushed. In this case the special characters will not be escaped. \n \n \n escapeXml \n false \n Toggles the escape of the special characters. Admitted value are (true, false), the default is "true". \n Tag class \n org.entando.entando.aps.tags.GuiFragmentTag \n Tag  freemarkerTemplateParameter \n Description \n Add a parameter into the Freemarker’s TemplateModel Map. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Name of the variable where the requested information is pushed. \n \n \n valueName \n true \n Name of the variable of the page context where extract the information. \n \n \n removeOnEndTag \n false \n Whether to remove the parameter on end of Tag. Possible entries (true, false). Default value: false. \n Tag class \n org.entando.entando.aps.tags.FreemarkerTemplateParameterTag \n Tag  headInfo \n Description \n Declares the information to insert in the header of the HTML page. The\ninformation can be passed as an attribute or, in an indirect manner,\nthrough a variable of the page context. It is mandatory to specify the\ntype of the information. \n Example \n <@wp.headInfo type="JS" info="entando-misc-bootstrap/bootstrap.min.js" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Declaration of the information type. Currently only "CSS" is currently supported. \n \n \n info \n no \n Information to declare. This is an alternative of the "var" attribute. \n \n \n var \n no \n Name of the variable holding the information to declare. This attribute is the alternative of the "info" one. This variable can be used for those types of information that cannot be held by an attribute. \n Tag class \n com.agiletec.aps.tags.HeadInfoTag \n Tag  i18n \n Description \n Return the string associated to the given key in the specified language.\nThis string is either returned (and rendered) or can be optionally\nplaced in a page context variable. This tag can use the ParameterTag\nsub-tag to add label parameters. \n Example \n <@wp.i18n key="COPYRIGHT" escapeXml="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the label to return. \n \n \n lang \n no \n Code of the language requested for the lable. \n \n \n var \n no \n Name of the variable (page scope) where to store the wanted information. In this case the special characters will not be escaped. \n \n \n escapeXml \n no \n Toggles the escape of the special characters of the returned label. Admitted values (true, false), the default is true. \n Tag class \n com.agiletec.aps.tags.I18nTag \n Tag  ifauthorized \n Description \n Toggles the visibility of the elements contained in its body, depending\non user permissions. \n Example \n <@wp.ifauthorized permission="enterBackend"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n permission \n no \n The code of the permission required. \n \n \n groupName \n no \n The name of the group membership required. \n \n \n var \n no \n The name of the (boolean) page context parameter where the result of the authorization check is placed. \n Tag class \n com.agiletec.aps.tags.CheckPermissionTag \n Tag  imgURL \n Description \n Extension of the ResourceURL tag. It returns the URL of the images to\ndisplay as static content outside the cms. \n Example \n <@wp.imgURL />entando-logo.png" alt="Entando - Access. Build. Connect." /> \n Attributes \n Tag class \n com.agiletec.aps.tags.ImgURLTag \n Tag  info \n Description \n Returns the information of the desired system parameter. \n Example \n <@wp.info key="systemParam" paramName="applicationBaseURL" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n yes \n Key of the desired system parameter, admitted values are: "startLang" returns the code of start language of web browsing "defaultLang" returns the code of default language "currentLang" returns the code of current language "langs" returns the list of the languages defined in the system "systemParam" returns the value of the system param specified in the "paramName" attribute. \n \n \n var \n no \n Name of the variable where to store the retrieved information (page scope). In this case the special characters will not be escaped. \n \n \n paramName \n no \n Name of the wanted system parameter; it is mandatory if the "key" attribute is "systemParam", otherwise it is ignored. \n \n \n escapeXml \n no \n Toggles the escape of the special characters in the information returned. Admitted values are (true,false), the former being the default value. \n Tag class \n com.agiletec.aps.tags.InfoTag \n Tag  internalServlet \n Description \n Tag for the "Internal Servlet" functionality. Publishes a function\nserved by an internal Servlet; the servlet is invoked from a path\nspecified in the attribute "actionPath" or by the widget parameter\nsharing the same name. This tag can be used only in a widgets. \n Example \n <@wp.internalServlet actionPath="/ExtStr2/do/jpuserreg/UserReg/initRegistration" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n actionPath \n false \n The init action path. \n \n \n staticAction \n false \n Whether to execute only the given action path. Possible entries (true, false). Default value: false. \n Tag class \n com.agiletec.aps.tags.InternalServletTag \n Tag  nav \n Description \n Generates through successive iterations the so called "navigation" list.\nFor every target/page being iterated (inserted in the page context) are\nmade available the page code, the title (in the current language) and\nthe link. Is it also possible to check whether the target page is empty\n-that is, with no configured positions- or not. \n Example \n <@wp.nav var="page"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n spec \n no \n Declares the set of the pages to generate. \n \n \n var \n yes \n Name of the page context variable where the data of target being iterated are made available. \n Tag class \n com.agiletec.aps.tags.NavigatorTag \n Tag  outputHeadInfo \n Description \n Iterates over various information in HTML header displaying them; this\ntag works in conjunction with other specific sub-tags. Please note that\nthe body can contain only a sub-tag, or information, at once. This tag\nmust be used only in a page template. E.g (<@wp.outputHeadInfo\ntype="CSS">) \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n type \n yes \n Specifies the type of information to return, in accordance with the sub-tag to use. \n Tag class \n com.agiletec.aps.tags.HeadInfoOutputterTag \n Tag  pageInfo \n Description \n Returns the information of the specified page. This tag can use the\nsub-tag "ParameterTag" to add url parameters if the info attribute is\nset to \'url\'. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n pageCode \n true \n The code of the page. \n \n \n info \n false \n Code of required page parameter. Possible entries: "code" (default value) , "title", "owner" (group), "url", "hasChild" or "childOf" (with attribute "targetPage"). \n \n \n langCode \n false \n Code of the language to use for the returned information. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. In this case, the system will not escape the special characters in the value entered in pageContext. \n \n \n targetPage \n no \n Target page when "param" is "childOf". \n \n \n escapeXml \n false \n Whether to escape HTML. Possible entries (true, false). Default value: true. \n Tag class \n com.agiletec.aps.tags.PageInfoTag \n Tag  pager \n Description \n List pager. \n Example \n <@wp.pager listName="result" objectName="groupContent" max="10" pagerIdFromFrame="true" advanced="true" offset="5"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n max \n no \n The maximum value for each object group. \n \n \n listName \n yes \n Name of the list as found in the request. \n \n \n objectName \n yes \n Name of the object currently iterated. The following methods are exposed:  getMax, getPrevItem, getNextItem, getCurrItem, getSize, getBegin, getEnd, getMaxItem, getPagerId. \n \n \n pagerId \n no \n Sets the ID of the pager itself, it has to be used when two or more pagers exist in the same page. This attributes overrides "pagerIdFromFrame". \n \n \n pagerIdFromFrame \n no \n Sets the ID of the pager (mandatory when two or more pagers share the same page) based upon the frame where the tag is placed. Admitted values are (true, false), the latter being the default. Please note that the "pagerId" attribute takes precedence over this one. \n \n \n advanced \n no \n Toggles the pager in advanced mode. Admitted values are (true, false). the advanced mode of the tag is used when the list to iterate over is huge. \n \n \n offset \n no \n This attribute is considered only when the pager is in advanced mode. This is the numeric value of the single step increment (or decrement) when iterating over the list \n Tag class \n com.agiletec.aps.tags.PagerTag \n Tag  parameter \n Tag  pager \n Description \n This tag can be used to parameterise other tags. The parameter value can\nbe added through the \'value\' attribute or the body tag. When you declare\nthe param tag, the value can be defined in either a value attribute or\nas text between the start and the ending of the tag. \n Example \n <@wp.parameter name="resourceName"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n name \n true \n The name of the parameter. \n \n \n value \n false \n The value of the parameter. \n Tag class \n com.agiletec.aps.tags.ParameterTag \n Tag  printHeadInfo \n Description \n Returns the information to display. This sub-tag must be used only in a\npage template, in conjunction with \'outputHeadInfo\'. \n Attributes \n Tag class \n com.agiletec.aps.tags.HeadInfoPrinterTag \n Tag  resourceURL \n Description \n Returns URL of the resources. \n Example \n <@wp.resourceURL />static/js/entando-misc-html5-essentials/html5shiv.js"> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n root \n no \n Declares the resource root. If not otherwise specified, the value of SystemConstants.PAR_RESOURCES_ROOT_URL is used. \n \n \n folder \n no \n Declares a specific directory for the desired resources. Unless specified, the value "" (empty string) is used in the generation of the URL. \n Tag class \n com.agiletec.aps.tags.ResourceURLTag \n Tag  show \n Description \n Defines the position of inclusion of a widget. This tag can be used only\nin a page template. \n Example \n <@wp.show frame="0" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n frame \n yes \n The positional number of the frame, starting from 0. \n Tag class \n com.agiletec.aps.tags.WidgetTag \n Tag  url \n Description \n Generates the complete URL of a portal page. The URL returned is either\nreturned (and rendered) or placed in the given variable. To insert\nparameters in the query string the sub-tag "ParameterTag" is provided. \n Example \n <@wp.url paramRepeat="true" > \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n page \n no \n Code of the destination page. The default is the current page. \n \n \n lang \n no \n Code of the language to use in the destination page. \n \n \n var \n no \n Name of the page-scoped variable where to place the URL. \n \n \n paramRepeat \n no \n Repeats in the URL all the parameters of the actual request. \n \n \n excludeParameters \n no \n Sets the list of parameter names (comma separated) to exclude from repeating. By default, this attribute excludes only the password parameter of the login form. Used only when paramRepeat="true". \n Tag class \n com.agiletec.aps.tags.URLTag \n Tag  pageWithWidget \n Description \n Search and return the page (or the list of pages) with the given widget\ntype. When "filterParamName" and "filterParamValue" attributes are\npresent, the returned list will be filtered by a specific widget\nconfiguration. \n Example \n <@wp.pageWithWidget widgetTypeCode="userprofile_editCurrentUser" var="userprofileEditingPageVar" listResult="false" /> \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n var \n true \n Attribute_description: \n \n \n widgetTypeCode \n true \n The code of the widget to search \n \n \n filterParamName \n false \n Optional widget config param name \n \n \n filterParamValue \n false \n Optional widget config param value \n \n \n listResult \n false \n Optional, dafault false. When true the result is a list of pages, when false the returned page is the first occurence \n Tag class \n com.agiletec.aps.tags.PageWithWidgetTag \n Tag  currentUserProfileAttribute \n Description \n Current User Profile tag. Return a attribute value of the current user\nprofile. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.CurrentUserProfileAttributeTag \n Tag  userProfileAttribute \n Description \n User Profile tag. Return a attribute value from the profile givea an\nusername. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n username \n true \n the username \n \n \n attributeName \n false \n the name of the attribute from which extract the value. \n \n \n attributeRoleName \n false \n the name of the attribute role from which extract the value. \n \n \n var \n false \n Name used to reference the value pushed into the pageContext. \n \n \n escapeXml \n false \n Decides whether to escape the special characters in the information retrieved or not. Value admitted (true, false), the default is true. \n Tag class \n org.entando.entando.aps.tags.UserProfileAttributeTag \n'},{title:"jACMS Aps Core Tag Library",frontmatter:{},regularPath:"/v6.3/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",relativePath:"v6.3/docs/reference/freemarker-tags/freemarker-JACMS-tags.md",key:"v-1c5b09bf",path:"/v6.3/docs/reference/freemarker-tags/freemarker-JACMS-tags.html",headers:[{level:2,title:"Tag content",slug:"tag-content"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contenttag"},{level:3,title:"Description",slug:"description"},{level:3,title:"Attributes",slug:"attributes"},{level:2,title:"Tag contentInfo",slug:"tag-contentinfo"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentInfoTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentinfotag"},{level:3,title:"Description",slug:"description-2"},{level:3,title:"Attributes",slug:"attributes-2"},{level:2,title:"Tag contentList",slug:"tag-contentlist"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.ContentListTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-contentlisttag"},{level:3,title:"Description",slug:"description-3"},{level:3,title:"Attributes",slug:"attributes-3"},{level:2,title:"Tag contentListFilter",slug:"tag-contentlistfilter"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistfiltertag"},{level:3,title:"Description",slug:"description-4"},{level:3,title:"Attributes",slug:"attributes-4"},{level:2,title:"Tag contentListUserFilterOption",slug:"tag-contentlistuserfilteroption"},{level:3,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag=",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-contentlistuserfilteroptiontag"},{level:3,title:"Description",slug:"description-5"},{level:3,title:"Attributes",slug:"attributes-5"},{level:2,title:"Tag searcher",slug:"tag-searcher"},{level:3,title:"Tag Class com.agiletec.plugins.jacms.aps.tags.SearcherTag",slug:"tag-class-com-agiletec-plugins-jacms-aps-tags-searchertag"},{level:3,title:"Description",slug:"description-6"},{level:3,title:"Attributes",slug:"attributes-6"},{level:2,title:"Tag rowContentList",slug:"tag-rowcontentlist"},{level:2,title:"Tag Class Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag",slug:"tag-class-tag-class-com-agiletec-plugins-jacms-aps-tags-rowcontentlisttag"},{level:3,title:"Description",slug:"description-7"},{level:3,title:"Attributes",slug:"attributes-7"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' jACMS Aps Core Tag Library \n \n \n Version: 2.3 \n \n \n Short Name: jacmsaps \n \n \n URI: /jacms-aps-core \n Tag  content \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentTag \n Description \n Displays the content given its ID. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content to display. It can accept "expression language". \n \n \n modelId \n false \n Id of the model to use to display the content. The model ID can be either specified explicitly (the model must match the content to serve) or the type name ("list" or "default"); in the latter case the model specified in the configuration will be used. The model must adhere to the content being returned. "Expression language" is accepted. \n \n publishExtraTitle \n false \n Toggles the insertion of the values of the titles in the Request Context. The title values are extracted from the attribute marked with the role "jacms:title". Admitted values are (true, false), default \'false\'. \n \n \n var \n false \n Inserts the rendered content in a variable of the page context with the name provided. \n \n \n attributeValuesByRoleVar \n false \n Inserts the map of the attribute values indexed by the attribute role, in a variable of the page context with the name provided. \n Tag  contentInfo \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentInfoTag \n Description \n Return information of a specified content. The content can will be extracted by id from widget parameters or from request parameter. The tag extract any specific parameter (by "param" attribute) or entire ContentAuthorizationInfo object (setting "var" attribute and anything on "param" attribute). \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n contentId \n false \n ID of the content \n \n \n param \n false \n Admitted values for "param" attribute are: \'contentId\' (returns the code of content id), \'mainGroup\' (returns the code of owner group), \'authToEdit\' (returns true if the current user can edit the content, else false). \n \n \n var \n false \n Inserts the required parameter (or the entire authorization info object) in a variable of the page context with the name provided. \n Tag  contentList \n Tag Class  com.agiletec.plugins.jacms.aps.tags.ContentListTag \n Description \n Loads a list of contents IDs by applying the filters (if any). Only the IDs of the contents accessible in the portal can be loaded. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the search result. \n \n \n contentType \n false \n Sets the code of the content types to search. The name must match the configured one, respecting capital letters and spaces. \n \n \n category \n false \n Identifier string of the category of the content to search. \n \n \n cacheable \n false \n Toggles the system caching usage when retrieving the list. Admitted values (true, false), default "true". \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n userFilterOptionsVar \n false \n Name of the variable in the page context that holds the user filter options \n Tag  contentListFilter \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListFilterTag \n Description \n "ContentListTag" sub-tag, it creates a filter to restrict the result of the content search. Please note that the filters will be applied in the same order they are declared and the result of the search will reflect this fact. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n String used to filter and sort the contents. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "created" allows sorting by date of creation of content - "modified" allows sorting by date of modification of content. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata \n \n \n value \n false \n The filtering value. \n \n \n start \n false \n Filters the contents by attribute type or by the field specified with the key (respect the following matches): Text field -→ start Text Text attribute type -→ start Text Numeric attribute type -→ start Numeric date attribute type -→ start data If the data filter is used: - today, oggi or odierna will select all the contents with a date greater or equal to the system date - using date with the pattern "dd/MM/yyyy" will select all the contents with a date greater or equal to the one inserted. \n \n \n end \n false \n Similar the the "start" attribute but with the opposite behavior. \n \n \n order \n false \n Specifies the sorting behavior of the IDs found: "ASC"ending or "DESC"ending. By default no ordering is performed. \n \n \n likeOption \n false \n Toggles the \'like\' functionality. Admitted values: (true, false). Default: false. The option is available for metadata and on Text Content attributes. \n Tag  contentListUserFilterOption \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.ContentListUserFilterOptionTag = \n Description \n "ContentListTag" sub-tag, it creates a custom user filter to restrict the result of the content search by front-end user. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n key \n true \n The key of the filter. This string can be: - the name of a content attribute compatible with the type declared in the "contentListTag" (it requires the "attributeFilter" attribute to be "true") - the ID of one of the content metadata (the "attributeFilter" must be false) The allowed filter key that can be applied to content metadata are: - "fulltext" allows filter by full-text search<br /> - "category" allows filter by a system category. \n \n \n attributeFilter \n true \n Decides whether the filter must be applied to an attribute or to a content metadata, admitted values are (true, false). The "key" attribute will be checked for validity if the filter is going to be applied to a metadata. \n Tag  searcher \n Tag Class  com.agiletec.plugins.jacms.aps.tags.SearcherTag \n Description \n Generates a list of content IDs, restricting them to the key word contained in the "search" parameter of the http request. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n yes \n Name of the variable, stored in the page context, containing the list of content IDs. \n Tag  rowContentList \n Tag Class  Tag class: com.agiletec.plugins.jacms.aps.tags.RowContentListTag \n Description \n Publish a list of contents. \n Attributes \n \n \n \n \n \n \n \n \n Attribute \n Required \n Description \n \n \n \n \n listName \n true \n Name of the variable in the page context that holds the contents (list of properties of key "contentId" and "modelId"). \n \n \n titleVar \n false \n Inserts the title on a variable of the page context with the name provided. \n \n \n pageLinkVar \n false \n Inserts the code of the page to link on a variable of the page context with the name provided. \n \n \n pageLinkDescriptionVar \n false \n Inserts the description of the page to link on a variable of the page context with the name provided. \n \n \n \n'},{title:"Entando Identity Management -- Keycloak",frontmatter:{},regularPath:"/v6.3/docs/reference/identity-management.html",relativePath:"v6.3/docs/reference/identity-management.md",key:"v-4fd3bacc",path:"/v6.3/docs/reference/identity-management.html",headers:[{level:2,title:"Logging into your Keycloak Instance",slug:"logging-into-your-keycloak-instance"},{level:2,title:"Authentication",slug:"authentication"},{level:2,title:"Authorization",slug:"authorization"},{level:3,title:"Plugins/Microservices",slug:"plugins-microservices"},{level:3,title:"Core",slug:"core"},{level:2,title:"Social Login",slug:"social-login"},{level:2,title:"One Time Passwords",slug:"one-time-passwords"},{level:2,title:"Themes and Look and Feel",slug:"themes-and-look-and-feel"}],lastUpdated:"3/19/2021, 11:11:23 AM",content:' Entando Identity Management -- Keycloak \n Entando Identity Management is powered by Keycloak. The Keycloak instance used for your Entando apps\ncan be  externally installed  or you can use a dedicated instance on a per application basis. The sections below details the architecture and documentation required to customize your Keycloak instance. \n Logging into your Keycloak Instance \n In an Entando deployment Keycloak is protected by a Secret deployed in your Kubernetes instance. To get the default admin credentials you can query Kubernetes for the secret with this command: \n kubectl get secret <project-name>kc-admin-secret -n <namespace> -o go-template="{{println}}Username: {{.data.username | base64decode}}{{println}}Password: {{.data.password | base64decode}}{{println}}{{println}}"\n \n Replace  <project-name>  and  <namespace>  with your values. If you\'re not sure of the secret name you can run \n kubectl get secrets -n <namespace>\n \n And search for the secret that ends in  kc-admin-secret \n Authentication \n In Entando 6 all authentication goes through Keycloak. This ensures that a micro frontend can call a microservice with a token that is available on the client. \n \n By using Keycloak as a central point of authentication the Entando architecture is able to provide a single unified view of identity to the entire architecture. With this architecture Entando becomes more portable and can be integrated into other IDPs without changes to the source. Keycloak acts as an  abstraction to the underlying IDP. \n Authorization \n Plugins/Microservices \n Authorization for the microservices comes from clients and roles in keycloak. The authorizations are stored in the JWT token and are available to the services when invoked. \n Core \n Authorization for the entando-core and WCMS is provided by the Entando user management database. When a user is authenticated to the entando-core  a copy of that user is added to the Entando user management database.  That copy is made in support of the authorization flow noted below. \n As noted above when a user is authenticated to the entando-core via keycloak a copy of that user is added to the entando-core user management database in support of WCMS functionality.  Using the App Builder WCMS roles and groups can be assigned to a user for access to functions in the App Builder or for portal-ui based content access in the runtime application The code that copies the user into the entando-core can be customized to automatically create groups and roles as needed for an application but it is something that must be done on a per implementation basis. \n For more details on the code that copies users and data to the WCMS database see the  entando-keycloak-plugin . The readme in that project includes properties that are available to your Entando app. \n For a deeper look See:  KeycloakAuthorizationManager.java  in the plugin for an example of adding attributes programatically. In particular, the  processNewUser  method. \n Social Login \n Keycloak allows Entando to provide social login as an out of the box capability. See the  Keycloak Social Identity Providers  for documentation on enabling and configuring social logins in your Entando apps. \n One Time Passwords \n Keycloak enables Entando applications to provide login via One Time Passwords (OTP) as well. See the  Keycloak OTP Policies  for more details on configuring and enabling OTP in your application. \n Themes and Look and Feel \n Developers can also customize the look and feel of the login page and all of the identity management system that ships with Entando. The  Keycloak Theme Documentation  provides a lot of details on creating your own theme. \n You can also review the code for the  Entando Theme  as an example Keycloak theme to start from. \n'},{title:"Development Tips and Tricks",frontmatter:{sidebarDepth:2,redirectFrom:"/v6.3/tutorials/devops/local-tips-and-tricks.html"},regularPath:"/v6.3/docs/reference/local-tips-and-tricks.html",relativePath:"v6.3/docs/reference/local-tips-and-tricks.md",key:"v-6a6e256c",path:"/v6.3/docs/reference/local-tips-and-tricks.html",headers:[{level:2,title:"Quickstart Management",slug:"quickstart-management"},{level:3,title:"General",slug:"general"},{level:3,title:"Multipass",slug:"multipass"},{level:3,title:"Entando in Kubernetes",slug:"entando-in-kubernetes"},{level:2,title:"Shared Servers",slug:"shared-servers"},{level:2,title:"Network Issues",slug:"network-issues"},{level:3,title:".nip.io isn't allowed",slug:"nip-io-isn-t-allowed"},{level:3,title:"The IP address changed after the initial install",slug:"the-ip-address-changed-after-the-initial-install"},{level:2,title:"Windows Development",slug:"windows-development"},{level:3,title:"Multipass loses control of VMs",slug:"multipass-loses-control-of-vms"},{level:3,title:"Hyper-V IP Changes",slug:"hyper-v-ip-changes"},{level:3,title:"JHipster",slug:"jhipster"},{level:3,title:"Multipass with VirtualBox",slug:"multipass-with-virtualbox"}],lastUpdated:"2/22/2021, 4:16:33 PM",content:" Development Tips and Tricks \n We've collected a list of tips and tricks for optimizing your local quickstart or  Getting Started  development environment. We invite you to ask questions, collaborate with the community, and share your own favorite\npractices over on the  Entando forum . \n Quickstart Management \n Here are a few common questions about the quickstart environment which uses Multipass to launch an Ubuntu VM, install K3s Kubernetes into it, and then deploy Entando. \n General \n \n How can I remove a quickstart environment? . If you want to completely remove the VM created by Multipass then you can use  multipass delete <VM-NAME>  (where the default VM-NAME for a quickstart is  entando ) and then  multipass purge  to recover the resources. If you just want to shutdown Entando but keep the VM you can use  multipass shell <VM-NAME>  to shell into the VM and then remove the namespace via  sudo kubectl delete namespace entando . \n Multipass \n \n How can I shell into a Multipass VM?   multipass shell <VM-NAME> . If you don't provide a VM-NAME, multipass will use the default name  primary  and even launch it for you if it doesn't exist. \n What do I need to do after restarting my laptop?  By default Multipass is installed as a service and will restart automatically. If Multipass isn't running, you'll need to first start the service, and then you can start your VM via  multipass start <VM-NAME> . Kubernetes will start automatically along with any installed pods, including Entando. It can take a few minutes for all of the pods to start completely but you can use  sudo kubectl -n entando pods --watch  to observe the progress. \n How can I idle or pause my Entando instance?  You can use either  multipass stop <VM-NAME>  or  multipass suspend <VM-NAME> , if you'd rather preserve the VM state. You can then use  multipass start <VM-NAME>  to start the VM. \n What else can Multipass do?  You can run  multipass help  or refer to the  Multipass docs  for more information on Multipass. \n Entando in Kubernetes \n \n How can I install a new copy of Entando into an existing VM?  The quickstart deploys Kubernetes resources into a dedicated namespace,  entando  by default. You can simply delete the namespace,  sudo kubectl delete namespace entando , if you want to delete all of its resources. You can then re-create the namespace and re-install by applying the Helm template for your environment. Alternatively, you can use  ent quickstart --vm-reuse=true  but you'll need to set other  ent quickstart  options so check the  ent  help. \n How can I shell into a running pod or view its logs?  You can use the standard Kubernetes commands, e.g.  sudo kubectl exec -it <POD-NAME> -c <CONTAINER-NAME -- bash  or  sudo kubectl logs <POD-NAME> <CONTAINER-NAME> \n What do I if Entando doesn't start completely?  The most common cause for this is a networking problem. See the  Network issues  section below for details. If all else fails reach out to the Entando team on Slack or in the Forums. \n Shared Servers \n We've recommended using Multipass as a way to quickly spin up an Ubuntu VM to host a local Kubernetes cluster for test purposes. There are many times when a local environment is useful but most teams utilize a shared Kubernetes cluster managed by an operations team and installed either on premise or with a cloud provider for full integration testing, CI/CD, DevOps, etc. \n Network Issues \n A local Entando 6.3 quickstart installation (e.g. what you'll get if you follow the  Getting Started  guide) may use a set of local domain names to enable accessing Entando services. Your IP address will vary but may look something like this: \n quickstart-entando.192.168.99.1.nip.io\nquickstart-kc-entando.192.168.99.1.nip.io\nquickstart-eci-entando.192.168.99.1.nip.io\n \n The base domain configured via the ENTANDO_DEFAULT_ROUTING_SUFFIX (e.g. in your entando.yaml) is based on a fixed IP address and that address is configured during the initial installation. That setting is used to generate ingress routes to map incoming URLs to individual services. In production environments there's generally a dedicated network layer to manage IPs/routing (both on premise and cloud) but those options are often not readily available in a local setup. Here are a couple common issues that can prevent Entando from starting in a local environment: \n  .nip.io isn't allowed \n \n This could be because of firewall settings or corporate security policies. The simplest workaround is to manually edit your /etc/hosts file and map the necessary domains to the IP of your local virtual machine. \n \n  192.168.99.1 quickstart-kc-entando.192.168.99.1.nip.io\n 192.168.99.1 quickstart-eci-entando.192.168.99.1.nip.io\n 192.168.99.1 quickstart-entando.192.168.99.1.nip.io\n \n \n If you add microservices to your installation, you may need to add additional mappings for the new ingresses. \n See  this section below  for detailed steps on Windows. \n  The IP address changed after the initial install \n \n The workaround noted above (e.g. update your /etc/hosts file) can also be used here. Simply update the IP address in the first column to use the current IP of your virtual machine. \n On Windows this can happen simply because your laptop restarted. See  Windows Hyper-V IP Changes  below. \n Windows Development \n Multipass loses control of VMs \n Q: What do I do if Multipass cannot access my VMs? \n A:  The most common symptoms include an  IP=UNKNOWN  entry when issuing a  multipass list  and any attempts to stop or shell into the VM will fail. \n Internet Connection Sharing (ICS) is a Windows service that provides Internet connectivity to virtual machines and its  hosts.ics  file can occasionally get corrupted. Restarting the host laptop or desktop should remedy this but a quicker and simpler fix is to shutdown any VMs using the hypervisor (Hyper-V or VirtualBox), remove the  hosts.ics  file from  Windows/System32/drivers/etc  using elevated privileges, and then restart the VM(s). You can examine the  hosts.ics  file first to check if it is well-formed or if it contains spurious numbers or letters rather than clean IP to VM-NAME mappings. \n Hyper-V IP Changes \n Q: My Entando installation stops working when I restart Windows. How can I fix this? \n A:  The basic issue is that Windows Hyper-V makes it difficult to set a static IP for a VM. (See this  forum post  for details.) As discussed  above , Entando's ingress routes rely on an fixed IP address and will break if the IP address changes after initial installation. Here are a few options to solve this issue, short of modifying your router or network switch settings: \n Option 1: Single host routing \n The simplest way to deal with the peculiarities of Hyper-V IP assignments is to avoid it by using the Windows-specific mshome.net addresses. This allows you to access a VM by using an address like  <VM-NAME>.mshome.net . If you set up your enviroment using the  Automatic Install  instructions, then the ent CLI will select the single host option for you and the address will be  entando.mshome.net . You can accomplish the same thing yourself using the  ent quickstart  script but see its  --help  for the current set of options. \n Option 2: Manually update your hosts file \n The next simplest option to re-enable external access to your cluster is to update your hosts file after each Windows restart. \n You need two pieces of information for this workaround and you'll need administrator access to do this. \n \n Determine the original IP used for your VM. This is included in the  ENTANDO_DEFAULT_ROUTING_SUFFIX  or you can see it included in the ingress names. Run  kubectl -n entando get ingress  and you should see something like this: \n \n NAME                          CLASS    HOSTS                                           \nquickstart-kc-ingress         <none>   quickstart-kc-entando.192.168.235.100.nip.io  \nquickstart-eci-ingress        <none>   quickstart-eci-entando.192.168.235.100.nip.io  \nquickstart-ingress            <none>   quickstart-entando.192.168.235.100.nip.io    \n \n \n Determine the current IP using  hostname -I  in the VM or by running  multipass list  from Windows: \n \n $ multipass list\nName                    State             IPv4             Image\nprimary                 Running           172.31.118.12   Ubuntu 18.04 LTS\n \n \n As a Windows administrator, edit your hosts file  (C:\\Windows\\System32\\drivers\\etc\\hosts)  to map any needed URLs from the old IP to the new IP. This will bypass .nip.io lookups. \n \n 172.31.118.12 quickstart-kc-entando.192.168.235.100.nip.io\n172.31.118.12 quickstart-eci-entando.192.168.235.100.nip.io\n172.31.118.12 quickstart-entando.192.168.235.100.nip.io\n \n \n You should now be able to access your Entando URLs via the new IP. If your Entando installation stalled during startup, it should continue starting up as soon as the external address is functional again. \n Option 3: Add a Windows route \n This option is a little more involved the first time but it means repairing your network settings can be done very easily later. In this case you'll pick a static IP, configure a Windows route to map it to the Hyper-V interface, and claim the IP in the Ubuntu VM via a netplan entry. \n You'll need to run all of these steps before installing Entando the first time but then just steps #1 and #2 after subsequent Windows restarts. \n \n \n Determine an IP that is unused on your local network. You can use ping or other tools for this but in the following steps we assume that your selected IP is 192.168.99.1. \n \n \n Determine the interface address to Hyper-V, e.g. 32 below. Use cmd  route print  and look for the Interface entry for Hyper-V: \n \n \n Interface List\n 32...00 15 5d 86 45 20 ......Hyper-V Virtual Ethernet Adapter\n \n \n Using elevated privileges, add a persistent route to map your IP to the Hyper-V interface: \n \n route -p add [YOUR-IP] mask 255.255.255.255 0.0.0.0 IF [HYPER-V-INTERFACE]\nroute -p add 192.168.99.1 mask 255.255.255.255 0.0.0.0 IF 32\n \n \n \n Verify the route was added by using  route print 192.168.99.1 . This command is useful after restart to check if the route needs to be created again. \n \n \n Next, configure your VM to claim the same address. Shell into the VM using  winpty multipass shell [YOUR-VM-NAME] . \n \n \n Change to the root user to make the following steps simpler:  sudo -i \n \n \n Determine your network adapter via  ip link , e.g. eth0. You just need the name. It's often second in the list after the loopback adapter. \n \n \n ubuntu@primary:~$  ip   link \n 1 : lo:  < LOOPBACK,UP,LOWER_UP >  mtu  65536  qdisc noqueue state UNKNOWN mode DEFAULT group default qlen  1000 \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n 2 : eth0:  < BROADCAST,MULTICAST,UP,LOWER_UP >  mtu  1500  qdisc mq state UP mode DEFAULT group default qlen  1000 \n    link/ether 00:15:5d:00:1a:0c brd ff:ff:ff:ff:ff:ff\n \n \n \n cd /etc/netplan \n \n \n Create a netplan entry starting with 0 so it's loaded first:  vi 0-entando.yaml \n \n \n network : \n   version :   2 \n   renderer :  networkd\n   ethernets : \n     [ YOUR - NETWORK - ADAPTER ] : \n       dhcp4 :  no\n       addresses :  \n         -   [ YOUR - IP ] /24\n \n Example: \n network : \n   version :   2 \n   renderer :  networkd\n   ethernets : \n     eth0 : \n       dhcp4 :  no\n       addresses :  \n         -  192.168.99.1/24\n \n \n \n Apply the changes via  netplan apply \n \n \n Verify connectivity via  ping 192.168.99.1  from the VM. You should get a response rather than a timeout. \n \n \n (Optional) Run a python server to verify you can access the VM from the host at  http://192.168.99.1:8000.  It may take a minute or so before the server is ready. \n \n \n python3 -m http.server 8000\n \n \n You should now be able to install Entando using the static IP. If your Entando installation stalled during startup and was previously configured using the static IP, it should continue starting up as soon as the external address is functional again. \n Option 4: Reinstall Entando \n We're including this option because it works and requires no additional configuration. If you plan to regularly work with Entando we recommend developing against a centralized and shared Kubernetes instance rather than running a full stack locally. If you need a cluster locally we recommend using option 1 or 2. \n JHipster \n Q: How can I run JHipster on Windows? \n A:  JHipster requires a TTY interface for its menus to function correctly. Here are a few options to satisfy that requirement on Windows: \n \n Run  jhipster  under cmd or Powershell \n Using Git Bash, run  winpty jhipster.cmd \n Use Ubuntu bash via WSL (1 or 2) or within the Multipass VM \n Multipass with VirtualBox \n Multipass supports the use of VirtualBox on Windows as an alternative to using Hyper-V, say if you're using Windows Home. See the Multipass documentation on how to configure it to work with VirtualBox. \n In order to get Entando working correctly with this setup you will need to add a port forwarding rule so you can access Entando from your host system. \n \n \n Create your VM within Multipass. \n \n \n Go to the Oracle VM VirtualBox Manager and edit the  Network  settings for the VM. \n \n \n Go to the  Advanced  options and click  Port Forwarding Rules \n \n \n Add a new rule. \n \n Name : your choice \n Protocol : TCP \n Host IP : leave this blank \n Host Port : 80 \n Guest IP : leave this blank \n Guest Port : 80 \n Click OK \n \n \n \n At this point any requests to port 80 on your localhost should be forwarded to the VM. \n \n \n You can now identify the IP of your host and use that to configure the  ENTANDO_DEFAULT_ROUTING_SUFFIX  in your yaml file, e.g.  192.168.64.25.nip.io . You should not use the non-routable address (e.g. 10.0.2.15) identified from within the guest VM itself, but rather use the IP of the host. \n \n \n"},{title:"Entando 6.3.0 Release Notes",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/docs/releases/",relativePath:"v6.3/docs/releases/README.md",key:"v-55ae2236",path:"/v6.3/docs/releases/",headers:[{level:2,title:"New Features and Major Fixes",slug:"new-features-and-major-fixes"},{level:3,title:"Infrastructure",slug:"infrastructure"},{level:3,title:"New Use Cases",slug:"new-use-cases"},{level:3,title:"Security Fixes",slug:"security-fixes"},{level:3,title:"Entando Component Repository (ECR)",slug:"entando-component-repository-ecr"},{level:3,title:"Developer Experience",slug:"developer-experience"},{level:3,title:"Quickstart Installs",slug:"quickstart-installs"},{level:3,title:"AppBuilder",slug:"appbuilder"},{level:2,title:"Deprecation Warnings",slug:"deprecation-warnings"},{level:2,title:"Open Issues",slug:"open-issues"},{level:2,title:"Previous Releases",slug:"previous-releases"}],lastUpdated:"12/18/2020, 5:25:51 PM",content:' Entando 6.3.0 Release Notes \n New Features and Major Fixes \n Infrastructure \n \n \n Enhanced the Entando Operator so it can run on a dedicated namespace and support multiple Entando Applications in different namespaces. \n \n This enables a separation of privileges so the operator can be managed by Kubernetes administrators and an Entando Application can be managed by users with access to a specific namespace. \n \n \n \n Upgraded to Java 11 for all core Entando docker images \n \n \n Improved support for Google GKE, Azure AKS, and Amazon EKS cloud deployments \n \n \n Added support for OpenShift 4.X via quickstart templates \n \n \n Added configuration options so the Entando Component Repository can deploy bundles based on private registries and repositories \n \n \n Improved support for more complex topologies of TLS enabled ingresses \n \n \n Added support for single domain configurations \n \n In previous versions Entando used subdomains to expose subsystems and bundle microservices. Entando 6.3 can now operate under a single domain using the url path for routing. This can simplify infrastructure and certificate management. \n \n \n \n Enabled tuning the resource requirements of the core service pods \n \n \n Made Jboss EAP and Wildfly cache configuration available on the default docker images for the core services \n \n \n Added support for using Kubernetes secrets for external database \n \n \n Added options to preserve persistent volumes when a related Entando custom resource is deleted \n \n \n Simplified propagation of environment parameters \n \n \n Supported clustered caching based on Redis, including using the Redis client frontend for node-local caching \n New Use Cases \n \n \n Added capability to integrate with an external OIDC identity provider \n \n \n Added integration with Azure WAF \n \n \n Supported GKE installation in development configurations \n Security Fixes \n \n \n XSS: Added a default, mandatory Content Security Policy (CSP) to cover cases outside the scope of input sanitization \n \n \n This policy increases the security of all modules deployed within Entando, whether developed by Entando, clients, or 3rd parties. \n \n \n The CSP can be customized via Entando system parameters. \n \n \n The authorization data required by CSP (the "nonce") is automatically applied to elements developed within AppBuilder or installed via Entando Bundles. \n \n \n Developers should be aware of the constraints imposed by CSP, in particular with regard to code dynamic evaluation and event management. See Google’s CSP guide for more details:  https://developers.google.com/web/fundamentals/security/csp \n \n \n \n \n Applied fixes for sanitization/path traversal indicated by static code analysis \n \n \n Updated encryption algorithms (to AES and SHA256) for two cases of token generation \n \n These changes are not compatible with older versions of Java 8. \n \n \n \n Fixed XXE cases by updating and configuring the XML object factories \n \n These fixes are not compatible with older versions of Java 8. \n \n \n \n Removed support for weak encryption algorithms, including MD5, Argon, 3DES \n \n \n Updated to recent and more secure versions of spring-boot, Apache CXF, Keycloak engine and client libraries \n \n \n Improved log sanitization \n Entando Component Repository (ECR) \n \n \n Upgraded to Java 11 for all Entando Bundles \n \n \n Renamed  entando-bundle-cli  repository and tool to  entando-bundler  (or just  bundler ) to avoid confusion with the new  entando-cli  command line tool \n \n \n Added the ability to export all content in an Entando Application via the  entando-bundler \n \n \n This does not include users but does include groups and permissions. \n \n \n In some cases, an exported bundle may need to be manually updated before importing it into another Entando application (e.g. if the css for a widget is pointing to a root resource) \n \n \n \n \n Added a  forced overwrite  installation strategy for Entando Bundles that creates new objects or updates existing objects in order to allow business cases like: \n \n \n \n continuous deployment in development scenarios \n \n \n \n \n continuous deployment of staging to production \n \n \n \n \n migration of Entando Applications. The developer/admin will still be responsible for the update of data structures, as appropriate. \n \n \n \n \n develop a component, export as a bundle, import to a QA or test instance, then import into a production instance \n \n \n \n \n \n Improved the bundle plugin descriptor to provide new capabilities. New properties: \n \n \n \n deploymentBaseName : The base name to assign to the Kubernetes pods. If not present the base name will be generated from the docker organization, image name and image version. If the generated name is too long it will be truncated in order to respect Kubernetes constraints. \n \n \n \n \n ingressPath : the ingress path to assign to the plugin deployment \n \n \n \n \n permissions : a list of Keycloak clientId / role mappings \n Developer Experience \n \n \n Entando 6.3 now includes a Command Line Interface,  entando-cli  or simply  ent , intended to accelerate Entando development by automating common development tasks. The CLI can been used to do the following: \n \n \n Simplify the quickstart install process via a one line script leveraging a multipass VM for direct install via  ent quickstart \n \n \n Prepare a developer environment via  ent check-env  which installs tools such as npm, git, jhipster. The correct version of each dependency is installed based on the Entando version configured in the developer environment and uses private installs of npm-based tools to avoid conflicts across projects. \n \n \n Create, build, and publish bundles via project-level commands such as  ent jhipster  and  ent prj . \n \n \n Use the  ent bundler  command to help prepare bundle custom resources or to export a complete bundle from an existing Entando Application. \n \n \n Use helper commands such as  ent app-info ,  ent pod-info , and  ent diag  to collect diagnostic information related to an Entando application and which can be shared with Entando Support. \n \n \n (experimental) Use helper commands such as  ent attach-vm  and  ent kubectl  to interact with an Entando application. \n \n \n For more information on the CLI see  this page . \n \n \n \n \n Added compatibility fixes when running Entando tools on Linux, MacOS, and Windows 10. \n Quickstart Installs \n \n \n Enabled the one step HTTP installer for use on Linux, MacOS, and Windows 10 to set up a fully functional Entando Application in Kubernetes. \n \n \n Added support for Windows 10 mshome.net-based addresses when installing a quickstart via the Entando CLI. \n \n \n Provided a new template for deploying the Entando operator into a dedicated namespace \n \n \n Enhanced the quickstart so base docker images can be specified. This is required for scenarios where only private registries are allowed. \n AppBuilder \n \n \n Streamlined and simplified the Page and Content creation workflow \n \n \n Improved the Page Management and Page Designer UX to ease page design and configuration \n \n \n Added Welcome Wizard guided tutorial to help new users create a fully functional page in a new Application and introduce them to the main features of the App Builder interface \n \n \n Added Profile → Preferences options to allow users to customize their App Builder experience. Current settings include the Welcome Wizard, Missing Translation Warning, and Load on Page Select. \n Deprecation Warnings \n \n ECR: The format of the Bundle Plugin descriptor has been updated. The format used in Entando 6.2 has been deprecated. \n Open Issues \n \n \n ECR: The  forced overwrite  scenario when installing an Entando Bundle can only be utilized via API calls. A user interface will be provided in a future release. \n \n \n MySQL support will be restored in a patch release \n Previous Releases \n Please see the  Versions  list in the main navigation menu above to access documentation and release notes for previous versions of Entando. \n'},{title:"Tutorials",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/",relativePath:"v6.3/tutorials/README.md",key:"v-08b0f4d8",path:"/v6.3/tutorials/",headers:[{level:2,title:"Learning Paths",slug:"learning-paths"},{level:3,title:"Frontend Developers",slug:"frontend-developers"},{level:3,title:"Backend Developers",slug:"backend-developers"},{level:3,title:"DevOps",slug:"devops"}],lastUpdated:"3/19/2021, 4:22:12 PM",content:" Tutorials \n Entando simplifies the development of modern apps: \n \n Built using modern JavaScript frameworks \n Backed by microservices deployed in containers, and \n Orchestrated by Kubernetes for fully automated DevOps lifecycles \n \n \n Entando supports full stack micro frontend and microservice architectures for codebases that are easier to undestand, maintain, and debug across large, distributed teams, and comes with a private component repository that makes it easy for teams to share and reuse components. \n Use the navigation on the left to find step-by-step tutorials for common tasks or check out our learning paths below for a more structured approach. \n Learning Paths \n Frontend Developers \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Build a Basic Widget \n Add Configuration to a Widget \n Generate Micro Frontends and Microservices Based on a Database Entity \n \n \n Create a React Micro Frontend \n Enable Communication between MFEs \n \n \n \n Create an Angular Micro Frontend \n \n \n \n \n Create and Manage Content \n Backend Developers \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Build and Publish a Simple Bundle \n Build and Publish a Project Bundle \n Extend the Entando App Builder \n \n \n Generate Micro Frontends and Microservices Based on a Database Entity \n Export a Bundle from an Existing Application \n \n \n \n Run Micro Frontends and Microservices in your local env \n Use JDL Studio to Create a Complex Database Entity \n DevOps \n \n \n \n Basic \n Intermediate \n Advanced \n \n \n \n \n Set Up Entando on a Local Kubernetes Cluster \n Backing Up and Restoring Your Entando Environment \n Automate Integration Testing With a CI/CD Pipeline   (Coming Soon) \n \n \n Set Up Entando on Amazon Elastic Kubernetes Service (EKS) \n Customize the base Entando Application via a Docker Image \n \n \n \n Set Up Entando on Azure Kubernetes Service (AKS) \n Connect your Entando Application to an External Database \n \n \n \n Set Up Entando on Google Kubernetes Engine (GKE) \n Install the Standard Demo Application \n \n \n \n Set Up Entando on Red Hat OpenShift \n \n \n \n \n \n"},{title:"Generate Microservices and Micro Frontends",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",relativePath:"v6.3/tutorials/backend-developers/generate-microservices-and-micro-frontends.md",key:"v-6e996aa2",path:"/v6.3/tutorials/backend-developers/generate-microservices-and-micro-frontends.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:3,title:"Manual Setup",slug:"manual-setup"},{level:2,title:"Generate the Project",slug:"generate-the-project"},{level:3,title:"Project Structure",slug:"project-structure"},{level:2,title:"Next Steps",slug:"next-steps"}],lastUpdated:"3/19/2021, 4:22:12 PM",content:" Generate Microservices and Micro Frontends \n Overview \n This tutorial shows you how to use the Entando Component Generator powered by  JHipster  to create microservices and micro frontends for eventual deployment to the  Entando Component Repository  and Entando applications. \n \n The general flow of the component generation is: \n \n Run the Entando Blueprint to create your components (Spring Boot microservice and optionally React micro frontends) \n Customize and enhance your generated code \n Build an Entando bundle from your components \n Deploy a custom resource for your bundle into Kubernetes \n Install your Entando bundle into your Entando Application(s) \n Prerequisites \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. Java, npm, git, JHipster, Entando Blueprint). \n ent check-env develop\n Manual Setup \n The  ent jhipster  command is the recommended way to generate microservices and micro frontends but you can also setup JHipster and the Entando Blueprint yourself. You should then use the  jhipster  command instead of  ent jhipster  for the tutorial. \n \n Install JHipster \n \n npm   install  -g generator-jhipster@6.9.1 \n \n \n Install the Entando Blueprint \n \n npm   install  -g generator-jhipster-entando@6.3.0\n Generate the Project \n \n Setup a new project directory \n \n mkdir  testProject  &&   cd  testProject\n \n \n Use  ent jhipster  to generate the project skeleton using the Entando Blueprint \n \n ent jhipster --blueprints entando\n \n \n You'll be presented with a series of prompts to configure your project. The list below provides a set of choices.  You can select the defaults in every step of the tutorial. Just hit Enter at each step. \n \n \n If you want to go through the choices follow this guide. Except where noted below in bold you can choose what works best for you. Base values for the tutorial are in parentheses.\n \n What is the base name of your application?  (Up to you) \n As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts.  (8081) \n What is your default Java package name? (Up to you) \n Which *type* of database would you like to use?  (SQL)\n \n If you pick no database here you'll be building a stateless microservice which is a valid choice but the rest of this tutorial won't work) \n \n \n Which *production* database would you like to use?  (PostgreSQL or MySQL) \n Which *development* database would you like to use?  (H2 with disk-based persistence ) \n Do you want to use the Spring cache abstraction?  (Yes, with the Caffeine implementation) \n Do you want to use Hibernate 2nd level cache?  (Yes) \n Would you like to use Maven or Gradle for building the backend?   Maven  <-- this is required for Entando and is the default \n Which other technologies would you like to use?  (Don't select any other technologies) \n What name would you give to the bundle to share on an Entando digital-exchange?  Enter a name for your Entando bundle or accept the default \n Which is the organization name to use when publishing the docker image?   At this point enter the name of the organization where you are going to push your docker image. If you're using your own docker hub account you should enter your username here.  (this can be changed later as needed) \n Would you like to generate micro frontends when creating entities?  (Always) \n Would you like to enable internationalization support  (Up to you) \n Please choose the native language of the application  (Up to you) \n Please choose additional languages to install  (if you picked internationalization) \n Besides JUnit and Jest, which testing frameworks would you like to use?  (Up to you) \n Would you like to install other generators from the JHipster Marketplace?  (No) \n \n \n \n \n Next, add an Entity to your microservice and create the corresponding Micro Frontends. For the tutorial,  Conference  is the name of the entity that will be added to the application. \n \n ent jhipster entity Conference \n \n \n Add Fields \n \n Do you want to add a field to your entity?  (Yes) \n What is the name of your field?  (Enter  name ) \n What is the type of your field?  (Select  String ) \n Do you want to add validation rules to your field?  (No) \n Do you want to add a field to your entity?  (Yes) \n What is the name of your field?  (Enter  location ) \n What is the type of your field?  (Select  String ) \n Do you want to add validation rules to your field?  (No) \n Do you want to add a field to your entity?  (No) \n Do you want to add a relationship to another entity?  (No) \n Do you want to use separate service class for your business logic?  (Up to you) \n Do you want to add filtering?  (Up to you or  Not Needed  if you're unsure) \n Do you want pagination on your entity?  (Yes, with infinite scroll) \n At this point the blueprint will generate controllers, repositories, services, and micro frontends for your entity generation. \n \n \n Overwrite src/main/resources/config/liquibase/master.xml?  When prompted with a conflict at this stage enter  a  for All. This will override existing files with the configuration changes needed for your new entity. \n \n \n \n \n \n You now have a Entando project including a Spring Boot microservice with database integration and React-based micro frontends. \n Project Structure \n \n /src/main/docker  contains Docker files to help with local development environments \n /src/main/java  and  src/main/resources  contain the microservice codebase and configuration \n /ui  holds the React-based micro frontends. By default each entity gets an MFE for details, form, and table. \n /bundle  is used to assemble the project code into an Entando bundle. \n Next Steps \n You now have a choice: \n \n Build your Entando bundle and deploy your microservice and micro frontends to the Entando Component Repository. \n Go to the Running Locally tutorial to run your micro frontends and microservice in your local dev environment. \n Learn about the key elements included in the Blueprint generated widgets \n Iterate on your data model using the JHipster Domain Language (JDL) \n \n"},{title:"Run Blueprint-generated Microservices and Micro Frontends in Dev Mode",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/backend-developers/run-local.html",relativePath:"v6.3/tutorials/backend-developers/run-local.md",key:"v-037f6074",path:"/v6.3/tutorials/backend-developers/run-local.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"CLI Steps",slug:"cli-steps"},{level:2,title:"Manual Steps",slug:"manual-steps"},{level:3,title:"Start Keycloak using docker-compose",slug:"start-keycloak-using-docker-compose"},{level:3,title:"Start the microservice",slug:"start-the-microservice"},{level:3,title:"Start the table widget",slug:"start-the-table-widget"},{level:3,title:"Start the form widget",slug:"start-the-form-widget"},{level:3,title:"Start the details widget",slug:"start-the-details-widget"},{level:3,title:"Widget Details notes:",slug:"widget-details-notes"},{level:2,title:"Notes",slug:"notes-3"},{level:3,title:"Change Keycloak dev settings",slug:"change-keycloak-dev-settings"},{level:3,title:"The service-url Variable",slug:"the-service-url-variable"},{level:3,title:"User is not authenticated message",slug:"user-is-not-authenticated-message"}],lastUpdated:"1/29/2021, 9:58:37 AM",content:' Run Blueprint-generated Microservices and Micro Frontends in Dev Mode \n Overview \n This tutorial will take you through running an Entando project (microservice and micro frontends) in a local development environment. If you haven\'t generated your Entando project yet, start with the  Generate Microservices and Micro Frontend  tutorial first. \n The steps below assume you are working in the top-level project directory. \n CLI Steps \n The following steps make use of the Entando  ent prj  command. See the  Manual Steps  section below for a more detailed description of what the individual commands do. \n \n Startup Keycloak. This uses docker-compose under the hood. Since this is using Docker it will continue to run in the background until you stop it via  ent prj ext-keycloak stop . You can also view its logs using  ent prj ext-keycloak logs . \n \n ent prj ext-keycloak start\n \n \n Startup the Spring Boot application containing your microservices. The logs will be shown on the console and you can stop the application via  CTRL+C . \n \n ent prj be-test-run\n \n \n Startup one or more of the frontend widgets, each from its own shell. You can stop the application using  CTRL+C . This command runs React in development mode so any changes you make to the source files should be immediately seen in the browser. \n \n ent prj fe-test-run\n Manual Steps \n Start Keycloak using docker-compose \n \n Startup the Keycloak server: \n \n   docker-compose -f src/main/docker/keycloak.yml up\n Notes: \n \n If you have to install docker-compose you can follow this guide:\n https://docs.docker.com/compose/install/ \n By default docker-compose will recreate the keycloak container (and reset the H2 database) each time it is started. There are two options if you want to retain your changes across restarts:\n \n add the  --no-recreate  option to the command above to reuse the container \n update the keycloak.yml to add a persistent volume. \n Start the microservice \n \n \n Start the generated Microservice executing the command: \n ./mvnw\n Notes: \n If you want to reset the widget data (as example if you deleted all rows from the table widget) if during the generation of the microservice you selected "H2 with disk-based persistence" you can delete the target folder, restart the microservice and the data will be regenerated. \n Start the table widget \n Now you can start your generated table widget: \n \n \n Go to the table widget folder in your project: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n After the login process you’ll be redirected to the widget page and you can see the table widget with some generated data. \n Start the form widget \n Now you can start your generated form widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the form widget folder in your project: \n cd ui/widgets/<your-entity-name>/formWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Form widget notes: \n If you want to load other data you have to change the index.html file in the folder: \n cd ui/widgets/<your-entity-name>/formWidget/public\n \n and change the id attribute in this line: \n <my-entity-form service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Start the details widget \n You can also start your generated details widget: \n \n \n If you are running another widget, stop it clicking  Ctrl+C  in your widget command line window \n \n \n Go to the details widget folder in your project: \n cd ui/widgets/<your-entity-name>/detailsWidget\n \n \n \n Then install and start your widget executing the command: \n npm install && npm start\n \n \n \n When the widget is started a browser window is opened with and the widget URL is loaded \n \n \n If you’re not logged in you’re redirected to the login page. \n \n \n Log in using: \n Username: user\nPassword: user\n \n \n \n You’ll be redirected to the widget page and you can see the widget form with the ID 1 loaded. \n Widget Details notes: \n If you want to load other data you have to change the index.html file in the public folder: \n cd ui/widgets/<your-entity-name>/detailsWidget/public\n \n and change the "id" attribute in this line: \n <my-entity-details service-url="%REACT_APP_SERVICE_URL%" id="1" />\n Notes \n Change Keycloak dev settings \n If you want to change your Keycloak settings to use another keycloak installation (not the docker-compose pre-configured one) or if you want to change the service-url of your widget you can change the parameters set in the  .env.local  file that was generated by the entando-blueprint in the root folder of your react widgets: \n cd ui/widgets/<your-entity-name>/tableWidget\n \n then edit the file  .env.local \n By default this variables are set to: \n REACT_APP_SERVICE_URL=http://localhost:8081/services/<your-application-name>/api\nREACT_APP_KEYCLOAK_URL=http://localhost:9080/auth\nREACT_APP_KEYCLOAK_REALM=jhipster\nREACT_APP_KEYCLOAK_CLIENT_ID=web_app\n The service-url Variable \n The  service-url  variable is the Microservice API URL. \n User is not authenticated message \n When you run the widgets if you see the message:  User is not authenticated . This means that probably your keycloak application is not running so please check if the docker-compose command is still in execution. \n'},{title:"Widgets and Fragments",frontmatter:{},regularPath:"/v6.3/tutorials/cms/app-builder/hello-world.html",relativePath:"v6.3/tutorials/cms/app-builder/hello-world.md",key:"v-95ff1c02",path:"/v6.3/tutorials/cms/app-builder/hello-world.html",headers:[{level:2,title:"Create a Widget",slug:"create-a-widget"},{level:2,title:"Create a UX Fragment",slug:"create-a-ux-fragment"},{level:2,title:"FreeMarker Basics in Entando",slug:"freemarker-basics-in-entando"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Widgets and Fragments \n This tutorial will take you through the basics of creating an Entando\nwidget and placing it on a page. This document will also review the\nbasics of fragments which are re-usable pieces of a user interface. \n Create a Widget \n For this example you will use the Entando App Builder to build and\ndisplay a widget on a page. In a production system or a larger\ndevelopment environment you would build and deploy widgets differently,\nhowever this example provides a quick idea of the building blocks. \n \n \n In the App Builder menu, go to:  Components → Micro frontends & Widgets \n \n At bottom of the page, select ADD \n \n \n \n Now create a widget with the sample HTML code.  Enter into the following fields: \n \n Code:  MyHelloWorld \n en Title:  Hello World \n it Title:  Ciao Mondo \n Custom UI field:  <h2>Hello World</h2> \n Select SAVE \n Note: the Custom UI Field is a freemarker template where you can put raw html and include freemarker logic. This allows you to import javascript, css, or any normal HTML. \n \n \n \n Select a new Home Page \n \n Go To:  Pages → Settings \n From the “Home Page” dropdown menu, select “Home / Service” and select SAVE \n \n \n \n Place the widget on the page \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the right hand column, drag and drop the new widget into an open frame in the page \n From the top of the page, select PREVIEW \n You should see "Hello World" on the page \n \n \n \n Publish the updated page \n \n Go To:  Pages → Management \n Note for the row showing the Services page, the Status is now yellow \n Select the Kebab button and select PUBLISH \n Create a UX Fragment \n A UX Fragment is a way to take a common piece of front end code and reuse\nit across multiple pages or widgets. Common elements such as basic HTML,\njavascript, or freemarker logic can be stored as fragments and\nreferenced via the  <@wp.fragment …  tag. \n Starting from the simple widget tutorial above: \n \n \n Create a new fragment: \n \n In the App Builder Go To:  Components → UX Fragments \n At bottom of page, select ADD, and enter the following fields \n Code:  test \n Gui Code:  <h2>Hello World</h2> \n Select SAVE \n \n \n \n Place the fragment in a template: \n \n Go To:  Pages → Page Templates \n On the row for service, select EDIT \n In the  Template  text box, add   <@wp.fragment code="test"/>  on a new line between the  <body>  and   </body>  tags \n SAVE the page template \n \n \n \n View the page with the new fragment: \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the top of the page, select PREVIEW \n Note: You will see the fragment  <h2> This is a fragment. </h2>  which includes the HTML tags. By default html embedded via a fragment tag is escaped so you get it rendered exactly as you enter it. You’ll need to un-escape it to get it to render correctly. \n \n \n \n Update the Fragment: \n \n Go To:  Pages → Page Templates \n On the row for service, select EDIT \n Change the tag to:  <@wp.fragment code="test" escapeXml=false/> \n \n \n \n View the page with the updated fragment: \n \n Go To:  Pages → Management \n On the row that says "Service", on the far right side, select the Kebab button and select CONFIGURE \n From the top of the page, select PREVIEW \n See correctly rendered fragment \n FreeMarker Basics in Entando \n The FreeMarker templating language gives you a lot of flexibility and\npower in how pages are rendered. You can include conditional logic,\ninject information from the backend, check for query parameters and\nroute to different pages. \n For example, to check for a query parameter you can use:\n <#if RequestParameters.myParam?exists > … \n To check the current username, use:\n <#if (Session.currentUser.username != "guest") > \n When you need dynamic behavior in your widgets consider using the power\nof FreeMarker. \n https://freemarker.apache.org \n'},{title:"Update the Project Data Model",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/backend-developers/update-data-model.html",relativePath:"v6.3/tutorials/backend-developers/update-data-model.md",key:"v-346e3ce6",path:"/v6.3/tutorials/backend-developers/update-data-model.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"3/19/2021, 4:22:12 PM",content:" Update the Project Data Model \n Overview \n This tutorial shows how you can use the Entando Component Generator powered by  JHipster  to quickly update the data model for your Entando project. \n Prerequisites \n The steps below assume you already have an existing project and are working in the top-level project directory. If you don't have a project yet, please see  this tutorial . \n Tutorial \n \n Start by extracting the current application description using JHipster. The resulting JHIpster Domain Language (JDL) file includes the entity definitions that will be used as a starting point for your design work. \n \n ent jhipster export-jdl export.jdl\n \n \n This file contains the application configuration as well as entity definitions for your project. For simplicity, we'll create a new file containing just the elements describing the entities. If you followed the tutorial above, that section could be as simple as this: \n \n entity Conference {\n  name String\n}\n \n \n You can now take this definition and enhance it by adding fields, additional entities, mappings between tables, field validation, etc. The easiest way to do this is by using the online JDL-Studio or corresponding JHipster IDE plugins/extensions. See  the JHipster docs  for more information on those options. Once you're done enhancing your data model, you should create a new file containing it, e.g.  conference.jdl. \n \n entity Conference {\n  name String required\n  location String\n  date ZonedDateTime\n}\n\nentity Session {\n  name String required\n  track Track required\n}\n\nenum Track {\n  BUSINESS, TECHNICAL\n}\n\nrelationship OneToMany {\n   Conference to Session\n}\n \n In this case we've added two fields to the Conference entity, introduced the Session entity plus an enum, and added a mapping between the two entities. This is the view you'll get in JDL-Studio for the updated data model. \n \n \n Now import the jdl file into your application. You may be asked if you want to generate MFEs depended on your options when first generating the project. \n \n ent jhipster import-jdl conference.jdl\n \n If you kept the original project structure, this step will update your data model, add entries to Liquibase so the database schema can be upgraded at deploy time, add new service methods to your microservice, add fields to your MFEs, etc. \n \n You can now build your updated project and  run it locally  or  deploy it to Entando . For a full local test you can use the following commands to build the project, then start Keycloak, the microservices, and one of the MFEs. \n \n ent prj build\nent prj xk start\nent prj be-test-run\nent prj fe-test-run\n \n You can repeat steps 3-5 as many times as needed throughout the life of your project. \n"},{title:"Content Attributes",frontmatter:{},regularPath:"/v6.3/tutorials/cms/content-attributes.html",relativePath:"v6.3/tutorials/cms/content-attributes.md",key:"v-7b427e40",path:"/v6.3/tutorials/cms/content-attributes.html",headers:[{level:2,title:"Simple Attribute Types",slug:"simple-attribute-types"},{level:2,title:"Composed Attribute Types",slug:"composed-attribute-types"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Content Attributes \n Attributes can be seen as the smallest elements that compose a Content\nType. In other words, a Content Type is just a collection of different\nattributes. Attributes are responsible for carrying the actual\ninformation inside a Content in Entando and could be of different types.\nIn this chapter, we will review and describe the different attribute\ntypes. \n Firstly, we can distinguish simple attribute types from composite\nattribute types. In the first case, the attribute type carries a single\npiece of information (for example, an image), while the latter is an\naggregation of simple attribute types (for example, a set of images). \n Simple Attribute Types \n Attach \n This represents the information carried by a file, which is attached to\nthe content. \n It consists of an URL corresponding to the desired file present in the\nsystem’s resources, and a text which can either indicate the description\nor the name of the file. \n This attribute type is rendered as a button named “Add”. By pushing that\nbutton, the user is prompted to select a desired file present in the\nsystem’s Digital Assets Attachments list. \n Boolean \n This attribute type represents a boolean value which can either be true\nor false. This attribute type is rendered as two radio buttons labeled\n“Yes” and “No”. \n Checkbox \n This attribute type behaves in the same way as a Boolean does – it is\nactually an alternative to the Boolean attribute type - but it is\nrendered with a checkbox labeled “Yes” or “No”. \n Date \n This attribute type represents a date, tracking time within a content;\nit is often used to filter contents appearing in lists by publication\ndate, etc. \n It is rendered as a datepicker. \n Timestamp \n This attribute type is specialized for the Date attribute, allowing you\nto also specify the hour, minute and second. \n It is rendered as a datepicker for the date, and a select for hours,\nminutes and seconds. \n Enumerator \n The enumerator attribute type represents textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements which are mandatory and declares the set of available\nchoices; \n \n \n Separator, which is optional and declares the character to use to\nseparate the arguments of the enumerator. By default the comma “,”\nis used. \n \n \n ExtractorBean: this parameter represents the name of the Spring bean\nto use to process the values of the enumerator. The name must\nexactly match the id of the bean as defined in the Spring\nconfiguration file. \n \n \n It is rendered as a select list. \n Enumerator Map \n The enumerator map attribute type represent textual information with a\npredefined set of choices; it is defined by: \n \n \n Elements in the form of a separated list of key=value pairs, (i.e.\nkey1=value1,key2=value2) \n \n \n Separator, which is optional and declares the character to use to\nseparate the key, values pairs. By default the comma is used. \n \n \n It is rendered as a select list which shows the available values. \n Hypertext \n This attribute type holds HTML tagged text; it retains a single value\nfor all languages. \n Even if this attribute type could support all HTML tags, we strongly\nrecommend using only tags which provide meaning and avoid those which\ndecorate or add graphics. \n Hypertext attributes are rendered as a text area in the content edit\npage; if the CKEditor is active, the user has access to a set of\nadditional functionalities from a dedicated editor’s toolbar. Such as\ntable insertion and table manipulation, special characters insertion,\nstring formatting, links creation. \n Image \n This attribute type binds an image resource to the content. \n The image is always taken from the Digital Assets images list. The user\nwill need to specify the description accompanying the image. \n Usually attributes of type Image are not indexed and are not used to\nfilter contents. \n It is rendered as a button named “Add” that, when pushed, allows the\nuser to select an image from the Digital Assets images list. Once\nselected the user is presented with a preview, as a thumbnail, of the\nimage and has the possibility to define some parameters: \n \n \n Text which is mandatory and by default takes the name of the\nselected image \n \n \n legend (optional) \n \n \n alt (optional) \n \n \n description (optional) \n \n \n title (optional) \n \n \n Link \n This attribute type represents an hypertext link; it is normally used to\ninclude a link in your content: it is possible to define up to three\ndifferent types of links: \n \n \n external links: a link pointing to a location external to the Entando\nportal \n \n \n link to page: a link which points to a page of the portal \n \n \n link to a content: a link to another content \n \n \n It is rendered as a button named “Add” that when pushed opens up a modal\nwindow from which the user can select the link type. \n Longtext \n This attribute type represents a simple unformatted text; it supports\nseveral languages and is normally used for small descriptions, when a\nshort string won’t suffice. \n It supports minimum length , maximal length and regular expressions as\noptional parameters. \n It is rendered as a textarea. \n Monotext \n Monotext represents the information in textual form, but supports only a\nlanguage; it is used for all \n those fields which do not require localization. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n Number \n This attribute type holds an integer number; it retains a single value\nfor all languages. \n Supports the optional parameters: From, To, and Equal to. \n It is rendered as a textfield. \n Text \n This attribute type holds a string; it retains a single value for all\nlanguages. \n It supports minimum length, maximal length, and regular expressions as\noptional parameters. \n It is rendered as a textfield. \n ThreeState \n Conceptually similar to the Boolean attribute, this attribute type\nallows a third status “Both” to be present. \n It is rendered as a radio button with “Yes”, “No”, “Both” options. \n Composed Attribute Types \n All the attributes types of the previous chapter can only retain a\nsingle type of information, but sometimes it is desirable to aggregate\ndifferent types of attributes into one attribute: this is where composed\nattributes are used. \n From a functional point of view, it would be perfectly legal to build a\ncontent type specifying all the attributes back to back: the content\nwould be formally complete, but from a logical point of view the\nattributes would appear mutually unrelated and, worse, the relationship\nbetween them would not be explicit. \n Entando offers three types of composed attributes: List, Monolist,\nComposite. \n List \n This Attribute Type represents a set of independent and homogeneous\nelementary Attribute types, each associated with one of the languages\ndefined in the system. \n An immediate consequence is that this kind of list can handle only\nmono-language basic attributes. \n It is rendered with a button named “Add” that if pushed presents the\nuser a prompt to select or define the single elements which compose the\nlist. \n Monolist \n This attribute type is a list that is common to all the system\nlanguages; this kind of list handles multi-language and mono-language\nattributes. \n It is rendered with a button named “Add” that, if pushed, presents the\nuser with a prompt to select or define the single elements that compose\nthe monolist. \n Composite \n This attribute type is an aggregate of different, non-homogeneous,\nsimple attributes types. The aggregation of different types is treated\nas a single unit. \n It is rendered as a combination of the elementary attribute types, where\neach attribute type presents the proper rendering. \n"},{title:"Content Creation",frontmatter:{},regularPath:"/v6.3/tutorials/cms/content-tutorial.html",relativePath:"v6.3/tutorials/cms/content-tutorial.md",key:"v-72927900",path:"/v6.3/tutorials/cms/content-tutorial.html",headers:[{level:2,title:"Creating Content",slug:"creating-content"},{level:2,title:"Finding Content",slug:"finding-content"},{level:2,title:"Content Actions",slug:"content-actions"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Content Creation \n This document provides an overview of Content Management and how to create Content that can be displayed in an application. The App Builder is used to create, edit and publish content stored in the web content management system (WCMS). \n Creating Content \n To see the list of Content in the WCMS: \n \n Go to  Content → Management . All existing\ncontent is displayed in a table list. \n \n \n To create a new Content item and add it to the list \n \n Select the  Add Content  button. A drop-down list will let you\nchoose which Content Type the content will be based on. \n \n \n You will be asked to provide the following information: \n \n \n Info \n \n \n Content Type . This information is pre-defined, and lists the\ncontent type for the content. \n \n \n Description . The specific Content's name or description. This field\nis mandatory. \n \n \n \n \n Groups \n \n \n Owner Group.  Use the drop-down list to choose the\navailable user group that can manage the content.\nThis field is mandatory and may be predefined. \n \n \n Join Group.  Use the drop-down list to choose the\navailable user group to share the content with and select +. The group\nselected will only be able to share and can not\nadministrate this content. This field is not mandatory. \n \n \n Categories.  Select the category(s) and select + to add a classification to the\ncontent to use for searching and sorting.  This field is not mandatory. \n \n \n Content Attributes.  Define each required attributes field and any optional fields\ndefined by the content types used for this Content. This field is mandatory. \n \n \n \n \n \n Save the new content by selecting: \n \n \n Save : The content will be saved in a draft version. \n \n \n Save and Continue : The content will be saved and the editable form will be displayed. \n \n \n Save and Approve : The content will be saved, approved and published. \n Finding Content \n You can list specific Content by using the filters: \n \n \n All : All created Content is displayed (Draft, To Approve and\nApproved/Published) \n \n \n Pending Changes : All created Content that was saved by only clicking on the\n Save  or  Save and Continue  button. The content is not\napproved and therefore is not ready to be published. \n \n \n Ready for Approval : All created Content that is in  Ready  status,\nand saved by clicking on the  Save  or  Save and Continue  button.\nThe content is ready for review but has not yet been approved and\ntherefore has not been published. \n \n \n Published : All created Content that has been saved and approved\nby clicking on the  Save and Approve  button. This content has been\npublished. \n \n \n \n In the table list, contents are listed with several parameters: Name,\nCreated by, Last Edited, Type, Created Date, Owner Group, Join Group,\nStatus, Restrictions, Code, Actions. Fields can be added or deleted from view by selecting or unselecting them\nin the Columns drop-down menu. \n Content Actions \n For all Content in the list, you have access to a set of actions\nthrough the  Actions  kebab button, such as: \n \n \n Edit : update the data fields in the content definition \n \n \n Delete : remove the content \n \n \n Clone : replicate the content \n \n \n Publish : make the content visible \n \n \n Unpublish : hide the content \n \n \n \n All Content in the list can be saved to your local file system by clicking the\n Download  button and selecting either CSV or XLS format. \n \n"},{title:"Content Templates",frontmatter:{},regularPath:"/v6.3/tutorials/cms/content-templates-tutorial.html",relativePath:"v6.3/tutorials/cms/content-templates-tutorial.md",key:"v-77ce6300",path:"/v6.3/tutorials/cms/content-templates-tutorial.html",headers:[{level:2,title:"Create a Content Template",slug:"create-a-content-template"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Content Templates \n Content Templates define how the information in a Content item is displayed to an end user once published. Content Templates provide styling and layout for Contents Type and can be used to show the same content in different ways. Content Templates can be managed within the App Builder. \n Create a Content Template \n Creating a Content Template is fairly simple. From the App Builder\napplication \n \n \n Go to  Content → Templates \n \n \n Click on the  Add content template  to create a new Content\nTemplate. \n \n \n \n \n \n Access the  Add Content Template  page, where you can \n \n \n Edit the  Code . It is the unique identifier of the content template.\nYou can insert up to 10 numbers. It’s mandatory. \n \n \n Edit the  Name . It is the name or description of the content\ntemplate. \n \n \n Choose the  Content Type  in the dropdown list. \n \n \n Edit the  HTML Model  based on Velocity language \n \n \n (Optional) Define the CSS  Style Sheet  to be applied to the  HTML Model \n \n \n Press the Save button \n \n \n \n \n \n"},{title:"Content Types",frontmatter:{},regularPath:"/v6.3/tutorials/cms/content-types-tutorial.html",relativePath:"v6.3/tutorials/cms/content-types-tutorial.md",key:"v-a2fb3f00",path:"/v6.3/tutorials/cms/content-types-tutorial.html",headers:[{level:2,title:"Create a Content Type",slug:"create-a-content-type"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Content Types \n A Content Type is used to represent or to model a Content.\nIt is characterized by a set of  Attribute Types , each of which defines the value of their properties, called Attributes. A Content is\nan instance or specialization of the Content Type. \n Create a Content Type \n Creating Contents Types is fairly simple. The Content Types are managed\nthrough the Web CMS, its user interface is made available in the App\nBuilder application. \n \n \n Go to  Content → Types \n \n \n Click on the  Add Content Type  button to create a new Content\nType. \n \n \n \n \n \n You be asked to provide \n \n \n Code . The code is the unique identifier of the content type,\nthat must be 3 uppercase letters, (e.g. CNN). It’s mandatory. \n \n \n Name.  The name must be max 50 characters uppercase and\nlowercase letters, including numbers and special characters,\n(e.g. Conference_News). It’s mandatory. \n \n \n \n \n \n \n \n Select the  Save  button, then you’ll see \n \n \n Content Type Information : \n \n \n Code . The value is pre-filled. \n \n \n Name . The name is pre-filled. \n \n \n \n \n Metadata \n \n \n Page for on-the-fly publishing \n \n \n Default content template \n \n \n Default content template for lists \n \n \n \n \n \n \n Default content template  and  Default content template for lists  are used\nrespectively to show the detailed view of the Content and its\nrepresentation as an element in a list. \n \n Attributes \n \n In the Attributes section, select the  Type  from the drop-down list.\nThe list contains all the available attributes types that define which\nproperties/attributes will characterize the Content. \n \n The Add button will start the configuration of the single attribute\ntype. Every attribute type has its own configuration. \n For example, to configure the  Text  Attribute Type, choose Text from\nthe Types drop-down menu and then press the Add button. \n \n \n \n You should specify the following fields \n \n \n Type:  the value is pre-filled. It represents the selected\nattribute type. \n \n \n Code : You should insert the name of the attribute. (You\ncan insert max 10 characters uppercase and lowercase letters,\nnumbers, and special characters _ ). (e.g. title) \n \n \n Name : You should insert the description of the attribute.\n(You can insert max 50 characters uppercase and lowercase letters,\nincluding numbers and special characters). (e.g. Title). \n \n \n You should declare if the attribute is  mandatory ,\n searchable , and  to be used as a filter in the list. \n \n \n The  Roles  section it is possible to assign the  jacms:title\nAttribute Role  to this attribute; in this way other plugins or\nservices will know that within the CNG entity this attribute is a\ntitle, whatever the key is; however, for sake of clarity, the Code\nof the attribute is Title. \n \n \n The remaining fields related to  Sections  and  Validation -\nOGNL  sections are not mandatory and can be left empty. \n \n \n Press the  Continue  button. The Text attribute type requires no\nadditional configuration step. \n \n \n You can add other Attributes Types. \n \n \n Press the  Save  button. The Content type will be saved and displayed\nin the table list \n \n"},{title:"Digital Assets",frontmatter:{},regularPath:"/v6.3/tutorials/cms/digital-assets-tutorial.html",relativePath:"v6.3/tutorials/cms/digital-assets-tutorial.md",key:"v-16fa72cc",path:"/v6.3/tutorials/cms/digital-assets-tutorial.html",headers:[{level:2,title:"Create a Digital Asset",slug:"create-a-digital-asset"},{level:2,title:"Editing Assets",slug:"editing-assets"},{level:3,title:"Cropping Images",slug:"cropping-images"},{level:2,title:"Embedding an Asset in a Page",slug:"embedding-an-asset-in-a-page"},{level:2,title:"Including an Asset in a Content",slug:"including-an-asset-in-a-content"},{level:2,title:"Configuring Allowed File Extensions for Upload",slug:"configuring-allowed-file-extensions-for-upload"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Digital Assets \n The Web Content Management System (WCMS) includes capabilities that let you manage contents and digital assets. Digital Assets are images, documents, and other media\nfiles in specific formats. \n Default Supported Document Formats:  The Entando WCMS can be\nconfigured to allow you to load or exclude any type of file extension\nfrom being loaded to your site. For the app builder you should also include the MIME type of the asset you want to allow. The default set of extensions are:\n pdf,xls,doc,ppt,txt,rtf,sxw,sxc,odt,ods,odp,tar,gz,zip,rar,flv,swf,avi,wmv,ogg, \n mp3,wav,ogm,mov,iso,nrg,docx,docm,xlsx,xlsm,xlsb,pptx,pptm,ppsx,ppsm,sldx,sldm \n Default Supported Image Formats :  jpg, jpeg, png, svg,svg+xml \n Create a Digital Asset \n To manage the Digital Assets through the WCMS: \n \n Go to  Content → Types \n \n Add a new image or a new document file \n \n Press the  Drag and Drop or Browse your computer  button and\nchoose, from your file system, images and documents files that you\nwould like to upload \n \n \n \n From the  Add file  modal window, you must choose one of the\navailable Groups and then the  Upload  button. If categories have\nbeen defined, you can apply them to the asset in this step. \n \n \n \n \n The image file that you just uploaded is displayed in the list; a\nstatistical overview of the number of the uploaded resources (images\nand documents) is provided. The App Builder’s interface allows the\nusers to choose grid and list view; most of the time, users prefer\nto use list view when they are searching with specific requirements,\nwhile they love grid view for exploring. For every resource, image,\nor document, the list shows the following information: \n \n \n Preview \n \n \n Name \n \n \n Type \n \n \n Uploaded By \n \n \n Uploaded At \n \n \n Group \n \n \n Categories \n \n \n Actions \n \n \n \n \n Furthermore, the interface lets you perform all management actions, as: \n \n \n Edit:  update the information data related to every single\nresource (image and document) \n \n \n Duplicate:  copy identically the resource from the original \n \n \n Download:  transfer the resource to your local machine \n \n \n Delete:  remove the resource \n \n \n You can list the contents by filtering with: \n \n \n All : All added files are displayed, images and documents both. \n \n \n Images : All added images are displayed \n \n \n Documents : All added documents are displayed. \n Editing Assets \n Once you have a digital asset in place, you have several editing and viewing options. Click the asset's  Actions  button and select  Edit  to update the asset's name/description, categories, and the file represented. \n Cropping Images \n You can crop images newly uploaded via Digital Assets. You can either crop the image dynamically or by using pre-configured crop ratios. \n To set pre-configured crop ratios: \n \n Select  CMS → Content Settings \n Under  Settings Image Crop Dimensions,  click  Add crop dimension . \n Enter a crop ratio, using numeric values separated by a colon. \n Click  Save . \n \n To dynamically crop an image: \n \n Edit the asset by opening  Actions  menu > Edit.\n \n Buttons representing your pre-defined crop ratios are below the image. Clicking any of those buttons changes the selected crop area based on the chosen ratio. \n You can create multiple crops of a single image as part of the upload process. The right side of the screen displays the list of crops created during the current session. \n \n \n \n \n \n Use your mouse or the buttons below the image to move or change the crop area, then click  Save  to crop the selected area. Repeat the process as many times as needed.\n \n Click  Close  to return to the Digital Assets screen. \n Embedding an Asset in a Page \n The uploaded asset can be embedded in a page by using  <@wp.resourceUrl path/to/asset . The path can be found in the CMS Configuration > File Browser page. \n \n Example usage:\n <img src=\"<@wp.resourceUrl cms/images/butterfly_d0_d3.jpg\" \n Including an Asset in a Content \n The asset can be included in a content of a type that has an  Attach  or  Image  attribute. \n \n Create a content type with an image attribute.\n \n Create a content based on the created  type.\n \n Under the  Content Attributes  section at the bottom of the page, click the  Add  button beside the image attribute. It will then open a modal that allows you to select an asset by clicking the  Use  action.\n Configuring Allowed File Extensions for Upload \n The types of files that can be uploaded to an Entando application are controlled by\nconfiguration in the server side of the app builder. If you're using the quickstart this will be the\n entando-de-app . \n There are two properties that control these settings and they are set in  src/main/conf/systemParams.properties  and are a comma delimitted list of values. The property keys are \n \n jacms.imageResource.allowedExtensions= \n jacms.attachResource.allowedExtensions= \n \n If you are configuring the upload for both the App Builder and the legacy Admin Console you should include\nboth the MIME type of the asset and the file extension. The APIs that support resources will check MIME type of the uploaded asset. \n An example configuration for images. \n \n jacms.imageResource.allowedExtensions=jpg,jpeg,png,svg,svg+xml \n \n Where  svg+xml  is the MIME type for an svg image. \n The  systemParams.properties  file is bundled into the WAR and the image for the application so you will need to create and deploy image to reflect changes for these properties in your application. \n"},{title:"Page and Content Protection",frontmatter:{},regularPath:"/v6.3/tutorials/cms/creating-protected-resources.html",relativePath:"v6.3/tutorials/cms/creating-protected-resources.md",key:"v-d071ee00",path:"/v6.3/tutorials/cms/creating-protected-resources.html",headers:[{level:2,title:"Create a Group",slug:"create-a-group"},{level:2,title:"Protect a Page",slug:"protect-a-page"},{level:2,title:"Protect Content",slug:"protect-content"},{level:2,title:"Protect Images and Attachments",slug:"protect-images-and-attachments"},{level:2,title:"Freemarker Tags and Consuming Protected Resources",slug:"freemarker-tags-and-consuming-protected-resources"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Page and Content Protection \n In the Entando Web Content Management System (WCMS) you have the ability to protect pages, content, and digital assets (images and files) by assigning groups that have the authorization to view those assets. If users without the correct authorization attempt to view those assets the platform will return an error. You can handle those errors as required for your application with dedicated error pages or by adding logic to your widgets or freemarker templates. \n Create a Group \n Protected pages, content, and digital assets in the WCMS are protected by assigning groups to the resource that is being created. You can add new groups in the Entando App Builder as follows: \n \n Go to  Users → Groups  from the left navigation \n Select  Add \n Enter a  Name  and a  Code  for your group` \n \n The groups you create here can be utilized to protect pages, content, images, and attachments in the CMS. Groups can be assigned to individual users in the  Users  section of the app builder or as part of a customization of your entando-core-app using APIs or custom code. \n Pages and Content have settings for an  Owner Group  as well as a set of optional  Join Groups . The  Owner Group  indicates the team within the  App Builder  who owns and can modify the page. Additional groups can be given access to the item via the  Join Group  setting. Note: the default App Builder configuration prevents the  Owner Group  from being changed after the item is created. \n Protect a Page \n \n Select  Pages → Management  from the left navigation \n Create a new page. Assign values as you see fit \n To protect a page, assign the  Owner Group  to any group other than  Free Access \n (Optional) Add groups via  Join Group \n Finish configuring the page and select  Save \n \n At this point only users assigned to either the  Owner Group  or  Join Group  will have the ability to view that page. They can also manage the Page if they have the appropriate App Builder role. \n If you would like to test this, navigate to the page URL in a private or incognito browser window and you will be redirected to the  Sign in to Proceed Further  page of your application.\nThe  Sign in to Proceed Further  page can be changed by going to  Pages → Settings  and picking the page you would like to render to users who need to sign in. \n Protect Content \n \n Select  Content → Management  from the left navigation \n Select the  Add Content  button and pick the content type to be created \n To protect a content item, assign the  Owner Group  to any group other than  Free Access \n (Optional) Add groups via  Join Group \n Finish configuring the page and select  Save \n \n The content you are creating will only be available to users assigned to the  Owner Group  of  Join Group . The default WCMS widgets will only return content authorized for a given user. See the  freemarker tags  section below for information on creating custom widgets that utilize protected content. \n Images and Attachments and Groups \n When creating content the  Owner Group  of the content and the  Group  assigned to the digital asset must match. For example, when creating content with an  Owner Group  of  Administrators  the content creator will be unable to select images and attachments that are assigned a different group. The exception to this is assets with a group of  Free Access . Assets with  Free Access  can be added to protected content. \n Protect Images and Attachments \n Images and attachments uploaded to the CMS can be protected by assigning groups. \n \n Select  Content → Assets  from the left navigation \n Upload your file(s) \n In the provided modal window select the  Group  that you would like to own the asset \n Only users with the assigned  Group  will have the ability to view the asset you've created\n \n The asset will only be available to content with the same  Group  unless the attachment or image has been given a group of  Free Access \n Freemarker Tags and Consuming Protected Resources \n The WCMS provides a set of freemarker tags to assist in consuming protected assets in widgets and pages. The  if-authorized  and  tag-nav  tags can help in rendering page lists and fetching assets. \n The  content  and  content-list  tags also provide the ability to fetch and render protected content and protected lists of content. \n Additionally, the   REST APIs  allow clients to fetch protected pages and assets by group via query parameters. The content REST APIs also include the ability to filter by group and access level. \n"},{title:"Page Management",frontmatter:{},regularPath:"/v6.3/tutorials/cms/page-management.html",relativePath:"v6.3/tutorials/cms/page-management.md",key:"v-0980427e",path:"/v6.3/tutorials/cms/page-management.html",headers:[{level:2,title:"Create a Page",slug:"create-a-page"},{level:2,title:"Create a Page Template",slug:"create-a-page-template"}],lastUpdated:"3/11/2021, 2:36:21 PM",content:' Page Management \n The App Builder provides the capability to publish application pages containing content as well as other Entando components. Page Templates are used to layout the available frames on a page. \n Create a Page \n \n Go to  Pages → Management \n Click  Add \n \n \n You will need to supply at least the following fields: \n \n Title : used for SEO \n Code : must be unique \n Page placement : the location of the Page in the Page Tree \n Owner Group : the Group that has access to the Page \n Page Template : the structure and presentation of the Page \n \n \n \n Click the green  Save and Design  button. This brings you to the Designer section which lets you place widgets into the Page Template frames. \n \n \n \n Add widgets by dragging them from the right column into the desired frame. \n If you select the  Content  widget, its corresponding settings page will be shown. \n \n \n \n Click  Add existing content  to bring up the Content selection view. \n \n \n \n \n In the Search field, you can type the name of the content that you\nwould like to publish. Remember\nthat in order to publish the content on your page, it must first be saved\nand approved. \n \n \n Select the appropriate content item from the list. \n \n \n Press the  Save  button. \n \n \n \n \n \n The title of the selected content item will now be displayed in the widget settings. \n \n \n Press the  Save  button. \n \n \n Click on the  Preview  button to show the page preview with the updated settings. \n \n \n Click on the  Publish  button to publish the page. \n \n \n Click on the  View published page  button to view the published page in your application. \n Create a Page Template \n Page Templates provide the scaffolding of a Page and are constructed using two main elements: \n \n A  JSON configuration  field which lists the set of frames that can be used on a page.\n \n Each item in the frames array represents a frame or slot in the page, characterized by the following values:\n \n pos  - a zero-based position index (starts from zero). This value is used in\nAPIs to address a specific widget on the page. \n descr  - the frame description displayed on Page Design view \n mainFrame  - designates the primary frame in the Page Template \n defaultWidget  - widget code for a default widget to use in this frame. Page Template developers can use this field to provide suggestions on common widgets, e.g. header and footer widgets. \n sketch  - an object with 4 coordinates (x1,x2,y1,y2) to allow the developer to place the widgets in the Page preview. Sketch’s x and y values go from 0 to 11 (similar to columns in Bootstrap), so if you want to place a 2x2 frame at the top left corner of the page, the values would be  x1: 0, x2: 1 y1: 0 y2: 1 . \n \n \n \n \n A  Template  field which uses Freemarker code to setup the HTML page itself.\n \n To add a frame in a specific place of the page, add  <@wp.show frame=0 /> , where frame is the pos variable from the  JSON configuration .  <#assign wp=JspTaglibs["/aps-core"]>  is required at the top of the template to setup the  wp  variable. \n Common code can be shared across pages by using  UX Fragments  and  <@wp.fragment code="\\<FRAGMENT\\_CODE\\>" escapeXml=false /\\> . \n \n \n \n This tutorial prepares a Page Template with two frames on it. \n \n \n Go to  Pages → Templates → Add \n \n \n Enter the following: \n \n \n \n Code: double_frame \n \n Note: dashes are not allowed \n \n \n Name: Double Frame \n JSON Configuration: \n \n { \n   "frames" :   [ \n     { \n       "pos" :   0 , \n       "descr" :   "Frame 1" , \n       "mainFrame" :   false , \n       "defaultWidget" :   null , \n       "sketch" :   { "x1" :   0 ,   "y1" :   0 ,   "x2" :   11 ,   "y2" :   1 } \n     } , \n     { \n       "pos" :   1 , \n       "descr" :   "Frame 2" , \n       "mainFrame" :   false , \n       "defaultWidget" :   null , \n       "sketch" :   { "x1" :   0 ,   "y1" :   2 ,   "x2" :   11 ,   "y2" :   3 } \n     } \n   ] \n } \n \n \n Template: \n \n < #assign  wp = JspTaglibs [ "/aps-core" ] > \n <! DOCTYPE   HTML   PUBLIC   "-//W3C//DTD HTML 4.0 Transitional//EN" > \n < html > \n   < head > \n       < title > < @wp . currentPage param = "title"   /> </ title > \n   </ head > \n   < body > \n     < h1 > < @wp . currentPage param = "title"   /> </ h1 > \n     < div > < @wp . show frame = 0   /> </ div > \n     < div > < @wp . show frame = 1   /> </ div > \n   </ body > \n </ html > \n \n Include the following fragment in the  head  section if you want to make use of the user\'s identity information from Keycloak. \n < @wp . fragment code = "keycloak_auth"  escapeXml = false   /> \n \n \n You should see the  Template preview  reflecting the desired two frame layout. \n Click  Save  to save your template. \n \n'},{title:"Change Default Datasources and Connections",frontmatter:{},regularPath:"/v6.3/tutorials/customize-the-platform/change-default-datasources-and-connections/",relativePath:"v6.3/tutorials/customize-the-platform/change-default-datasources-and-connections/README.md",key:"v-712e7cb8",path:"/v6.3/tutorials/customize-the-platform/change-default-datasources-and-connections/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Create a Docker project for your own base image to Entando's standard base image(s)",slug:"_1-create-a-docker-project-for-your-own-base-image-to-entando-s-standard-base-image-s"},{level:3,title:"2. Customize the standalone.xml/standalone-openshift.xml file using environment variables.",slug:"_2-customize-the-standalone-xml-standalone-openshift-xml-file-using-environment-variables"},{level:3,title:"3. Build your own Docker base image",slug:"_3-build-your-own-docker-base-image"},{level:3,title:"4. Modify your Entando App project to use the new Docker base image",slug:"_4-modify-your-entando-app-project-to-use-the-new-docker-base-image"},{level:3,title:"5. Build and push your custom Docker image",slug:"_5-build-and-push-your-custom-docker-image"},{level:3,title:"6. Deploy your EntandoApp with the correct environment variables",slug:"_6-deploy-your-entandoapp-with-the-correct-environment-variables"}],lastUpdated:"3/24/2021, 9:59:27 AM",content:' Change Default Datasources and Connections \n Purpose \n This tutorial explains how to customize our EAP and Wildfly base Docker images, and then configure the EntandoApp custom resource to use these customizations. \n Requirements \n \n \n The Entando Operator is running in the target names \n \n \n Keycloak and the Entando Cluster Infrastructure have been deployed \n \n \n The required external databases and other services are up and running. \n \n \n Your own custom project as described in  the tutorial \n Steps \n 1. Create a Docker project for your own base image to Entando\'s standard base image(s) \n Create a project, ideally in Git repository, and put the following files in the folder \n 1.1. The standalone.xml/standalone-openshift.xml file of choice \n It is essential for your custom Docker image to use a file from one of the official Entando Docker base images. \n If you intend to use provide your own EAP based image, please use this\n standalone-openshift.xml \nfile. \n If you intend to use provide your own Wildfly based image, please use this\n standalone.xml \nfile. \n Please note that if you create your own base image with a different version of EAP or Wildfly, using these files\nmay have unintended consequences. \n 1.2. Any modules that may be required for your datasource or other connection resource \n If the resource you need to connect to requires some custom classes, such as JDBC drivers, please add these as \na module to Wildfly/EAP. As an example, you can look at our\n Derby database module \nthat Entando uses for embedded databases. Please ensure that the path of the folder containing the jar files reflects\nthe fully qualified name of the module in the module.xml file. \n 1.3 Dockerfile \n In your Dockerfile, please be sure to extend the correct base image, and add the correct configuration file to\nthe correct location in the target image. \n For EAP, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=185:0 ./standalone-openshift.xml /opt/eap/standalone/configuration\n \n For Wildfly, a most basic Dockerfile would look like this: \n FROM entando/entando-eap71-clustered-base:6.1.2\nCOPY --chown=1001:0 ./standalone.xml /wildfly/standalone/configuration\n \n Please take note of the user ownership in these different Dockerfiles. This is quite important as Openshift will\nexpect the user/group ownership to be respected. \n 2. Customize the standalone.xml/standalone-openshift.xml file using environment variables. \n You can now modify your Wildfly/EAP configuration to meet your requirements. Where the configuration could differ\nfrom one environment to a next, we strongly advise using environment variable expressions ( ${env.VAR_NAME} ). The most likely change\nthat would be required in this file is the addition of a datasource. Here is an example of how to add a datasource\nto the datasources subsystem. All the environment variables starting with \'YOURDB\' can be specified from the Docker\ncontainer. \n    ...\n    <subsystem xmlns="urn:jboss:domain:datasources:5.0">\n      <datasources>\n        <datasource jndi-name="${env.YOURDB_JNDI}" enabled="true" use-java-context="true" pool-name="yourDbDataSource" use-ccm="true">\n          <connection-url>${env.YOURDB_URL}</connection-url>\n          <driver>${env.YOURDB_DRIVER}</driver>\n          <security>\n            <user-name>${env.YOURDB_USERNAME}</user-name>\n            <password>${env.YOURDB_PASSWORD}</password>\n          </security>\n        </datasource>\n \n Please take extra care not to remove any lines from these files. This is of particular importance in the case of the\nEAP image as, on startup, scripts in the official EAP look for certain placeholders in this file and populates them\nfrom other environment variables. \n 3. Build your own Docker base image \n You can now build your Docker base image. It is highly recommended that you consider using a dedicated CI/CD build\ntool such as Jenkins X to build the base image and maintain traceability between your source code and the resulting\nDocker image. One possible build command could look like this: \n docker build . -t your-docker-registry.com/your-org/your-base-image:1.0.0 \n 4. Modify your Entando App project to use the new Docker base image \n You can now modify your Entando App project that you have forked as described in the\n relevant tutorial . You would require two changes to the pom.xml file\nof the sample project. \n \n Firstly, you would need to change the variable  server.base.image  to reflect the fully\nqualified URI of your Docker image for EAP and/or Wildfly. For example, if you decided to extend the Wildfly image,\ngo to the Maven profile with the id  wildfly  and change the   server.base.image  to look like this: \n \n <server.base.image>your-docker-registry.com/your-org/your-base-image:1.0.0</server.base.image> \n \n Then you need to change the  <from>  element in the Fabric8 Maven Docker Plugin to reflect this variable.\nNavigate to the first  <image>  element in the pom.xml file. You have found the correct one\nif it contains the following xml: \n \n <from>entando/${server.base.image}:${entando.version}</from> \n Delete the  entando/  prefix and the  :${entando.version}  suffix: \n <from>${server.base.image}</from> \n Please note that, should you still require support for both Wildfly and EAP in your Maven pom, you may need to\nrepeat this exercise for both the  eap  and  wildfly  profiles. \n 5. Build and push your custom Docker image \n Before building your Docker image, it would be a good idea to change the name of the image you want to build. Navigate\nto the previously modified  <image>  element in the Fabric8 Maven Docker Plugin.You can change the  <name>  element\nto reflect your preferred name, e.g. \n <name>your-docker-registry.com/your-org/your-entando-app:1.0.0</name> \n Run: \n mvn clean package -Pwildfly -Pderby \n A new Docker image should now be available named  your-docker-registry.com/your-org/your-entando-app:1.0.0 \n Log into the Docker registry in question and then push the image: \n docker push your-docker-registry.com/your-org/your-entando-app:1.0.0 \n You are now ready to deploy this image. \n 6. Deploy your EntandoApp with the correct environment variables \n The final step is to configure your EntandoApp deployment with the correct environment variables. As is the case with\nall the Entando Custom Resources that result in actual deployments, the property  spec.environmentVariables  will be translated\ninto environment variables on each of the Containers in the Deployment\'s Pod. For an EntandoApp named \'my-app\',\nthe new state of the EntandoApp would could be placed in a file named  my-app.yaml  that would look something like this: \n       kind: "EntandoApp"\n      metadata:\n        name: "my-app"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        customServerImage: your-docker-registry.com/your-org/your-entando-app:1.0.0\n        ingressPath: /your-entando-app\n        environmentVariables:\n          - name: YOURDB_JNDI\n            value: java/your-ds\n          - name: YOURDB_URL\n            value: "jdbc:postgresql://somehost.com:5432/mydb"\n          - name: YOURDB_DRIVER\n            value: postgresql\n          - name: YOURDB_USERNAME\n            value: my_user\n          - name: YOURDB_PASSWORD\n            value: mypassword\n      entandoStatus:\n        entandoDeploymentPhase: requested\n\n \n Notice how this Custom Resource specifies a  parameter  for each environment variable that was referenced from the\n standalone.xml  file referenced earlier. \n To apply the changes to your deployment, change the  entandoStatus.entandoDeploymentPhase  property to requested and\napply the file: \n kubectl apply -f my-app.yaml\n \n '},{title:"Adding a new API to the core app",frontmatter:{},regularPath:"/v6.3/tutorials/customize-the-platform/add-rest-api.html",relativePath:"v6.3/tutorials/customize-the-platform/add-rest-api.md",key:"v-f53df298",path:"/v6.3/tutorials/customize-the-platform/add-rest-api.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Adding a new API to the core app \n Prerequisites \n \n \n Java 11 \n \n \n maven \n Overview \n This guide will take you through adding a new REST API to the Entando\ncore app. In some cases it is better to add new APIs to the core rather\nthan creating a new microservice. Some example cases where adding new\nAPIs to the core is recommended are: \n \n \n When extending or adding functionality to the WCMS \n \n \n When you have a simple use case requiring persistence that is\nspecific to only the application you’re working within \n \n \n When exposing configurations that are needed by the portal-ui during\npage rendering \n \n \n For small changes that don’t warrant a full stand-alone microservice \n \n \n You can build widgets and micro frontends that take advantage of these\nAPIs in the same way that your micro-frontends can invoke APIs exposed\nby other services. \n Tutorial \n Creating a controller and services \n \n \n Create a new java package in the project using your favorite IDE at\nthe path  org.entando.training . \n \n \n Under that package add packages for  controllers  and  services . \n \n \n Create a class called  DemoController.java  from the\ntraining package into the controllers package. \n \n This is a normal Spring rest controller and it will be\ndiscovered by annotations. \n \n \n \n Copy  DemoService.java  from the\ntraining package into the services package. \n \n This is a normal Spring service that will be autowired into the\ncontroller. The data in this service is hardcoded but this is\nwhere you can wire in external services or other parts of the\nEntando architecture to fetch the data. \n \n \n \n Copy  commonConfig.xml  to\n src/main/resources/spring/aps/managers . \n \n \n The goal is to enable package scanning for annotation driven\nspring services. This includes the package scan for your package\ndefined above. If you want to scan another package, then you\nneed to add another path to this file. This is the only spring\nXML you will need to change if you want to build annotation\ndriven beans in Entando. \n \n \n See also web.xml for deeper details. \n \n \n \n \n Review the code and annotations in the controller to understand how\nthe APIs are protected and integrated. \n \n \n @RestAccessControl  is a custom Entando annotation that can be used\nto restrict APIs by role. \n \n The rest of the annotations are normal Spring annotations. \n \n \n \n Restart your app using jetty. \n \n \n if you get an error add the entries below to\n src/main/conf/systemParams.properties  This is temporary \nParameters for Argon2 algorithm encryption\nalgo.argon2.type=ARGON2i\nalgo.argon2.hash.length=32\nalgo.argon2.salt.length=16\nalgo.argon2.iterations=4\nalgo.argon2.memory=65536\nalgo.argon2.parallelism=4\nalgo.default.key=changeit\n \n \n \n \n \n Go to Swagger \n \n \n Find the demo-controller and try your new endpoints out using\nswagger \n \n \n"},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/v6.3/tutorials/customize-the-platform/connecting-external-db.html",relativePath:"v6.3/tutorials/customize-the-platform/connecting-external-db.md",key:"v-f24c0590",path:"/v6.3/tutorials/customize-the-platform/connecting-external-db.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando applicaiton is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n See  Databases  for other details on Entando databases. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Tutorial: Extending the App Builder",frontmatter:{},regularPath:"/v6.3/tutorials/customize-the-platform/extend-app-builder.html",relativePath:"v6.3/tutorials/customize-the-platform/extend-app-builder.md",key:"v-9ab51f54",path:"/v6.3/tutorials/customize-the-platform/extend-app-builder.html",headers:[{level:2,title:"Creating a Basic Application",slug:"creating-a-basic-application"},{level:2,title:"Understanding the Stand Alone Environment",slug:"understanding-the-stand-alone-environment"},{level:2,title:"Customizing the Menu",slug:"customizing-the-menu"},{level:2,title:"Customizing the menu labels",slug:"customizing-the-menu-labels"},{level:2,title:"Customizing the Routes",slug:"customizing-the-routes"},{level:2,title:"state",slug:"state"},{level:2,title:"Customizing the Reducers",slug:"customizing-the-reducers"},{level:2,title:"userList",slug:"userlist"},{level:3,title:"connecting to the store",slug:"connecting-to-the-store"},{level:2,title:"Page Models",slug:"page-models"},{level:3,title:"Connecting to the Store",slug:"connecting-to-the-store-2"},{level:2,title:"Adding the API Calls",slug:"adding-the-api-calls"},{level:2,title:"Creating the Thunk",slug:"creating-the-thunk"},{level:2,title:"changing the mapDispatchToProps in the containers",slug:"changing-the-mapdispatchtoprops-in-the-containers"},{level:2,title:"Updating the List components",slug:"updating-the-list-components"},{level:2,title:"clear the default value of the reducer",slug:"clear-the-default-value-of-the-reducer"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Tutorial: Extending the App Builder \n Apps for the Entando App Builder are developed as standalone\napplications which can be run using  npm start  in standalone mode. \n Each application should be deployed in npm using the  @entando \nnamespace and will export into their dist folder several items used by\nthe App Builder when integrating it into the full application. \n Creating a Basic Application \n To create a basic application, use the  entando\nfpg  running the\n npx @entando/fpg ab-app <appName>  command. \n the  appName  should only contain alphanumeric characters and\nunderscores, and should begin with a letter. \n This will create inside the working directory, a boilerplate app-builder\napp in a directory named  <appName>  argument. \n i.e. \n using the command  npm @entando/fpg ab-app testing  inside your home\ndirectory, a directory named  testing  will be created containing the\napp. \n All dependencies will already be installed allowing you to  cd  inside\nthe project directory and run  npm start  to start the app running. \n Understanding the Stand Alone Environment \n Each app for the App Builder, can run in both a stand alone mode and an\nintegrated mode. Using  npm start  will use standalone mode. \n In this environment you’ll be looking at the user interface of the app\ninside a default page. This page, which includes a default menu, will\nnot be exported and therefore can be customized. \n To better understand which elements and components are being exported to\nApp Builder, it is best to understand the anatomy of the app. \n Exports \n Each app will have a  babel.js  export file similar to: \n      import  menu  from   'ui/common/LinkMenu' ; \n     import   {  cms  as  state  }   from   'state/rootReducer' ; \n     import   {  routes ,  routesDir  }   from   'ui/App' ; \n     import  en  from   'locales/en' ; \n     import  it  from   'locales/it' ; \n\n     const  testing  =   { \n      id :   'testing' , \n      menu , \n      state , \n      routes , \n      routesDir , \n      locales :   { \n        en , \n        it , \n       } , \n     } ; \n\n     export   default  testing ; \n id: is the app id. \n This parameter is used by App Builder to differentiate all integrated\napps. \n menu: is a React component containing all the menu elements. \n These elements are used inside the standalone environment and inside the\nintegrated environment as a second level menu. The boilerplate app\ncontains a basic menu. \n      import  React  from   'react' ; \n     import   {  LinkMenuItem  }   from   '@entando/menu' ; \n     import   {  FormattedMessage  }   from   'react-intl' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-SECTION_ID\" \n          label = { < FormattedMessage id = \"testing.menu.SECTION_NAME\"  defaultMessage = \"SECTION_NAME\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n\n     export   default  LinkMenu ; \n Customizing the Menu \n For this exercise, we will create two links inside the menu. The first\nwill link to a page listing all the users inside the entando instance.\nThe second will list all the existing page templates inside the Entando\ninstance. \n For this example we’re using existing APIs from the Entando core just\nfor simplicity, you can instead call any API or data source. \n In your app project, open  src/ui/common/LinkMenu.js  and update the\nconst to the code below. \n      const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"testing.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"testing.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = '/use/const/here/imported/from/routes' \n         / > \n       < / > \n     ) ; \n \n it is important that both the  <LinkMenuItem>  id property and the\n`<FormattedMessage>`properties inside label have the correct values\nassigned, i.e.: \n the LinkMenuItem id will be  menu-userList  while the FormattedMessage\nid will be  testing.menu.userList  and the defaultMessage will be\n User List . \n locales \n The locales files are objects that contain all of the i18n locales of\nthe app. \n By default the boilerplate contains both the english and italian i18n\nfiles. \n In your app project in  src/locales/en.js  and  src/locales/it.js  you\ncan see your labels. \n      export   default   { \n      locale :   'en' , \n      messages :   { \n         'testing.title' :   '' , \n         'testing.label.errors' :   '' , \n         'testing.label.cancel' :   '' , \n         'testing.chooseAnOption' :   '' , \n         'testing.tip' :   '' , \n         'testing.new' :   '' , \n         'testing.save' :   '' , \n         'testing.saveAndApprove' :   '' , \n         'testing.unpublish' :   '' , \n         'testing.setContentAs' :   '' , \n         'testing.cancel' :   '' , \n         'testing.saveAndContinue' :   '' , \n         'testing.stickySave.status' :   '' , \n         'testing.stickySave.lastAutoSave' :   '' , \n       } , \n     } ; \n \n While running in standalone mode the boilerplate does not offer a way\nfor the user pick a locale, but both will be loaded inside app-builder\nand will be consumed as intended by it, using the correct one based on\nthe user-picked language. \n It is of course possible to change the standalone app to give the user\nthe option to choose the locale in here as well, but this is not\nsomething will be covering in this tutorial. \n Customizing the menu labels \n To customize the existing menu labels, we’ll add the new label ids\ninside both the english and Italian locale files: \n \n Note \n If you named your app something besides  testing  you’ll need to fix\nthese tags to match the name of your app. \n \n      ... \n    messages :   { \n         ... \n         'testing.menu.userList' :   'List of Users' , \n         'testing.menu.pageModelList' :   'Page Models' , \n         ... \n     } , \n     ... \n \n The key in the messages object matches the id of the\n`<FormattedMessage>`component we placed inside the menu, while its\nvalue is the actual string that will be displayed depending on the\ncurrently active language. \n Routes and RoutesDir \n Both of these elements are imported from  src/ui/App.js . The first one\nis a collection of actual  <Route>  components, and the second one is an\nobject containing each route data, i.e.: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n     ] ; \n \n The constant  ROUTE_TESTING  is imported from  src/app-init/routes.js \n Customizing the Routes \n Next we will create the two routes for the two links we have created by\ncreating first the two constants needed. \n In your IDE open  src/app-init/routes.js \n      export   const   ROUTE_TESTING   =   '/testing' ; \n     export   const   ROUTE_USER_LIST   =   '/testing/user-list' ; \n     export   const   ROUTE_PAGE_MODELS   =   '/testing/page-models' ; \n \n \n Note \n Change the value of  testing  to what you selected for the name of\nyour App extension. \n \n The value of each constant will be the path of the route. It is\nimportant that each route is a subroute of the id of the app itself,\notherwise this may cause name collision when running inside the\nintegrated environment of app-builder. \n Both routes are next imported inside  App.js : \n Update the imports with your new ROUTE tags. \n      import   { \n       ROUTE_TESTING , \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n \n and then add to the  routesDir  constant: \n      export   const  routesDir  =   [ \n       { \n        path :   ROUTE_TESTING , \n        component :   < > app component < / > , \n       } , \n       { \n        path :   ROUTE_USER_LIST , \n         render :   ( )   =>   < > user list < / > , \n       } , \n       { \n        path :   ROUTE_PAGE_MODELS , \n         render :   ( )   =>   < > page models < / > , \n       } , \n     ] ; \n \n Next, import the routes constants inside  LinkMenu.js  and change\naccordingly the  to  property of the  <LinkMenuItem>  component: \n      ... \n     import   { \n       ROUTE_USER_LIST , \n       ROUTE_PAGE_MODELS , \n     }   from   'app-init/routes' ; \n\n     const   LinkMenu   =   ( )   =>   ( \n       < > \n         < LinkMenuItem\n          id = \"menu-userList\" \n          label = { < FormattedMessage id = \"tatata.menu.userList\"  defaultMessage = \"User List\"   / > } \n          to = { ROUTE_USER_LIST } \n         / > \n         < LinkMenuItem\n          id = \"menu-pageModelList\" \n          label = { < FormattedMessage id = \"tatata.menu.pageModelList\"  defaultMessage = \"Page Model List\"   / > } \n          to = { ROUTE_PAGE_MODELS } \n         / > \n       < / > \n     ) ; \n     ... \n \n Next clicks on the links in the menu will change the routes and display\nthe content defined in the  App.js  file. \n state \n The state in src/babel.js is the combined reducer of the app, the\nrootReducer.js contains the combined reducer of the app and exports it,\nbut also contains the entire reducer of the app when running in\nstandalone mode. \n      export   const  testing  =   combineReducers ( { \n       // implement here your app specific reducers \n     } ) ; \n\n     export   default   combineReducers ( { \n      apps :   combineReducers ( {  testing  } ) , \n      api , \n      currentUser , \n      form , \n      loading , \n      locale , \n      messages , \n      modal , \n      pagination , \n     } ) ; \n \n The app specific reducers are stored inside the  apps  object, this is\ndone to avoid possible name collisions with any reducer stored inside\napp-builder when running the app in integrated mode. \n Customizing the Reducers \n Next we will be creating the two reducers for the user list and page\nmodels. They will be created inside two new directories\n src/state/apps/testing/userList/  and\n src/state/apps/testing/pageModels . The  types.js  files will contain\nthe two action types that we’ll need. \n userList/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_USERS = 'apps/testing/add-users';\n \n pageModels/types.js \n // eslint-disable-next-line import/prefer-default-export\nexport const ADD_PAGE_MODELS = 'apps/testing/page-models/add-page-models';\n \n The value of both constants contain the whole namespace\n apps/testing/REDUCER  this is done to avoid any possible name collision\nwhen running the app in integrated mode. \n Next create both actions files: \n userList/actions.js \n      import   { \n       ADD_USERS , \n     }   from   'state/apps/testing/userList/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addUsers   =   users   =>   ( { \n      type :   ADD_USERS , \n      payload :  users , \n     } ) ; \n \n pageModels/actions.js \n      import   { \n       ADD_PAGE_MODELS , \n     }   from   'state/apps/testing/pageModels/types' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const   addPageModels   =   pageModels   =>   ( { \n      type :   ADD_PAGE_MODELS , \n      payload :  pageModels , \n     } ) ; \n \n then the selectors: \n userList/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getUserList   =   state   =>  state . apps . testing . userList ; \n     export   const  getList  =   createSelector ( getUserList ,   userList   =>  userList . list ) ; \n \n pageModels/selectors.js \n      import   {  createSelector  }   from   'reselect' ; \n\n     export   const   getPageModels   =   state   =>  state . apps . testing . pageModels ; \n     export   const  getList  =   createSelector ( getPageModels ,   pageModels   =>  pageModels . list ) ; \n \n And finally the reducers. The default state is going to contain some\nsample data for us to display. \n userList/reducer.js \n      import   {   ADD_USERS   }   from   'state/apps/testing/userList/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'active' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'admin' , \n            email :   'admin@entando.com' , \n           } , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n          lastLogin :   '2018-01-08 00:00:00' , \n          lastPasswordChange :   '2018-01-08 00:00:00' , \n          status :   'disabled' , \n          passwordChangeRequired :   true , \n          profileAttributes :   { \n            fullName :   'User Name' , \n            email :   'user1@entando.com' , \n           } , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_USERS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n pageModels/reducer.js \n      import   {   ADD_PAGE_MODELS   }   from   'state/apps/testing/pageModels/types' ; \n\n     const  defaultState  =   { \n      list :   [ \n         { \n          code :   'home' , \n          descr :   'Home Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n         { \n          code :   'service' , \n          descr :   'Service Page' , \n          configuration :   { \n            frames :   [ \n               { \n                pos :   0 , \n                descr :   'Navbar' , \n                sketch :   { \n                  x1 :   0 , \n                  y1 :   0 , \n                  x2 :   2 , \n                  y2 :   0 , \n                 } , \n               } , \n               { \n                pos :   1 , \n                descr :   'Navbar 2' , \n                sketch :   { \n                  x1 :   3 , \n                  y1 :   0 , \n                  x2 :   5 , \n                  y2 :   0 , \n                 } , \n               } , \n             ] , \n           } , \n          template :   '<html></html>' , \n         } , \n       ] , \n     } ; \n\n     const   reducer   =   ( state  =  defaultState ,  action  =   { } )   =>   { \n       switch   ( action . type )   { \n         case   ADD_PAGE_MODELS :   { \n           return   {   ... state ,  list :  action . payload  } ; \n         } \n\n         default :   return  state ; \n       } \n     } ; \n\n     export   default  reducer ; \n \n Last, we can add the two reducers just created to the\n src/state/rootReducer.js \n      ... \n     import  userList  from   'state/apps/testing/userList/reducer' ; \n     import  pageModels  from   'state/apps/testing/pageModels/reducer' ; \n\n     export   const  testing  =   combineReducers ( { \n      pageModels , \n      userList , \n     } ) ; \n     ... \n \n we will now be able to see with the  reduxDevTools  in our browser. To\nview this state in your reduxDevTools go to: \n State -→ apps -→ testing -→ pageModels  and\n State -→ apps -→ testing -→ userList \n Creating the UI Components \n At this point, both routes created should be rendering a simple string.\nWe will next create the actual component that will be rendered inside\nthe page. \n userList \n Inside  src/ui/userList/  create the  List  component. Create the\n userList  directory and  List.js  file in that directory. \n      import  React  from   'react' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( )   =>   { \n       const  data  =   [ \n         { \n          username :   'admin' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n         { \n          username :   'user1' , \n          registration :   '2018-01-08 00:00:00' , \n         } , \n       ] ; \n\n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n               < tr > \n                 < td > username < / td > \n                 < td > registration < / td > \n               < / tr > \n             < / thead > \n             < tbody > \n               { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Next, change the route inside  src/ui/App.js . Add the import below and\nupdate the component to reference the List component created in the\nprior step. \n      ... \n     import  List  from   'ui/userList/List' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  List , \n       } , \n     ... \n \n The table will now display correctly when clicking on the menu item. \n connecting to the store \n Next let’s connect the component to the store to get the data from the\nreducer. \n The first step is creating the  ListContainer.js  next to the  List \ncomponent file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/userList/selectors' ; \n\n     import  List  from   'ui/userList/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The List\nfile should now look like this: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n     export   default  List ; \n \n Make sure that you remove the predefined  data  const since the data\nwill now be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js .\nUpdate the import to the container and update the component in\n ROUTE_USER_LIST  to the new ListContainer. \n      ... \n     import  ListContainer  from   'ui/userList/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_USER_LIST , \n        component :  ListContainer , \n       } , \n     ... \n \n Go back to your app. We will now see the data inside the table\nreflecting the content of the storage. \n Page Models \n inside  src/ui/pageModels/  we are going to create the  List  component \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . username } < / td > \n           < td > { row . registration } < / td > \n         < / tr > \n       ) ) ; \n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > username < / td > \n               < td > registration < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n\n     export   default  List ; \n \n Next change the route inside  src/ui/App.js \n      ... \n     import  ListPageModels  from   'ui/pageModels/List' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  ListPageModels , \n       } , \n     ... \n \n The table will now be displayed correctly when clicking on the menu\nitem. \n Connecting to the Store \n Next, connect the component to the store to get the data from the\nreducer. \n The very first thing we’ll do is create the  ListContainer.js  next to\nthe  List  component file. \n      import   {  connect  }   from   'react-redux' ; \n     import   {  getList  }   from   'state/apps/testing/pageModels/selectors' ; \n\n     import  List  from   'ui/pageModels/List' ; \n\n     export   const   mapStateToProps   =   state   =>   ( { \n      data :   getList ( state ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n       null , \n     ) ( List ) ; \n \n And then update the List component to receive the property. The whole\nList component will have this content: \n      import  React  from   'react' ; \n     import  PropTypes  from   'prop-types' ; \n\n     import   { \n      Grid , \n      TablePfProvider , \n     }   from   'patternfly-react' ; \n\n     const   List   =   ( {  data  } )   =>   { \n       const  tr  =  data . map ( row   =>   ( \n         < tr > \n           < td > { row . code } < / td > \n           < td > { row . descr } < / td > \n         < / tr > \n       ) ) ; \n\n\n       return   ( \n         < Grid fluid > \n           < TablePfProvider\n            striped\n            bordered\n            hover\n           > \n             < thead > \n             < tr > \n               < td > code < / td > \n               < td > descr < / td > \n             < / tr > \n             < / thead > \n             < tbody > \n             { tr } \n             < / tbody > \n           < / TablePfProvider > \n         < / Grid > \n       ) ; \n     } ; \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n     } ; \n     export   default  List ; \n \n Next make sure that you remove the predefined  data  const since the\ndata will be coming from the reducer, on top of defining PropTypes rules\nfor validating and giving a default for the injected property  data . \n Once complete, update the component used in the route inside  App.js \n      ... \n     import  PageModelsListContainer  from   'ui/pageModels/ListContainer' ; \n     ... \n       { \n        path :   ROUTE_PAGE_MODELS , \n        component :  PageModelsListContainer , \n       } , \n     ... \n \n You will now see the data inside the table reflecting the content of the\nstorage. \n Connecting the app to an Entando core instance \n By default the app is using mocks and not connecting to any Entando core\ninstance. \n Because the app is making use of  @entando/apimanager  we can easily\nchange this by setting up two  .env  variables inside the  .env  file in\nthe project root: \n     REACT_APP_DOMAIN=http://localhost:8080/entando-app\n    REACT_APP_USE_MOCKS=false\n \n The  REACT_APP_DOMAIN  must pointing towards the domain and container\nwhere the Entando instance is running and  must not  contain trailing\nslashes. \n Once this is done to make the change happen we will have to stop the app\nusing  ctrl + c  and re run it with  npm start . \n Now the toast stating  This application is using mocks  won’t be popping\nup anymore. \n You can make sure that the configuration is correct by looking at the\nnetwork section in the browser dev tools. By default the app\nautomatically makes an admin login against a plain Entando instance to\nauthenticate the user and to be able to consume any protected api. \n This is not an ideal scenario and it is meant to be used only for\ndebugging purposes for many reasons: \n \n \n the username and password should never be hardcoded in your app \n \n \n if authentication is required the user should be the one performing\nthe login action \n \n \n the plain default passwords in use won’t be useful against a proper\nproduction instance of Entando \n Adding the API Calls \n We are now going to add api calls for both users and page models to\nretrieve the data live instead of relying on our store’s default state. \n Inside  src/api  create the  users.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   ( \n       makeRequest ( \n         { \n          uri :   ` /api/users ${ params } ` , \n          method :   METHODS . GET , \n          mockResponse :   { } , \n          useAuthentication :   true , \n         } , \n        page , \n       ) \n     ) ; \n \n and then create the  pageModels.js  file: \n      import   {  makeRequest ,   METHODS   }   from   '@entando/apimanager' ; \n\n     // eslint-disable-next-line import/prefer-default-export \n     export   const  getPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   makeRequest ( { \n      uri :   ` /api/pageModels ${ params } ` , \n      method :   METHODS . GET , \n      mockResponse :   { } , \n      useAuthentication :   true , \n     } ,  page ) ; \n Creating the Thunk \n In order to use the api call we next create a thunk action, which is a\nredux action with side effects, like an API call. \n inside the  src/state/apps/testing/userList/actions.js  file we are\ngoing to add the new action: \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getUsers , \n     }   from   'api/users' ; \n     ... \n\n     // thunks \n\n     export   const  fetchUsers  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getUsers ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( json )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addUsers ( json . payload ) ) ; \n             }   else   { \n               dispatch ( addErrors ( json . errors . map ( err   =>  err . message ) ) ) ; \n             } \n             resolve ( ) ; \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Next do the same inside  src/state/apps/testing/pageModels/actions.js : \n      ... \n     import   {  addErrors  }   from   '@entando/messages' ; \n     import   { \n      getPageModels , \n     }   from   'api/pageModels' ; \n     ... \n\n     // thunks \n\n     export   const  fetchPageModels  =   ( page  =   {  page :   1 ,  pageSize :   10   } ,  params  =   '' )   =>   dispatch   =>   ( \n       new   Promise ( ( resolve )   =>   { \n         getPageModels ( page ,  params ) . then ( ( response )   =>   { \n          response . json ( ) . then ( ( data )   =>   { \n             if   ( response . ok )   { \n               dispatch ( addPageModels ( data . payload ) ) ; \n               resolve ( ) ; \n             }   else   { \n               dispatch ( addErrors ( data . errors . map ( err   =>  err . message ) ) ) ; \n               resolve ( ) ; \n             } \n           } ) ; \n         } ) . catch ( ( )   =>   { } ) ; \n       } ) \n     ) ; \n \n Now with two exports, it is safe to remove the\n eslint-disable-next-line  comment on line 5 of both files. \n changing the mapDispatchToProps in the containers \n Next, in order to pass the newly created thunk to both List components,\nwe’ll update the containers accordingly, as: \n src/ui/userList/ListContainer.js \n      ... \n     import   {  fetchUsers  }   from   'state/apps/testing/userList/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchUsers ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n \n src/ui/pageModels/ListContainer.js \n      ... \n     import   {  fetchPageModels  }   from   'state/apps/testing/pageModels/actions' ; \n     ... \n     export   const   mapDispatchToProps   =   dispatch   =>   ( { \n       fetch :   ( )   =>   dispatch ( fetchPageModels ( ) ) , \n     } ) ; \n\n     export   default   connect ( \n      mapStateToProps , \n      mapDispatchToProps , \n     ) ( List ) ; \n Updating the List components \n Both List components were simple components with only a  render  method,\ntherefore could be declared as simple constants. \n Next we will fetch data during the  componentDidMount  life cycle event\nwhich will require we turn the constant into a class on top of changing\nthe PropTypes to add the new fetch method passed down to the component. \n src/ui/userList/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . username } < / td > \n             < td > { row . registration } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > username < / td > \n                   < td > registration < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n \n src/ui/pageModels/List.js \n      import  React ,   {  Component  }   from   'react' ; \n     ... \n     class   List   extends   Component   { \n       componentDidMount ( )   { \n         const   {  fetch  }   =   this . props ; \n         fetch ( ) ; \n       } \n\n       render ( )   { \n         const   {  data  }   =   this . props ; \n         const  tr  =  data . map ( row   =>   ( \n           < tr > \n             < td > { row . code } < / td > \n             < td > { row . descr } < / td > \n           < / tr > \n         ) ) ; \n\n         return   ( \n           < Grid fluid > \n             < TablePfProvider\n              striped\n              bordered\n              hover\n             > \n               < thead > \n                 < tr > \n                   < td > code < / td > \n                   < td > descr < / td > \n                 < / tr > \n               < / thead > \n               < tbody > \n                 { tr } \n               < / tbody > \n             < / TablePfProvider > \n           < / Grid > \n         ) ; \n       } \n     } \n\n    List . propTypes  =   { \n      data :  PropTypes . arrayOf ( PropTypes . shape ( { } ) ) , \n      fetch :  PropTypes . func , \n     } ; \n\n    List . defaultProps  =   { \n      data :   [ ] , \n       fetch :   ( )   =>   { } , \n     } ; \n clear the default value of the reducer \n Now we should be fetching data from the server, therefore we can safely\nmake the list key in the  defaultState  object an empty array: \n src/state/apps/testing/userList/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n \n src/state/apps/testing/pageModels/reducer.js \n      ... \n     const  defaultState  =   { \n      list :   [ ] , \n     } ; \n     ... \n adding additional dependencies \n It may be necessary to set additional dependencies for your project. If\nthe need arises, it is important to remember a few rules: \n Only actual dependencies that are not already included in  app-builder \ncan be added as pure dependencies. Every other dependency must either be\na  devDependency  or  peerDependency . \n If you are not careful you may end up with duplicated dependencies that\n will  result in errors manifesting themselves when running the app\ninside App Builder. \n running the app in integrated mode within App Builder \n After running  npm install  in the App Builder, the user can run the\n npm run app-install <appId>  command to install the app. \n This command will trigger a download of the app from npm and the\ninstallation of its component within App Builder. After the installation\nprocess is complete, it will be possible to either  npm start  or\n npm build  App Builder. \n To install a dev app, like the one developed in this tutorial which have\nnot been previously published on npm, you will need to use additional\nflags and will have to run a few additional commands. \n Before running the Install command  make sure that you have\nuninstalled all existing peer and dev dependencies to avoid collision\nwith app builder. To do so, from the app builder app directory\n( testing , in this tutorial) just run in the correct order the\nfollowing commands: \n npm run babel \n npm i --only=production \n The first will create the dist directory that will be needed by App\nBuilder while the second one will uninstall anything but production\ndependencies. \n Next, from the App Builder directory, run the install command with these\nadditional flags: \n \n \n -d  specify the relative path where the app is installed. When\nusing this flag the appId should be the normalized app name, without\nthe  @entando/  prefix. \n \n \n -p  specify the package name if it is different from the appId \n \n \n to use flags you will have to use the double dash in the command: \n npm run app-install —  cms -d ../testing -p @entando/testing \n the value in the  -p  flag should always match the actual name of the\napp that is going to be installed inside App Builder . You can check\nyour app name inside the  package.json  file of your app. \n If you experience problems after running the build command delete the\n node_modules  directory before running the second command. \n"},{title:"Tutorial: Invoking Entando Core APIs",frontmatter:{},regularPath:"/v6.3/tutorials/customize-the-platform/invoking-api.html",relativePath:"v6.3/tutorials/customize-the-platform/invoking-api.md",key:"v-04fefc4a",path:"/v6.3/tutorials/customize-the-platform/invoking-api.html",headers:[{level:2,title:"General Overview",slug:"general-overview"},{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Set up a Postman environment",slug:"_1-set-up-a-postman-environment"},{level:3,title:"2. Get an access token",slug:"_2-get-an-access-token"},{level:3,title:"2. Prepare a generic API request",slug:"_2-prepare-a-generic-api-request"},{level:2,title:"QE ready APIs",slug:"qe-ready-apis"},{level:2,title:"Notes on QE requests collections structure",slug:"notes-on-qe-requests-collections-structure"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Tutorial: Invoking Entando Core APIs \n General Overview \n Entando supports Swagger and it is accessible, if activated, from its\nweb interface from the base application URL at /api/swagger-ui.html. A\ncomplete list of all available core APIs can be obtained from Swagger. \n Core APIs can be invoked directly from Swagger or from any other\nsuitable tool, i.e., curl or Postman are two common ones. Postman has\nbeen extensively used in API testing and automated API testing because\nof the possibilities it offers and it is the suggested tool. \n All Entando core APIs are accessible from the base URL, for example:\nlocalhost:8080/entando-de-app/api. For example, the Page Controller will\nbe available under /pages from the Base URL (i.e.\nlocalhost:8080/entando-de-app/api/pages), or the Page Template Controller\nwill available under /pageModels (i.e.\nlocalhost:8080/entando-de-app/api/pageModels) and so on. \n Before being able to perform any API request, we will first need to\nobtain an  authorization token , that is achieved with a specific POST\nrequest sent to the oauth/token endpoint, after successful\nauthentication, an access token is returned which grants access to all\nAPI endpoints and actions for which the authenticated user has defined\nprivileges. \n (Refer to User Management Roles for details) \n The best way to proceed in case of extensive testing with APIs with\nPostman, is to set up an environment and define a variable that will\nkeep the access token saved from the POST request to /oauth/token. \n Purpose \n Set up an environment ready to invoke Entando core APIs \n Requirements \n To complete this tutorial you will need: \n \n \n Postman \n \n \n A running Entando 6 instance \n Steps \n 1. Set up a Postman environment \n Create a new Postman environment and define the following variables: \n access_token: (no value)\nrefresh_token: (no value)\nurl: URL of your application (i.e. http://localhost:8080/entando-de-app)\n \n Be careful with the URL variable and make sure you do not have a\ntrailing slash. \n Set Postman to use this environment. \n 2. Get an access token \n Getting an access token is a prerequisite to be able to invoke any API.\nThe following is the required activity. \n \n \n create a Postman collection, name it for example "Access Token" \n \n \n create a new POST request with the following parameters: \n \n \n \n URL field\n{{url}}/api/oauth/token\n \n Note that we are calling the "url" environmental variable for\nconvenience. \n Autorization section\n   Type: Basic Auth\n   Username: (a valid Entando consumer must be defined in Entando) (Refer to appropriate documentation on how to do that) (i.e. appbuilder)\n   Password: (password of the defined consumer) (i.e. appbuilder_secret)\n\nHeaders section\n    Content-Type: application/x-www-form-urlencoded\n\nBody section\nSelect from the radio button the option: x-www-form-urlencoded\n    username: (valid Entando user (i.e. admin))\n    password: (password of the valid user)\n    grant_type: password\n \n The tests section is convenient as we can then set any new API request\nin such a way to make use of that access token. The first line of code\ndefines a variable called "data", which hosts the JSON parsed\nresponseBody from the POST request just sent to /oauth/token; The second\nline sets the environment variable "access_token" to the value returned\nby the POST request. \n Tests section\n    var data = JSON.parse(responseBody);\n    postman.setEnvironmentVariable("access_token", data.access_token);\n \n Launch the POST request to test it, and if successful, you should get a\nresponse like this: \n {\n    "access_token": "b96096493a40b1a7364bd54a6ffb609b",\n    "token_type": "bearer",\n    "refresh_token": "79ff84062b5dc13663961a833b0788f9",\n    "expires_in": 3599\n}\n \n also if you open in edit the Postman environment, you should see that\nthe access_token and the refresh_token variables values have been\nupdated. \n 2. Prepare a generic API request \n Create a new request with the following parameters: \n Authorization section: Inherit auth from parent\n\nHeaders section:\n create the key Authorization with Value: Bearer{{access_token}}\n create the key Content-Type with Value: application/json\n \n Select the appropriate method (GET, DELETE, POST etc.) for your request\nand fill up the URL with appropriate values i.e.\n(localhost:8080/entando-de-app/api/pages) then add to the Body section,\nif needed, the appropriate payload in JSON format, remember to select\nraw and JSON (application/json). \n QE ready APIs \n QE has developed a set of collection requests to automate API testing,\nexamples of that are available on github at\n https://github.com/entando/entando-QE/tree/master/postman_API . \n To use them ,first git clone the project and use the built in Postman\nimporting features. \n Import first the Postman Environment file which can be found under the\nenvironment folder. When imported, from Postman, open in edit that\nenvironment and change the "url" variable to the appropriate value for\nyour specific installation, i.e  http://localhost:8080/entando-de-app/ \nand save it. \n Import from Postman the collections you would like to use and they will\nbecome available in the Postman collections Panel ready to be run. \n Notes on QE requests collections structure \n Each collection is so designed to test a particular use case i.e.\n"Delete an existent page", "Delete a page which has children" etc. \n By design each QE Postman collection is: \n \n \n indipendent (does not require other collections) \n \n \n general (does not make any assumption on the specific Entando\napplication) \n \n \n can be run automatically, with newman, please refer to\n https://github.com/entando/entando-QE  for details \n \n \n Following those requirements, each collection will need to "prepare" the\nenvironment for the actual test. That is achieved by using specific\nrequests, called "helpers", and their only purpose is to create/delete\nall the needed objects. \n Another class of helpers is used to check the persistence of the actions\nperformed by the APIs, i.e. check that after a DELETE, something really\nhas been deleted. \n The request that implements the use case, we can call it main request,\ndoes not contain the word "HELPER" in its name, and it is the only one\ninside a given collection. \n Because collections are designed primarily to run automatically, we have\ndone extensive use of collection variables, so variables like the API\nURL, object names, object codes or payloads are usually defined as a\ncollection variable and can be accessed by all requests inside the\ncollection. \n Conclusion \n This guide let you start invoking Entando 6 APIs \n'},{title:"Business Objective",frontmatter:{},regularPath:"/v6.3/tutorials/customize-the-platform/pda-tutorial.html",relativePath:"v6.3/tutorials/customize-the-platform/pda-tutorial.md",key:"v-d9a24a5c",path:"/v6.3/tutorials/customize-the-platform/pda-tutorial.html",headers:[{level:2,title:"Micro Frontend",slug:"micro-frontend"},{level:2,title:"Process Automation Manager (PAM)",slug:"process-automation-manager-pam"},{level:2,title:"Business Process Modeling Notation (bpmn)",slug:"business-process-modeling-notation-bpmn"},{level:2,title:"Decision Model and Notation (dmn)",slug:"decision-model-and-notation-dmn"},{level:2,title:"Back End for Front End (BFF)",slug:"back-end-for-front-end-bff"},{level:2,title:"Task List",slug:"task-list"},{level:3,title:"PAM Implementation",slug:"pam-implementation"},{level:2,title:"Task Details",slug:"task-details"},{level:3,title:"PAM Implementation",slug:"pam-implementation-2"},{level:2,title:"Task Comments",slug:"task-comments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-3"},{level:2,title:"Task Forms",slug:"task-forms"},{level:3,title:"PAM Implementation",slug:"pam-implementation-4"},{level:2,title:"Attachments",slug:"attachments"},{level:3,title:"PAM Implementation",slug:"pam-implementation-5"},{level:2,title:"New Process Form",slug:"new-process-form"},{level:2,title:"Summary Card",slug:"summary-card"},{level:3,title:"PAM Implementation",slug:"pam-implementation-6"},{level:2,title:"Totals Over Time",slug:"totals-over-time"},{level:3,title:"PAM Implementation",slug:"pam-implementation-7"},{level:2,title:"Styling",slug:"styling"},{level:2,title:"Implementing a New Engine or Integrating a New Task Source",slug:"implementing-a-new-engine-or-integrating-a-new-task-source"},{level:2,title:"Creating a new PDA MFE",slug:"creating-a-new-pda-mfe"},{level:2,title:"Communication between MFEs",slug:"communication-between-mfes"},{level:2,title:"Micro Frontend Overview",slug:"micro-frontend-overview"},{level:3,title:"Task forms",slug:"task-forms-2"},{level:2,title:"Widgets",slug:"widgets"},{level:2,title:"Building From source",slug:"building-from-source"},{level:2,title:"Code Style",slug:"code-style"},{level:2,title:"Sonar",slug:"sonar"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Business Objective \n The Entando Process Driven Applications plugin is built to provide a\nrich and full featured user experience to allow for the management and\ncompletion of business processes and automation. The UX is delivered a\ngeneral purpose UX layer built using micro frontends that can be\nutilized for any business process or task engine. Customers drive the UX\nlayer by utilizing a pre-developed Entando integration or by\nimplementing a set of interfaces on the server side. The backend is a\nSpring Boot microservice that provides a pluggable interface allowing\nfor the injection of any underlying process or automation toolkit. The\ninterfaces and steps for creating a new PDA backend implementation are\nprovided below. This document provides an overview of the Entando\nProcess Driven Apps (PDA) plugin. The initial section covers the\nbusiness functionality and user facing micro frontends. The second\nsection covers the architecture and the points of extension for the PDA\nplugin. The third provides a detailed technical overview for developers\nto add new functionality to a PDA implementation. \n Terminology \n Micro Frontend \n A Micro frontend architecture is an approach to developing web\napplication as a composition of small frontend apps. Instead of writing\na large monolith frontend application, the application is broken down\ninto domain specific micro frontends, which are self-contained and can\nbe developed and deployed independently. \n Process Automation Manager (PAM) \n A business process automation engine built and maintained by Red Hat \n Business Process Modeling Notation (bpmn) \n Business Process Model and Notation (BPMN) is a graphical representation\nfor specifying business processes in a business process model. \n Decision Model and Notation (dmn) \n Decision Model and Notation is a standard published by the Object\nManagement Group. It is a standard approach for describing and modeling\nrepeatable decisions within organizations to ensure that decision models\nare interchangeable across organizations. \n Back End for Front End (BFF) \n A microservice architecture allows teams to iterate quickly and to\ndevelop technology to scale rapidly. The Backend for Frontend (BFF)\narchitecture is a type of pattern built with microservices. The key\ncomponent of this pattern is an application that connects the front-end\nof your application with the backend. This BFF Code Pattern will help\nyou build that component according to IBM’s best practices. \n PDA Micro Frontends \n This section provides an overview of each of the micro frontends (MFE)\nthat are available as part of the Entando PDA plugin. In cases below\nwhere there are details specific to the PAM implementation they are\nprovided for that MFE. When extending the integration layer to other\nengines or custom implementations it will be up to the integrating team\nto define behavior and datasource for each MFE. \n Task List \n The task list MFE provides a user with a list of visible tasks that are\neither assigned to that user or that are potentially ownable by that\nuser. In the default implementation the visible tasks are limited to a\nsingle process instance. At configuration time the application designer\nis given the option to select a set of columns that will be visible in\nthe task list for that page. \n PAM Implementation \n The default PAM implementation makes the top level task fields available\nin the task list for selection. It is possible to fetch task and process\nvariables for rendering in the task list but these values are excluded\nby default due to the additional API call overhead required. \n Task Details \n The task details MFE renders detailed information about a given task.\nThe task details widget is intended to give the final user processing a\ntask the information necessary to complete the task at hand. The task\ndetails are rendered in a read only grid. See the styling section below\nfor changing and customizing the layout. \n PAM Implementation \n The PAM integration renders task variables in the task details widget. \n Task Comments \n The task comments MFE gives the user the ability to view notes attached\nto a given task and to add new notes to a task. \n PAM Implementation \n The PAM implementation reads and publishes notes to the comments\nendpoint \n Task Forms \n The task form implementation renders a form specific to a task and gives\nthe user the ability to complete that form. The form implementation is a\nwrapper around a JSON schema that describes the layout, style and\ncontent of the form. It is up to the backend implementation to transform\nto the schema and default ux layout needed to render the form. See the\ntechnical documentation below for more on the JSON schema based\nimplementation. \n PAM Implementation \n The PAM implementation of forms depends on the presence of a form\ndefinition being present on the PAM task. The Entando PAM engine\nimplementation transforms from the PAM format to the JSON schema to\nrender the form. And it transforms the API format back to the PAM format\nbased on the form definition in PAM. There are some limitations on form\ncustomization due to the format required to return data to PAM. See the\nforms section in the technical documentation for more information. \n Attachments \n The attachments MFE gives the user to view documents attached to a\ntask/case/process and to add new documents to a task/case/process. \n PAM Implementation \n The PAM implementation posts the documents to the PAM endpoints for\nstorage. Future features will include using Entando document storage for\nstoring documents and a pluggable document management interface. \n New Process Form \n The new process form renders a form that allows the final user to\nprovide the information necessary to instantiate a new business process\ninstance. The technology for generating the process form is the same as\nthe JSON schema definition used for task forms. === PAM Implementation\nThe PAM implementation depends on a form definition being attached to\nthe process definition. Entando transforms the PAM representation into a\nJSON schema form that can be rendered to the final user. \n Summary Card \n The summary card MFE provides a view into aggregate data for the process\nimplementation. The rendered information includes a total value, a trend\nvalue, and a selector for timeframe. The summary card allows the\napplication developer to select a request for rendering the requested\ninformation which maps to a call in the underlying engine to provide the\nsummarized data. \n PAM Implementation \n The PAM implementation of the summary card widget relies on the PAM\ncustom query functionality. The PAM PDA engine exposes configuration\nthat allows users/developers to define a custom query in a config file\nthat will be executed to render the summary card. This implementation\nallows the data rendered on the summary cards to be changed via\nconfiguration. In the application there is a properties file that allows\nthe implementer to provide a custom query for each of the cards. \n Totals Over Time \n The totals over time MFE provides a dual axis line/bar graph providing\ntrend information about the process environment. The MFE also provides\nthree summary values for comparison over the same time period. \n PAM Implementation \n The PAM implementation of the totals over time MFE utilizes custom\nqueries to fetch the summary data rendered in the chart. The queries\nused in the implementation are defined in configuration files in the MFE\nand can be updated to render data specific to a given implementation. \n Customizing the Process Driven Application \n Styling \n The Entando PDA MFEs are styled via a material UI theme. That theme can\nbe downloaded and updated here:\n https://github.com/entando/frontend-libraries/tree/master/packages/entando-ui \n Implementing a New Engine or Integrating a New Task Source \n Implementing a new Engine for Process Driven Applications means to\ncreate a new Java Project and implement the interfaces defined in the\npda-core-engine project. So, the new project should include the\npda-core-engine as a dependency. To see an implementation in action,\ntake a look at the pda-redhatpam-engine project, which implements the\nRed Hat PAM engine integration. After the engine is implemented, the JAR\nfile resulting from the implementation should be available in the\nclasspath for entando-process-driven-plugin, which is the project that\nis ultimately executed and exposes the Rest APIs for the frontend\napplication. One way to do that is by publishing the engine\nimplementation to a Maven repository and adding it as a dependency to\nthe entando-process-driven-plugin project. Below are the descriptions of\nthe key classes and interfaces in the pda-core-engine project that need\nto be inherited or implemented when creating a new engine\nimplementation: \n \n \n Engine: This class represents a BPM engine and exposes the services\nthat are available for that specific implementation. It is intended\nto be inherited and the subclass should provide the real\nimplementation for each service by calling the superclass\nconstructor with the service implementations as arguments. If any\nservice is not supported, a null value should be passed to the\ncorresponding constructor argument. The engine can provide\nimplementations for the the following service interfaces: \n \n \n TaskService: defines service methods for task retrieval from the\nBPM engine. \n \n \n TaskDefinitionService: defines service methods related to task\ndefinition. A task definition specifies which fields or columns\nare available for all task instances. \n \n \n TaskCommentService: defines service methods related to task\ncomment manipulation. It should be implemented if the task\ncomment is supported by the engine. \n \n \n TaskAttachmentService: defines service methods to operate on\ntask attachments. It should be implemented if the engine\nsupports file attachment on the task. \n \n \n TaskFormService: defines service methods for task form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n TaskLifecycleService: defines service methods related to the\ntask lifecycle. The lifecycle operations move the task from one\nstate to another. \n \n \n TaskLifecycleBulkService: defines methods for bulk lifecycle\noperations. Like the TaskLifecycleService, methods here move the\ntask from one state to another, but this interface works with\nmultiple tasks at a time. \n \n \n ProcessService: defines service methods for process definitions\noperations. \n \n \n ProcessFormService: defines service methods for process form\noperations, like retrieving the form definition and submitting a\nform. The Form object can be used to render a form dynamically. \n \n \n GroupService: define service methods related to groups from the\nBPM engine. \n Creating a new PDA MFE \n There are no limitations on the stack that could be used to create PDA\nMFEs. Custom Elements are a great way to hide implementation details\nwhile providing a neutral interface to others. To create a simple PDA\nMFE, implement your solution using technologies you are familiar with\nand wrap it in a custom element. Build your solution with a custom\nelement and upload the built files (Settings > File Browser) in\n/public/ folder. Go to  UX Pattern > Widget  section of the admin panel\nand press “Add” to add a new widget. Enter widget code, titles, select\ngroup (for free access to everybody, select “Free Access”), and fill the\nCustom UI: \n <#assign wp=JspTaglibs["/aps-core"]>\n<script src="<@wp.resourceURL />path/from/static/bundle.js"><\/script>\n<your-custom-element parameter=”value” />\n \n <#assign wp=JspTaglibs["/aps-core"]>  - provides access to wp variable\nthat is used to get resource URL. After you add the widget, go to the\npage tree, select a page where you would like to use the widget and\nconfigure it. Drag and drop the widget into a frame and publish the\npage. \n Communication between MFEs \n Communication between MFEs can be achieved using Custom Events. Each\nwidget can define events that it will emit and register to events that\nare important to it. \n const createWidgetEvent = eventType => {\n  return payload => {\n    const widgetEvent = new CustomEvent(eventType, { payload });\n    window.dispatchEvent(widgetEvent);\n  };\n};\n\n\nconst subscribeToWidgetEvent = (eventType, eventHandler) => {\n  window.addEventListener(eventType, eventHandler);\n  return () => {\n    window.removeEventListener(eventType, eventHandler);\n  };\n};\n \n Custom element then creates the events it emits and registers to the\nevents that it wants to react to \n constructor(props) {\n  super(props);\n\n  // other code\n\n  this.onClickSubmit = createWidgetEvent(‘myWidget.onSubmit’);\n}\n\nconnectedCallback() {\n\n  // other code\n\n  this.unsubscribeFromWidgetEvents = subscribeToWidgetEvent(\n    ‘otherWidget.onClickClear’,\n    () => {\n      // callback function when otherWidget fires the onClickClear custom event\n    }\n  }\n}\n Technical Documentation \n Micro Frontend Overview \n Task forms \n Widgets containing form (e.g., task completion form widget) use JSON\nschema to dynamically create forms. Widget implementation uses\nreact-jsonshema-form library that converts forms’ JSON schemas into\nReact components. Our initial implementation uses Material UI components\nvia Material UI theme library rjsf-material-ui as baseline and has\nEntando specific templates, widgets and fields (which are\nreact-jsonshema-form terms for parts of forms). In this section you will\nlearn about basic setup of the form, but if you would like to learn\nmore, please refer to react-jsonshema-form documentation. Themed JSON\nform is created using the withTheme() method from the\nreact-jsonschema-form package \n import { withTheme } from \'react-jsonschema-form\';\nimport { Theme as MuiRJSForm } from \'rjsf-material-ui\';\n\nconst JSONForm = props => {\n\n  const ThemedForm = withTheme(MuiRJSForm);\n\n  // ...\n\n  return (\n    <ThemedForm\n    schema={formSchema}\n    uiSchema={uiSchema}\n    {...customTemplates}\n    widgets={customWidgets}\n    formData={formData}\n    onSubmit={e => onSubmitForm(e)}\n    >\n  );\n};\n\nexport default JSONForm;\n \n For JSON Form to work, the form schema is mandatory. It’s a JSON\ndefinition of the form’s structure. Users can also provide form data via\nformData variable, which should follow the structure of JSON schema; and\nUI schema using uiSchema variable, which allows users to customise the\nform’s UI (components, rules, types, etc.) To test JSON schema, UI\nschema and form data, you can use react-jsonschema-form sandbox\nenvironment. Custom Entando templates, widgets, and fields provide a\npossibility to customise the layout of the form using Grid components.\nTo specify what area a field or subform should fill, users can provide\nsize parameter in UI schema’s ui:options object. Size refers to Material\nUI’s grid column widths (Material UI documentation) where the area the\nfrom can take up is divided into 12 columns and value 12 (a default\nvalue if size is not provided) means the field or subform should take up\nall 12 columns. That means that size should be a value from 1 to 12. If\ntwo fields that are next to each other have size values 8 and 4\nrespectively - they will fit into one row, first field being 2 times\nwider than the second field. User can also provide innerSize parameter\nto size the input inside the field. This helps with formatting - if user\nwants a two column layout and have smaller input fields inside these\ncolumns. Multicolumn layout can also be achieved using\ngenerateColumnedOFT(columnSize) functionality, basically providing the\ndefault columnSize to the created form. generateColumnedOFT returns an\nObjectFieldTemplate that is used as a template for all object fields\n(fields that contain properties inside of them). To help us understand\nthe mapping between JSON schema and UI schema lets define an example\nschema: \n {\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "$id": "http://entando.org/schemas/pda-form.json",\n  "title": "Mortgage Application Form",\n  "type": "object",\n  "properties": {\n    "Application": {\n      "title": "Application",\n    "type": "object",\n    "required": [],\n    "properties": {\n        "mortgageamount": {\n          "type": "integer",\n          "title": "Mortgage amount",\n          "description": "Mortgage amount"\n        },\n        "downpayment": {\n          "type": "integer",\n          "title": "Down Payment",\n          "description": "Down Payment"\n        },\n        "applicant": {\n          "title": "Applicant",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "name": {\n              "type": "string",\n              "title": "Name",\n              "description": "Name",\n              "maxLength": 100\n            },\n            "annualincome": {\n              "type": "integer",\n              "title": "Annual Income",\n              "description": "Annual Income"\n            }\n          }\n        },\n        "property": {\n          "title": "Property",\n          "type": "object",\n          "required": [],\n          "properties": {\n            "age": {\n              "type": "integer",\n              "title": "Age of property",\n              "description": "Age of property"\n            },\n            "address": {\n              "type": "string",\n              "title": "Address of property",\n              "description": "Address of property",\n              "maxLength": 100\n               }\n          }\n        }\n      }\n    },\n    "inlimit": {\n      "type": "boolean",\n    "title": "Is mortgage application in limit?"\n    }\n  }\n}\n \n From this JSON (you can copy & paste it into the react-jsonschema-form\nsandbox) we can see that there is a main form with a title “Mortgage\nApplication Form”. Root “Mortgage Application Form” form has two\nproperties - one is a subform  Application  and the second one is just a\ncheckbox field (field ID is inlimit). Application subform contains 2\nfields: Mortgage amount (field ID is mortgageamount) and Down Payment\n(field ID is downpayment); and two subforms - Applicant (field ID is\napplicant) and Property (field ID is property). Applicant subform\ncontains 2 fields - Name (field ID is name) and Annual Income (field ID\nis annualincome). Property subform contains 2 fields - Age of property\n(field ID is age) and Address of property (field ID is address) By\ndefault (without providing UI schema) they are all listed one field per\nrow. To use Entando’s implementation of Grid layout, users have to\nprovide UI schema with details about each field. For example, if we\nwould like to have a layout that looks like this (fields are marked\n [ field name ] ): \n +----------------------------------------------------------------------------+\n| Mortgage Application Form                                                  |\n+----------------------------------------------------------------------------+\n| Application                                                                |\n+----------------------------------+-----------------------------------------+\n| [Mortgage amount]                | [Down Payment]                          |\n+----------------------------------+-----------------+-----------------------+\n| Applicant                                          | Property              |\n+----------------------------------+-----------------+-----------------------+\n| [Name]                           | [Annual Income] | [Age of property]     |\n+----------------------------------+-----------------+-----------------------+\n|                                                    | [Address of property] |\n+----------------------------------------------------+-----------------------+\n \n To set up the UI schema you have to define each field you want to\ncustomise by addressing using the field IDs - to add options to\nApplicant’s Name field, you will have to create an object tree going\nfrom root object through Application —> Applicant —> Name (using IDs\nit’s Application.applicant.name). UI schema for the table layout defined\nabove would look like this: \n {\n  Application: {\n    \'ui:options\': {\n      size: 12, // <-- this value is not mandatory as size is 12 columns-wide by default\n    },\n    mortgageamount: {\n      \'ui:disabled\': true, // <-- user can define fields disabled at UI schema level\n      \'ui:options\': {\n        size: 6, // <-- Mortgage amount field should take up half of the row\n      },\n    },\n    downpayment: {\n      \'ui:options\': {\n        size: 4, // <-- Down payment field should take up the other half of the row\n      },\n    },\n    applicant: {\n      \'ui:options\': {\n        size: 8, // <-- Applicant subform should take up 8 out of 12 columns\n      },\n      name: {\n        \'ui:options\': {\n          size: 8, // <-- Applicant name field should take up 8 columns in the 8 columns that Applicant subform occupies\n        },\n      },\n      annualincome: {\n        \'ui:options\': {\n          size: 4, // <-- Annual Income field taking up the remaining 4 columns\n        },\n      },\n    },\n    property: {\n      \'ui:options\': {\n        size: 4, // <-- Property subform should take up the remaining 4 out of 12 columns\n      },\n      // note that property\'s fields are not mentioned - defaulting them to 12 columns in are that is available to them\n    },\n  },\n};\n\nAs Material UI components are used for field templates, there might be a need to pass some Material UI options into the field. You can do that by adding muiProps object to the ui:options.\nFor example, if you would like to make the Down payment field resizable, you can add multiline: true to muiProps option. If you want to make the field take up multiple rows by default, add rows and rowsMax fields. The latter limits how many rows should be added until the scroll bar is shown.\ndownpayment: {\n  \'ui:options\': {\n    size: 4,\n    muiProps: {\n      multiline: true,\n      rows: 2,\n      rowsMax: 4\n    }\n  }\n}\n Widgets \n Different types of widgets can be applied by passing the type via\n"ui:widget". Property tells the form which UI widget should be used to\nrender a field. You can read about react-jsonschema-form supported\nwidgets here. \n Building From source \n Reference the component projects for instructions to build from source.\n https://github.com/entando/entando-process-driven-plugin \n https://github.com/entando/entando-process-driven-plugin/tree/master/widgets \n https://github.com/entando/pda-redhatpam-engine \n https://github.com/entando/pda-core-engine \n Code Style \n See:  https://github.com/entando/entando-code-style \n Sonar \n https://sonarcloud.io/organizations/entando/projects \n'},{title:"Backing Up and Restoring an Entando Application",frontmatter:{},regularPath:"/v6.3/tutorials/devops/backing-up-and-restoring-your-environment.html",relativePath:"v6.3/tutorials/devops/backing-up-and-restoring-your-environment.md",key:"v-9833fbb4",path:"/v6.3/tutorials/devops/backing-up-and-restoring-your-environment.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Create a Backup",slug:"create-a-backup"},{level:2,title:"Restore a Backup",slug:"restore-a-backup"}],lastUpdated:"3/19/2021, 5:02:52 AM",content:' Backing Up and Restoring an Entando Application \n Prerequisites \n \n \n Java 11 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n \n \n This tutorial will show you how you can use an Entando application that\nyou have built as a launching point for creating new applications. \n Create a Backup \n This step requires using a running Entando environment to take an application backup.\nThe output of this step is a local directory with the files (database and static assets) you can use to restore the application later. \n \n \n Log into  App Builder \n \n \n Go to  Configuration → Database \n \n \n Click on  Create A Backup  and wait for the process to complete. All of the static assets and database backups are persisted to a PVC in /entando-data on the server pod. \n \n \n Transfer the files from the server-container. The details will vary depending on your kubernetes environment. \n \n \n \n \n \n kubectl \n OpenShift \n \n \n \n \n kubectl cp <pod>:<path> <local-path> \n oc rsync <pod>:<path> <localPath> \n \n \n e.g. kubectl cp quickstart-server-deployment-7b8c699599-f84zq:/entando-data backup \n e.g. oc rsync app-entando-server-deployment-67fd5b9954-s72mb:/entando-data \n \n \n \n \n You should see 3 directories -  databases ,  protected , and  resources .\nThe  protected  directory contains the timestamped backup you triggered from the  App Builder . \n Restore a Backup \n In this tutorial you’ll create a custom copy of an Entando Application, install the\nbackup files, build a Docker image from the updated app, and deploy it as a new application. Steps 3 and 4 can be skipped if you simply want to create a custom application. \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the  entando-de-app  you just cloned: \n cd entando-de-app\n \n \n \n Take the backup file and unzip it in a location of your choice. \n \n \n This zip contains all of the assets, content, and metadata\nneeded to launch an Entando application. We are going to package\nthe static assets and database backup into a Docker image. \n \n \n Entando will automatically instantiate and populate the app from\nthe most recent backup \n \n \n \n \n Move the resources and protected folders from your Entando backup into your\n entando-de-app  application under  src/main/webapp  replacing any content that is\nalready there. \n \n \n Build a docker image from the core app replacing the value of the tag in the  -t  argument with the tag you want to use for your image \n mvn clean package\ndocker build . -f Dockerfile.wildfly -t <YOUR-USER>/<YOUR-REPO-NAME>:<YOUR-VERSION>\n \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:<YOUR-VERSION>\n \n \n \n Now we need to generate a new application for deployment to\nKubernetes using the helm chart \n \n \n If you have an output from helm from before you can re-use it\nand just apply the changes to the config map. In this case skip to step 12. \n \n \n Or you can re-run helm and change the output \n \n \n \n \n Re-run the helm command for your environment \n \n \n Open the output yaml file from the helm command in the text editor\nof your choice \n \n For example:  vi training-alpha.yaml \n \n \n \n In that file look for the  ConfigMap \n \n \n The config map defines all of the images that are available as\npart of the deployment. They aren’t all used concurrently. \n \n \n You can also view this config map in  kubernetes/OpenShift \n \n \n \n \n Now you need to update the deployment to use your customized Wildfly\nimage. Find  entando-de-app-wildfly  in the config map \n \n Note that we are changing the de-app but you could create a\ncustom version of any of the included images \n \n \n \n Change the version to match the version you used for your image \n \n \n Change the "organization" to the name of your main image repository\norganization and if you aren’t using docker.io (DockerHub) then\nchange the registry as well. \n \n \n Save the file \n \n \n Follow the deployment steps you went through when you originally\ndeployed your Entando application to your Kubernetes instance \n \n \n Once deployed go to the  App Builder  in your app \n \n \n Click  Go To Homepage  and you should see your restored application. \n \n \n'},{title:"Building a Docker Image for the Entando Core",frontmatter:{},regularPath:"/v6.3/tutorials/devops/build-core-image.html",relativePath:"v6.3/tutorials/devops/build-core-image.md",key:"v-a7ad4b84",path:"/v6.3/tutorials/devops/build-core-image.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Setup",slug:"setup"}],lastUpdated:"3/19/2021, 5:02:52 AM",content:" Building a Docker Image for the Entando Core \n Prerequisites \n \n \n Java 11 \n \n \n Docker installed locally\n( https://docs.docker.com/docker-for-windows/install/ ) \n \n \n maven \n \n \n Access to a docker repository (docker.io or other) \n Introduction \n This tutorial will take you through the basic steps to create a docker\nimage from an Entando core application. A more detailed guide with\nadditional commands and configuration can be found here: \n https://github.com/entando-k8s/entando-de-app \n Setup \n \n \n Clone the application at:\n https://github.com/entando-k8s/entando-de-app  using \n git clone https://github.com/entando-k8s/entando-de-app\n \n \n \n On a command line, cd into the entando-de-app you just cloned: \n cd entando-de-app\n \n \n \n Build a docker image from the core app replacing the value of the tag in the  -t   with the tag you want to use for your image. \n mvn clean package\ndocker build . -f Dockerfile.wildfly -t <YOUR-USER>/<YOUR-REPO-NAME>:<YOUR-VERSION>\n \n \n \n Create a repository on your docker repository to house your new\napplication \n \n \n Push the Image to your Repository \n docker push <YOUR-USER>/<YOUR-REPO-NAME>:<YOUR-VERSION>\n \n \n \n"},{title:"Tutorial: Selecting the default databases",frontmatter:{},regularPath:"/v6.3/tutorials/devops/default-database.html",relativePath:"v6.3/tutorials/devops/default-database.md",key:"v-151998f0",path:"/v6.3/tutorials/devops/default-database.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Tutorial: Selecting the default databases \n Overview \n This document provides a guide to changing an Entando environment by selecting the default databases used.\nSee  External Database  to connect to a database outside of the cluster. \n Prerequisites \n \n An environment to install your Entando applicaiton \n Network access from your Kubernetes cluster to your database \n Tutorial \n If needed you can set the desired component to use a specific DBMS by updating the Helm-generated yaml file (e.g. 'entando.yaml' from  Getting Started  as follows: \n \n open the chosen file and search for  EntandoCompositeApp  custom resource \n identify the component to update in the related list \n update the  spec.dbms  property with the desired value (you can specify different DBMS for different components) \n \n Repeat previous steps for all components you need to change used DBMS on. \n Valid values for  spec.dbms  property are:  none ,  postgresql ,  mysql ,  oracle . \n none  value will result in using an embedded database with in-file persistence strategy. \n Please note that using embedded databases into distributed systems forces to have only 1 replica per pod.\nThis happens because the volume claimed by each replica points to the same files,\nso the first container locking the files will prevent next replicas to obtain access to the DB files.\nNote that this affects also deployments rolling updates \n If you need to update your deployment, there is a known workaround consisting in setting the replicas number to 0, waiting for pod shutdown completion, update the deployment yaml file, then updating again to 1 the replicas value. In this way, the newly created containers will be able to startup correctly and access the embedded database files on the filesystem. \n These considerations lead us to discourage embedded database use into production environments. \n"},{title:"Tutorial: Connecting to an External Database",frontmatter:{},regularPath:"/v6.3/tutorials/devops/external-database/",relativePath:"v6.3/tutorials/devops/external-database/README.md",key:"v-10c1b3bc",path:"/v6.3/tutorials/devops/external-database/",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Tutorial: Connecting to an External Database \n Overview \n This document provides a guide to connecting to an external database. In\nmany (not all) production configurations it is recommended to use a DBMS\noutside of the cluster where your Entando application is running to\nsimplify maintenance, duplication of resources, and to establish a\nbackup workflow that will scale with your application. \n Prerequisites \n \n \n An environment to install your Entando applicaiton \n \n \n A running PostgreSQL, MySQL, or Oracle environment \n \n \n Administrator access to the database \n \n \n Network access from your Kubernetes cluster to your database \n Tutorial \n \n In the helm quickstart define a db for your deployment that includes\nthe admin credentials for your database \n \n \n db:\n  vendor: postgresql | mysql | oracle\n  host: <yourhost>\n  port: <yourport>\n  adminUser: <youradmin>\n  adminPassword: <youradminpassword>\n  name: <yourdbname>\n \n \n \n Run the helm quickstart or create a deployment for your Entando\nenvironment manually \n \n Note: The quickstart creates a default configuration for the\ndeployment. This isn’t to suggest that it is the only\nconfiguration or that it matches with every use case. It is\nrecommended to think about your desired deployment Architecture\nand to configure for that environment using the CRDs as building\nblocks. This also isn’t to suggest that if it isn’t directly\nsupported by the quickstart template that you can’t change it.\nThe deployment is editable. Treat the helm template as a\nbootstrapping environment and edit your deployments to match\nyour needs and requirements. \n \n \n \n Open the yaml file generated from the deployment and review the\nsettings for the deployment \n \n The Entando Operator will create a secret for the database\nautomatically and use the DB initializers to create the DB for\nthe Entando app and any services that use it \n \n \n \n Deploy your app \n \n \n"},{title:"Caching and Clustering",frontmatter:{},regularPath:"/v6.3/tutorials/devops/clustering-caching/caching-and-clustering.html",relativePath:"v6.3/tutorials/devops/clustering-caching/caching-and-clustering.md",key:"v-846210da",path:"/v6.3/tutorials/devops/clustering-caching/caching-and-clustering.html",headers:[{level:2,title:"Clustering",slug:"clustering"},{level:3,title:"Prerequisites",slug:"prerequisites"},{level:3,title:"Creating a Clustered App Instance",slug:"creating-a-clustered-app-instance"},{level:3,title:"Validating the Clustered Instances",slug:"validating-the-clustered-instances"},{level:3,title:"Caching Validation",slug:"caching-validation"},{level:2,title:"Configuring and Deploying with Redis",slug:"configuring-and-deploying-with-redis"},{level:3,title:"Deploy Redis to Kubernetes",slug:"deploy-redis-to-kubernetes"},{level:3,title:"Configure implementation",slug:"configure-implementation"},{level:2,title:"Appendix A - Creating Separately Deployed App Engine Instances",slug:"appendix-a-creating-separately-deployed-app-engine-instances"}],lastUpdated:"1/7/2021, 2:01:33 PM",content:' Caching and Clustering \n The tutorials below cover the basic steps to setup and validate a clustered instance of the Entando App Engine. \n \n NOTE \n When building your deployment architecture it is important to review your goals, hardware, networking, and application specific setup and to optimize your App Engine deployment for your environment. None of the configurations or deployments below will address every type of application or every type of deployment. The configuration and testing examples below can be used as building blocks to create a deployment architecture that works for your application. \n Clustering \n This tutorial reviews setting up a clustered Entando App Engine using the default Infinispan Library Mode deployment that ships with the quickstart App Engine in the  entando-de-app . The goal of the tutorial is to deploy a clustered instance of the App Engine and verify that we have a high availability and scalable deployment of the application. \n Prerequisites \n \n An existing deployment of an Entando App or the ability to create a new one\n \n If you haven\'t created a deployment yet or don\'t have a yaml file for an Entando deployment follow the quickstart  here . \n \n \n The Entando deployment must use an RDBMS. Clustered instances will not work correctly with in memory databases and a  dbms: none  configuration. \n Creating a Clustered App Instance \n \n Create an Entando deployment via the helm template or edit an existing deployment yaml file. \n Edit the deployment and find the  EntandoApp  in the yaml file (towards the bottom).\n \n If you\'re editing an existing deployment you can use  kubectl edit <deployment>  or you can edit the deployment prior to kicking off the installation. \n \n \n \n - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart"\n      spec:\n        dbms: postgresql\n        replicas: 1\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n \n \n In the  EntandoApp  change the number of replicas to 2 (or more as desired) \n Save the file \n Deploy the application or wait for the application to update if editing an existing deployment \n Run  kubectl get pods -n <your namespace>  to view the pods in your deployment \n You should have two  server-deployment  pods in your namespace with three containers each. See the screenshot below: \n \n \n \n Finally, you can look in the logs of the  server-container  in either pod and you will see logging related to different instance joining the cluster and balancing the data between the instances. See the screenshot for an example. Your actual logs will vary: \n \n \n The tutorials below will take you through validating and testing the clustered and cached instances. \n \n NOTE \n If you are on OpenShift you can use the Scale Up arrows and other settings available in the OpenShift console if you prefer \n Validating the Clustered Instances \n This is an advanced tutorial and is not required or recommended for most deployment scenarios or users. \n This tutorial will walk you through steps to validate that the clustered instances are working in your environment and that you have created a high availability deployment. There are many ways to validate your clustering. \n \n Complete the  creating a clustered instance tutorial  above or have an existing clustered Entando App instance available for testing \n Get the URL for your  entando-de-app  with  kubectl get ingress -n <your namespace> \n Open the URL in a browser of your choice and ensure that the application is working \n Open a new browser window in an incognito or private browsing mode.  do not navigate to the app\n \n The only reason for private mode is to ensure that no data is cached and you\'re receiving a copy of the running application \n \n \n In the next steps you\'ll delete a pod in your cluster and verify that your application is still getting served. Kubernetes will automatically restore the desired number of replicas so you\'ll need to perform the validation test before the new replica is launched. In most environments this will be around one minute but it will vary. \n Delete one of the server deployment pods in your clustered instances with  kubectl delete <pod-name> -n <your namespace> \n \n There are other ways to do this. You could also shell into the server-container and manually kill the running app process with  kill -9 357 . \n If you wanted to test at the hardware level you could manually terminate a node in your cluster (ensuring that the pods are scheduled to different nodes) \n \n \n In your private/incognito browser window open the URL to your  entando-de-app \n See that the application continues to render while the pod you deleted is no longer present \n Wait for Kubernetes to restore your deleted pod \n Check that the application continues to render after the pods are restored \n Caching Validation \n Validating the shared cache can be done in a similar fashion to the clustered instance validation. The high level steps are: \n \n Deploy a clustered instance (see  creating a clustered instance tutorial ) \n Create data using the app builder (pages, page templates, content etc.) using the external route for the application \n Take note in the logs of which instance processed the request \n Terminate that instance \n Fetch the data created and ensure that the recently created data is returned \n \n Another option for validating the shared cache involves creating a custom deployment with two distinct Entando App instances. In this scenario you would not use the  replicas  option in the deployment. This has the benefit of keeping all of the instances running and validating the configuration by creating distinct pods for the Entando App Engine so that each instance can be exposed on endpoints separately. \n The high level steps for this setup are reviewed in  Appendix A \n Configuring and Deploying with Redis \n This tutorial covers deploying an Entando App Engine instance using Redis as a cache for data served by the app engine. For more information on the cache\nconfiguration for the App Engine checkout the  reference documentation \n Deploy Redis to Kubernetes \n \n Create the redis deployment and expose the endpoints \n \n kubectl create deployment redis –-image = redis:6\n \n kubectl expose replicaset.apps/redis-687488bdd4 --port = 6379  --target-port = 6379  -n  < your namespace > \n \n \n Install the Redis CLI for your environment per  https://redis.io/topics/rediscli \n Get the IP for your Redis deployment \n \n kubectl get  service  -n  < your namespace > \n \n \n Validate your deployment \n \n Should respond PONG \n redis-cli -h  10.43 .99.198 -p  6379   ping \n \n Should increment each time \n redis-cli -h  10.43 .99.198 -p  6379  incr mycounter\n Configure implementation \n \n Use git to clone the  entando-de-app  repository \n \n git  clone https://github.com/entando-k8s/entando-de-app\n \n \n Fetch the tags and checkout the release tag and create a branch for your customization \n \n git  fetch --tags\n \n git  checkout tags/v6.3.22 -b  6.3 -redis\n \n \n Open the pom.xml file of the  entando-de-app \n Remove the Infinispan dependencies from the pom \n \n \x3c!-- infinispan --\x3e\n <dependency>\n     <groupId>org.infinispan</groupId>\n     <artifactId>infinispan-core</artifactId>\n     <version>9.4.8.Final</version>\n </dependency>\n <dependency>\n     <groupId>org.infinispan</groupId>\n     <artifactId>infinispan-commons</artifactId>\n     <version>9.4.8.Final</version>\n </dependency>\n \n \n Add the Redis caching plugin to the pom \n \n <dependency>\n    <groupId>org.entando.entando.plugins</groupId>\n    <artifactId>entando-plugin-jpredis</artifactId>\n    <type>war</type>\n</dependency>\n \n \n Save the pom \n Build and push a custom image for the  entando-de-app  following  these steps \n Create or download a deployment file. For example, use the  entando.yaml \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/entando.yaml\n \n \n Update the image in the deployment yaml file to point to your custom  entando-de-app  image with Redis. The line to change is in the  ConfigMap  and is noted below \n \n entando-de-app-wildfly: >-\n    {"version":"6.3.10","executable-type":"jvm","registry":"docker.io","organization":"entando"}\n \n \n Add environment variables to the  EntandoApp  in the deployment yaml file for the Redis address and Redis password for your deployed Redis instance. The variables to create are: \n \n REDIS_ADDRESS\n \n REDIS_PASSWORD\n \n For example, \n \n NOTE \n This example uses a secret for the  REDIS_PASSWORD  which is recommended. You can also hardcode the password in the yaml for testing, however, creating passwords in clear text in your deployment files is not recommended. Create and use a secret for the password as a best practice. \n \n This is a reference example for the EntandoCompositeApp and is not a complete deployment. Utilize this as an example to create your configuration in a complete deployment. \n kind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "quickstart-apps"\n  namespace: test\nentandoStatus:\n  serverStatuses: {}\n  entandoDeploymentPhase: "requested"\nspec:\n  components:\n    - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart1"\n      spec:\n        dbms: none\n        replicas: 2\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: quickstart1.test.dynu.net\n        environmentVariables:\n          - name: REDIS_ADDRESS\n            value: <your redis URI. For example redis://localhost:6379)\n          - name: REDIS_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-redis-secret\n                optional: false\n        ....\n Appendix A - Creating Separately Deployed App Engine Instances \n This appendix provides a high level example of creating a deployment with two distinct Entando App Engine instances. This type of deployment can be used to create pods that can be separately accessed and managed. It is  not recommended  to use this type of deployment for typical development or production environments. Utilize the ability of Kubernetes and the Entando infrastructure to manage your replicas automatically. \n \n Create two different instances of the  EntandoApp  component inside of the  EntandoCompositeApp  in your deployment yaml \n Configure both EntandoApp instances to use the same database and JGroups configuration if using Infinispan. If using Redis configure both instances to point to the same Redis instance \n Deploy the application \n Expose the separately deployed  EntandoApp  instances with distinct endpoints \n Create data in one instance via the App Builder or via API \n Validate that the App Builder returns the same data in the other instance \n \n A partial example of that deployment: \n kind: "EntandoCompositeApp"\napiVersion: "entando.org/v1"\nmetadata:\n  name: "quickstart-apps"\n  namespace: test\nentandoStatus:\n  serverStatuses: {}\n  entandoDeploymentPhase: "requested"\nspec:\n  components:\n    - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart1"\n      spec:\n        dbms: none\n        replicas: 1\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: quickstart1.test.dynu.net\n        environmentVariables:\n          - name: PORTDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: PORTDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: PORTDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: SERVDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: SERVDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: SERVDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: JGROUPS_CLUSTER_PASSWORD\n            value: xxxxxxxx\n          - name: OPENSHIFT_KUBE_PING_LABELS\n            value: EntandoResourceKind=EntandoApp\n          - name: KUBERNETES_LABELS\n            value: EntandoResourceKind=EntandoApp\n          - name: POD_IP\n            valueFrom:\n              fieldRef:\n                fieldPath: status.podIP\n    - kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart2"\n      spec:\n        dbms: none\n        replicas: 1\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: my.host.name\n        environmentVariables:\n          - name: SPRING_PROFILES_ACTIVE\n            value: "default,swagger"\n          - name: PORTDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: PORTDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-portdb-secret\n                optional: false\n          - name: PORTDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: PORTDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: SERVDB_URL\n            value: jdbc:postgresql://quickstart-postgresql-db-service.test.svc.cluster.local:5432/quickstart_postgresql_db\n          - name: SERVDB_USERNAME\n            valueFrom:\n              secretKeyRef:\n                key: username\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                key: password\n                name: quickstart1-servdb-secret\n                optional: false\n          - name: SERVDB_CONNECTION_CHECKER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker\n          - name: SERVDB_EXCEPTION_SORTER\n            value: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter\n          - name: JGROUPS_CLUSTER_PASSWORD\n            value: xxxxxxxx\n          - name: OPENSHIFT_KUBE_PING_LABELS\n            value: EntandoResourceKind=EntandoApp\n          - name: POD_IP\n            valueFrom:\n              fieldRef:\n                fieldPath: status.podIP\n \n '},{title:"Connect to an External Keycloak Instance",frontmatter:{},regularPath:"/v6.3/tutorials/devops/external-keycloak/",relativePath:"v6.3/tutorials/devops/external-keycloak/README.md",key:"v-483bee76",path:"/v6.3/tutorials/devops/external-keycloak/",headers:[{level:2,title:"Purpose",slug:"purpose"},{level:2,title:"Requirements",slug:"requirements"},{level:2,title:"Steps",slug:"steps"},{level:3,title:"1. Get keycloak information",slug:"_1-get-keycloak-information"},{level:3,title:"2. Generate the secret",slug:"_2-generate-the-secret"},{level:3,title:"3. Upload the secret",slug:"_3-upload-the-secret"},{level:3,title:"4. Deploy the Entando6 application",slug:"_4-deploy-the-entando6-application"},{level:2,title:"Conclusion",slug:"conclusion"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Connect to an External Keycloak Instance \n Purpose \n This tutorial enables the Entando administrator to leverage an existing\nKeycloak instance. \n Requirements \n \n \n A Keycloak instance \n \n \n A realm named "entando" on that instance \n \n \n An admin user for the "entando" realm \n Steps \n 1. Get keycloak information \n Retrieve the relevant information from the Keycloak instance you want to\nuse. \n Specifically you will need: \n \n \n The username of the Keycloak admin that has admin rights to the\n"entando" realm, e.g entando-keycloak-admin \n \n \n The Keycloak admin password, e.g. password123 \n \n \n The base url for the Keycloak server, including the auth value, e.g.\n https://my-keycloak-instance.com/auth \n 2. Generate the secret \n You now need to generate a secret with name  keycloak-admin-secret \nusing the information retrieved from step 1. The Entando administrator\nwill automatically detect this secret by name, and use it to log onto\nthe provided Keycloak server. \n Here is an example of the secret you will need to construct: \n ---\napiVersion: v1\nstringData:\n    username: <the username of the Keycloak admin user for the "entando" realm>\n    password: <the password of this Keycloak admin user>\n    url: <the base url of the Keycloak service, typically ending with the path /auth>\nkind: Secret\nmetadata\n    name: keycloak-admin-secret\n    namespace: <your-app-namespace>\ntype: Opaque\n \n \n Note \n To encode your values, in bash, you can do\n echo <your-value> | base64 \n 3. Upload the secret \n Next upload the secret to the namespace where you want to deploy your\nEntando 6 instance. \n oc create -f my-secret.yaml -n <my-app-namespace>\n 4. Deploy the Entando6 application \n Now you are ready to deploy your Entando 6 application and the\nadministrator will reuse the  keycloak-admin-secret  secret to populate\nthe environment correctly. \n Conclusion \n You should now have a working Entando 6 instance using an external\nKeycloak server. \n'},{title:"Entando 6 Azure Kubernetes Installation Instructions",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",relativePath:"v6.3/tutorials/devops/installation/azure-kubernetes-service/azure-install.md",key:"v-1b846906",path:"/v6.3/tutorials/devops/installation/azure-kubernetes-service/azure-install.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Deploy NGINX Ingress Controller",slug:"deploy-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress Install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:2,title:"Appendix A - Example values.yaml file for Helm Quickstart",slug:"appendix-a-example-values-yaml-file-for-helm-quickstart"},{level:2,title:"Appendix B - Troubleshooting",slug:"appendix-b-troubleshooting"}],lastUpdated:"1/4/2021, 4:09:52 AM",content:' Entando 6 Azure Kubernetes Installation Instructions \n Prerequisites \n \n Azure account\n \n \n \n Note: If you\'re using an Azure free account, you may need to upgrade your account first to enable pay-as-you-go billing. The Azure free account default quota includes just 1-4 vCPU which is not sufficient for this tutorial. There may be a delay before the quotas are updated when you upgrade your account. \n \n \n \n \n If you\'re not using Azure Cloud Shell:\n \n Azure command line tool \n Helm2 client \n Overview \n The steps below walk you through installing the Entando platform in an Azure Kubernetes Services (AKS) cluster. Generally the steps are: \n \n Create an AKS cluster with 5 nodes (to allow expansion for microservices) \n Install nginx as an ingress controller in the cluster \n Install Entando \n \n If you\'re already comfortable setting up an AKS cluster and installing nginx then you may be able to skip to  setting up Entando . \n Cluster Setup \n Setup and Connect to the Cluster \n \n Login to Azure ( https://portal.azure.com/ ) \n Select the  Kubernetes services  icon\n \n If not listed click  More services  on the right and search for Kubernetes \n \n \n Click  Add  in upper left corner \n Select  Kubernetes cluster . You\'ll start with the  Basics  tab. \n Select a  Resource group  or create one with the  Create new  link if it you don’t have one, e.g.  resource-group-1 \n Enter a name of your choice in Kubernetes cluster name, e.g.  cluster-1 \n Pick your  Region  if it wasn\'t automatically selected for you. \n In the  Availability zones  dropdown pick  one and only one  availability zone\n \n Generally, you could pick more than one but it will result in a failure in a quickstart environment. If you chose more than one availability zone you will have to provision storage, manage node affinity, and ensure correct network configuration to ensure your application deploys. We recommend only doing this for production clusters. \n \n \n Select   1.18.10  for the  Kubernetes version \n Keep the default  Node size , e.g.  Standard DS2 v2 \n Change the  Node count  to  5 \n Click  Next: Node Pools  to move to the next tab. \n Keep the default values here\n \n If you\'re familiar with AKS your can change as desired based on your objectives/knowledge \n \n \n Click  Next: Authentication \n For  Authentication method  select  System-assigned managed identity \n \n You can pick a  Service principal  instead and Azure will automatically generate one for you. If you use an existing principal it is up to you to configure it and ensure you have the access you need. \n \n \n Click  Next: Networking \n Enter a value for DNS name prefix, e.g.  cluster-1-dns \n Click  Review + Create \n \n Note: There are many other configuration options available for an AKS cluster. Generally, you can change these based on your experience and comfort level with the AKS platform. Entando uses base Kubernetes APIs so as long as you follow the Entando configuration instructions below you can tune your cluster infrastructure to meet your goals \n \n \n Select  Create \n Wait for your cluster to initialize.\n \n This may take a few minutes \n Deploy NGINX Ingress Controller \n \n Navigate to your cluster by clicking  Go to Resource  from the results page or by the top navigation  Home - Kubernetes service  and clicking on your cluster. \n Select  Connect \n Select  Bash \n Run the first two commands (e.g.  az account set...  and  az aks get-credentials...  to connect to your cluster. This should only be needed the first time you run the Azure Cloud Shell.\n \n The Cloud Shell times out after 20 minutes of inactivity. \n The following instructions assume you\'ll use the Azure Cloud Shell but you can also run the commands in a local environment if you have  kubectl \n \n \n Deploy nginx with the commands below. See  nginx instructions  for more details. \n \n kubectl create namespace ingress-basic\n \n helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo add stable https://kubernetes-charts.storage.googleapis.com/\nhelm repo update\n \n helm install nginx-ingress ingress-nginx/ingress-nginx \\\n    --namespace ingress-basic \\\n    --set controller.replicaCount=2 \\\n    --set controller.nodeSelector."beta\\.kubernetes\\.io/os"=linux \\\n  --set defaultBackend.nodeSelector."beta\\.kubernetes\\.io/os"=linux\n \n \n Get the external IP address for your ingress controller. Record the value of EXTERNAL-IP for  nginx-ingress-controller  from the command below. \n \n kubectl get service -n ingress-basic\n Verify the NGINX Ingress Install \n We recommend setting up a test application so you can easily verify the ingress is working in your cluster. See  this page  for those steps. You can use either Azure Cloud Shell or your local  kubectl . \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs: \n \n kubectl create -f dist/crd\n Deploy Your Entando Application \n You can now deploy your application to Azure Kubernetes Service. \n \n Download and unpack the entando-helm-quickstart: \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n See the included README file for more information on subsequent steps. \n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n \n Edit the  values.yaml \n \n Set  supportOpenshift: false \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the EXTERNAL-IP of your ingress controller and add nip.io to the end\n \n For example:  ENTANDO_DEFAULT_ROUTING_SUFFIX: 52.188.177.248.nip.io \n \n \n Configure nginx as the ingress controller and enable file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix A  for an example values.yaml \n \n \n \n Create the Entando namespace: \n \n \n kubectl create namespace entando\n \n \n Run helm to generate the template file: \n \n helm template my-aks-app --namespace=entando ./ > my-aks-app.yaml\n \n \n Deploy Entando via \n \n kubectl create -f my-aks-app.yaml\n \n \n Watch Entando startup. The application will be available when the quickstart-server-deployment pod shows 3/3 in the READY column and RUNNING in the STATUS column. \n \n kubectl get pods -n entando --watch\n \n \n Check for the Entando ingresses using \n \n kubectl describe ingress -n entando\n \n \n Access your app on the url for the ingress of the app builder, e.g.  http://quickstart-entando.EXTERNAL-IP.nip.io/entando-de-app \n Appendix A - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-IP>  with the EXTERNAL-IP address of your nginx controller \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-IP>.nip.io\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n   ENTANDO_INGRESS_CLASS: "nginx"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n Appendix B - Troubleshooting \n If you get an error like:  0/5 nodes are available: 5 node(s) had volume node affinity conflict.  or if your deployment hangs in a situation like this from  kubectl get pods -n entando \n NAME                                                 READY   STATUS      RESTARTS   AGE\nmy-aks-app-operator-644697776f-sxtq2                 1/1     Running     0          13m\nquickstart-composite-app-deployer-2guz0n42pc         1/1     Running     0          13m\nquickstart-deployer-jj4njqk4bg                       1/1     Running     0          10m\nquickstart-eci-deployer-t0xktqsonk                   0/1     Completed   0          11m\nquickstart-eci-k8s-svc-deployment-78f64c8d89-7c578   1/1     Running     0          11m\nquickstart-kc-deployer-16gzv3clsj                    0/1     Completed   0          13m\nquickstart-kc-server-deployment-7c9bc65744-g52nx     1/1     Running     0          13m\nquickstart-server-deployment-55fcfc6b68-szvkl        0/3     Pending     0          10m\n \n Double check your availability zones. By default an Azure cluster will include nodes from multiple zones but it will not provision storage\nfor all of those nodes so you can\'t deploy your application. \n You can confirm this error in the AKS console as well: \n \n In your cluster select  Workloads  in the left nav \n Click on the deployment for your server application. This is  quickstart-server-deployment  by default \n Click on the deployment name inside that application. There will be one \n Click on the tab labeled  Conditions \n If you see an error that says  0/5 nodes are available: 5 node(s) had volume node affinity conflict.  Then you need to reconfigure\nyour cluster to have nodes in one zone or work with your Azure operations team to provision storage to match node affinity. \n \n'},{title:"Installation on Amazon Elastic Kubernetes Service (EKS)",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",relativePath:"v6.3/tutorials/devops/installation/elastic-kubernetes-service/eks-install.md",key:"v-80e5c274",path:"/v6.3/tutorials/devops/installation/elastic-kubernetes-service/eks-install.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Overview",slug:"overview"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Install the NGINX Ingress Controller",slug:"install-the-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress Install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:2,title:"Appendix A - Troubleshooting",slug:"appendix-a-troubleshooting"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"1/4/2021, 4:09:52 AM",content:' Installation on Amazon Elastic Kubernetes Service (EKS) \n Prerequisites \n \n AWS CLI \n AWS account \n kubectl \n A domain or the ability to purchase one. Can use route 53 for this inside AWS if doing it all inline \n helm2 client \n Overview \n The steps below walk you though installing the Entando platform in an EKS cluster. Generally the steps are: \n \n Configure an IAM role to allow kubernetes to manage the cluster \n Create an EKS cluster with 5 nodes (to allow expansion for microservices) \n Install nginx as an ingress controller in the cluster \n Register a domain (if you don\'t already have one) and configure it for wildcard subdomains. \n Install Entando \n \n If you\'re already comfortable setting up an EKS cluster and installing nginx then you may be able to skip to  setting up Entando . \n Cluster Setup \n These steps will use the AWS console to create the cluster. If you’re already familiar with creating an EKS cluster and assigning nodes to it via the AWS cli then you can use the cli process for cluster creation as well. \n Setup and Connect to the Cluster \n \n \n Login to AWS as a non-super admin user \n \n If you don’t have a user besides the super admin it is recommended that you create one. Clusters created using the super admin for your account will have some restrictions that may complicate your installation. \n Your user will need access to EKS and at least the ability to create a cluster. You may need additional policies for Route53 and other services depending on your exact configuration. \n \n \n \n Create an IAM role for the cluster so that AWS can provision assets. See  https://docs.aws.amazon.com/eks/latest/userguide/worker_node_IAM_role.html  for more details. \n \n Select  IAM  from services \n Select  Create role \n Select  AWS Service  box at the top for the type of trusted entity \n Click  EKS  from the main list \n Click  EKS - Cluster  under  Select your use case \n Click  Next:Permissions \n A Policy of  AmazonEKSClusterPolicy  should already be present \n Click  Next: Tags \n (Optional) Add tags if you want \n Click  Next: Review \n Name your role (you’ll need this later), e.g.  my-eks-role \n \n \n \n Refine the role to enable Nodegroup management and to add ELB access so that the cluster can deploy a load balancer for nginx. \n \n Go to  IAM → Roles → your role \n Under permissions click  Attach policies \n Add a policy of  AmazonEKSWorkerNodePolicy \n Add a policy of  AmazonEKS_CNI_Policy \n Add a policy of  AmazonEC2ContainerRegistryReadOnly \n Add a policy of  ElasticLoadBalancingFullAccess \n \n \n \n Go to  Services  and select  Elastic Kubernetes Service \n \n \n Create an EKS Cluster \n \n Add a cluster name (e.g.  cluster-1 ) and click  Create EKS cluster \n Select  1.18  for the Kubernetes version \n For  Cluster Service Role , select the role you created above, e.g.  my-eks-role . If you choose a different role it must have ELB permissions so the cluster can create a load balancer in  Networking  (Step 2). \n Click  Next \n Use the defaults for  Networking  (Step 2) and click  Next \n Use the defaults for  Configure Logging  (Step 3) and click  Next . \n Review your settings and then click  Create . Cluster provisioning usually takes between 10 and 15 minutes. \n See  https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html  for more information on cluster creation. \n \n \n \n Add a node group to the cluster \n \n Go to  Services → Elastic Kubernetes Service → Clusters  → Click on your cluster name. \n Go to the  Compute  tab \n Click  Add Node Group \n Name : give your group a name, e.g.  node-1 \n Node IAM Role : Select the cluster role you created above. If the role doesn\'t appear, verify that you added the extra policies to the role. \n Subnets  - VPC subnets should already be setup and selected. \n Select  Allow remote access to nodes .  Follow the links to create a new SSH key pair if you don\'t already have one. \n Click  Next \n AMI type:  Amazon Linux 2 \n Instance type:  t3.medium \n Click  Next \n Set  Maximum size  to 5. This will be over-resourced for a  Getting Started  experience but will leave capacity for adding microservices to your cluster without modifying the Nodegroup. \n Click  Next \n Review your settings and then click  Create \n \n \n \n Connect  kubectl  to the cluster \n \n Note:  If this is a brand new setup you will need to login using the user you used to create your cluster in the console in the steps above. Make sure the users match.\n \n aws-configure  (and then provide the Access key, etc.) \n \n \n aws eks --region region-code update-kubeconfig --name cluster_name \n More details and troubleshooting  https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html \n Your current context should now be configured for your AWS cluster. Run the command below to check: \n \n $  kubectl config current-context\n \n Your output should look something like this: \n arn:aws:eks:us-east-2:483173223614:cluster/cluster-1\n Install the NGINX Ingress Controller \n \n Add the NGINX controller for ingress. This depends on your role having permissions for ELB.\n \n For basic nginx ingress install run this command \n \n kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.41.2/deploy/static/provider/aws/deploy.yaml\n \n \n See  https://kubernetes.github.io/ingress-nginx/deploy/#aws  as well as  this  for more detailed install steps. \n \n \n Get the ELB external URL for your nginx install\n \n Run:  kubectl get services -n ingress-nginx \n Get the value of the external address (EXTERNAL-IP) for the ingress-nginx-controller: \n \n \n \n NAME                                 TYPE           CLUSTER-IP       EXTERNAL-IP                        \ningress-nginx-controller             LoadBalancer   10.100.102.83    ad234bd11a1ff4dadb44639a6bbf707e-0e0a483d966405ee.elb.us-east-2.amazonaws.com\n Verify the NGINX Ingress Install \n We recommend setting up a test application so you can easily verify the ingress is working in your cluster. See  this page  for those steps. You can use your local  kubectl . \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs:  kubectl create -f dist/crd \n Deploy Your Entando Application \n You can now deploy your application to Amazon EKS. \n \n Download and unpack the  entando-helm-quickstart  release: \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n See the included README file for more information on the following steps. \n \n \n Go to the downloaded directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n \n Edit  values.yaml  in the root directory: \n \n Set  supportOpenshift: false \n Set  singleHostName  to the value of the  EXTERNAL-IP  of your  ingress-nginx-controller :\n \n For example:  singleHostName: ad234bd11a1ff4dadb44639a6bbf707e-0e0a483d966405ee.elb.us-east-2.amazonaws.com \n \n \n Configure nginx as the ingress controller and enable file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix B  for an example values.yaml \n \n \n \n Create the Entando namespace:  kubectl create namespace entando \n \n \n Run helm to generate the template file: \n \n \n helm template my-eks-app --namespace=entando ./ > my-eks-app.yaml\n \n \n Deploy Entando via  kubectl create -f my-eks-app.yaml \n Watch Entando startup  kubectl get pods -n entando --watch \n Check for the Entando ingresses using  kubectl describe ingress -n entando \n Access your app on the url for the ingress of the app builder. This will be the URL of your load balancer followed by  /app-builder  or  /entando-de-app  for the deployed application, e.g.  http://ad234bd11a1ff4dadb44639a6bbf707e-0e0a483d966405ee.elb.us-east-2.amazonaws.com/app-builder \n Appendix A - Troubleshooting \n IAM And Roles \n \n https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html \n https://stackoverflow.com/questions/56863539/getting-error-an-error-occurred-accessdenied-when-calling-the-assumerole-oper \n \n NGINX \n \n https://docs.nginx.com/nginx/deployment-guides/amazon-web-services/ingress-controller-elastic-kubernetes-services/ \n Issue with permissions for NGINX ingress: \n \n  Warning  SyncLoadBalancerFailed   38m                 service-controller  (combined from similar events): Error syncing load balancer: failed to ensure load balancer: error creating\n Appendix B - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-DOMAIN>  with the domain you\'ve configured for your cluster. \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-DOMAIN>\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n   ENTANDO_INGRESS_CLASS: "nginx"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n\n \n '},{title:"Installation on Google Kubernetes Engine (GKE)",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/devops/installation/google-cloud-platform/",relativePath:"v6.3/tutorials/devops/installation/google-cloud-platform/README.md",key:"v-b6142aea",path:"/v6.3/tutorials/devops/installation/google-cloud-platform/",headers:[{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Cluster Setup",slug:"cluster-setup"},{level:3,title:"Setup and Connect to the Cluster",slug:"setup-and-connect-to-the-cluster"},{level:3,title:"Install the NGINX Ingress Controller",slug:"install-the-nginx-ingress-controller"},{level:3,title:"Verify the NGINX Ingress install",slug:"verify-the-nginx-ingress-install"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:2,title:"Deploy Your Entando Application",slug:"deploy-your-entando-application"},{level:3,title:"Setup and Deploy",slug:"setup-and-deploy"},{level:3,title:"Quickstart with Embedded Databases",slug:"quickstart-with-embedded-databases"},{level:3,title:"External Database",slug:"external-database"},{level:2,title:"Appendix A - Cluster Sizing",slug:"appendix-a-cluster-sizing"},{level:3,title:"Updating the Nodes in Your Cluster",slug:"updating-the-nodes-in-your-cluster"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"1/4/2021, 4:09:52 AM",content:' Installation on Google Kubernetes Engine (GKE) \n Prerequisites \n \n Google Cloud account:  http://cloud.google.com/ \n Install these tools locally if you\'re not using the Google Cloud Shell steps below:\n \n Google Cloud SDK  including gcloud \n kubectl  command line tool \n Cluster Setup \n These steps only need to be completed once per cluster. \n Setup and Connect to the Cluster \n \n Login to your Google Cloud account:  https://cloud.google.com/ \n Go to  Kubernetes Engine → Clusters → Create Cluster \n Enter a name and select a  Location type \n \n The  Location type  settings are up to you. The defaults are fine for an initial test. \n \n \n Select  1.16.15-gke.4901  for the  Master version \n On the left menu select  default-pool \n Under  Size  set the  Number of nodes  entry to 5.  (See  Appendix A  for details.) \n Click  Create \n Wait for the cluster to initialize. This will take a few minutes. There will be a green check mark when complete. \n Click  Connect  for your new cluster. \n Click  Run in Cloud Shell \n \n Alternatively, copy the provided command and execute it in your local environment to connect your local  kubectl  to your GKE cluster. \n \n \n Run  kubectl get namespaces  to verify your connection: \n \n a_user@cs-6000-devshell-vm-c34ef644-5584-4c5d-aa14-6e41af4a5c9a:~$ kubectl get namespaces\nNAME              STATUS   AGE\ndefault           Active   6m11s\nkube-node-lease   Active   6m12s\nkube-public       Active   6m12s\nkube-system       Active   6m13s\n Install the NGINX Ingress Controller \n Entando isn’t compatible out of the box  with the default ingress controller provided in GKE.\nSee here for more if you’re interested in GKE ingress:  https://cloud.google.com/kubernetes-engine/docs/concepts/ingress \n We’re going to install the NGINX ingress controller to manage the ingresses for Entando services\ndeployed by the operator. This will be a simpler and more adaptable configuration for most users and\nenvironments. Users who really need the GKE ingress controller (rare) could integrate it following\nthe instructions provided by GKE and then customize the service definition created by the Entando\noperator. \n These are the minimal instructions to prepare NGINX ingress using the Google Cloud Shell. To install it\nusing your local  kubectl  or to vary other settings please see the more detailed documents here:\n https://cloud.google.com/community/tutorials/nginx-ingress-gke  and  https://kubernetes.github.io/ingress-nginx/deploy/#gce-gke . \n \n Initialize your user as a cluster-admin: \n \n kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin \\\n--user $(gcloud config get-value account)\n \n \n Install the ingress controller pods: \n \n kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml\n \n \n To check if the ingress controller pods have started, run the following command: \n \n    kubectl get pods -n ingress-nginx \\\n     -l app.kubernetes.io/name=ingress-nginx --watch\n \n \n Wait until the ingress-nginx-controller status changes to  Running : \n \n NAME                                        READY   STATUS      RESTARTS   AGE\ningress-nginx-admission-create-27tgt        0/1     Completed   0          65s\ningress-nginx-admission-patch-7wmgl         0/1     Completed   1          65s\ningress-nginx-controller-7656c59dc4-7xgmc   1/1     Running     0          75s\n \n \n Get the external IP address for your ingress controller. Record the value of EXTERNAL-IP for  nginx-ingress-controller  from the command below. \n \n kubectl get service -n ingress-nginx\n Verify the NGINX Ingress install \n We recommend setting up a test application so you can easily verify the ingress is working. \n \n From the  Cloud Shell,  create a simple application by running the following command: \n \n kubectl run hello-app --generator=run-pod/v1 --image=gcr.io/google-samples/hello-app:1.0 --port=8080\n \n \n Expose the  hello-app  Pod as a Service: \n \n kubectl expose pod hello-app\n \n \n Create an  ingress-resource.yaml  file with this content: \n \n apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: ingress-resource\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/ssl-redirect: "false"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /hello\n        backend:\n          serviceName: hello-app\n          servicePort: 8080\n \n \n Now create the Ingress Resource using  kubectl apply -f ingress-resource.yaml \n Verify that the Ingress Resource has been created using  kubectl get ingress ingress-resource .\nIt may take a few minutes for the  Address  to be populated. \n Verify you can access the web application by going to the  EXTERNAL-IP/hello  address, using the\n Address  from the previous nginx-ingress-controller. You should see the following: \n \n Hello, world!\nVersion: 1.0.0\nHostname: hello-app\n \n Note the external IP address of your ingress controller since you’ll need it for the application configuration.\nThe Entando deployment exposes an environment variable to set the ingress controller to be used as part of the deployment. That variable is  ENTANDO_INGRESS_CLASS  and should be set to  nginx  in deployments to GKE (this is documented in the application instructions below as well) \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . \n \n Download the Custom Resource Definitions (CRDs) and unpack them: \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs:  kubectl create -f dist/crd \n Deploy Your Entando Application \n You can now deploy your Entando applications to GKE. \n Setup and Deploy \n \n Download and unpack the entando-helm-quickstart: \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n Edit  values.yaml in the root directory:\n \n Set  supportOpenshift: false \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the IP value of your  nginx  controller plus .nip.io\n \n For example:  ENTANDO_DEFAULT_ROUTING_SUFFIX: 35.223.161.214.nip.io \n We’re using  https://nip.io  because we need wildcard dns address resolution however nip.io is not required. If your enterprise has a different internal dns resolution scheme for development instances you can use that or other alternative dns services like xip.io. \n \n \n If not already present, set these values to utilize nginx as the ingress controller and file system groups for persistent volume access:\n \n ENTANDO_INGRESS_CLASS: "nginx" \n ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true" \n \n \n See  Appendix B  for an example values.yaml \n \n \n Create the Entando namespace: \n \n kubectl create namespace entando\n \n \n Update helm dependencies: \n \n helm dependency update\n \n \n Run helm to generate the template file: \n \n helm template my-app --namespace=entando ./ > my-app.yaml\n \n \n Deploy Entando via \n \n kubectl create -f my-app.yaml\n \n \n Watch Entando startup \n \n kubectl get pods -n entando --watch\n \n \n Check for the Entando ingresses using \n \n kubectl describe ingress -n entando\n \n This is a snippet: \n quickstart-entando.34.71.130.61.nip.io\n                                          /entando-de-app     quickstart-server-service:8080 (10.44.2.3:8080)\n                                          /digital-exchange   quickstart-server-service:8083 (10.44.2.3:8083)\n                                          /app-builder/       quickstart-server-service:8081 (10.44.2.3:8081)\n \n \n Access Entando at the app-builder endpoint, e.g.  http://quickstart-entando.34.71.130.61.nip.io/app-builder/ \n Quickstart with Embedded Databases \n The lightest weight and fastest to deploy option for evaluation and getting started uses embedded databases for the application and Keycloak.\nTo deploy quickstart with embedded databases at the top of values.yaml add  dbms: none  under the app section in the file. See Appendix B for an example. \n External Database \n You can also use an external database instance for your application.\nThis is recommended for projects that will be developed for delivery to customers or stakeholders.\nAny dbms that is reachable from the cluster can be used. \n Example: Deploy Postgres to a Namespace on Your Cluster \n These instructions will deploy a postgres instance to a namespace in your kubernetes cluster. \n https://github.com/GoogleCloudPlatform/postgresql-docker/blob/master/9/README.md#run-a-postgresql-server-kubernetes \n \n Note: If deployed this way the address you use for the database in the helm template must be a full address rather than an IP address alone. Use the database IP plus nip.io for a dev instances \n \n Once deployed you can use the  external database instructions  to\nconnect your Entando application to your instance., \n Connect CloudSQL to GKE \n \n This link describes creating a PG instances using the GCP Cloud SQL\n \n https://cloud.google.com/sql/docs/postgres/create-instance \n \n \n Connecting from GKE to Cloud SQL\n \n https://cloud.google.com/sql/docs/postgres/connect-kubernetes-engine \n Appendix A - Cluster Sizing \n In the cluster setup instructions you set the number of nodes in your cluster to 5. This setting\nassumes the default node type with a single VCPU per instance and 3.8 GB of RAM. The kubernetes\nsystem and nginx will request approximately 1 CPU in total. The Entando application will deploy\non the remaining 4. This configuration is suitable for a development team but may need to be\nexpanded as microservices are added to the architecture. \n If you’re running other applications (like a postgres instance) in your cluster you may need\nmore nodes. \n Updating the Nodes in Your Cluster \n \n Select Kubernetes Engine from the left nav in GCP \n Select Clusters \n Hit the Edit button (pencil on the right) \n Scroll to bottom \n Click the link labeled default-pool \n Edit button at the top \n Change the nodes to the number you\'d like to include \n Save \n Wait until updated on clusters page (green checkmark on cluster) \n Appendix B - Example values.yaml file for Helm Quickstart \n In the example below the application will deploy with embedded databases and will use  nginx \nas the ingress controller. Replace  <YOUR-NGINX-IP>  with the ip address where your  nginx \ninstance is exposed on your cluster. \n app:\n name: quickstart\n dbms: none\noperator:\n supportOpenshift: false\n env:\n   ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n   #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n   #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n   ENTANDO_DEFAULT_ROUTING_SUFFIX: <YOUR-NGINX-IP>.nip.io\n   ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n   ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n   ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n   ENTANDO_REQUIRES_FILESYSTEM_GROUP_OVERRIDE: "true"\n   ENTANDO_INGRESS_CLASS: "nginx"\n   ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n tls:\n   caCrt:\n   tlsCrt:\n   tlsKey:\ndeployPDA: false\n\n \n '},{title:"Installation on OpenShift",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/devops/installation/open-shift/openshift-install.html",relativePath:"v6.3/tutorials/devops/installation/open-shift/openshift-install.md",key:"v-1f0dbe86",path:"/v6.3/tutorials/devops/installation/open-shift/openshift-install.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Local Installation",slug:"local-installation"},{level:3,title:"Install the Entando Custom Resource Definitions (CRDs)",slug:"install-the-entando-custom-resource-definitions-crds"},{level:3,title:"Get your Cluster Default Ingress",slug:"get-your-cluster-default-ingress"},{level:3,title:"Setup and Deploy",slug:"setup-and-deploy"},{level:2,title:"Appendix A - Troubleshooting and Common Errors",slug:"appendix-a-troubleshooting-and-common-errors"},{level:3,title:"Permission Errors",slug:"permission-errors"},{level:3,title:"Forbidden Error installing Entando Custom Resource Definitions in Minishift or CRC",slug:"forbidden-error-installing-entando-custom-resource-definitions-in-minishift-or-crc"},{level:3,title:"Application is not available when accessing app builder",slug:"application-is-not-available-when-accessing-app-builder"},{level:3,title:"Network Issues",slug:"network-issues"},{level:2,title:"Appendix B - Example values.yaml file for Helm Quickstart",slug:"appendix-b-example-values-yaml-file-for-helm-quickstart"}],lastUpdated:"3/31/2021, 10:45:23 AM",content:' Installation on OpenShift \n Overview \n This tutorial shows how to manually install Entando into OpenShift 3.11 or 4.x. If you\'re working with OpenShift 4.6+ then you also have the option of using the Red Hat-certified Entando Operator which should be available in your OperatorHub thanks to the Red Hat Marketplace. See  this tutorial  for instructions specific to the  Entando Operator. \n Prerequisites \n \n An OpenShift installation (3.11 or 4.x) \n oc  command line tool \n A helm 3 client \n Local Installation \n If you want to run OpenShift in your local development environment you can run Minishift (OpenShift 3.11) or Code Ready Containers (OpenShift 4). Use the local development version that matches the cluster where you intend to deploy your application. \n For Minishift:  https://docs.okd.io/3.11/minishift/getting-started/installing.html \n For CRC:  https://developers.redhat.com/products/codeready-containers/download \n Once you\'ve completed the installation above capture the local IP address of your development instance using  minishift ip  or  crc ip . You\'ll need it when configuring your Entando application. \n Login to your OpenShift environment from the command line with  oc login  using the URL and credentials for your cluster. \n Install the Entando Custom Resource Definitions (CRDs) \n Once per cluster you need to deploy the  Entando Custom Resources . This is the only step in this guide that requires cluster level access. If you are running on Minishift or CRC make sure you are connected using the administrator login provided when you started your local instance. \n \n Download the Custom Resource Definitions (CRDs) and unpack them: \n \n curl -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz | tar -xz\n \n \n Install the Entando CRDs: \n \n oc create -f dist/crd\n Get your Cluster Default Ingress \n If you\'re deploying on a managed cluster get the default hostname from your cluster administrator. Entando uses wildcard addressing to connect different parts of your Entando application and the default route for applications exposed on your cluster is needed. You\'ll set this value in step 3 below. \n Setup and Deploy \n \n Download and unpack the entando-helm-quickstart release you want to use from here:\n https://github.com/entando-k8s/entando-helm-quickstart/releases \n \n \n See the included README file for more information on the following steps. \n \n curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.0.tar.gz | tar xvz\n \n \n Change into the new directory \n \n cd entando-helm-quickstart-6.3.0\n \n \n Edit  values.yaml in the root directory:\n \n Set  supportOpenshift: true \n If you\'re deploying to a managed cluster:\n \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the default URL of applications deployed in your OpenShift cluster. If you\'re unsure of this value, please check with your cluster administrator for this URL. \n Entando will create applications using that default URL and relies on wildcard DNS resolution. \n \n \n If you\'re using Minishift or CRC:\n \n Set  ENTANDO_DEFAULT_ROUTING_SUFFIX  to the value from  minishift ip  or  crc ip  plus  nip.io . For example,  ENTANDO_DEFAULT_ROUTING_SUFFIX: 192.168.64.10.nip.io \n \n \n See  Appendix B  for an example values.yaml \n \n \n Create the Entando namespace: \n \n oc new-project entando\n \n \n Update helm dependencies: \n \n helm dependency update\n \n \n Run helm to generate the template file: \n \n helm template my-app --namespace=entando ./ > my-app.yaml\n \n \n If you\'re using Helm 2 instead of Helm 3, then replace  helm template my-app  with  helm template --name=my-app \n \n \n Deploy Entando via \n \n oc create -f my-app.yaml\n \n \n If you see this error  no matches for kind "Deployment" in version "extensions/v1beta1" , then you\'ll need to edit my-app.yaml and set  apiVersion: "apps/v1"  for the Deployment. \n \n \n Watch Entando startup \n \n oc get pods -n entando --watch\n \n \n This step is complete when the  quickstart-server  pod shows 3/3 running. For example, \n \n quickstart-server-deployment-6c89fb49f7-gpmqc   3/3   Running   0     72s\n \n \n The full pod name will differ but by default will start with  quickstart-server-deployment . \n \n \n Check for the Entando ingresses using  oc describe ingress -n entando . This is a snippet: \n \n Name:             quickstart-ingress\nNamespace:        entando\nAddress:          \nDefault backend:  default-http-backend:80 (<none>)\nRules:\n  Host                                 Path  Backends\n  ----                                 ----  --------\n  quickstart-entando.192.168.64.10.nip.io  \n                                       /entando-de-app     quickstart-server-service:8080 (<none>)\n                                       /digital-exchange   quickstart-server-service:8083 (<none>)\n                                       /app-builder/       quickstart-server-service:8081 (<none>)\n \n The host path in the configuration above plus  /app-builder/  (trailing slash is important) will allow you to log into your environment. For example,\n http://quickstart-entando.192.168.64.10.nip.io/app-builder/ \n Appendix A - Troubleshooting and Common Errors \n Permission Errors \n If you get OpenShift permission errors deploying your Entando application into your OpenShift namespace make sure your user has the  escalate  and  bind  verbs on Roles in the namespace you\'re deploying to. Ultimately you need this command to  oc auth can-i escalate role  to return  yes . That access is only required in the namespace where you are deploying your Entando application. No cluster level access is required. \n Check with your cluster administrator if you need help assigning these roles. Generally this requires the creation of a role with those permissions, preferably a ClusterRole, and then depending on how administrators manage security your Entando installer needs to be given that role in the target namespace. So let\'s assume the clusterRole we create is  entando-installer  and the user\'s name is john, on OpenShift creating the rolebinding would be:\n oc policy add-role-to-user entando-installer john -n <your-namespace> \n Before installing, we suggest running  oc auth can-i escalate role  with your given user in the targeted namespace. If it says "yes" you should be able to install. \n Forbidden Error installing Entando Custom Resource Definitions in Minishift or CRC \n If you get an error like the one below installing the CRDs in your local instance you need to login using the administrator role. \n /opt/ocInstallLocal$ oc create -f dist/crd/\nError from server (Forbidden): error when creating "dist/crd/EntandoAppCRD.yaml": customresourcedefinitions.apiextensions.k8s.io is forbidden: User "developer" cannot create resource "customresourcedefinitions" in API group "apiextensions.k8s.io" at the cluster scope\n \n The administrator credentials are printed when you started your local cluster in a message like this one: \n To access the cluster, first set up your environment by following \'crc oc-env\' instructions\nINFO Then you can access it by running \'oc login -u developer -p developer https://api.crc.testing:6443\'\nINFO To login as an admin, username is \'kubeadmin\' and password is xxxx-xxxx-xxxx-xxxx\n Application is not available when accessing app builder \n If you get the message "Application is not available" when accessing the app-builder make sure to include a trailing slash in the URL. For example,\nhttp://quickstart-entando.192.168.64.10.nip.io/app-builder/ \n Network Issues \n If you see errors when images are being retrieved (resulting in errors like ErrImagePull or ImagePullBackOff), you may want to start crc using  crc start -n "8.8.8.8  or configure the nameserver using  crc config set nameserver 8.8.8.8  before running  crc start . This will allow the cluster to perform DNS lookups via Google\'s public DNS server. \n If you\'re on Windows, you should also check out the notes  here  since Minishift and CRC rely on Windows Hyper-V by default. This can result in network issues when the host computer is restarted. \n Appendix B - Example values.yaml file for Helm Quickstart \n The example below includes configuration for deployment on a locally installed instance: \n app:\n  name: quickstart\n  dbms: none\n#externalDatabase:\n host: some.db.host\n port: 32432\n databaseName: sampledb\n username:\n password:\noperator:\n  supportOpenshift: true\n  env:\n    ENTANDO_DOCKER_IMAGE_VERSION_FALLBACK: 6.0.0\n    #ENTANDO_DOCKER_REGISTRY_OVERRIDE: docker.io # Remove comment if you want to always use a specific docker registry\n    #ENTANDO_DOCKER_IMAGE_ORG_OVERRIDE: entando # Remove the comment if you want to always use a specific docker organization\n    ENTANDO_DEFAULT_ROUTING_SUFFIX: 192.168.64.10.nip.io\n    ENTANDO_POD_READINESS_TIMEOUT_SECONDS: "1000"\n    ENTANDO_POD_COMPLETION_TIMEOUT_SECONDS: "1000"\n    ENTANDO_DISABLE_KEYCLOAK_SSL_REQUIREMENT: "true"\n    ENTANDO_K8S_OPERATOR_IMPOSE_DEFAULT_LIMITS: "false"\n    ENTANDO_K8S_OPERATOR_FORCE_DB_PASSWORD_RESET: "true"\n  tls:\n    caCrt:\n    tlsCrt:\n    tlsKey:\ndeployPDA: false\n \n '},{title:"Installation on Red Hat OpenShift using the OperatorHub",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.html",relativePath:"v6.3/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.md",key:"v-a2a432b4",path:"/v6.3/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Scenario 1 - Embedded Database",slug:"scenario-1-embedded-database"},{level:2,title:"Scenario 2 - PostgreSQL",slug:"scenario-2-postgresql"},{level:2,title:"Scenario 3 - PostgreSQL plus OpenShift SSL",slug:"scenario-3-postgresql-plus-openshift-ssl"},{level:2,title:"Scenario 4 - PostgreSQL plus self-signed SSL",slug:"scenario-4-postgresql-plus-self-signed-ssl"},{level:2,title:"Scenario 5 - Cluster-scoped operator with wildcard SSL",slug:"scenario-5-cluster-scoped-operator-with-wildcard-ssl"},{level:2,title:"Next Steps",slug:"next-steps"}],lastUpdated:"3/31/2021, 10:45:23 AM",content:" Installation on Red Hat OpenShift using the OperatorHub \n Overview \n The following tutorial shows how to install an Entando application using the Red Hat-certified  Entando Operator  and covers a few common enterprise configurations. If you're working with an OpenShift version prior to 4.6 then you may require the alternative  manual instructions . \n The first scenario listed below is similar to the Entando quickstart style of deployment which can be applied in many environments, including on local developer laptops. The subsequent scenarios build on that initial setup but can be performed directly as desired. Unless otherwise noted, you have the freedom to keep or modify the default options when installing the  Entando Operator  and other resources in the tutorials. \n Prerequisites \n \n A 4.6 (or higher) OpenShift installation\n \n For simplicity the tutorial instructions are for a local Code Ready Containers (CRC) instance but this will require significant dedicated resources, e.g. at least 4 vCPU and 10GB RAM. In some environments you may need to start CRC using  crc start -n 8.8.8.8  in order to install operators. \n \n \n Cluster-admin access to OpenShift for initial installation of the Entando Operator \n Familiarity with the OpenShift console and operation \n Scenario 1 - Embedded Database \n The initial scenario is to deploy the operator and Entando application in a single namespace. We'll start with the smallest application footprint which uses an embedded database. \n \n Locate the  Entando Operator  in the  Operators → OperatorHub  using the Filter feature. \n Click  Install  to view the  Entando Operator  install options. \n Select  A specific namespace on the cluster  for the  Installation mode . \n Choose an empty namespace for  Installed Namespace . You can create one from  Home → Projects  first, if needed, e.g.  entando-one . \n Click  Install  to install the operator into your target namespace. \n The install may take a few minutes to complete after which you can click  View Operator  to see the operator in your namespace, or you can go to  Operators → Installed Operators  at any point and select it from there. \n Now go to  Entando Composite Application  and click  Create instance \n Change the  Dbms Override  to  embedded . This is the lightest and quickest way to test a full Entando application but you'll need to modify the YAML as well in step 10. \n (Optional) If you're working in anything but a single project environment, you'll need to provide an  Ingress Host Name Override  specific to your namespace, e.g.  entando-one.<my-base-openshift-url>.  In CRC you can keep the default  entando.apps-crc.testing  for your first project. \n Switch to the YAML view and remove the following section since it isn't needed with an embedded database. \n \n     - kind: EntandoDatabaseService\n      metadata:\n        name: inline-entando-database-service\n      spec:\n        createDeployment: true\n \n \n (Optional) Feel free to edit the YAML to customize the names of the components deployed by the EntandoCompositeApp, e.g.  inline-entando-database-service \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources. \n Go to  Entando Composite Application → my-entando-composite-app  to check the status of the deploy or its  Events  tab to follow its progress. \n \n See the  Next Steps  below to continue your work with Entando. \n Scenario 2 - PostgreSQL \n For this scenario we'll prepare a more production-like configuration. Here we'll switch from an embedded on-disk database to a dedicated PostgreSQL database. For this scenario we'll start where step 6 ends in the previous scenario. If you already ran Scenario 1 you can either go to that project and remove the Composite App via  Installed Operators → Entando Operator → Entando Composite Application  or prepare a new project using steps 1-5 above. \n Now let's create a new application, this time using PostgreSQL. \n \n Go to  Entando Composite Application  and click  Create instance \n Keep the default  Dbms Override  as  postgresql . You should not remove the EntandoDatabaseService in this case. \n (Optional) Set the  Ingress Host Name Override  as in step 9 above. \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources just as in Scenario 1 but with the addition of a PostgreSQL database deployment. \n \n See the  Next Steps  below to continue your work with Entando. \n Scenario 3 - PostgreSQL plus OpenShift SSL \n For this scenario we'll build on Scenario 2 but enable SSL using OpenShift's internal Certificate Authority. As a starting point, you can either remove the Composite App from the previous scenarios or prepare a new project per steps 1-5 in Scenario 1. \n \n Using your browser, examine and save the SSL certificate for your environment. For example, in Chrome, go to any OpenShift console page, click on  View Site Information  next to the URL (it may be labeled  Not secure  ) then go to  Details -> Copy to File  and save the certificate as a Base-64 encoded X.509 file, e.g.  openshift.cer. \n Go to  Workflows → Secrets → Create  and select  Key/value secret \n Set the  Secret Name , e.g.  entando-ca-cert-secret \n Set the  Key , e.g.  openshift.cer \n Set the  Value  by clicking  Browse...  and loading the file you saved in Step 1. \n Click  Create \n Next go to  Workloads → ConfigMaps  and create a ConfigMap named  entando-operator-config  This is the ConfigMap used by the Operator to configure the deployments. You'll need to supply your own project name for the namespace. \n \n kind: ConfigMap\napiVersion: v1\nmetadata:\n name: entando-operator-config\n namespace: entando-one\ndata:\n entando.ca.secret.name: entando-ca-cert-secret\n entando.use.auto.cert.generation: 'true'\n \n \n Click  Create \n \n Now let's create a new application, just like in Scenario 2 but with the OpenShift SSL in place. \n \n Go to  Entando Composite Application  and click  Create instance \n Keep the default  Dbms Override  as  postgresql . \n (Optional) Set the  Ingress Host Name Override  as in Scenario 1 step 9. \n You don't need to set the  TLS Secret Name Override  since it will be taken from the  entando-operator-config  ConfigMap. \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources. \n \n Once the deployment is complete you can confirm that all routes use https with OpenShift's CA. You will likely still see security warnings in the browser. \n See the  Next Steps  below to continue your work with Entando. \n Scenario 4 - PostgreSQL plus self-signed SSL \n This scenario is similar to Scenario 3 but here we'll use a self-signed certificate rather than using OpenShift's Certificate Authority. As a starting point, you can either remove the Composite App from the previous scenarios or prepare a new project per steps 1-5 in Scenario 1. \n We'll start by creating a self-signed certificate and then preparing the Secrets and ConfigMap to match. There are various ways to create an X.509 self-signed certificate and you can use your own preferred mechanism. \n \n Using  OpenSSL  create a certificate for your application. You'll need to adjust the CN value to match your project. \n \n openssl req -nodes -x509 -newkey rsa:4096 -keyout tls.key -out tls.crt -days 365 -subj \"/CN=entando.apps-crc.testing\"\n \n You should see output similar to this: \n Generating a RSA private key\n.....................................................................++++\n........................................................................................................................................................................................++++\nwriting new private key to 'tls.key'\n-----\n \n Now we can create a TLS Secret using the generated files. \n \n Go to  Workloads → Secrets → Create  and select  From YAML . \n Enter this  YAML , update the namespace to match your project, and click  Create : \n \n kind: Secret\napiVersion: v1\nmetadata:\n  name: entando-tls-secret\n  namespace: entando-one\ndata:\n  tls.key: ''\n  tls.crt: ''\ntype: kubernetes.io/tls\n \n \n Click on  Actions → Edit Secret  and use the  Browse...  buttons to upload the key and cert files. \n \n Now we'll also create the  entando-ca-cert-secret  Secret, similar to what was done in Scenario 3 but now using the self-signed certificate. \n \n Go to  Workflows → Secrets → Create  and select  Key/value secret \n Set the  Secret Name , e.g.  entando-ca-cert-secret \n Set the  Key , e.g.  cert1.crt \n Set the  Value  by clicking  Browse...  and loading the cert file from Step 1, e.g.  tls.crt \n Click  Create \n Next go to  Workloads → ConfigMaps  and create a ConfigMap named  entando-operator-config.  This is the ConfigMap used by the Operator to configure the deployments. You'll need to supply your own project name for the namespace. \n \n kind: ConfigMap\napiVersion: v1\nmetadata:\n name: entando-operator-config\n namespace: entando-one\ndata:\n entando.ca.secret.name: entando-ca-cert-secret\n entando.tls.secret.name: entando-tls-secret\n \n \n Click  Create \n \n Now let's create a new application, just like in Scenario 3 but with the self-signed SSL. \n \n Go to  Entando Composite Application  and click  Create instance \n Keep the default  Dbms Override  as  postgresql . \n (Optional) Set the  Ingress Host Name Override  as in Scenario 1 step 9. \n You don't need to set the  TLS Secret Name Override  since it will be taken from the  entando-operator-config  ConfigMap. \n Click  Create . The  Entando Operator  will now proceed to deploy the appropriate resources. \n \n Once the deployment is complete you can confirm that all routes use https with the self-signed certificate. You will still see security warnings in the browser. \n See the  Next Steps  below to continue your work with Entando. \n Scenario 5 - Cluster-scoped operator with wildcard SSL \n For this scenario we'll install the Entando Operator so the same operator instance can manage applications across namespaces. \n \n Locate the  Entando Operator  in the  Operators → OperatorHub  using the Filter feature. \n Click  Install  to view the  Entando Operator  install options. \n Select  All namespaces on the cluster  for the  Installation mode . \n Keep the default  openshift-operators  for the  Installed Namespace . \n Click  Install  to install the operator into the cluster. \n \n Now, similar to Scenario 4, we'll setup a self-signed certificate but this time as a wildcard certificate and then configure the Secrets and ConfigMap to match. There are various ways to create an X.509 self-signed certificate and you can use your own preferred mechanism. \n \n Using  OpenSSL  create a certificate for your application. You'll need to adjust the CN value to match your environment but make sure to include the leading  *.  for the wildcard designation. \n \n openssl req -nodes -x509 -newkey rsa:4096 -keyout tls.key -out tls.crt -days 365 -subj \"/CN=*.apps-crc.testing\"\n \n You should see output similar to this: \n Generating a RSA private key\n.....................................................................++++\n........................................................................................................................................................................................++++\nwriting new private key to 'tls.key'\n-----\n \n Now we can go to the  openshift-operators  project and create a TLS Secret using the generated files. \n \n Go to  Workloads → Secrets → Create  and select  From YAML . \n Enter this  YAML  and click  Create : \n \n kind: Secret\napiVersion: v1\nmetadata:\n  name: entando-tls-secret\n  namespace: openshift-operators\ndata:\n  tls.key: ''\n  tls.crt: ''\ntype: kubernetes.io/tls\n \n \n Click on  Actions → Edit Secret  and use the  Browse...  buttons to upload the key and cert files. \n \n Now we'll also create the  entando-ca-cert-secret  Secret using the self-signed wildcard certificate. \n \n Go to  Workflows → Secrets → Create  and select  Key/value secret \n Set the  Secret Name , e.g.  entando-ca-cert-secret \n Set the  Key , e.g.  cert1.crt \n Set the  Value  by clicking  Browse...  and loading the cert file from Step 1, e.g.  tls.crt \n Click  Create \n Next go to  Workloads → ConfigMaps  and create a ConfigMap named  entando-operator-config.  This is the ConfigMap used by the Operator to configure the deployments. You'll need to supply the routing suffix for your environment. Don't include a leading  *.  since this is just the suffix. \n \n kind: ConfigMap\napiVersion: v1\nmetadata:\n name: entando-operator-config\n namespace: openshift-operators\ndata:\n entando.ca.secret.name: entando-ca-cert-secret\n entando.tls.secret.name: entando-tls-secret\n entando.default.routing.suffix: apps-crc.testing \n \n \n Click  Create \n You can now proceed to create one or more Entando applications in their own namespaces, e.g. using the steps for Scenario 1 starting from Step 7. You can leave out the  Ingress Host Name Override  since the cluster-scoped operator will provide it for you based on the routing.suffix. \n \n See the  Next Steps  below to continue your work with Entando. \n Next Steps \n Once you've completed any of the scenarios above, you have several options. \n \n Check out  Networking → Routes  to see the URLs for the running services. Common starting points include the  Entando App Builder  (e.g.  http://entando.apps-crc.testing/app-builder/ ) or  Entando application  itself (e.g.  http://entando.apps-crc.testing/entando-de-app/ ). \n This suggested  list of next steps  could also be useful. \n \n"},{title:"Use Blueprint Generated Plugin and Micro Frontends Without a Bundle",frontmatter:{},regularPath:"/v6.3/tutorials/ecr/deploy-components-without-bundle.html",relativePath:"v6.3/tutorials/ecr/deploy-components-without-bundle.md",key:"v-856d3940",path:"/v6.3/tutorials/ecr/deploy-components-without-bundle.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Steps",slug:"steps"},{level:2,title:"1. Generate a docker image for your microservice",slug:"_1-generate-a-docker-image-for-your-microservice"},{level:2,title:"2. Publish the Docker image to Docker registry (DockerHub or equivalent)",slug:"_2-publish-the-docker-image-to-docker-registry-dockerhub-or-equivalent"},{level:2,title:"3. Deploy the plugin into your Entando cluster",slug:"_3-deploy-the-plugin-into-your-entando-cluster"},{level:2,title:"4. Wait for your plugin to be in Running state and link the plugin with the app using an EntandoAppPluginLink custom resource",slug:"_4-wait-for-your-plugin-to-be-in-running-state-and-link-the-plugin-with-the-app-using-an-entandoapppluginlink-custom-resource"},{level:2,title:"5. Upload the micro frontends to your Entando App",slug:"_5-upload-the-micro-frontends-to-your-entando-app"},{level:2,title:"6. Use the microfrontend and microservice",slug:"_6-use-the-microfrontend-and-microservice"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Use Blueprint Generated Plugin and Micro Frontends Without a Bundle \n Overview \n In this tutorial you will learn how to use the plugin and microfrontend generated using the Entando Blueprint in a running cluster without the need to include the components in a bundle. \n If you haven\'t already generated a plugin and micro frontends with the Component Generator go here first  Generate a Plugin \n Prerequisites \n \n \n An Entando Plugin built with the Entando Component Generator and populated with micro frontends \n \n \n Node and NPM are installed on your machine (use LTS version) \n \n \n Docker is installed on your machine and you are able to upload images to docker-hub or an image repository of your choice \n \n \n An installed instance of the Entando platform running Kubernetes. See  Getting Started \n Steps \n 1. Generate a docker image for your microservice \n JHipster uses the JIB Maven plugin to generate a docker image for your\nmicroservice. \n The name of the output image generated with JIB will be composed by: \n \n The organization you chose during the setup wizard (by default that\'s set to  entando ) \n The name of the application \n Version  0.0.1-SNAPSHOT \n \n You can build the docker image with this command \n ./mvnw -Pprod clean package jib:dockerBuild\n \n If for example during setup wizard you chose a custom organization  myorg  and the set the application name to  jhipster  the resulting docker image is going to be  myorg/jhipster:0.0.1-SNAPSHOT \n \n Note \n The output image name can be changed in the  pom.xml  file by configuring\nthe  plugins.plugin.jib-maven-plugin.configuration.to.image  tag \n \n  <plugin>\n   <groupId>com.google.cloud.tools</groupId>\n   <artifactId>jib-maven-plugin</artifactId>\n   <configuration>\n     \x3c!-- ... --\x3e\n     <to>\n       <image>\x3c!-- use a custom value here --\x3e</image>\n     </to>\n     \x3c!-- ... --\x3e\n   </configuration>\n </plugin>\n \n \n Note \n Output image name can also be set by customizing the  ./mvnw  command using the  -Djib.to.image \nparameter. For example, if you want to build an image with organization  myneworg , name  myapp  and version  latest  you can do \n \n  ./mvnw -Pprod clean package jib:dockerBuild -Djib.to.image=myneworg/myapp:latest\n \n \n Warning \n If you change the target image of the docker build, remember to update\nthe plugin metadata in the bundle accordingly. \n 2. Publish the Docker image to Docker registry (DockerHub or equivalent) \n Let’s now publish the docker image for the microservice to make it\navailable later during bundle installation in the cluster. \n docker push <name-of-the-image:tag>\n 3. Deploy the plugin into your Entando cluster \n You can now deploy the plugin custom resource generated by the Entando Blueprint in the  bundle/plugins  folder. \n \n Warning \n As stated in step 1, if you changed the target image of your docker build, the plugin custom resource\nin the  bundle/plugins  folder needs to be updated to point to the correct image \n \n From the JHipster project directory: \n cd bundle/plugins\n\nkubectl create -f <plugin-file.yaml> -n entando\n 4. Wait for your plugin to be in  Running  state and link the plugin with the app using an  EntandoAppPluginLink  custom resource \n Once the plugin server deployment is up and running, you can create an  EntandoAppPluginLink custom resource \nto make the plugin API available from the EntandoApp domain. \n Here an example of a EntandoAppPluginLink custom resource. Some assumptions with this custom resource: \n \n The EntandoPlugin generated with the blueprint is  my-demo-plugin \n The EntandoApp exposing the  my-demo-plugin  APIs is  quickstart . This is the app name in an environment built using the Getting Started instructions. \n Both are deployed on the  entando  namespace. \n The link itself is named  quickstart-to-my-demo-plugin-link \n The name of the link yaml is  my-link.yaml \n \n \n Warning \n Remember to change the fields to match your setup. \n \n apiVersion: entando.org/v1\nkind: EntandoAppPluginLink\nmetadata:\n  name: quickstart-to-my-demo-plugin-link\n  namespace: entando\nspec:\n  entandoAppName: quickstart\n  entandoAppNamespace: entando\n  entandoPluginName: my-demo-plugin\n  entandoPluginNamespace: entando\n \n Now add this link to your environment \n kubectl create -f my-link.yaml -n entando\n \n A new link deployer will start and will work behind the scenes to add your plugin  ingressPath  (this is part of the\nplugin  spec ) to the EntandoApp ingress. \n 5. Upload the micro frontends to your Entando App \n Now that the plugin and the app are linked together, you can proceed to generate the Micro Frontend from the App Builder\nand upload the static resources like  js  and  css  files. \n \n From AppBuilder go to  Configuration -> File Browser  and create a new folder inside the  public  folder and make the name of the folder the same as the name of the bundle (the value is in the  code  field available in the  /bundle/descriptor.yaml  file of the blueprint project) or using a custom name, e.g.  demo-widget \n \n \n Warning \n If you choose to use a custom folder, remember to update the references in the customUI of the widget later \n \n \n Upload all the resources available in the  /bundle/resources  folder\nof the blueprint project into the folder you created above in the App Builder file browser. \n \n \n Warning \n You can decide to recreate the folder structure to be the same as the one in  /bundle/resources  or not, but you need to update the\nreferences in the customUI / configUI of the widget later if you choose a different folder structure. \n \n \n \n Create the widget. In the App Builder go to  Components → Micro frontends & Widgets . \n \n \n Select  Add \n \n \n Set whatever title you want \n \n \n For the customUI copy the one created in one of the widgets you generated from the blueprint.\nAs an example, the customUI for the  detailWidget  of the conference entity is available in\n /bundle/ui/widgets/conference/detailsWidget/conference-details-widget.ftl \n \n \n \n Warning \n Remember to update all the references in the customUI to use the custom folder structure you defined \n \n \n Update the service url to match the location where you deployed the ingress for your microservice if you used a path different than the default. For example, \n \n Update the service-url value with the relative path of your service if you\'re deploying a bundle\n\t\tEx. <car-table service-url="/newBp/api"  />\n\tOr use the full path if you\'re deploying the BE and FE individually\n\t\tEx. <car-table service-url="http://newbp-plugin-entando.192.168.64.7.nip.io/newBp/api"/>\n \n \n Note \n Your Entando application includes a keycloak_auth fragment that will inject the token\nand connection to Keycloak that your microfrontends need to invoke protected APIs. You can see this token at  Components → UX Fragments  in the\nApp Builder and search for keycloak_auth. \n \n \n If you\'re creating a new page from scratch or your page is missing the Keycloak fragment you can add it with this freemarker snippet \n \n <@wp.fragment code="keycloak_auth" escapeXml=false />\n 6. Use the microfrontend and microservice \n You can now use your micro frontends and your microservice in your Entando App. \n'},{title:"Install Bundle Plugins from a Private Image Repository",frontmatter:{},regularPath:"/v6.3/tutorials/ecr/ecr-private-images.html",relativePath:"v6.3/tutorials/ecr/ecr-private-images.md",key:"v-3a7efb40",path:"/v6.3/tutorials/ecr/ecr-private-images.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Tutorial",slug:"tutorial"},{level:2,title:"Troubleshooting",slug:"troubleshooting"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Install Bundle Plugins from a Private Image Repository \n Overview \n The standard deployment of the Entando Component Repository assumes that plugin images are pulled from public repositories. Public repositores do not require user authentication in order to pull an image. The following tutorial will show you how to add secrets to your Kubernetes environment so you can successfully pull images from private repositories. \n Prerequisites \n \n A running Entando application \n A bundle containing a microservice plugin based on an image from a private repository. You can set this up by  creating a microservice bundle  and making the corresponding Docker Hub repository private. \n Tutorial \n The first step demontrates how to create a secret for Docker Hub but please see the  corresponding Kubernetes documentation  for other options. Once you have the created the secret you can either apply it to a deployed Entando application or add it to the Helm template for a new deployment. \n 1. Create the secret \nSupply the following parameters: \n \n the name of the new secret, e.g.  my-docker-secret . \n the URL to your registry server. For Docker Hub this is currently  https://index.docker.io/v1/ \n your Docker Hub username, password, and email. \n the Entando namespace, e.g.  entando  for a quickstart environment. \n \n kubectl create secret docker-registry  < your-secret-name >  --docker-server = < your-registry-server >  --docker-username = < your-name >  --docker-password = < your-pword >  --docker-email = < your-email >  -n entando\n \n 2a. Update a deployed Entando application \n If you're updating a deployed Entando application(for example a quickstart environment), you can add the new secret to the  entando-plugin  account. You'll need to supply your own namespace. \n kubectl edit serviceaccount entando-plugin -n entando\n \n Add the secret to the serviceaccount. You can either add a new section if it's the first secret or add another secret to the list. \n apiVersion :  v1\n imagePullSecrets :  \n   -   name :  your - secret - name\n kind :  ServiceAccount\n metadata :  \n   name :  entando - plugin\n \n If you describe the serviceaccount, it should list the secret. \n kubectl describe serviceaccount entando-plugin -n entando\n \n Output: \n Name :                 entando - plugin\n Namespace :            entando\n Image pull secrets :   your - secret - name\n \n If  (not found)  is listed next to the secret name, then you may have added the secret to the wrong namespace. \n 2b. Deploy a new Entando application \n If you're setting up a new Entando deployment by using an Entando Helm template (e.g. from the entando-helm-quickstart project), you can add the secret to the  values.yaml  file under the property  operator.imagePullSecrets . This is just a list containing the names of Docker secrets in the operator's namespace. \n <snip > \n operator :  \n   imagePullSecrets :  \n     -  your - secret - name\n<snip > \n \n You can now generate the deployment yaml and deploy it to Kubernetes as usual. \n 3. Install the Entando Bundle \n You can now install the Entando Bundle from the  Entando App Builder  →  Entando Component Repository . The microservice plugin should now be able to successfully pull the image. \n Troubleshooting \n This is the kind of error you'll see from  kubectl get pods  if a plugin is based on an image from a private repository and if there are any issues with the image URL or credentials, including a missing or incorrect secret. \n NAME                                                            READY   STATUS         \nMYUSERNAME-MYPLUGIN-0-0-2-server-deployment-657688c5x8tfb        1 /2     ErrImagePull \n \n "},{title:"Install Bundles from a Private Git Repository",frontmatter:{},regularPath:"/v6.3/tutorials/ecr/ecr-private-git-repo.html",relativePath:"v6.3/tutorials/ecr/ecr-private-git-repo.md",key:"v-58d00a40",path:"/v6.3/tutorials/ecr/ecr-private-git-repo.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Using SSH keys with Git",slug:"using-ssh-keys-with-git"},{level:2,title:"Tutorial",slug:"tutorial"}],lastUpdated:"1/12/2021, 11:31:10 AM",content:' Install Bundles from a Private Git Repository \n Overview \n The standard deployment of the Entando Component Repository assumes that bundles are checked out from public Git repositories. Public repositories do not require user authentication in order to access content inside the Git repository. \n A customer may however choose to limit repository access to specific Git user accounts. This document will\ndescribe the steps that can be followed to allow the ECR to log onto the Git server when pulling content from a\nGit repository. \n For more background information, please consult the folowing documentation: \n \n Entando custom resource reference \n Entando Component Repository overview \n Using SSH keys with Git \n Entando supports SSH keys to connect to Git repositories. Following the SSH approach, a developer that\nconnects to Git would typically generate a public/private keypair. The developer would then register the public\nkey with the Git server, whilst storing the private key securely in the local filesystem. When the Git command line\nutility executes an operation that requires an authenticated user, it will automatically look for the private\nkey locally and match it with the public key provided by the server. If the two match up, then the operation is allowed to complete. \n Entando currently allows a Kubernetes Secret containing a Git SSH private key to be mounted in the container that hosts the Entando Component Manager service. This container is deployed with the EntandoApp and can therefore be configured\nfrom the EntandoApp custom resource. The best approach to prepare such a secret is by generating the keypair on\nyour local machine using a Docker image, and creating a Secret from the directory the keypair was generated in. \n Tutorial \n This is the recommended flow on Linux: \n \n \n Navigate to a folder in your operating system that you would like to create the Secret from \n \n \n Generate the SSH keypair from the known SSH client docker image: \n \n \n Run the Docker container in interactive mode, mounting the default user ssh directory to a local directory \n docker run -it -v $PWD/entando_ssh:/root/.ssh kroniak/ssh-client /bin/bash \n \n \n \n On the shell of the resulting container, generate your own keypair \n ssh-keygen\n \n Select all the default options, e.g. no passphrase, etc. \n \n \n Add the fingerprint to the known_hosts file by attempting to connect to your git server: \n ssh git@github.com\n \n When prompted to add it to the known hosts, type \'yes\'. The command can be expected to fail and that is OK. \n \n \n Run  exit \n \n \n \n \n Create the Secret. You are now back in your local operating system\'s shell. You will notice that a new directory has been created due\nto the previous mount that was setup in the Docker command. You may need to give yourself access to this folder before\nyou can create a Secret with the content of this folder: \n \n \n Change the permissions on the folder: \n sudo chmod ag+r entando_ssh -R\n \n \n \n Create a secret from the directory: \n kubectl create secret generic my-git-secret --from-file=entando_ssh -n <<your-namespace>>\n \n \n \n Confirm that the secret exists and has at least two keys: known_hosts, and id_rsa. Without these two keys in the\nSecret, Entando cannot log into Git. \n kubectl get secret my-git-secret -n <<your-namespace>> -o yaml\n \n \n \n \n \n Link the resulting private key to the account of a user that has access to the Git repositories in question. Ideally\nthis should be a dedicated service account user with restricted read only access to the repositories in question. For Github\naccounts, you can follow the  official Github instructions. \nWheen you are prompted for the content of the public key, please use the one generated in the previously created\nentando_ssh directory:\n entando_ssh/id_rsa.pub \n \n \n Now modify the EntandoApp resource you are deploying to mount the previously created Secret in the\n spec.ecrGitSshSecretName  property: \n \n \n       kind: "EntandoApp"\n      metadata:\n        annotations: {}\n        labels: {}\n        name: "quickstart"\n      spec:\n        dbms: none\n        replicas: 1\n        ecrGitSshSecretName: my-git-secret\n        standardServerImage: wildfly\n        ingressPath: /entando-de-app\n        ingressHostName: ampie.apps.serv.run\n        environmentVariables:\n          - name: SPRING_PROFILES_ACTIVE\n            value: "default,swagger"\n \n '},{title:"Export and Publish a Bundle",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/ecr/export-bundle-from-application.html",relativePath:"v6.3/tutorials/ecr/export-bundle-from-application.md",key:"v-69699fc0",path:"/v6.3/tutorials/ecr/export-bundle-from-application.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:3,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Export an Entando Bundle",slug:"export-an-entando-bundle"},{level:3,title:"Setup the Keycloak client",slug:"setup-the-keycloak-client"},{level:3,title:"Create env.json",slug:"create-env-json"},{level:3,title:"Run the Bundler",slug:"run-the-bundler"}],lastUpdated:"1/29/2021, 9:58:37 AM",content:' Export and Publish a Bundle \n Overview \n Use the Entando bundler command to export a bundle of Entando components from an existing Entando application. An Entando bundle can be used to do the initial install of Entando components into an Entando application, migrate Entando components from one environment to another (e.g. Dev to QA), to provide a template for building a new Entando application, or as the skeleton of an Entando solution. The output of this command is the same bundle directory structure created by an Entando project including a bundle descriptor file. \n Prerequisites \n \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. git, entando-bundler). \n \n ent check-env develop \n \n \n You\'ll also need a running Entando application. \n You\'ll need admin access to Keycloak or admin access to Kubernetes to set it up. \n \n The tutorial assumes you\'re using an Entando quickstart application. You may need to adjust the specific URLs, credentials, namespaces, etc. for a custom application. \n Export an Entando Bundle \n Setup the Keycloak client \n You\'ll need to setup a Keycloak client with the appropriate permissions for the bundler to access all of the necessary Entando APIs. \n \n Find the secret for the Keycloak admin account. If you already have the admin credentials, then you can skip to step 3. \n \n kubectl get secrets -n entando \n \n In a quickstart application, the secret is named  quickstart-kc-admin-secret \n \n Determine the admin password using the secret name. \n \n kubectl get secret quickstart-kc-admin-secret -n entando -o go-template = "{{println}}Username: {{.data.username | base64decode}}{{println}}Password: {{.data.password | base64decode}}{{println}}{{println}}" \n \n Example output: \n Username: entando_keycloak_admin\nPassword: 1pTZev82Ee\n \n \n Login to Keycloak using the admin credentials. The URL will be something like   http://<YOUR-DOMAIN-OR-IP>/auth . You can use this command to verify the URL. \n \n kubectl describe ingress/quickstart-kc-ingress\n \n \n Go to  Clients  →  Create \n Enter a  Client ID  of your choice, e.g.  entando-bundler , and click  Save . \n The  Settings  tab should be shown. Edit the following values: \n \n \n Access Type:  confidential \n Service Accounts Enabled:  On \n Valid Redirect URLs:  * \n Web Origins:  * \n \n \n Click  Save \n Go to the  Service Account Roles  tab \n Select  Client Roles  →  quickstart-server \n Select  Available Roles  →  superuser . \n Click  Add Selected  to add  superuser  to the  Assigned Roles . This change will be saved automatically. \n Go to the  Credentials  tab and copy the  Secret  shown there. You\'ll need this in the next section. \n Create env.json \n \n Create a directory where you\'ll run the bundler and change to that directory. \n \n mkdir  testBundle ;   cd  testBundle\n \n \n Create an  env.json  file with the environment URLs and client credentials. The  clientId  and  clientSecret  are from steps 5 and 12 above. \n \n { \n    "coreBaseApi" :   "http://<YOUR-DOMAIN-OR-IP>/entando-de-app" , \n    "k8ssvcApi" :   "http://<YOUR-DOMAIN-OR-IP>/k8s" , \n    "clientId" :   "<YOUR-CLIENT-ID>" , \n    "clientSecret" :   "<YOUR-CLIENT-SECRET>" \n } \n Run the Bundler \n \n Create a child directory to hold the bundler output. Using the name  bundle  allows you to easily use the  ent prj  command with this bundle. \n \n mkdir  bundle\n \n \n Run the bundler command with your preferred settings. \n \n ent bundler from-env --location bundle --code my-test-bundle --description “My Test Bundle”\n \n The bundler will inspect the application using the Entando APIs, collect information about the individual components, construct the appropriate descriptor files, and finally assemble the top-level descriptor file. \n $ ls bundle\nassets      contentModels  contents         fragments  labels     pageModels  resources\ncategories  contentTypes   descriptor.yaml  groups     languages  pages       widgets\n \n At this point you have a full Entando project structure. You can inspect the output to edit the exported components or you could  deploy it to another Entando application . \n'},{title:"Build and Publish a Simple Bundle",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/ecr/publish-simple-bundle.html",relativePath:"v6.3/tutorials/ecr/publish-simple-bundle.md",key:"v-08f2d46c",path:"/v6.3/tutorials/ecr/publish-simple-bundle.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"Create the project structure",slug:"create-the-project-structure"},{level:2,title:"Add a simple widget",slug:"add-a-simple-widget"},{level:2,title:"Create the bundle descriptor",slug:"create-the-bundle-descriptor"},{level:2,title:"Publish the bundle",slug:"publish-the-bundle"},{level:3,title:"CLI steps",slug:"cli-steps"},{level:3,title:"Manual steps",slug:"manual-steps"},{level:2,title:"Install the bundle into an application",slug:"install-the-bundle-into-an-application"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Build and Publish a Simple Bundle \n Overview \n This tutorial shows you how to create a simple Entando bundle and deploy it into the Entando Component Repository. This involves manually defining a bundle with a single widget, checking your bundle artifacts into git, apply the Entando bundle custom resource to Kubernetes, and then installing the bundle into your application. \n Prerequisites \n \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. Java, npm, git). \n \n ent check-env develop \n \n \n You will also need your git credentials, an available git repository, and an Entando instance. \n \n Some of the following steps can be simplified by using the  ent prj  command and its publication system (pbs) convenience methods. The manual steps are also provided in those cases. \n Create the project structure \n First create a parent project directory along with a child bundle directory. In a project generated by the Entando Component Generator the microservice and micro frontend source files also live under the parent directory. \n mkdir  -p example-bundle/bundle ;   cd  example-bundle/bundle \n Add a simple widget \n Create a widget directory and descriptor file: \n mkdir  widgets\n touch  widgets/example-widget.yaml\n \n Populate the  example-widget.yaml  with a simple definition. Make sure to retain the correct YAML indentation. \n code :  example - widget\n titles : \n    en :  Example Widget\n    it :  Widget d\'esempio\n group :  free\n customUi :  <h2 > Hi from Example Widget</h2 > \n Create the bundle descriptor \n The  descriptor.yaml  is the main file processed by the Entando Component Repository and describes all of the components in the bundle. The name of the bundle descriptor must be  descriptor.yaml . \n touch  descriptor.yaml\n \n Populate the descriptor with the following YAML definition: \n code :  example - bundle\n description :  This is an example of an Entando bundle\n components : \n   widgets : \n     -  widgets/example - widget.yaml\n \n The component descriptor file name and location (e.g.  widgets/example-widget.yaml ) are arbitrary since the bundle descriptor explicitly points to the file. The typical convention is to group components by type, for example with all widgets in one directory, all page templates in another, etc. \n Publish the bundle \n You can publish a bundle using the CLI or you can perform the steps by hand. \n CLI steps \n \n Change to the project directory, if needed \n \n cd  example-bundle\n \n \n Initialize the Entando project and accept the defaults. \n \n ent prj init\n \n \n Initialize the publication system. You\'ll need the git repository URL and your credentials here. \n \n ent prj pbs-init\n \n \n Publish the bundle to git. By convention your first version will be  v0.0.1  but this is up to you. \n \n ent prj pbs-publish\n \n On subsequent iterations you can run just this command again to quickly push a new version of your bundle to git. \n \n You can now create the custom resource for your bundle and apply it to Kubernetes in one step. You should modify the target namespace parameter ( -n ) if you changed it from the default. \n \n ent prj generate-cr  |  ent kubectl apply -n entando -f -\n \n The  generate-cr  command uses the git repository URL and project name from earlier steps to create the custom resource. \n \n Jump to the section below to finish installing your bundle:  Install the bundle into an application \n Manual steps \n \n Change to the bundle directory, if needed \n \n cd  example-bundle/bundle\n \n \n Run the following commands to initialize git and commit the files. \n \n git  init\n git   add   . \n git  commit -m  "Init Git repository" \n \n \n Add your remote repository as origin and push the bundle. \n \n git  remote  add  origin https://your/remote/repository.git\n git  push -u origin master\n \n \n Publish a git tag using the following commands. \n \n git  tag -a  "v0.0.1"  -m  "My first tag" \n git  push --tags\n \n \n Now that you\'ve published your bundle to git you can create the Kubernetes custom resource for it. \n \n Install the bundler if you haven\'t previously done so. \n npm   install  -g  @entando/entando-bundler@6.3.0\n \n Next generate the custom resource for your bundle. Run the  entando-bundler from-git  command and provide your remote git repository URL via the  --repository  option and the correct namespace via  --namespace . You can also provide a thumbnail for your bundle with  --thumbnail-file  or  --thumbnail-url . \n entando-bundler from-git --name = example-bundle --namespace = entandp --repository = https://your/remote/repository.git --dry-run  >  example-bundle.yaml\n \n Next you can apply this definition to Kubernetes. You may need to first transfer the file to your VM, e.g using  multipass transfer . \n kubectl -n entando apply -f example-bundle.yaml\n \n You can confirm the presence of your custom resource via  kubectl get EntandoDeBundle -n entando \n Install the bundle into an application \n Now you can go to the  App Builder  →  Component Repository  and install your bundle. You should see your bundle in the list and when you click  Install  you can select your preferred version if the bundle contains more than one. \n At this point the Entando platform will download and install the components contained in the bundle. Once complete you should see the  Install  button change to give you an option to  Uninstall  that specific version. You can also navigate to  Components  →  Micro Frontends & Widgets  and find your custom widget under the  User  section. \n'},{title:"Build and Publish a Project Bundle",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/ecr/publish-project-bundle.html",relativePath:"v6.3/tutorials/ecr/publish-project-bundle.md",key:"v-8df458c0",path:"/v6.3/tutorials/ecr/publish-project-bundle.html",headers:[{level:2,title:"Overview",slug:"overview"},{level:2,title:"Prerequisites",slug:"prerequisites"},{level:2,title:"CLI Steps",slug:"cli-steps"},{level:2,title:"Manual Steps",slug:"manual-steps"},{level:3,title:"Build Docker Image for Microservices",slug:"build-docker-image-for-microservices"},{level:3,title:"Build your bundle and publish to git",slug:"build-your-bundle-and-publish-to-git"},{level:2,title:"Install the bundle into an application",slug:"install-the-bundle-into-an-application"}],lastUpdated:"2/26/2021, 10:01:49 AM",content:' Build and Publish a Project Bundle \n Overview \n This tutorial shows you how to take an existing Entando project directory and deploy it to the Entando Component Repository. This involves building a Docker image from your microservice, creating your Entando bundle, checking your Bundle artifacts into git, and deploying the Entando bundle into Kubernetes. \n The Entando CLI automates many of the tasks involved in deploying an Entando bundle but you can also choose to perform the tasks manually. \n Prerequisites \n \n Use the  Entando CLI  to verify you have the prerequisites in place for this tutorial (e.g. Java, npm, git). \n \n ent check-env develop \n \n \n You will also need your git credentials, a git repository, and an Entando instance. \n You will also need an Entando project directory, either  developed by hand  or  generated by the Entando Component Generator . \n CLI Steps \n The following steps make use of the Entando  ent prj  command and its publication system (pbs) convenience methods. See the  Manual Steps  section below for a more detailed description of the underlying tasks. \n \n Build the project using the  ent prj  command. This saves you from having to build each part of the project individually. If you are using a project directory with just a bundle child directory (e.g. for a bundle exported from an environment or with hand-built components) then you should skip this step since there\'s nothing to build. \n \n ent prj build\n \n TIP \n The first run can take longer due to node downloads for any MFE widgets. For later runs you can use  ent prj fe-build  or  ent prj be-build  to independently build just the frontend or backend components. \n \n \n Initialize the bundle directory \n \n ent prj pbs-init\n \n \n Publish the build artifacts to github and Docker Hub. \n \n ent prj pbs-publish\n \n \n Create a Kubernetes custom resource and apply it to your Entando instance. You can modify the target namespace parameter ( -n ) if you changed it from the default. \n \n ent prj generate-cr  |  ent kubectl apply -n entando -f -\n \n \n Jump to the section below to finish installing your bundle:  Install the bundle into your application \n Manual Steps \n Build Docker Image for Microservices \n \n Build the project from the project directory \n \n ./mvnw -Pprod clean package jib:dockerBuild\n \n \n Note \n By default the organization used to generate the docker image is  entando , but you can provide a custom value during project initialization, as well as by changing the  pom.xml  file or by providing the  -Djib.to.image=<org>/<name>:<version>  to the  jib:dockerBuild  command. \n \n \n Note \n Output image name is generated using the organization value defined during project initialization. You can override the provided values by altering the  pom.xml  file or by customizing the  -Djib.to.image  parameter used in the  ./mvnw  command \n \n \n Warning \n If you manually override the target image of the docker build, remember to update the plugin metadata in the bundle accordingly in the bundle steps. \n \n \n View your image and tag \n \n docker images\n \n Output: \n REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nmyusername/example-app   0.0.1-SNAPSHOT      4ec7f05b2b27        33 seconds ago      213MB\n \n \n Publish the Docker image to Docker repository (Docker Hub or equivalent). You may need to first login via  docker login . \n \n docker push  < name-of-the-image:tag > \n \n For example:  docker push myusername/example-app:0.0.1-SNAPSHOT \n \n Note \n The first time your run this command it will have to push all of the layers. Subsequent runs will be much faster \n \n Output: \n  docker push myusername/example-app:0.0.1-SNAPSHOT\nThe push refers to repository [docker.io/myusername/example-app]\n545361404af4: Pushed\n...\nf1b5933fe4b5: Pushed\n0.0.1-SNAPSHOT: digest: sha256:804b3b91b83094c45020b4748b344f7199e3a0b027f4f6f54109cbb3b8a1f867 size: 2626\n Build your bundle and publish to git \n \n Populate the bundle with the generated micro frontends using  ./buildBundle.sh  or  npm run populate-bundle . \n \n ./buildBundle.sh\n \n \n Important \nThe bundle population with the micro frontends requires some time to be processed. You should be able to follow the progress of the operation on the console. \n \n \n \n The output of your bundle will be in the top level  bundle  directory in your microservice \n \n \n Commit your bundle files to git, separate from the top-level project files. \n \n \n echo  bundle  >>  .gitignore\n cd  bundle/\n git  init\n git   add   . \n git  commit -m  "Init Git repository" \n \n \n \n Create a new git repository and name it  my-bundle  (or a name of your choice). \n \n \n Add your remote repository as origin and push the bundle. \n \n \n git  remote  add  origin https://your/remote/repository.git\n git  push -u origin master\n \n \n Publish a git tag using the following commands. \n \n git tag -a "v0.0.1" -m "My first tag"\ngit push --tags\n \n \n Install the  entando-bundler \n \n npm   install  -g @entando/entando-bundler@6.3.0\n \n \n Generate a custom resource for your bundle. You should provide your own bundle name, namespace, and repository URL. \n \n entando-bundler from-git --name = < bundle-name >  --namespace = entando --repository = < your-repository-url >  --dry-run  >  example-bundle.yaml\n \n \n Make your bundle available in Kubernetes \n \n kubectl apply -f example-bundle.yaml -n entando\n Install the bundle into an application \n \n \n Log into the  App Builder \n \n \n Select  Component Repository  in the upper right \n \n \n Find your bundle and select  Install \n \n \n At this point the Entando platform will download and install the Docker image for your microservice and install the micro frontends into the Entando application. You can add those micro frontend widgets to the page(s) of your choice. \n You can use an Entando provided page or follow  this tutorial  to create your own page and/or page template. Please note that an application based on the Entando blueprint expects a user to be authenticated so you\'ll need to include the  keycloak_auth  UX fragment in your page template. \n'},{title:"Microfrontends",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/micro-frontends/",relativePath:"v6.3/tutorials/micro-frontends/README.md",key:"v-63795daa",path:"/v6.3/tutorials/micro-frontends/",headers:[{level:2,title:"Introduction",slug:"introduction"},{level:2,title:"Tutorials",slug:"tutorials"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Microfrontends \n Introduction \n \n The idea behind Micro Frontends is to think about a website or web app as  a composition of features  which are owned by  independent teams . Each team has a  distinct area of business  or  mission  it cares about and specialises in. A team is  cross functional  and develops its features  end-to-end , from database to user interface. \n —  Michael Geers,  micro-frontends.org \n \n Think of micro frontends as the implementation of a microservices architecture applied to the full web application that extends all the way to the frontend. \n Entando implements micro frontends based on  Web Components , a set of technologies that allow developers to create reusable custom elements supported by all major internet browsers. \n Web Components can work with vanilla JavaScript as well as with the most popular web frameworks (e.g., React, Angular, and Vue). \n Entando's microservice and micro frontend architecture allows developers to work with their favorite technology stack, and makes it easier for companies to integrate disparate applications. \n Tutorials \n \n \n Create a React Micro Frontend \n \n \n Create an Angular Micro Frontend \n \n \n Add an App Builder configuration screen to a\nwidget \n \n \n Display widget configuration \n \n \n The Entando Blueprint generated widgets \n \n \n Communicate Between Micro Frontends \n \n \n Widget authentication with Keycloak \n \n \n"},{title:"Authentication",frontmatter:{},regularPath:"/v6.3/tutorials/micro-frontends/authentication.html",relativePath:"v6.3/tutorials/micro-frontends/authentication.md",key:"v-cafac8c0",path:"/v6.3/tutorials/micro-frontends/authentication.html",lastUpdated:"12/15/2020, 12:52:01 PM",content:" Authentication \n Keycloak is used for authentication. \n To set up keycloak server, please refer to Keycloak\n documentation . \n As all MFE widgets use the same Keycloak instance, it should be\ninitialized on a container of all widgets. \n Using Details widget generated using Entando JHipster blueprint as an\nexample, let’s get familiar with authentication implementation. \n As mentioned before, widget auth implementation assumes that Keycloak is\ninitialized outside of the widget. In Details example, it is done in\nindex.html where Keycloak server’s keycloak.js is used. \n <head>\n    <script src=\"keycloak.js\"><\/script>\n    <script>\n        var keycloak = new Keycloak();\n        keycloak\n          .init({ onLoad: 'check-sso' })\n          .success(onInit);\n    <\/script>\n</head>\n \n \n Note \n keycloak.js is provided by your Keycloak server at\n <SERVER_URL:PORT>/auth/js/keycloak.js \n \n Keycloak is initialized by passing Keycloak server path, realm and\nclient ID and calling  init({/* options */})  function. \n const keycloak = Keycloak({\n  url: 'http://localhost:9080/auth',\n  realm: 'jhipster',\n  clientId: 'jhipster-entando-react-client',\n});\n\nkeycloak\n  .init({ onLoad: 'check-sso' })\n  .success(onInit);\n \n Depending on Keycloak version you are using,  init()  function can\nreturn a Promise (newer versions support  promiseType: 'native' \noption). \n keycloak\n  .init({ onLoad: 'check-sso', promiseType: 'native' })\n  .then(authenticated => {\n    alert(authenticated ? 'Authenticated' : 'Not authenticated');\n  })\n  .catch(() => {\n    alert('Failed to initialize');\n  });\n \n All the Keycloak events are made custom events - this way widgets could\nreact to them if a need arises. \n function createKcDispatcher(payload) {\n  return () => window.dispatchEvent(new CustomEvent('keycloak', { detail: payload }));\n}\n\nkeycloak.onReady = createKcDispatcher({ eventType: 'onReady' });\nkeycloak.onAuthSuccess = createKcDispatcher({ eventType: 'onAuthSuccess' });\nkeycloak.onAuthError = createKcDispatcher({ eventType: 'onAuthError' });\nkeycloak.onAuthRefreshSuccess = createKcDispatcher({ eventType: 'onAuthRefreshSuccess' });\nkeycloak.onAuthRefreshError = createKcDispatcher({ eventType: 'onAuthRefreshError' });\nkeycloak.onAuthLogout = createKcDispatcher({ eventType: 'onAuthLogout' });\nkeycloak.onTokenExpired = createKcDispatcher({ eventType: 'onTokenExpired' });\nconst onInit = createKcDispatcher({ eventType: 'onInit' });\n \n Keycloak object is then stored into  window.entando  object for widgets\nto have access to. \n window.entando = {\n  ...(window.entando || {}),\n  keycloak,\n};\n \n On the widget side inside the custom element creation logic Keycloak\nobject is accessed and passed into the component via Keycloak context \n const getKeycloakInstance = () =>\n  (window &&\n    window.entando &&\n    window.entando.keycloak &&\n    { ...window.entando.keycloak, initialized: true }\n  ) || { initialized: false };\n\n\n// ...\n\nconstructor(...args) {\n  // ...\n  this.keycloak = getKeycloakInstance();\n}\n\nconnectedCallback() {\n  // ...\n  ReactDOM.render(\n    <KeycloakContext.Provider value={this.keycloak}>\n      <ConferenceDetailsContainer />\n    </KeycloakContext.Provider>,\n    this.mountPoint\n  );\n}\n \n And on the component side you can show different content depending on\nthe authentication status \n At  auth/KeycloakViews.js \n export const AuthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return authenticated ? children : null;\n};\n\nexport const UnauthenticatedView = ({ children, keycloak }) => {\n  const authenticated = keycloak.initialized && keycloak.authenticated;\n  return !authenticated ? children : null;\n};\n \n At  components/ConferenceDetailsContainer.js \n render() {\n  const { conference, loading } = this.state;\n  const { t, keycloak } = this.props;\n\n  return (\n    <ThemeProvider theme={this.theme}>\n      <UnauthenticatedView keycloak={keycloak}>\n        {t('common.notAuthenticated')}\n      </UnauthenticatedView>\n      <AuthenticatedView keycloak={keycloak}>\n        {loading && t('common.loading')}\n        {!loading && <ConferenceDetails conference={conference} />}\n      </AuthenticatedView>\n    </ThemeProvider>\n  );\n}\n \n \n Note \n Keycloak object is accessible via props because of  withKeycloak  HOC:\n export default withKeycloak(ConferenceDetailsContainer); \n \n"},{title:"Create an Angular Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/micro-frontends/angular.html",relativePath:"v6.3/tutorials/micro-frontends/angular.md",key:"v-23d1ddc4",path:"/v6.3/tutorials/micro-frontends/angular.html",headers:[{level:2,title:"Create Angular App",slug:"create-angular-app"},{level:3,title:"Convert to Custom Element",slug:"convert-to-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widget",slug:"add-widget"},{level:3,title:"See It in Action",slug:"see-it-in-action"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Create an Angular Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n \n \n Tested Versions \n node v13.8.0 → We suggest using  nvm  to handle node installations. \n Create Angular App \n Install Angular CLI. \n npm   install  -g @angular/cli\n \n Generate a new angular application. \n ng new angular-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-widget\n \n ng serve\n \n This is the expected output: \n angular-widget\n├── e2e\n│   └── src\n│       ├── app.e2e-spec.ts\n│       └── app.po.ts\n│\n├── node_modules\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   └── app.module.ts\n│   │\n│   ├── assets\n│   │   └── .gitkeep\n│   │\n│   ├── environment\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   │\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   └── test.ts\n│\n├── .editorconfig\n├── .gitignore\n├── angular.json\n├── browserlist\n├── karma.conf.js\n├── package.json\n├── README.md\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.spec.json\n└── tslint.json\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n WARNING \n Install the Angular elements package using  ng add , not with  npm install  as it runs additional steps behind the scenes like adding the  document-register-element  polyfill. \n \n TIP \n Angular elements are Angular components packaged as custom elements (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way. \n \n Open  angular-widget/src/app/app.module.ts . \n \n Here's what the initial file looks like: \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule  }   from   '@angular/core' ; \n\n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  bootstrap :   [ AppComponent ] \n } ) \n export   class   AppModule   {   } \n \n Replace the entire file with: \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-widget' ,  el ) ; \n   } \n } \n \n \n In the initial file,  AppModule  is bootstrapped directly during application launch. \n In the updated file, we booststrap our custom element using the  ngDoBootstrap()  method . \n \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Test Micro Frontend \n Now, let's check our custom element to see if it's working. \n Open  angular-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-widget /> . \n <! doctype   html > \n < html   lang = \" en \" > \n < head > \n   < meta   charset = \" utf-8 \" > \n   < title > AngularWidget </ title > \n   < base   href = \" / \" > \n   < meta   name = \" viewport \"   content = \" width=device-width, initial-scale=1 \" > \n   < link   rel = \" icon \"   type = \" image/x-icon \"   href = \" favicon.ico \" > \n </ head > \n < body > \n   < angular-widget   /> \n </ body > \n </ html > \n \n Congratulations! \n You’re now running  Angular  in a micro frontend. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate an  angular-widget/dist  directory. \n If we assume browser support for  ES6 (ECMAScript 2015) , we can focus on the following JavaScript files to publish our app: \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Generated Build Files \n --outputHashing=none  generates files without hashes so we can deploy new versions of the micro frontend without having to reconfigure our widget in Entando to point to the newly built files. \n \n If you want to use file names with content hashes to avoid potential caching issues in your browser, you can update the  Custom UI  field of your widget after building new versions of your micro frontend. Widget configuration is covered in the next section. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Administration  at the lower left hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  angular-widget \n \n \n Click  Save . \n \n \n Click  angular-widget . \n \n \n Click 'Upload Files`. \n \n \n Upload the following files from  angular-widget/dist/angular-widget : \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Add Widget \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n Click  Add  at the lower right. \n \n \n \n Enter the following: \n \n \n Code: angular_widget  → note: dashes are not allowed \n Title: Angular Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-widget/runtime-es2015.js \" > </ script > \n\n < angular-widget   /> \n \n \n Click  Save . \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n See It in Action \n Let's see the Angular micro frontend in action on our page. \n Add Page \n Note \n If you've already configured your home page: \n \n   Next to the  Home  folder, under  Actions , click  Configure . \n   Skip to the  Add Widget  section. \n \n \n Let's add our widget to the  Home  page. \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n Add Widget \n \n \n In the Search field in right-hand sidebar, enter  Angular Widget . \n \n \n Drag and drop  Angular Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n Congratulations! \n You now have an Angular micro frontend running in Entando. \n \n"},{title:"Communicate Between Micro Frontends",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/micro-frontends/communication.html",relativePath:"v6.3/tutorials/micro-frontends/communication.md",key:"v-a598da14",path:"/v6.3/tutorials/micro-frontends/communication.html",headers:[{level:2,title:"Publisher",slug:"publisher"},{level:3,title:"Create Custom Event",slug:"create-custom-event"},{level:3,title:"Update React App to Dispatch Event",slug:"update-react-app-to-dispatch-event"},{level:3,title:"Test Event Dispatcher",slug:"test-event-dispatcher"},{level:2,title:"Subscriber",slug:"subscriber"},{level:3,title:"Add Event Listener",slug:"add-event-listener"},{level:3,title:"Display Custom Event",slug:"display-custom-event"},{level:3,title:"Test Event Listener",slug:"test-event-listener"},{level:2,title:"Add Widgets to App Builder",slug:"add-widgets-to-app-builder"},{level:3,title:"Create Environment File",slug:"create-environment-file"},{level:3,title:"Run npm build",slug:"run-npm-build"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Add Widgets",slug:"add-widgets"},{level:3,title:"View on a Page",slug:"view-on-a-page"},{level:2,title:"Angular to React",slug:"angular-to-react"},{level:3,title:"Create Angular Publisher",slug:"create-angular-publisher"},{level:3,title:"Add to App Builder",slug:"add-to-app-builder"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:" Communicate Between Micro Frontends \n Recommended Learning \n \n Tutorial:  Create a React Micro Frontend \n Tutorial:  Create an Angular Micro Frontend \n \n \n Entando supports communication between micro frontends using  Custom Events , an established web standard. In this tutorial, we'll build: \n \n A React micro frontend that publishes an event \n A React micro frontend that listens to an event \n An Angular micro frontend that publishes an event to a React micro frontend \n Publisher \n Create a simple app to publish an event. \n npx create-react-app publisher-widget --use-npm\n \n Start the app. \n cd  publisher-widget\n \n npm  start\n Create Custom Event \n Next, add event firing logic. \n Add a new file  publisher-widget/src/PublisherWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   PublisherWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . onGreet   =   name   =>   this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App onGreet = { this . onGreet }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'publisher-widget' ,  PublisherWidgetElement ) ; \n\n export   default  PublisherWidgetElement ; \n \n \n In the  CustomEvent  constructor,  detail  is the specific name to use in the event payload, as per the  DOM specification . \n Import Custom Element \n Update  publisher-widget/src/index.js . \n import   './index.css' ; \n import   './PublisherWidgetElement' ; \n Test Custom Element \n Update  publisher-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < publisher-widget   /> \n    ...\n   </ body > \n Update React App to Dispatch Event \n Update  publisher-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n class   App   extends   React . Component   { \n   constructor ( props )   { \n     super ( props ) ; \n     this . state  =   {  name :   '' } ; \n   } \n\n   handleNameChange ( value )   { \n     this . setState ( prevState   =>   ( { \n       ... prevState , \n      name :  value , \n     } ) ) ; \n   } \n\n   render ( )   { \n     const   {  name  }   =   this . state ; \n     const   {  onGreet  }   =   this . props ; \n     return   ( \n       < div > \n         < h1 > Send a greeting < / h1 > \n         < label htmlFor = \"name\" > Name < / label > \n         < input id = \"name\"  onChange = { e   =>   this . handleNameChange ( e . target . value ) }  value = { name }   / > \n         < button onClick = { ( )   =>   onGreet ( name ) } > Say hello ! < / button > \n       < / div > \n     ) ; \n   } \n } \n\n export   default  App ; \n Test Event Dispatcher \n In the JavaScript console of your browser, enter: \n window . addEventListener ( 'greeting' ,   ( evt )   =>  console . log ( 'Hello' ,  evt . detail . name ) ) \n \n Write something in the text field. Click the \"Say hello!\" button and take a look at the JS console. It will show the event message. \n Congratulations! \n You’ve now published a custom event. \n Subscriber \n Next, let’s create the subscriber. \n npx create-react-app subscriber-widget --use-npm\n \n Start the app. \n cd  subscriber-widget\n \n npm  start\n Add Event Listener \n Add a new file  subscriber-widget/src/SubscriberWidgetElement.js . \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n class   SubscriberWidgetElement   extends   HTMLElement   { \n\n   constructor ( )   { \n     super ( ) ; \n     this . name  =   null ; \n     this . subscribeToWidgetEvent ( EVENTS . greeting ,   ( evt )   =>   this . onGreeting ( evt . detail . name ) ) ; \n   } \n\n   connectedCallback ( )   { \n     this . mountPoint  =  document . createElement ( 'div' ) ; \n     this . appendChild ( this . mountPoint ) ; \n     this . render ( ) ; \n   } \n\n   subscribeToWidgetEvent ( eventType ,  eventHandler )   { \n    window . addEventListener ( eventType ,  eventHandler ) ; \n   } \n\n   onGreeting ( name )   { \n     this . name  =  name ; \n     this . render ( ) ; \n   } \n\n   render ( )   { \n    ReactDOM . render ( < App name = { this . name }   / > ,   this . mountPoint ) ; \n   } \n } \n\ncustomElements . define ( 'subscriber-widget' ,  SubscriberWidgetElement ) ; \n\n export   default  SubscriberWidgetElement ; \n Import Custom Element \n Update  subscriber-widget/src/index.js . \n import   './index.css' ; \n import   './SubscriberWidgetElement' ; \n Test Micro Frontend \n Update  subscriber-widget/public/index.html , and view it in the browser. \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < subscriber-widget > \n    ...\n   </ body > \n Display Custom Event \n Update  subscriber-widget/src/App.js . \n import  React  from   'react' ; \n import   './App.css' ; \n\n function   App ( {  name  } )   { \n   return  name  ?   ( < h2 > Just got a greeting  from   { name } < / h2 > ) \n     :   ( < h2 > Waiting  for  a greeting ... < / h2 > ) ; \n } \n\n export   default  App ; \n Test Event Listener \n In the JavaScript console of your browser, enter: \n const  widgetEvent  =   new   CustomEvent ( 'greeting' ,   { \n  detail :   { \n    name :   'Pippo' \n   } , \n } ) ; \nwindow . dispatchEvent ( widgetEvent ) ; \n \n The custom event should now display in the  subscriber-widget . \n Congratulations! \n You’ve now created a micro frontend that listens to custom events. \n Add Widgets to App Builder \n Now let's add the publisher and subscriber micro frontends in Entando. \n \n Note: These are the same steps as the  Create a React Micro Frontend  tutorial. \n Create Environment File \n Publisher Widget \n \n \n Create an  .env  file in the project root for the  publisher-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/publisher-widget\n \n Notes \n \n Replace  quickstart-entando.192.168.64.34.nip.io  with the ingress you use to access Entando from your local browser. \n /entando-de-app/cmsresources/  is your Resource URL. \n publisher-widget  is the public folder we'll create to host the publisher micro frontend. \n Subscriber Widget \n \n \n Create an  .env  file in the project root for the  subscriber-widget . \n \n \n Open the  .env  file, and enter the  PUBLIC_URL  where the micro frontend will be hosted. \n \n \n \n Use  subscriber-widget  for the name of the public folder we'll create to host the subscriber micro frontend. \n \n Example: \n PUBLIC_URL=http://quickstart-entando.192.168.64.34.nip.io/entando-de-app/cmsresources/subscriber-widget\n Run npm build \n Publisher Widget \n \n \n Open a command line, and navigate to the project root of the  publisher-widget . \n \n \n Run build. \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n Subscriber Widget \n \n Repeat steps 1-3 for the  subscriber-widget . \n Create Public Folder \n Publisher Widget \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Go to  Configuration  →   File Browser   →  public \n \n \n Click  Create Folder . \n \n \n Enter  publisher-widget . \n \n \n Click  Save . \n \n \n Click  public  →  publisher-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n publisher-widget/static/css \n publisher-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n publisher-widget/static/css/main.css \n publisher-widget/static/js/main.js \n publisher-widget/static/js/runtime.js \n publisher-widget/static/js/vendor.js \n Subscriber Widget \n \n Repeat steps 1-8 for the  subscriber-widget . \n Add Widgets \n Publisher Widget \n \n \n Go to  Entando App Builder  in your browser. \n \n \n Go to  Components  →  Micro Frontends & Widgets  at the top nav. \n \n \n Click  Add . \n \n \n Enter the following: \n \n \n \n Code: publisher_widget  → note: dashes are not allowed \n Title: Publisher Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> publisher-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> publisher-widget/static/js/main.js \" > </ script > \n < publisher-widget   /> \n \n \n Click  Save . \n Subscriber Widget \n Repeat steps 1-5 for the subscriber widget. \n \n Code: subscriber_widget  → note: dashes are not allowed \n Title: Subscriber Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> subscriber-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> subscriber-widget/static/js/main.js \" > </ script > \n < subscriber-widget   /> \n View on a Page \n You can setup the widgets on an existing page (such as the Home page) or create your own page using the tutorial  here . The following steps assume you'll use the Home page. \n \n \n Go to  Pages  →  Management \n \n \n For the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n Click  Edit . \n \n \n In the  Settings  section, select a Page Template with more than one frame, e.g.  1-column : \n \n \n \n Page Template: 1 Column \n \n \n \n Click  Save and Configure . \n \n \n In the  WIDGETS  sidebar on the right: \n \n \n \n Drag  Publisher Widget  and  Subscriber Widget  into  Frame 1  and  Frame 2 . \n \n \n \n Click  Publish . \n \n \n To view the home page, scroll to the top of the page, and click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n Congratulations! \n You can now communicate between micro frontends with  Custom Events . \n Angular to React \n We can also communicate between micro frontends using different JavaScript frameworks. \n In this next example, we’ll create an Angular micro frontend to publish an event, and we'll use the React micro frontend we created in the previous section to receive the event. \n Create Angular Publisher \n ng new angular-publisher-widget\n \n Choose the following options: \n ? Would you like to  add  Angular routing? No\n? Which stylesheet  format  would you like to use? CSS\n \n Serve the application. \n cd  angular-publisher-widget\n \n ng serve\n Convert to Custom Element \n Next, let's convert our Angular app into a custom element. We'll use  Angular elements  to transform components into custom elements. \n ng  add  @angular/elements\n \n Replace the contents of  angular-publisher-widget/src/app/app.module.ts . \n \n In this file, we bootstrap the custom element using the  ngDoBootstrap  method. \n \n import   {  BrowserModule  }   from   '@angular/platform-browser' ; \n import   {  NgModule ,  Injector  }   from   '@angular/core' ; \n import   {  createCustomElement  }   from   '@angular/elements' ; \n import   {  AppComponent  }   from   './app.component' ; \n import   {  ReactiveFormsModule  }   from   '@angular/forms' ; \n\n@ NgModule ( { \n  declarations :   [ \n    AppComponent\n   ] , \n  imports :   [ \n    BrowserModule , \n    ReactiveFormsModule\n   ] , \n  providers :   [ ] , \n  entryComponents :   [ AppComponent ] \n } ) \n export   class   AppModule   { \n   constructor ( private  injector :  Injector )   { } \n\n   ngDoBootstrap ( )   { \n     const  el  =   createCustomElement ( AppComponent ,   {  injector :   this . injector  } ) ; \n    customElements . define ( 'angular-publisher-widget' ,  el ) ; \n   } \n } \n Create Custom Event \n Replace the contents of  angular-publisher-widget/src/app/app.component.ts . \n \n Here, we're adding code to dispatch the custom event. \n \n import   {  Component  }   from   '@angular/core' ; \n import   {  FormControl ,  FormGroup  }   from   '@angular/forms' ; \n\n const   EVENTS   =   { \n  greeting :   'greeting' , \n } ; \n\n@ Component ( { \n  selector :   'app-root' , \n  templateUrl :   './app.component.html' , \n  styleUrls :   [ './app.component.css' ] \n } ) \n export   class   AppComponent   { \n  greetingForm  =   new   FormGroup ( { \n    name :   new   FormControl ( '' ) , \n   } ) ; \n\n   publishWidgetEvent ( eventId ,  detail )   { \n     const  widgetEvent  =   new   CustomEvent ( eventId ,   {  detail  } ) ; \n    window . dispatchEvent ( widgetEvent ) ; \n   } \n\n   onSubmit ( )   { \n     const  name  =   this . greetingForm . get ( 'name' ) . value ; \n     this . publishWidgetEvent ( EVENTS . greeting ,   {  name  } ) ; \n   } \n } \n Add HTML Form \n Replace the contents of  angular-publisher-widget/src/app/app.component.html . \n \n In the app component html, we're adding a simple form to call our component class  app.component.ts . \n \n < h1 > Send a greeting </ h1 > \n < form   [formGroup] = \" greetingForm \"   (ngSubmit) = \" onSubmit() \" > \n   < label > \n    Name\n     < input   type = \" text \"   formControlName = \" name \" > \n   </ label > \n   < button   type = \" submit \" > Say hello! </ button > \n </ form > \n View Micro Frontend \n Open  angular-publisher-widget/src/index.html . \n In the  <body> , replace  <app-root></app-root>  with your custom element  <angular-publisher-widget /> . \n < body > \n   < angular-publisher-widget   /> \n </ body > \n \n You can check to see if your micro frontend is working in your browser (e.g., localhost:4200) \n Add to App Builder \n Now we're ready to host our micro frontend in Entando. \n Build It \n From the project root, type: \n ng build --prod --outputHashing = none\n \n This will generate a  dist  directory. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Configuration  →   File Browser   →  public . \n \n \n Create a folder named  angular-publisher-widget . \n \n \n Click  Upload Files . \n \n \n From your generated  dist  folder, upload: \n \n \n \n main-es2015.js \n polyfills-es2015.js \n runtime-es2015.js \n Add Widget \n \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n \n \n Click  Add  at the lower right. \n \n \n Enter the following: \n \n \n \n Code: angular_publisher_widget  → note: dashes are not allowed \n Title: Angular Publisher Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < script   async   src = \" < @wp . resourceURL  /> angular-publisher-widget/main-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-publisher-widget/polyfills-es2015.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> angular-publisher-widget/runtime-es2015.js \" > </ script > \n\n < angular-publisher-widget   /> \n \n \n Click  Save . \n View on Homepage \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  page  (folder icon) , in the  Actions  column, click the  ⋮  icon \n \n \n In the Search field in right-hand sidebar, enter  Angular Publisher Widget . \n \n \n Drag and drop  Angular Publisher Widget  into the  Sample Frame  in the main body of the page. \n \n \n \n Replace  Publisher Widget . \n \n \n \n Click  Publish . \n \n \n In the top navigation, on the right, click  Go to Homepage . \n \n \n Enter a greeting in the input field. Press the submit button. The subscriber widget will update with the greeting. Done! \n \n \n \n Note: If you don't see an input field, refresh the page. \n \n Congratulations! \n You've now created an Angular micro frontend that can communicate with a React micro frontend. \n \n"},{title:"Tutorial: Blueprint generated widgets' overview",frontmatter:{},regularPath:"/v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",relativePath:"v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/README.md",key:"v-f69511c4",path:"/v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/",headers:[{level:2,title:"Common parts",slug:"common-parts"},{level:3,title:"Authentication",slug:"authentication"},{level:3,title:"Custom events",slug:"custom-events"},{level:3,title:"Tests and mocks",slug:"tests-and-mocks"},{level:3,title:"PropTypes",slug:"proptypes"},{level:3,title:"Fetching data",slug:"fetching-data"},{level:2,title:"Form widget",slug:"form-widget"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Tutorial: Blueprint generated widgets\' overview \n When you  create an entity using Entando blueprint , it generates a few\npremade widgets. In this section we will review them. \n We will be using  Conference  as an entity name for the examples below. \n Common parts \n Each widget contains a README file that should help you with the setup. \n All generated widgets are web components created using Custom Elements\nAPI. \n Each widget is displayed using the custom element tag - e.g., inside the\nDetails widget folder  conference/detailsWidget/public/index.html  you\ncan find\n conference-details id="1" override-edit-handler hide-edit-button /> .\nThis element  <conference-details />  is defined in the component entry\npoint at\n conference/detailsWidget/src/custom-elements/ConferenceDetailsElement.js . \n \n Note \n custom element names ( conference-details ) require a dash in them to\nbe used, e.g., (kebab-case) - they can not be single words. \n \n For more information about web components, custom elements and micro\nfrontends, please refer to "Create a react micro frontend widget"\nsection. \n Authentication \n If widget requires authentication, component is wrapped in\n KeycloakContext.Provider  and Keycloak object is fetched from\n window.entando.keycloak  variable. Entando is using Keycloak as our\nauthentication provider, but you can add any providers you like. \n ReactDOM.render(\n  <KeycloakContext.Provider value={this.keycloak}>\n    <StylesProvider jss={this.jss}>\n      <ThemeProvider theme={this.muiTheme}>{FormContainer}</ThemeProvider>\n    </StylesProvider>\n  </KeycloakContext.Provider>,\n  this.mountPoint\n);\n \n For more information about authentication implementation, please refer\nto the "Authentication" section. \n Custom events \n All widgets rely on custom events for communication which is why custom\nevent creation and removal is in each widget, as well as event listener\ncreation. Note that when an event listener is created, it should be when\nthe element is no longer needed. It should be created in the custom\nelement’s  disconnectedCallback()  function. \n To add more events to listen to the widgets, add the event types to\n INPUT_EVENT_TYPES  object at\n detailsWidget/src/custom-elements/widgetEventTypes.js  which will add\nit to the listener list (or remove the event by removing the element). \n For more information about custom events and widget communication,\nplease refer to the section on "Widget communication". \n Tests and mocks \n Each widget has tests written for it. Entando uses\n react-testing-library , but developers are free to upgrade and use any\ntool. Tests are kept at  detailsWidget/src/components/  and mocks for\nthem are at  detailsWidget/src/components/ . \n PropTypes \n PropTypes for data used across several components are shared - you can\nsee and modify them at  detailsWidget/src/components/ . This way you can\navoid repeating same propTypes in each component and just import shared\nones \n import React from \'react\';\nimport conferenceType from \'components/__types__/conference\';\n\nconst ConferenceDetails = props => {\n  // ...\n};\n\nConferenceDetails.propTypes = {\n  conference: conferenceType,\n  t: PropTypes.func.isRequired,\n};\n\nexport default ConferenceDetails;\n Fetching data \n For data fetching from widgets use Fetch API. You can find functions for\nfetching data at  detailsWidget/src/api  in different files for\ndifferent contexts. \n Form widget \n For displaying forms within a widget use\n Formik  which helps with form state\nmanagement. For data validation use\n Yup . \n'},{title:"Add a Configuration Screen in App Builder",frontmatter:{},regularPath:"/v6.3/tutorials/micro-frontends/widget-configuration.html",relativePath:"v6.3/tutorials/micro-frontends/widget-configuration.md",key:"v-59f43a00",path:"/v6.3/tutorials/micro-frontends/widget-configuration.html",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:2,title:"Add Input Field",slug:"add-input-field"},{level:2,title:"Custom Element",slug:"custom-element"},{level:2,title:"Configuration Screen",slug:"configuration-screen"},{level:2,title:"Add Attribute",slug:"add-attribute"},{level:2,title:"Display Input",slug:"display-input"},{level:2,title:"Build It",slug:"build-it"},{level:2,title:"Update Widget in App Builder",slug:"update-widget-in-app-builder"}],lastUpdated:"1/29/2021, 10:47:17 AM",content:' Add a Configuration Screen in App Builder \n Entando 6 widgets can be customized through an App Builder configuration screen that is itself a micro frontend. It can be developed and tested in isolation without a running Entando instance. \n Create React App \n Let’s start with the boilerplate provided by  Create React\nApp , probably the most popular one. \n npx create-react-app my-widget-config --use-npm \n my-widget-config\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Then, type  cd my-widget-config  and  npm start  to start the app. \n Add Input Field \n Let’s start with a simple form: only an input with a label. So, let’s\nedit  App.js \n import React from \'react\';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \'\'};\n  }\n\n  handleNameChange(value) {\n    this.setState(prevState => ({\n      ...prevState,\n      name: value,\n    }));\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div>\n        <h1>Sample Entando 6 Widget Configuration</h1>\n        <label htmlFor="name">Name</label>\n        <input id="name" onChange={e => this.handleNameChange(e.target.value)} value={name} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n You are free to use your favorite form handling library e.g.,\n Formik ,\n redux-form  (that requirese redux) or others. \n In regards to styling, since this is going to be an App Builder screen,\nwe strongly suggest using  PatternFly\nv3  ( patternfly  and  patternfly-react \npackages) to keep UX coherence. \n Custom Element \n Now, let’s add the web component that will wrap the entire React app.\nLet’s name it  WidgetElement \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nclass WidgetElement extends HTMLElement {\n  constructor() {\n    super();\n    this.reactRootRef = React.createRef();\n    this.mountPoint = null;\n  }\n\n  get config() {\n    return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n  }\n\n  set config(value) {\n    return this.reactRootRef.current.setState(value);\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget-config\', WidgetElement);\n\nexport default WidgetElement;\n \n Its responsibility is rendering the react app and syncing the react app\nstate in a  config  property, that  must  be named that way. The key to\nApp Builder communication is that it works in three steps: \n \n \n App Builder reads  config  property when the widget config screen is\nrendered \n \n \n config  property is mutated when a user configures the widget \n \n \n When a user saves the config, App Builder retrieves it (again, from\nthe  config  property) and persists it through Entando APIs \n \n \n This means the widget developer can focus on the configuration screens\nwithout having to call Entando APIs to read or write configuration. \n One more JS file to update:  index.js . Starting from this \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport \'./index.css\';\nimport App from \'./App\';\nimport * as serviceWorker from \'./serviceWorker\';\n\nReactDOM.render(<App />, document.getElementById(\'root\'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n You only have to import  WidgetElement  plus the css, if needed.\nSomething like \n import \'./index.css\';\nimport \'./WidgetElement\';\n \n We assume we don’t need a service worker for the widget, so we can\ndelete serviceWorker.js. \n To ensure our web component is working we have to edit\n public/index.html . Remove  <div id="root"></div>  from the  body  (we\nprogrammatically generated the react root in the  connectedCallback \nmethod of  WidgetElement ) and add our new web component tag\n <my-widget /> . \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget-config />\n  </body>\n</html>\n \n \n Note \n the web component tag name ( my-widget-config  in this tutorial)\n must  match the first parameter of the  customElements.define \nmethod. \n \n The page should auto reload and... congrats, you’re running an Entando 6\nwidget in isolation. \n Configuration Screen \n Next, we’ll build our widget before embedding it into the Entando 6\ninstance. From the react project root, type \n npm run build \n and a  build/static  directory will be generated. For convenience in this tutorial, rename the generated files: \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n Next load these files into Entando under  public/my-widget-config/static  using  Administration  →  File Browser . \n Now go to  Components  →  Micro frontends & Widgets  and find the original widget we\'re creating the configuration screen for. Edit the widget and update the\n configUI  field. \n {\n  "customElement": "my-widget-config",\n  "resources": [\n    "my-widget-config/static/js/runtime.js",\n    "my-widget-config/static/js/vendor.js",\n    "my-widget-config/static/js/main.js"\n  ]\n}\n \n \n Note \n \n \n It is possible to keep the original names in order to avoid\npotential caching issues, but then you will have to update the\n Config UI  field in the App Builder widget screen each time a new\nversion of the widget is deployed. \n \n \n configUI  is a JSON object, so pay attention to save a\nwell-formed one (the integrated JSON editor will help you) \n \n \n value for  customElement  must match the name of custom tag in\n index.html  and the one passed as parameter to\n customElements.define  in  WidgetElement \n \n \n \n You can now add a page in App Builder, drag the widget into the page template slot and you’ll see the configuration screen we just built. \n Display Widget Configuration \n So, we already created a React micro frontend widget and configuration\nscreen to customize a  name  field. \n In this tutorial we will display that field in our micro frontend\nwidget. \n Add Attribute \n Edit  WidgetElement  to add attribute handling to the custom element,\nand re-render our app when an attribute changes. Now, the  name \nattribute is being read from the custom element and passed as a prop to\nthe react root component ( App ). \n import React from \'react\';\nimport ReactDOM from \'react-dom\';\nimport App from \'./App\';\n\nconst ATTRIBUTES = {\n  name: \'name\',\n};\n\nclass WidgetElement extends HTMLElement {\n\n  static get observedAttributes() {\n    return Object.values(ATTRIBUTES);\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!Object.values(ATTRIBUTES).includes(name)) {\n      throw new Error(`Untracked changed attribute: ${name}`);\n    }\n    if (this.mountPoint && newValue !== oldValue) {\n      this.render();\n    }\n  }\n\n  connectedCallback() {\n    this.mountPoint = document.createElement(\'div\');\n    this.appendChild(this.mountPoint);\n    this.render();\n  }\n\n  render() {\n    const name = this.getAttribute(ATTRIBUTES.name);\n    ReactDOM.render(<App name={name} />, this.mountPoint);\n  }\n}\n\ncustomElements.define(\'my-widget\', WidgetElement);\n\nexport default WidgetElement;\n \n \n Note \n attributeChangedCallback  is also a custom elements lifecycle hook\nmethod. \n Display Input \n Edit the  App  component now, to make it display the  name  prop. \n import React from \'react\';\nimport \'./App.css\';\n\nfunction App({name}) {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <p>\n          Hello, {name}!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n \n Now, to ensure our custom element is working we can edit\n public/index.html  and set a value for the  name  attribute of the\ncustom element. \n <!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>React App</title>\n  </head>\n  <body>\n    <my-widget name="Marco"/>\n  </body>\n</html>\n \n After page reload, you should be able to display a simple "Hello,\nMarco!" message. \n Build It \n From the react project root, type: \n npm run build \n and the  build/static  directory will be regenerated. Again, for convenience, rename the files and then update them in Entando under  public/my-widget/static  using  Administration  →  File Browser : \n \n \n a file like  js/runtime~main.c7dcdf0b.js  to  js/runtime.js \n(bootstrapping logic) \n \n \n a file like  js/2.230b21ef.chunk.js  to  js/vendor.js  (third-party\nlibraries) \n \n \n a file like  js/main.1fd3965a.chunk.js  to  js/main.js  (app) \n \n \n a file like  css/main.d1b05096.chunk.js  to  css/main.css \n(stylesheet) \n \n \n \n Note \n you could keep the original names in order to avoid potential caching\nissues, but then you will have to update the  Custom UI  field in the\nApp Builder widget screen every time a new version of the widget is\ndeployed. \n \n If the application server you’re running does not have hot deploy\nenabled, restart it. \n Update Widget in App Builder \n Open the  Entando App Builder , go to  Components  →  Micro frontends & Widgets , find the widget  My Widget  and click to edit it. \n Update the  Custom UI  field from: \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/main.js"><\/script>\n<my-widget />\n \n to \n <#assign wp=JspTaglibs[ "/aps-core"]>\n<link rel="stylesheet" type="text/css" href="<@wp.resourceURL />my-widget/static/css/main.css">\n<script async src="<@wp.resourceURL />my-widget/static/js/runtime.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/vendor.js"><\/script>\n<script async src="<@wp.resourceURL />my-widget/static/js/main.js"><\/script>\n<@wp.currentWidget param="config" configParam="name" var="configName" />\n<my-widget name="${configName}" />\n \n We basically added a JSTL tag to extract a field (under  configParam )\nfrom the config field of the current widget and put it in a  configName \nvariable, that we pass to the custom element. \n Save the widget and reload the page that contains the widget. You should see\n Hello, Marco!  as expected. \n'},{title:"Create a React Micro Frontend",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/micro-frontends/react.html",relativePath:"v6.3/tutorials/micro-frontends/react.md",key:"v-3be4ca38",path:"/v6.3/tutorials/micro-frontends/react.html",headers:[{level:2,title:"Create React App",slug:"create-react-app"},{level:3,title:"Wrap with Custom Element",slug:"wrap-with-custom-element"},{level:3,title:"Import Custom Element",slug:"import-custom-element"},{level:3,title:"Test Micro Frontend",slug:"test-micro-frontend"},{level:2,title:"Get Resource URL",slug:"get-resource-url"},{level:2,title:"Build It",slug:"build-it"},{level:3,title:"npm build",slug:"npm-build"},{level:2,title:"Host Micro Frontend",slug:"host-micro-frontend"},{level:3,title:"Create Public Folder",slug:"create-public-folder"},{level:3,title:"Update Custom UI Field",slug:"update-custom-ui-field"},{level:3,title:"View in Homepage",slug:"view-in-homepage"}],lastUpdated:"1/13/2021, 4:46:36 PM",content:" Create a React Micro Frontend \n Prerequisites \n \n A working instance of Entando. \n Use the Entando CLI to verify you have the command line prerequisites in place for this tutorial (e.g. npm). \n Create React App \n We'll use  Create React App  to create a simple app in seconds. \n npx create-react-app my-widget --use-npm\n \n This is the expected output: \n my-widget\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n \n Start the app. \n cd  my-widget\n npm  start\n Wrap with Custom Element \n Add a new file  src/WidgetElement.js  with the custom element that will wrap the entire React app. \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import  App  from   './App' ; \n\n class   WidgetElement   extends   HTMLElement   { \n     connectedCallback ( )   { \n         this . mountPoint  =  document . createElement ( 'div' ) ; \n         this . appendChild ( this . mountPoint ) ; \n        ReactDOM . render ( < App  / > ,   this . mountPoint ) ; \n     } \n } \n\ncustomElements . define ( 'my-widget' ,  WidgetElement ) ; \n\n export   default  WidgetElement ; \n \n TIP \n connectedCallback  is a lifecycle hook that  runs each time the element is added to the DOM. \n \n The React  root  node is programatically generated in the  connectedCallback  method when our custom element is added to the DOM. \n Custom Elements \n \n Must contain a hyphen  -  in the name. : \n Cannot be a single word. \n Should follow  kebab-case  for naming convention. \n Import Custom Element \n Open  src/index.js . Here's what the initial file looks like: \n import  React  from   'react' ; \n import  ReactDOM  from   'react-dom' ; \n import   './index.css' ; \n import  App  from   './App' ; \n import   *   as  serviceWorker  from   './serviceWorker' ; \n\nReactDOM . render ( < App  / > ,  document . getElementById ( 'root' ) ) ; \n\n // If you want your app to work offline and load faster, you can change \n // unregister() to register() below. Note this comes with some pitfalls. \n // Learn more about service workers: https://bit.ly/CRA-PWA \nserviceWorker . unregister ( ) ; \n \n Replace the entire file with these two lines. \n import   './index.css' ; \n import   './WidgetElement' ; \n Test Micro Frontend \n \n \n Open  public/index.html . \n \n \n Replace  <div id=\"root\"></div>  with the custom element  <my-widget /> . \n \n \n    < body > \n     < noscript > You need to enable JavaScript to run this app. </ noscript > \n     < my-widget   /> \n    ...\n   </ body > \n \n Congratulations! \n You’re now running  React  in a containerized micro frontend. \n Get Resource URL \n Let's add our micro frontend to Entando by adding our JavaScript and CSS files to the  public  folder. \n TIP \n Entando makes files publicly available through the  public  folder. \n Add Widget \n Initially, we'll add a widget to get the resource URL for the  public  folder. Later on, we'll use the same widget to add our micro frontend to Entando. \n \n \n Go to  Components > Micro frontends & Widgets  in the Entando App Builder. \n \n \n Click  Add  at the lower right. \n \n \n \n \n Enter the following: \n \n \n Code: my_widget  → note: dashes are not allowed \n Title: My Widget  → for both English and Italian languages \n Group: Free Access \n Custom UI: \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < @wp . resourceURL  /> \n \n TIP \n <#assign wp=JspTaglibs[ \"/aps-core\"]>  gives you access to the  @wp  object where you can use environment variables like  resourceURL . \n \n \n Click  Save . \n Add Page \n Next, let's add our widget to a page so we can view the  Resource URL . \n If you're getting started with a new install of Entando, let's add our widget to the  Home  page: \n \n \n For Experienced Entando users: \n Add a new page → Add your widget to the page \n \n \n \n \n Go to  Pages  →  Management \n \n \n Next to the  Home  folder, under  Actions , click  Edit . \n \n \n Next to  Page Template  select  Service Page . \n \n \n Click  Save and Configure . \n \n \n In the Search field in right-hand sidebar, enter  My Widget . \n \n \n Drag and drop  My Widget  into the  Sample Frame  in the main body of the page. \n \n \n Click  Publish . \n \n \n At the upper right, click  Go to Homepage . \n \n \n \n This will take you to a blank home page with your widget. \n \n \n Copy the  Resource URL . For example, this is the URL in a quickstart environment set up via the Getting Started guide: \n \n /entando-de-app/cmsresources/\n Build It \n Now that we have the Resource URL where we'll host our  Create React App , we're ready to build. \n \n \n Create an  .env.production  file in the project root of your  Create React App . \n \n \n Add the  PUBLIC_URL  where we'll be hosting our files. \n \n \n PUBLIC_URL=/entando-de-app/cmsresources/my-widget\n \n Notes \n \n /entando-de-app/cmsresources/  is the Resource URL for your Entando application \n /my-widget  is the public folder we'll create to host our files \n npm build \n \n \n Open a command line, and navigate to the project root of your  Create React App . \n \n \n Run the command: \n \n \n npm  run build\n \n \n Rename the following generated files in the  build  directory. \n \n \n \n \n Example of Generated Build File \n Rename to \n Function \n \n \n \n \n build/static/js/2.f14073bd.chunk.js \n static/js/vendor.js \n Third-party libraries \n \n \n build/static/js/runtime-main.8a835b7b.js \n static/js/runtime.js \n Bootstrapping logic \n \n \n build/static/js/main.4a514a6d.chunk.js \n static/js/main.js \n App \n \n \n build/static/css/main.5f361e03.chunk.css \n static/css/main.css \n Stylesheet \n \n \n \n Generated Build Files \n We rename the JavaScript and CSS files so we can deploy new versions of the micro frontend without having to update the  Custom UI  field of our widget to reference the new files. \n \n If you want to use the original  file names with the content hashes to avoid potential caching issues in your browser , update the  Custom UI  field of your widget when deploying new versions of your micro frontend. The  Custom UI  settings will be covered in the next section. \n Additional Deployment Options \n \n Install the micro frontend from a bundle in the  Entando Component Repository . \n Add the micro frontend to  Entando App Builder . \n Load the micro frontend from an API. \n Host Micro Frontend \n Now we're ready to host our micro frontend in Entando. \n Create Public Folder \n \n \n Navigate to  Entando App Builder  in your browser. \n \n \n Click  Administration  at the lower left hand side of the screen. \n \n \n Click the  File Browser  tab. \n \n \n Click the  public  folder. \n \n \n Click  Create Folder . \n \n \n Enter  my-widget . \n \n \n Click  Save . \n \n \n Click  public  →  my-widget . \n \n \n Create the same folder structure as your generated build directory \n \n \n \n my-widget/static/css \n my-widget/static/js \n \n \n Upload the files we renamed in the corresponding  js  and  css  folders. \n \n \n my-widget/static/css/main.css \n my-widget/static/js/main.js \n my-widget/static/js/runtime.js \n my-widget/static/js/vendor.js \n \n Note: You can drag and drop the files in your browser. \n \n Upload the  React  logo. \n \n \n my-widget/static/media/logo.5d5d9eef.svg  → You don't need to rename this file. \n Update Custom UI Field \n \n \n Go to  Components  →  Micro frontends & Widgets . \n \n \n Under the  My Widgets  category → next to  My Widget  → under  Action  → select  Edit . \n \n \n Update  Custom UI  field: \n \n \n < #assign  wp = JspTaglibs [   \"/aps-core\" ] > \n < link   rel = \" stylesheet \"   type = \" text/css \"   href = \" < @wp . resourceURL  /> my-widget/static/css/main.css \" > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/runtime.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/vendor.js \" > </ script > \n < script   async   src = \" < @wp . resourceURL  /> my-widget/static/js/main.js \" > </ script > \n < my-widget   /> \n \n \n Click  Save . \n View in Homepage \n Let's see the React micro frontend in action on our page. \n \n \n In the  Entando App Builder  dashboard, click  Go to Homepage  at the upper right. \n \n \n Go to the page that you created, and click refresh. \n \n \n \n Congratulations! \n You now have a React micro frontend running in Entando. \n \n"},{title:"Entando Standard Demo Application",frontmatter:{sidebarDepth:2},regularPath:"/v6.3/tutorials/samples/install-standard-demo.html",relativePath:"v6.3/tutorials/samples/install-standard-demo.md",key:"v-bd433584",path:"/v6.3/tutorials/samples/install-standard-demo.html",headers:[{level:2,title:"Application Details",slug:"application-details"},{level:3,title:"Micro Frontends (MFE)",slug:"micro-frontends-mfe"},{level:3,title:"Configuration Micro Frontends",slug:"configuration-micro-frontends"},{level:3,title:"Microservices",slug:"microservices"},{level:3,title:"Static Widgets",slug:"static-widgets"},{level:3,title:"Static CMS Content",slug:"static-cms-content"},{level:2,title:"Installation",slug:"installation"},{level:3,title:"Installation in OpenShift",slug:"installation-in-openshift"},{level:3,title:"Installation in Public Cloud (AKS, EKS, GKE)",slug:"installation-in-public-cloud-aks-eks-gke"},{level:3,title:"Installation in Local Environment",slug:"installation-in-local-environment"},{level:2,title:"Source Code",slug:"source-code"}],lastUpdated:"12/15/2020, 12:52:01 PM",content:' Entando Standard Demo Application \n Application Details Micro Frontends (MFE) Configuration Micro Frontends Microservices Static Widgets Static CMS Content Installation Installation in OpenShift Installation in Public Cloud (AKS, EKS, GKE) Installation in Local Environment Source Code \n Application Details \n The Entando Standard Demo application demonstrates a number of the major features in the Entando platform including: \n \n Keycloak integration for role based access controls \n Micro frontends implemented using React and Angular and co-existing on the same dashboard page \n Micro front communication techniques \n Microservices run via Spring Boot \n Entando Content Management \n Micro Frontends (MFE) \n The application includes six custom micro frontends which are described below. \n 1. Seeds Card \n \n \n The Seeds Card MFE is a React micro frontend that is visible on the My Dashboard page. The MFE makes an API call to the banking microservice to fetch a numeric result depending on the configured card type. The value displayed will change as the configuration is changed. \n The MFE is authorization-aware and will pass the bearer token to the microservice for authorization and authentication. If you render the dashboard page and you aren\'t authenticated the widget shows an error message. \n This widget emits events that are consumed by the Seedscard Transaction Table widget \n 2. Seeds Card NG \n \n \n The Seeds Card NG MFE is an Angular widget that is identical to the Seeds Card widget above except for the choice of front end technology. \n This MFE communicates with Seedscard Transaction Table widget which is implemented in React. \n 3. Manage Users \n Authorized View\n \n Not Authorized View\n \n \n The Manage Users MFE makes an API call to Entando Identity Management to fetch user information. The MFE is visible under the dropdown under the username when the user is logged into the app. \n By default the users provisioned in the application do not include the authorization required to manage users in Entando Identity Management. This is used to demonstrate role based access control for an MFE using Keycloak. To enable the Manage Users widget login to Keycloak and assign the  view-users  and  manage-users  roles from the realm-management client to the desired user. \n 4. Seedscard Transaction Table \n \n \n This MFE is a React micro frontend that consumes events from the Card MFEs detailed above. \n The Transaction Table widget makes an API call to the banking microservice to fetch transaction data for the logged in user. \n 5. Signup \n \n \n The Sign Up MFE is a form widget that makes an API call to the customer microservice to create a new user. The Signup MFE is visible on the sign up page and can be accessed from any page when a user is not authenticated. \n 6. Alert Icons \n \n \n The Alert Icon MFE displays an icon on the dashboard page and includes a configuration MFE to allow the user to select the appropriate icon and datatype to display. \n The Alert Icon MFE makes an API call to the banking microservice to fetch data in the default deployment. \n Configuration Micro Frontends \n Many of the MFEs detailed above include configuration screens visible in the App Builder when the MFE is placed on a page. In the App Builder navigate to  Components -> Micro frontends & Widgets  to see the configured MFEs. To see the rendered config screen place the MFEs above on a new page. \n Microservices \n The application includes two microservices (service paths:  /banking  and  /customer ) to support the data visible in the MFEs detailed above. Both microservices demonstrate the automated deployment and linking of a microservice to an Entando application via the Entando operator. \n The data for the microservices is created using Liquibase and demonstrates using the operator and Liquibase + Spring Boot to automatically provision data into an environment. The demo data is available in the source code for the microservices on GitHub. \n Static Widgets \n The application uses static HTML, FreeMarker, and JavaScript widgets to display content including headers, footers, images and other content in the application. To view the static widgets log into the App builder and select  Components -> Micro frontends & Widgets \n Static CMS Content \n The application makes extensive use of the Entando CMS. This includes the creation of content templates, content types, and content. If you want to learn more about the Entando CMS in the application log into the App Builder and select  Content -> Templates ,  Content -> Management , or  Content -> Types  as good starting points to view the content and static assets. \n Installation \n Installation in OpenShift \n \n Prepare OpenShift \n \n Create a namespace \n oc new-project entando\n \n Deploy the Entando custom resources \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n oc create -f dist/crd/\n \n \n Deploy the sample application \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando-samples/standard-demo/v6.3.0/deployment/sd-demo-openshift.yaml\n \n Get the base URL of your OpenShift instance (if running in CRC or minishift this will be the IP of your local cluster). If you are using an IP based public URL add  .nip.io  to the end. In the command below replace  <YOUR_CLUSTER_URL>  with the value of the ingress for your cluster. \n sed  -i  "s/apps.rd.entando.org/<YOUR_CLUSTER_URL>/"  sd-demo-openshift.yaml\n \n oc create -f sd-demo-openshift.yaml\n \n \n Watch the application start \n \n watch  oc get pods -n entando\n \n Watch the installation until the cluster is ready for use, indicated by a pod named quickstart-server-* with 3/3 in the READY column and RUNNING in the STATUS column. Use CTRL-C to stop watching the deployment \n \n Get the ingress path to your application \n \n oc get ingress -n entando\n \n Copy the value that starts with  quickstart-entando  under hosts. Then in your browser open the app-builder by appending  /app-builder/  (trailing slash is important) and the end user application at  /entando-de-app . \n For example: \n quickstart-entando. < YOUR_IP_HERE > .nip.io/entando-de-app/\nquickstart-entando. < YOUR_IP_HERE > .nip.io/app-builder/\n Installation in Public Cloud (AKS, EKS, GKE) \n Follow the cluster setup instructions for your public cloud instance for  Azure AKS ,  Amazon EKS  or  Google GKE . Then follow the deployment instructions below instead of deploying the default Entando application. \n \n Prepare Kubernetes \n \n Create a namespace \n kubectl create namespace entando\n \n Deploy the Entando custom resources \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n kubectl create -f dist/crd/\n \n \n Deploy the sample application \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando-samples/standard-demo/v6.3.0/deployment/sd-demo-cloud.yaml\n \n In the command below replace  <YOUR_NGINX_INGRESS_IP>  with the value of the IP you retrieved for nginx in setting up your public cloud cluster. \n sed  -i  "s/apps.rd.entando.org/<YOUR_NGINX_INGRESS_IP>.nip.io/"  sd-demo-cloud.yaml\n \n kubectl create -f sd-demo-cloud.yaml\n \n \n Watch the application start \n \n watch  kubectl get pods -n entando\n \n Watch the installation until the cluster is ready for use, indicated by a pod named quickstart-server-* with 3/3 in the READY column and RUNNING in the STATUS column. Use CTRL-C to stop watching the deployment \n \n Get the ingress path to your application \n \n kubectl get ingress -n entando\n \n Copy the value that starts with  quickstart-entando  under hosts. Then in your browser open the app-builder by appending  /app-builder/  (trailing slash is important) and the end user application at  /entando-de-app . \n For example: \n quickstart-entando. < YOUR_IP_HERE > .nip.io/entando-de-app/\nquickstart-entando. < YOUR_IP_HERE > .nip.io/app-builder/\n Installation in Local Environment \n The instructions below include setting up a local Kubernetes instance using multipass and K3s. \n \n Install Kubernetes\nInstall  Multipass \n \n Launch VM \n multipass launch --name ubuntu-lts --cpus  4  --mem 8G --disk 20G\n \n Open Ubuntu shell \n multipass shell ubuntu-lts\n \n Install k3s \n curl  -sfL https://get.k3s.io  |   sh  -\n \n \n Prepare Kubernetes \n \n Create a namespace \n sudo  kubectl create namespace entando\n \n Deploy the Entando custom resources \n curl  -L -C - https://raw.githubusercontent.com/entando/entando-releases/v6.3.0/dist/qs/custom-resources.tar.gz  |   tar  -xz\n \n sudo  kubectl create -f dist/crd/\n \n \n Deploy the sample application \n \n curl  -L -C - -O https://raw.githubusercontent.com/entando-samples/standard-demo/v6.3.0/deployment/sd-demo-kubernetes.yaml\n \n ROUTING_SUFFIX = $( hostname  -I  |   awk   \'{print  $1 }\' ) .nip.io\n sed  -i  "s/apps.rd.entando.org/ $ROUTING_SUFFIX /"  sd-demo-kubernetes.yaml\n \n sudo  kubectl create -f sd-demo-kubernetes.yaml\n \n \n Watch the application start \n \n sudo   watch  kubectl get pods -n entando\n \n Watch the installation until the cluster is ready for use, indicated by a pod named quickstart-server-* with 3/3 in the READY column and RUNNING in the STATUS column. Use CTRL-C to stop watching the deployment \n \n Get the ingress path to your application \n \n sudo  kubectl get ingress -n entando\n \n Copy the value that starts with  quickstart-entando  under hosts. Then in your browser open the app-builder by appending  /app-builder/  (trailing slash is important) and the end user application at  /entando-de-app . \n For example: \n quickstart-entando. < YOUR_IP_HERE > .nip.io/entando-de-app/\nquickstart-entando. < YOUR_IP_HERE > .nip.io/app-builder/\n Source Code \n The source the Entando sample application is open source and can be found with our other open source examples and tutorials on GitHub at: \n https://github.com/entando-samples/standard-demo \n'}],themeConfig:{logo:"/theme/logo.svg",repo:"entando/entando-docs",editLinks:!0,docsDir:"vuepress/docs",editLinkText:"Edit this page on GitHub",lastUpdated:"Last Updated",nav:[{text:"Docs",link:'javascript:Entando.versionedLink("/docs");',target:"_self"},{text:"Tutorials",link:'javascript:Entando.versionedLink("/tutorials");',target:"_self"},{text:"Forum",link:"https://forum.entando.org"},{text:"Blog",link:"https://www.entando.com/page/en/blog"},{text:"Entando.com",link:"https://www.entando.com"}],serviceWorker:{updatePopup:!0},sidebar:{"/next/docs/":[{title:"Overview",path:"/next/docs/"},{title:"Getting Started",children:[{title:"Overview",path:"/next/docs/getting-started/"},{title:"Welcome Wizard",path:"/next/docs/getting-started/welcome-wizard.md"}]},{title:"Concepts",children:[{title:"Overview",path:"/next/docs/concepts/"},{title:"Custom Resources",path:"/next/docs/concepts/custom-resources.md"},{title:"PDA Architecture",path:"/next/docs/concepts/pda-architecture.md"}]},{title:"Entando Component Generator",children:["/next/docs/component-generator/component-gen-overview.md","/next/docs/component-generator/component-gen-tech.md","/next/docs/component-generator/component-gen-customize.md"]},{title:"Entando Component Repository",children:["/next/docs/ecr/ecr-overview.md","/next/docs/ecr/ecr-bundle-details.md","/next/docs/ecr/ecr-bundle-filters.md","/next/docs/ecr/ecr-bundle-presentation-config.md","/next/docs/ecr/ecr-bundle-versions-faq.md","/next/docs/ecr/ecr-how-microservices-connect-to-apps.md","/next/docs/ecr/ecr-uninstall-flow.md","/next/docs/ecr/ecr-troubleshooting-guide.md"]},{title:"Reference",children:[{title:"Entando CLI",path:"/next/docs/reference/entando-cli.md"},{title:"Entando APIs",path:"/next/docs/reference/entando-apis.md"},{title:"Deployment Structure",path:"/next/docs/reference/deployment-structure.md"},{title:"Cluster Resource Limits",path:"/next/docs/reference/cluster-resource-limits.md"},{title:"Databases",path:"/next/docs/reference/databases.md"},{title:"Identity Management",path:"/next/docs/reference/identity-management.md"},{title:"Caching and Clustering",path:"/next/docs/reference/caching-and-clustering.md"},{title:"Freemarker Core Tags",path:"/next/docs/reference/freemarker-tags/freemarker-core-tags.md"},{title:"Freemarker CMS Tags",path:"/next/docs/reference/freemarker-tags/freemarker-JACMS-tags.md"},{title:"Development Tips and Tricks",path:"/next/docs/reference/local-tips-and-tricks.md"}]},{title:"Community",children:[{title:"Contributing",path:"/next/docs/community/contributing.md"},{title:"Code of Conduct",path:"/next/docs/community/code-of-conduct.md"}]},{title:"Release Notes",path:"/next/docs/releases/"}],"/next/tutorials/":[{title:"Overview",path:"/next/tutorials/"},{title:"Micro Frontends",path:"/next/tutorials/micro-frontends",children:[{title:"React",path:"/next/tutorials/micro-frontends/react.md"},{title:"Angular",path:"/next/tutorials/micro-frontends/angular.md"},{title:"Communication",path:"/next/tutorials/micro-frontends/communication.md"},{title:"Config",path:"/next/tutorials/micro-frontends/widget-configuration.md"},{title:"Blueprint",path:"/next/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{title:"Authentication",path:"/next/tutorials/micro-frontends/authentication.md"}]},{title:"Microservices",children:[{title:"Generate Microservices and Micro Frontends",path:"/next/tutorials/backend-developers/generate-microservices-and-micro-frontends.md"},{title:"Run Generated Components Locally",path:"/next/tutorials/backend-developers/run-local.md"},{title:"Update Project Data Model",path:"/next/tutorials/backend-developers/update-data-model.md"}]},{title:"Pages and Content",children:["/next/tutorials/cms/page-management.md","/next/tutorials/cms/app-builder/hello-world.md","/next/tutorials/cms/content-tutorial.md","/next/tutorials/cms/content-types-tutorial.md","/next/tutorials/cms/content-attributes.md","/next/tutorials/cms/content-templates-tutorial.md","/next/tutorials/cms/digital-assets-tutorial.md","/next/tutorials/cms/creating-protected-resources.md"]},{title:"Bundles",children:["/next/tutorials/ecr/publish-simple-bundle.md","/next/tutorials/ecr/publish-project-bundle.md","/next/tutorials/ecr/export-bundle-from-application.md","/next/tutorials/ecr/deploy-components-without-bundle.md","/next/tutorials/ecr/ecr-private-git-repo.md","/next/tutorials/ecr/ecr-private-images.md"]},{title:"Extend the Platform",children:[{title:"Extend App Builder",path:"/next/tutorials/customize-the-platform/extend-app-builder.md"},{title:"Add REST API",path:"/next/tutorials/customize-the-platform/add-rest-api.md"},{title:"Process Driven Applications (PDA)",path:"/next/tutorials/customize-the-platform/pda-tutorial.md"},{title:"Change Default Datasource",path:"/next/tutorials/customize-the-platform/change-default-datasources-and-connections/"}]},{title:"Configuration and Operations",children:[{title:"Default Database",path:"/next/tutorials/devops/default-database.md"},{title:"External Database",path:"/next/tutorials/devops/external-database/"},{title:"External Identity Management System",path:"/next/tutorials/devops/external-keycloak/"},{title:"Entando Docker Image",path:"/next/tutorials/devops/build-core-image.md"},{title:"Backing Up and Restoring Your Environment",path:"/next/tutorials/devops/backing-up-and-restoring-your-environment.md"},{title:"Caching and Clustering",path:"/next/tutorials/devops/clustering-caching/caching-and-clustering.md"},{title:"Installation on Red Hat OpenShift",path:"/next/tutorials/devops/installation/open-shift/openshift-install.md"},{title:"Installation on Red Hat OpenShift using the OperatorHub",path:"/next/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.md"},{title:"Installation on Amazon Elastic Kubernetes Service (EKS)",path:"/next/tutorials/devops/installation/elastic-kubernetes-service/eks-install.md"},{title:"Installation on Azure Kubernetes Service (AKS)",path:"/next/tutorials/devops/installation/azure-kubernetes-service/azure-install.md"},{title:"Installation on Google Kubernetes Engine (GKE)",path:"/next/tutorials/devops/installation/google-cloud-platform/"}]},{title:"Examples",children:[{title:"Entando Standard Demo Application",path:"/next/tutorials/samples/install-standard-demo.md"}]}],"/v6.3/docs/":[{title:"Overview",path:"/v6.3/docs/"},{title:"Getting Started",children:[{title:"Overview",path:"/v6.3/docs/getting-started/"},{title:"Welcome Wizard",path:"/v6.3/docs/getting-started/welcome-wizard.md"}]},{title:"Concepts",children:[{title:"Overview",path:"/v6.3/docs/concepts/"},{title:"Custom Resources",path:"/v6.3/docs/concepts/custom-resources.md"},{title:"PDA Architecture",path:"/v6.3/docs/concepts/pda-architecture.md"}]},{title:"Entando Component Generator",children:["/v6.3/docs/component-generator/component-gen-overview.md","/v6.3/docs/component-generator/component-gen-tech.md","/v6.3/docs/component-generator/component-gen-customize.md"]},{title:"Entando Component Repository",children:["/v6.3/docs/ecr/ecr-overview.md","/v6.3/docs/ecr/ecr-bundle-details.md","/v6.3/docs/ecr/ecr-bundle-filters.md","/v6.3/docs/ecr/ecr-bundle-presentation-config.md","/v6.3/docs/ecr/ecr-bundle-versions-faq.md","/v6.3/docs/ecr/ecr-how-microservices-connect-to-apps.md","/v6.3/docs/ecr/ecr-uninstall-flow.md","/v6.3/docs/ecr/ecr-troubleshooting-guide.md"]},{title:"Reference",children:[{title:"Entando CLI",path:"/v6.3/docs/reference/entando-cli.md"},{title:"Entando APIs",path:"/v6.3/docs/reference/entando-apis.md"},{title:"Deployment Structure",path:"/v6.3/docs/reference/deployment-structure.md"},{title:"Cluster Resource Limits",path:"/v6.3/docs/reference/cluster-resource-limits.md"},{title:"Databases",path:"/v6.3/docs/reference/databases.md"},{title:"Identity Management",path:"/v6.3/docs/reference/identity-management.md"},{title:"Caching and Clustering",path:"/v6.3/docs/reference/caching-and-clustering.md"},{title:"Freemarker Core Tags",path:"/v6.3/docs/reference/freemarker-tags/freemarker-core-tags.md"},{title:"Freemarker CMS Tags",path:"/v6.3/docs/reference/freemarker-tags/freemarker-JACMS-tags.md"},{title:"Development Tips and Tricks",path:"/v6.3/docs/reference/local-tips-and-tricks.md"}]},{title:"Community",children:[{title:"Contributing",path:"/v6.3/docs/community/contributing.md"},{title:"Code of Conduct",path:"/v6.3/docs/community/code-of-conduct.md"}]},{title:"Release Notes",path:"/v6.3/docs/releases/"}],"/v6.3/tutorials/":[{title:"Overview",path:"/v6.3/tutorials/"},{title:"Micro Frontends",path:"/v6.3/tutorials/micro-frontends",children:[{title:"React",path:"/v6.3/tutorials/micro-frontends/react.md"},{title:"Angular",path:"/v6.3/tutorials/micro-frontends/angular.md"},{title:"Communication",path:"/v6.3/tutorials/micro-frontends/communication.md"},{title:"Config",path:"/v6.3/tutorials/micro-frontends/widget-configuration.md"},{title:"Blueprint",path:"/v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{title:"Authentication",path:"/v6.3/tutorials/micro-frontends/authentication.md"}]},{title:"Microservices",children:[{title:"Generate Microservices and Micro Frontends",path:"/v6.3/tutorials/backend-developers/generate-microservices-and-micro-frontends.md"},{title:"Run Generated Components Locally",path:"/v6.3/tutorials/backend-developers/run-local.md"},{title:"Update Project Data Model",path:"/v6.3/tutorials/backend-developers/update-data-model.md"}]},{title:"Pages and Content",children:["/v6.3/tutorials/cms/page-management.md","/v6.3/tutorials/cms/app-builder/hello-world.md","/v6.3/tutorials/cms/content-tutorial.md","/v6.3/tutorials/cms/content-types-tutorial.md","/v6.3/tutorials/cms/content-attributes.md","/v6.3/tutorials/cms/content-templates-tutorial.md","/v6.3/tutorials/cms/digital-assets-tutorial.md","/v6.3/tutorials/cms/creating-protected-resources.md"]},{title:"Bundles",children:["/v6.3/tutorials/ecr/publish-simple-bundle.md","/v6.3/tutorials/ecr/publish-project-bundle.md","/v6.3/tutorials/ecr/export-bundle-from-application.md","/v6.3/tutorials/ecr/deploy-components-without-bundle.md","/v6.3/tutorials/ecr/ecr-private-git-repo.md","/v6.3/tutorials/ecr/ecr-private-images.md"]},{title:"Extend the Platform",children:[{title:"Extend App Builder",path:"/v6.3/tutorials/customize-the-platform/extend-app-builder.md"},{title:"Add REST API",path:"/v6.3/tutorials/customize-the-platform/add-rest-api.md"},{title:"Process Driven Applications (PDA)",path:"/v6.3/tutorials/customize-the-platform/pda-tutorial.md"},{title:"Change Default Datasource",path:"/v6.3/tutorials/customize-the-platform/change-default-datasources-and-connections/"}]},{title:"Configuration and Operations",children:[{title:"Default Database",path:"/v6.3/tutorials/devops/default-database.md"},{title:"External Database",path:"/v6.3/tutorials/devops/external-database/"},{title:"External Identity Management System",path:"/v6.3/tutorials/devops/external-keycloak/"},{title:"Entando Docker Image",path:"/v6.3/tutorials/devops/build-core-image.md"},{title:"Caching and Clustering",path:"/v6.3/tutorials/devops/clustering-caching/caching-and-clustering.md"},{title:"Backing Up and Restoring Your Environment",path:"/v6.3/tutorials/devops/backing-up-and-restoring-your-environment.md"},{title:"Installation on Red Hat OpenShift",path:"/v6.3/tutorials/devops/installation/open-shift/openshift-install.md"},{title:"Installation on Red Hat OpenShift using the OperatorHub",path:"/v6.3/tutorials/devops/installation/open-shift/openshift-install-by-operator-hub.md"},{title:"Installation on Amazon Elastic Kubernetes Service (EKS)",path:"/v6.3/tutorials/devops/installation/elastic-kubernetes-service/eks-install.md"},{title:"Installation on Azure Kubernetes Service (AKS)",path:"/v6.3/tutorials/devops/installation/azure-kubernetes-service/azure-install.md"},{title:"Installation on Google Kubernetes Engine (GKE)",path:"/v6.3/tutorials/devops/installation/google-cloud-platform/"}]},{title:"Examples",children:[{title:"Entando Standard Demo Application",path:"/v6.3/tutorials/samples/install-standard-demo.md"}]}],"/v6.2/docs/":[{title:"Overview",path:"/v6.2/docs/"},{title:"Getting Started",path:"/v6.2/docs/getting-started/"},{title:"Concepts",children:[{title:"Overview",path:"/v6.2/docs/concepts/"},{title:"Custom Resources",path:"/v6.2/docs/concepts/custom-resources.md"},{title:"PDA Architecture",path:"/v6.2/docs/concepts/pda-architecture.md"}]},{title:"Entando Component Repository",children:["/v6.2/docs/ecr/ecr-overview.md","/v6.2/docs/ecr/ecr-bundle-details.md","/v6.2/docs/ecr/ecr-bundle-filters.md","/v6.2/docs/ecr/ecr-bundle-presentation-config.md","/v6.2/docs/ecr/ecr-bundle-versions-faq.md","/v6.2/docs/ecr/ecr-how-microservices-connects-to-apps.md","/v6.2/docs/ecr/ecr-uninstall-flow.md","/v6.2/docs/ecr/ecr-troubleshooting-guide.md"]},{title:"Reference",children:[{title:"Entando APIs",path:"/v6.2/docs/reference/entando-apis.md"},{title:"Deployment Structure",path:"/v6.2/docs/reference/deployment-structure.md"},{title:"Cluster Resource Limits",path:"/v6.2/docs/reference/cluster-resource-limits.md"},{title:"Databases",path:"/v6.2/docs/reference/databases.md"},{title:"Identity Management",path:"/v6.2/docs/reference/identity-management.md"},{title:"Freemarker Core Tags",path:"/v6.2/docs/reference/freemarker-tags/freemarker-core-tags.md"},{title:"Freemarker CMS Tags",path:"/v6.2/docs/reference/freemarker-tags/freemarker-JACMS-tags.md"}]},{title:"Community",children:[{title:"Contributing",path:"/v6.2/docs/community/contributing.md"},{title:"Code of Conduct",path:"/v6.2/docs/community/code-of-conduct.md"}]},{title:"Release Notes",path:"/v6.2/docs/releases/"}],"/v6.2/tutorials/":[{title:"Micro Frontends",path:"/v6.2/tutorials/micro-frontends",children:[{title:"React",path:"/v6.2/tutorials/micro-frontends/react.md"},{title:"Angular",path:"/v6.2/tutorials/micro-frontends/angular.md"},{title:"Communication",path:"/v6.2/tutorials/micro-frontends/communication.md"},{title:"Config",path:"/v6.2/tutorials/micro-frontends/widget-configuration.md"},{title:"Blueprint",path:"/v6.2/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{title:"Authentication",path:"/v6.2/tutorials/micro-frontends/authentication.md"}]},{title:"Microservice Applications",children:[{title:"Generate Microservices and Micro Frontends",path:"/v6.2/tutorials/backend-developers/generate-microservices-and-micro-frontends.md"},{title:"Build and Deploy",path:"/v6.2/tutorials/backend-developers/build-and-deploy.md"},{title:"Run Generated Components Locally",path:"/v6.2/tutorials/backend-developers/run-local.md"}]},{title:"Content Management",children:["/v6.2/tutorials/cms/app-builder/hello-world.md","/v6.2/tutorials/cms/content-tutorial.md","/v6.2/tutorials/cms/content-types-tutorial.md","/v6.2/tutorials/cms/list-of-Content-attributes.md","/v6.2/tutorials/cms/content-templates-tutorial.md","/v6.2/tutorials/cms/digital-assets-tutorial.md","/v6.2/tutorials/cms/publish-a-content-tutorial.md"]},{title:"Entando Component Repository",children:["/v6.2/tutorials/ecr/tutorials/create-ecr-bundle-from-git.md","/v6.2/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle.md","/v6.2/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster.md"]},{title:"Extend the Platform",children:[{title:"Extend App Builder",path:"/v6.2/tutorials/customize-the-platform/extend-app-builder.md"},{title:"Add REST API",path:"/v6.2/tutorials/customize-the-platform/add-rest-api.md"},{title:"Process Driven Applications (PDA)",path:"/v6.2/tutorials/customize-the-platform/pda-tutorial.md"},{title:"Change Default Datasource",path:"/v6.2/tutorials/customize-the-platform/change-default-datasources-and-connections/"}]},{title:"Configuration and Operations",children:[{title:"Default Database",path:"/v6.2/tutorials/devops/default-database.md"},{title:"External Database",path:"/v6.2/tutorials/devops/external-database/"},{title:"External Identity Management System",path:"/v6.2/tutorials/devops/external-keycloak/"},{title:"Entando Docker Image",path:"/v6.2/tutorials/devops/build-core-image.md"},{title:"Backing Up and Restoring Your Environment",path:"/v6.2/tutorials/devops/backing-up-and-restoring-your-environment.md"},{title:"Installation on Red Hat OpenShift",path:"/v6.2/tutorials/devops/installation/open-shift/openshift-install.md"},{title:"Installation on Amazon Elastic Kubernetes Service (EKS)",path:"/v6.2/tutorials/devops/installation/elastic-kubernetes-service/eks-install.md"},{title:"Installation on Azure Kubernetes Service (AKS)",path:"/v6.2/tutorials/devops/installation/azure-kubernetes-service/azure-install.md"},{title:"Installation on Google Kubernetes Engine (GKE)",path:"/v6.2/tutorials/devops/installation/google-cloud-platform/"},{title:"Local Tips and Tricks",path:"/v6.2/tutorials/devops/local-tips-and-tricks.md"}]}],"/v6.1/docs/":[{title:"Overview",path:"/v6.1/docs/"},{title:"Getting Started",path:"/v6.1/docs/getting-started/"},{title:"Concepts",children:[{title:"Overview",path:"/v6.1/docs/concepts/"},{title:"Custom Resources",path:"/v6.1/docs/concepts/custom-resources"},{title:"PDA Architecture",path:"/v6.1/docs/concepts/pda-architecture"}]},{title:"Reference",children:[{title:"Entando APIs",path:"/v6.1/docs/reference/entando-apis.md"},{title:"Deployment Structure",path:"/v6.1/docs/reference/deployment-structure.md"},{title:"Freemarker Core Tags",path:"/v6.1/docs/reference/freemarker-tags/freemarker-core-tags.md"},{title:"Freemarker CMS Tags",path:"/v6.1/docs/reference/freemarker-tags/freemarker-JACMS-tags.md"}]},{title:"Releases",path:"/v6.1/docs/releases/"}],"/v6.1/tutorials/":[{title:"Micro Frontends",path:"/v6.1/tutorials/micro-frontends",children:[{title:"React",path:"/v6.1/tutorials/micro-frontends/react.md"},{title:"Angular",path:"/v6.1/tutorials/micro-frontends/angular.md"},{title:"Communication",path:"/v6.1/tutorials/micro-frontends/communication.md"},{title:"Config",path:"/v6.1/tutorials/micro-frontends/widget-configuration/"},{title:"Blueprint",path:"/v6.1/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"},{title:"Authentication",path:"/v6.1/tutorials/micro-frontends/authentication/"}]},{title:"Microservice Applications",children:[{title:"Generate Microservices and Micro Frontends",path:"/v6.1/tutorials/backend-developers/generate-microservices-and-micro-frontends"}]},{title:"Content Management",children:["/v6.1/tutorials/cms/app-builder/hello-world","/v6.1/tutorials/cms/content-types-tutorial","/v6.1/tutorials/cms/list-of-Content-attributes","/v6.1/tutorials/cms/content-models-tutorial","/v6.1/tutorials/cms/contents-tutorial","/v6.1/tutorials/cms/digital-assets-tutorial","/v6.1/tutorials/cms/publish-a-content-tutorial"]},{title:"Component Repository",children:["/v6.1/tutorials/ecr/ecr-overview","/v6.1/tutorials/ecr/ecr-bundle-details","/v6.1/tutorials/ecr/ecr-bundle-filters","/v6.1/tutorials/ecr/ecr-bundle-presentation-config","/v6.1/tutorials/ecr/ecr-uninstall-flow","/v6.1/tutorials/ecr/ecr-troubleshooting-guide","/v6.1/tutorials/ecr/how-to-create-local-npm-registry","/v6.1/tutorials/ecr/how-to-setup-nexus-on-kubernetes-cluster","/v6.1/tutorials/ecr/tutorials/create-ecr-bundle-from-npm","/v6.1/tutorials/ecr/tutorials/from-blueprint-to-de","/v6.1/tutorials/ecr/tutorials/ecr-deploy-use-plugin-and-mfe-without-bundle"]},{title:"Extend the Platform",children:[{title:"Extend App Builder",path:"/v6.1/tutorials/customize-the-platform/extend-app-builder"},{title:"Add REST API",path:"/v6.1/tutorials/customize-the-platform/add-rest-api"},{title:"Process Driven Applications (PDA)",path:"/v6.1/tutorials/customize-the-platform/pda-tutorial"},{title:"Change Default Datasource",path:"/v6.1/tutorials/customize-the-platform/change-default-datasources-and-connections/"}]},{title:"Configuration and Operations",children:[{title:"External Database",path:"/v6.1/tutorials/devops/external-database/"},{title:"External Identity Management System",path:"/v6.1/tutorials/devops/external-keycloak/"},{title:"Entando Docker Image",path:"/v6.1/tutorials/devops/build-core-image"},{title:"Backing Up and Restoring Your Environment",path:"/v6.1/tutorials/devops/backing-up-and-restoring-your-environment"}]}]},entando:{section:"Docs",version:"6.3",docs:[{text:"Docs",items:[{text:"NEXT",link:"/next/docs/"},{text:"6.3",link:"/v6.3/docs/"},{text:"6.2",link:"/v6.2/docs/"},{text:"6.1",link:"/v6.1/docs/"},{text:"5.3",link:"/old-version/old-version.html",target:"_blank"}]}],tutorials:[{text:"Tutorials",items:[{text:"NEXT",link:"/next/tutorials/"},{text:"6.3",link:"/v6.3/tutorials/"},{text:"6.2",link:"/v6.2/tutorials/"},{text:"6.1",link:"/v6.1/tutorials/"},{text:"5.3",link:"/old-version/old-version.html",target:"_blank"}]}]}}};t(376);i.a.component("EntandoCodeCopy",(function(){return Promise.all([t.e(0),t.e(23)]).then(t.bind(null,441))})),i.a.component("EntandoRedirect",(function(){return t.e(100).then(t.bind(null,701))})),i.a.component("EntandoVersionLinks",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,702))})),i.a.component("OpenShiftLayout",(function(){return t.e(102).then(t.bind(null,1003))})),i.a.component("JHipsterLayout",(function(){return t.e(101).then(t.bind(null,1004))})),i.a.component("SpecialLayout",(function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,703))})),i.a.component("Tracking",(function(){return t.e(103).then(t.bind(null,1005))})),i.a.component("Badge",(function(){return Promise.all([t.e(0),t.e(32)]).then(t.bind(null,1006))})),i.a.component("CodeBlock",(function(){return Promise.all([t.e(0),t.e(33)]).then(t.bind(null,704))})),i.a.component("CodeGroup",(function(){return Promise.all([t.e(0),t.e(34)]).then(t.bind(null,705))}));t(377);function it(e,n){var t;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(t=Object(vn.a)(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,r=!0,s=!1;return{s:function(){t=e[Symbol.iterator]()},n:function(){var e=t.next();return r=e.done,e},e:function(e){s=!0,i=e},f:function(){try{r||null==t.return||t.return()}finally{if(s)throw i}}}}var rt=t(378),st=[{},function(e){e.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(e){e.Vue,e.options;var n=e.router,t=e.siteData,o=rt(t.pages,(function(e,n){if(n.frontmatter&&n.frontmatter.redirectFrom){var t,o=n.frontmatter.redirectFrom,a=it(Array.isArray(o)?o:[o]);try{for(a.s();!(t=a.n()).done;){var i=t.value;e.push({from:i,to:n.path})}}catch(e){a.e(e)}finally{a.f()}}}),[]);function a(e,n){return e.toLowerCase().replace(/\/$/,"")===n.toLowerCase().replace(/\/$/,"")}n.beforeEach((function(e,t,i){if(r=e.path,n.options.routes.some((function(e){return a(e.path,r)})))return i();var r,s,l=it(o);try{for(l.s();!(s=l.n()).done;){var c=s.value;if(a(e.path,c.from))return i(c.to)}}catch(e){l.e(e)}finally{l.f()}i()}))},function(e){var n=e.router;e.isServer||(window.Entando=window.Entando||{},window.Entando.versionedLink=function(){var e=a(regeneratorRuntime.mark((function e(t){var o,a,i,r,s,l,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=window.location.pathname,a=o.indexOf("/v6"),i=o.indexOf("/next/"),a||i){e.next=6;break}return console.error("Unversioned path: "+o),e.abrupt("return");case 6:return r=a>=0?a:i,s=o.indexOf("/",r+1),l=o.substring(r,s),c=l+t,e.prev=10,e.next=13,n.push(c);case 13:e.next=17;break;case 15:e.prev=15,e.t0=e.catch(10);case 17:case"end":return e.stop()}}),e,null,[[10,15]])})));return function(n){return e.apply(this,arguments)}}())},function(e){e.Vue.component("CodeCopy",Zn)}],lt=[];function ct(e,n){return(ct=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}t(203);function dt(e){return(dt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ut=t(208),pt=t.n(ut);function ht(e,n){return!n||"object"!==pt()(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function mt(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,o=dt(e);if(n){var a=dt(this).constructor;t=Reflect.construct(o,arguments,a)}else t=o.apply(this,arguments);return ht(this,t)}}var gt=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&ct(e,n)}(t,e);var n=mt(t);function t(){return Mn(this,t),n.apply(this,arguments)}return t}(function(){function e(){Mn(this,e),this.store=new i.a({data:{state:{}}})}return jn(e,[{key:"$get",value:function(e){return this.store.state[e]}},{key:"$set",value:function(e,n){i.a.set(this.store.state,e,n)}},{key:"$emit",value:function(){var e;(e=this.store).$emit.apply(e,arguments)}},{key:"$on",value:function(){var e;(e=this.store).$on.apply(e,arguments)}}]),e}());Object.assign(gt.prototype,{getPageAsyncComponent:hn,getLayoutAsyncComponent:mn,getAsyncComponent:gn,getVueComponent:fn});var ft={install:function(e){var n=new gt;e.$vuepress=n,e.prototype.$vuepress=n}};function yt(e){e.beforeEach((function(n,t,o){if(bt(e,n.path))o();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){var a=n.path.replace(/\/$/,"")+".html";bt(e,a)?o(a):o()}else o();else{var i=n.path+"/",r=n.path+".html";bt(e,r)?o(r):bt(e,i)?o(i):o()}}))}function bt(e,n){var t=n.toLowerCase();return e.options.routes.some((function(e){return e.path.toLowerCase()===t}))}var vt={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(e){var n=this.pageKey||this.$parent.$page.key;return bn("pageKey",n),i.a.component(n)||i.a.component(n,hn(n)),i.a.component(n)?e(n):e("")}},wt={functional:!0,props:{slotKey:String,required:!0},render:function(e,n){var t=n.props,o=n.slots;return e("div",{class:["content__".concat(t.slotKey)]},o()[t.slotKey])}},kt={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Et=(t(386),t(387),Object(Qn.a)(kt,(function(){var e=this.$createElement,n=this._self._c||e;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function At(){return(At=a(regeneratorRuntime.mark((function e(n){var t,o,a,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:at.routerBase||at.base,yt(o=new Je({base:t,mode:"history",fallback:!1,routes:ot,scrollBehavior:function(e,n,t){return t||(e.hash?!i.a.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})}})),a={},e.prev=4,e.next=7,Promise.all(st.filter((function(e){return"function"==typeof e})).map((function(e){return e({Vue:i.a,options:a,router:o,siteData:at,isServer:n})})));case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(4),console.error(e.t0);case 12:return r=new i.a(Object.assign(a,{router:o,render:function(e){return e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},lt.map((function(n){return e(n)})))])}})),e.abrupt("return",{app:r,router:o});case 14:case"end":return e.stop()}}),e,null,[[4,9]])})))).apply(this,arguments)}i.a.config.productionTip=!1,i.a.use(Je),i.a.use(ft),i.a.mixin(function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.a;$e(n),t.$vuepress.$set("siteData",n);var o=e(t.$vuepress.$get("siteData")),a=new o,r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),s={};return Object.keys(r).reduce((function(e,n){return n.startsWith("$")&&(e[n]=r[n].get),e}),s),{computed:s}}((function(e){return function(){function n(){Mn(this,n)}return jn(n,[{key:"setPage",value:function(e){this.__page=e}},{key:"$site",get:function(){return e}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var e,n,t=this.$site.locales,o=void 0===t?{}:t;for(var a in o)"/"===a?n=o[a]:0===this.$page.path.indexOf(a)&&(e=o[a]);return e||n||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var e=this.$page.frontmatter.canonicalUrl;return"string"==typeof e&&e}},{key:"$title",get:function(){var e=this.$page,n=this.$page.frontmatter.metaTitle;if("string"==typeof n)return n;var t=this.$siteTitle,o=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?o?o+" | "+t:t:o||"VuePress"}},{key:"$description",get:function(){var e=function(e){if(e){var n=e.filter((function(e){return"description"===e.name}))[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(e,n){for(var t=0;t<e.length;t++){var o=e[t];if(o.path.toLowerCase()===n.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),n}()}),at)),i.a.component("Content",vt),i.a.component("ContentSlotsDistributor",wt),i.a.component("OutboundLink",Et),i.a.component("ClientOnly",{functional:!0,render:function(e,n){var t=n.parent,o=n.children;if(t._isMounted)return o;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),i.a.component("Layout",mn("Layout")),i.a.component("NotFound",mn("NotFound")),i.a.prototype.$withBase=function(e){var n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.8.2",hash:"0a3c32c4"},function(e){return At.apply(this,arguments)}(!1).then((function(e){var n=e.app;e.router.onReady((function(){n.$mount("#app")}))}))}]);